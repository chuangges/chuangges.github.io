<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue3 项目开发</title>
    <url>/2023/03/02/22-vue3%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、开发技术"><a href="#一、开发技术" class="headerlink" title="一、开发技术"></a>一、开发技术</h1><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ul>
<li><code>Vite</code>：开发环境时可快速冷启动，基于 esbuild 预构建依赖而无需分析模块依赖和编译代码，浏览器请求模块时才会进行按需动态编译，但是打包到生产环境时需要通过 rollup。</li>
<li><code>Webpack</code>：启动后从入口开始逐步进行语法解析、依赖收集、代码转译、打包合并、代码优化等一系列操作，最终将高版本的、离散的源码编译打包成低版本、高兼容的代码。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、vue3 + vite：官方推荐</span></span><br><span class="line">npm init vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、vite：基于 vite 小而巧的打包方案，可选择 vue/react</span></span><br><span class="line">npm init vite@latest</span><br><span class="line">pnpm create vite</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、vue-cli3：基于 webpack 大而全的打包工具</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弃用命令</span></span><br><span class="line">npm init vite-app &lt;name&gt;    <span class="comment">// vite1.x</span></span><br><span class="line">npm init @vitejs/app        <span class="comment">// vite2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 项目运行：通过 main.js 将 App.vue 渲染到 index.html 的指定区域</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> App.vue：编写待渲染模板的项目根组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> index.html：预留一个 el 区域的唯一 HTML</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> main.js：将模版渲染到预留区域的打包入口文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Vscode 插件防止红线：Volar、Vue3 Snippets、TypeScript Vue Plugin</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============================== axios ================================</span><br><span class="line"><span class="comment">// main.js：全局方式一</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$axios</span> = axios;</span><br><span class="line"><span class="comment">// 组件引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; proxy &#125; = <span class="title function_">getCurrentInstance</span>()</span><br><span class="line">proxy.$axios(&#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js：全局方式二</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;$axios&#x27;</span>, axios)</span><br><span class="line"><span class="comment">// 组件引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> $axios = <span class="title function_">inject</span>(<span class="string">&#x27;$axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios 封装：npm i axios element-plus -D</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; <span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosError</span>, <span class="title class_">AxiosRequestConfig</span>, </span><br><span class="line"><span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line">interface <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="attr">code</span>: number; </span><br><span class="line">    <span class="attr">msg</span>: string</span><br><span class="line">&#125;</span><br><span class="line">interface <span class="title class_">ResultData</span>&lt;T = any&gt; <span class="keyword">extends</span> <span class="title class_">Result</span> &#123;  <span class="comment">// 请求响应参数</span></span><br><span class="line">    data?: T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">URL</span>: string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">enum <span class="title class_">RequestEnums</span> &#123;</span><br><span class="line">    <span class="variable constant_">TIMEOUT</span> = <span class="number">20000</span>,    <span class="comment">// 请求超时</span></span><br><span class="line">    <span class="variable constant_">OVERDUE</span> = <span class="number">600</span>,      <span class="comment">// 登录失效</span></span><br><span class="line">    <span class="variable constant_">FAIL</span> = <span class="number">999</span>,         <span class="comment">// 请求失败</span></span><br><span class="line">    <span class="variable constant_">SUCCESS</span> = <span class="number">200</span>       <span class="comment">// 请求成功</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="variable constant_">URL</span> <span class="keyword">as</span> string,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="title class_">RequestEnums</span>.<span class="property">TIMEOUT</span> <span class="keyword">as</span> number,</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestHttp</span> &#123;</span><br><span class="line">    <span class="attr">service</span>: <span class="title class_">AxiosInstance</span>;</span><br><span class="line">    public <span class="title function_">constructor</span>(<span class="params">config: AxiosRequestConfig</span>) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">service</span> = axios.<span class="title function_">create</span>(config);</span><br><span class="line">         <span class="comment">// 请求拦截器</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">             <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">                 <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                 <span class="keyword">return</span> &#123;</span><br><span class="line">                     ...config,</span><br><span class="line">                     <span class="attr">headers</span>: &#123; <span class="string">&#x27;x-access-token&#x27;</span>: token &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="function">(<span class="params">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">             &#125;</span><br><span class="line">         )</span><br><span class="line">         <span class="comment">// 请求拦截器</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">            <span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123;data, config&#125; = response;</span><br><span class="line">                <span class="comment">// 登录信息失效，则跳转到登录页面并清空本地 token</span></span><br><span class="line">                <span class="keyword">if</span> (data.<span class="property">code</span> === <span class="title class_">RequestEnums</span>.<span class="property">OVERDUE</span>) &#123;</span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(data);</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="comment">// 全局错误：防止下载文件时返回数据流则直接报错而没有 code</span></span><br><span class="line">                 <span class="keyword">if</span> (data.<span class="property">code</span> &amp;&amp; data.<span class="property">code</span> !== <span class="title class_">RequestEnums</span>.<span class="property">SUCCESS</span>) &#123;</span><br><span class="line">                     <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(data);</span><br><span class="line">                     <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(data)</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">return</span> data;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function">(<span class="params">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class="line">                 <span class="keyword">const</span> &#123;response&#125; = error;</span><br><span class="line">                 <span class="keyword">if</span> (response) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleCode</span>(response.<span class="property">status</span>)</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">onLine</span>) &#123;</span><br><span class="line">                    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;网络连接失败&#x27;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">handleCode</span>(<span class="attr">code</span>: number):<span class="keyword">void</span> &#123;</span><br><span class="line">       <span class="keyword">switch</span>(code) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">             <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;登录失败，请重新登录&#x27;</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">             <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 常用方法封装</span></span><br><span class="line">    get&lt;T&gt;(<span class="attr">url</span>: string, params?: object): <span class="title class_">Promise</span>&lt;<span class="title class_">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">get</span>(url, &#123;params&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    post&lt;T&gt;(<span class="attr">url</span>: string, params?: object): <span class="title class_">Promise</span>&lt;<span class="title class_">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">post</span>(url, params);</span><br><span class="line">    &#125;</span><br><span class="line">    put&lt;T&gt;(<span class="attr">url</span>: string, params?: object): <span class="title class_">Promise</span>&lt;<span class="title class_">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">put</span>(url, params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>&lt;T&gt;(<span class="attr">url</span>: string, params?: object): <span class="title class_">Promise</span>&lt;<span class="title class_">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">delete</span>(url, &#123;params&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">RequestHttp</span>(config);</span><br></pre></td></tr></table></figure>


<h2 id="版本优化"><a href="#版本优化" class="headerlink" title="版本优化"></a>版本优化</h2><ul>
<li><strong>功能特性</strong>：废弃了过滤器功能、$on&#x2F;$emit&#x2F;$off&#x2F;$once 等实例方法、支持多根节点组件和 TypeScript、新增组合式API 而取代了选项式API。</li>
<li><strong>响应式系统</strong>：<code>Proxy + Reflect</code> 取代 Object.definepeoperty() 而实现直接监听对象和数组而非属性，Proxy 返回的新对象可以直接操作而不需要每次都遍历对象属性。</li>
<li><strong>生命周期</strong>：<code>setup</code> 创建实例前、<code>onBeforeMount、onMounted</code> 挂载前后、<code>onBeforeUpdate、onUpdated</code> 更新前后、<code>onBeforeUnmount、onUnmounted</code> 卸载前后。</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// Composition 组合式：内部会将多个标签包含到 Fragment，有利于代码管理和类型推导</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrCounter&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> incrCounter = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        counter.<span class="property">value</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Vue2 Options 选项式：适用于简单项目</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrCounter&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">incrCounter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">counter</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Proxy：对读取和设置等对象操作拦截并在前后注入自定义逻辑的代理器。</span></span><br><span class="line"><span class="comment">// Reflect：提供了一组对象操作方法的反射器，一个 window 内置对象。</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target[property]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, newValue</span>) &#123;</span><br><span class="line">        target[property] = newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> _objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">has</span>(target, name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, newValue</span>) &#123;</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">targetFn, thisArg, ...args</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">defineProperty</span>(<span class="params">target, property, discriptor</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">objProxy.<span class="property">age</span> = <span class="number">30</span>;   <span class="comment">// obj.age：30</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">apply</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>, <span class="string">&#x27;str&#x27;</span>, [<span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive：创建响应式对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">target, key, receiver</span>)&#123;</span><br><span class="line">            <span class="title function_">track</span>(target, key)</span><br><span class="line">            <span class="keyword">const</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">reactive</span>(value)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">target, key, val, receiver</span>)&#123;</span><br><span class="line">            <span class="title function_">trigger</span>(target, key, val)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>)&#123; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key, value</span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref：将普通值包装包装为一个响应式对象，通过 get/set 实现依赖收集和更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span> &#123;</span><br><span class="line">    private _value = <span class="literal">null</span>;</span><br><span class="line">    private __v_isRef = <span class="literal">true</span>;</span><br><span class="line">    private dep = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">public rawValue</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">isObject</span>(rawValue) ? <span class="title function_">reactive</span>(rawValue): rawValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> (activeEffect) &#123;</span><br><span class="line">            <span class="title function_">trackEffects</span>(<span class="variable language_">this</span>.<span class="property">dep</span> ||(<span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue !== <span class="variable language_">this</span>.<span class="property">rawValue</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newValue)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">rawValue</span> = newValue</span><br><span class="line">            <span class="title function_">triggerEffects</span>(<span class="variable language_">this</span>.<span class="property">dep</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toRef：解析 proxy 对象而对单个属性形成响应式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">toRef</span>(<span class="params">object,key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectRefImpl</span>(object,key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectRefImpl</span>&#123;</span><br><span class="line">    private __v_isRef = <span class="literal">true</span>;</span><br><span class="line">    private _value = <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">public object, public key</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">object</span>[<span class="variable language_">this</span>.<span class="property">key</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">object</span>[<span class="variable language_">this</span>.<span class="property">key</span>] = newValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 创建响应式对象 API</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> ref：将任意数据转为响应式对象，对象值更新时视图会自动更新 (复制)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> toRef：将对象属性转为响应式，更新时修改原对象但视图不更新 (引用)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> toRefs：遍历对象属性并调用 toRef，用于将整个对象转化成响应式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> reactive：将一个对象或数组转换为响应式，注意不可传入原始数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> defineComponent：用于编辑器在 ts 环境的类型推导而进行语法提示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> isRef、isReactive、isReadonly、isProxy：判定数据是否响应式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> customRef：自定义一个 ref 并对依赖项跟踪和更新触发进行显式控制</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;HomeView&#x27;</span>,</span><br><span class="line">    setup () &#123;</span><br><span class="line">        <span class="comment">// dom 元素：&lt;span ref=&quot;span&quot;&gt;名称&lt;/span&gt;</span></span><br><span class="line">        <span class="keyword">let</span> span = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            span.<span class="property">value</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应式变量</span></span><br><span class="line">        <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;msg&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(msg))  <span class="comment">// true  </span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeMsg</span> () &#123;</span><br><span class="line">            msg.<span class="property">value</span>.<span class="property">msg</span> = <span class="string">&#x27;new msg&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> _msg = <span class="title function_">toRef</span>(person, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">_changeMsg</span> () &#123;</span><br><span class="line">            _msg.<span class="property">value</span>.<span class="property">msg</span> = <span class="string">&#x27;new msg&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> info = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">changeAge</span> () &#123;</span><br><span class="line">            info.<span class="property">age</span>++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">watch</span>(msg, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 自定义 ref</span></span><br><span class="line">        <span class="keyword">const</span> text = <span class="title function_">useDebouncedRef</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg,</span><br><span class="line">            changeMsg,</span><br><span class="line">            ...<span class="title function_">toRefs</span>(info),</span><br><span class="line">            changeAge</span><br><span class="line">            nameRef</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useDebouncedRef</span> (value, delay = <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            get () &#123;</span><br><span class="line">                <span class="title function_">track</span>()</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            set (newValue) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">                timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    value = newValue</span><br><span class="line">                    <span class="title function_">trigger</span>()</span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  Vue3 特性：变量、模块化 scoped module、选择器、绑定变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  样式穿透：css &gt;&gt;&gt;、scss :deep、废弃选择器 /deep/ ::v-deep</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  Scss 预处理：pnpm add sass、vite.config.js、&lt;style lang=&quot;scss&quot;&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  TailwindCSS 原子化框架：</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">:root &#123; --bg-<span class="attr">color</span>: #<span class="number">666</span>; &#125;</span><br><span class="line">.<span class="property">wrap</span> &#123; --<span class="attr">color</span>: blue; &#125;</span><br><span class="line">:<span class="title function_">global</span>(<span class="params">.red</span>) &#123; &#125;             <span class="comment">// 全局选择器</span></span><br><span class="line">.<span class="property">box</span> :<span class="title function_">deep</span>(<span class="params">.item</span>) &#123; &#125;         <span class="comment">// 深度选择器：影响子组件</span></span><br><span class="line">:<span class="title function_">slotted</span>(<span class="params">.red</span>) &#123; &#125;            <span class="comment">// 插槽选择器：影响 slot</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite.config.js：自动引入全局 scss</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: &#123; <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">        <span class="attr">scss</span>: &#123; <span class="attr">additionalData</span>: <span class="string">&#x27;@import &quot;./src/styles/global.scss&quot;&#x27;</span> &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scoped CSS：VueLoader 默认的模块化方案，为元素增加唯一属性 data-v-hash</span></span><br><span class="line">&lt;style scoped&gt;   </span><br><span class="line">    .<span class="property">item</span> &#123; </span><br><span class="line">        <span class="attr">color</span>: <span class="title function_">var</span>(--color);             <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="attr">background</span>: <span class="title function_">var</span>(--bg-color);     <span class="comment">// 全局变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css module：Scoped 替代方案，通过 config 命名规则生成唯一类名实现作用域隔离</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; useCssModule &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 不传递参数，获取 style module 代码块编译后的 css 类对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> style = <span class="title function_">useCssModule</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 传递参数 content，获取 &lt;style module=&quot;content&quot;&gt; 代码块编译后的 css 类对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> contentStyle = <span class="title function_">useCssModule</span>(<span class="string">&#x27;content&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.red&quot;</span>&gt;</span>默认 CssModule pink<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;style.success&quot;</span>&gt;</span>默认 CssModule pink<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;contentStyle.success&quot;</span>&gt;</span>具名 CssModule blue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;content.success&quot;</span>&gt;</span>具名 CssModule blue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.red</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: pink;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.success</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: blue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 动态样式实现主题切换</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> theme = <span class="title function_">reactive</span>(&#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">setWhiteTheme</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      theme.<span class="property">color</span> = <span class="string">&#x27;#000&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      theme.<span class="property">backgroundColor</span> = <span class="string">&#x27;#fff&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">setBlackTheme</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      theme.<span class="property">color</span> = <span class="string">&#x27;#fff&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      theme.<span class="property">backgroundColor</span> = <span class="string">&#x27;#000&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">color</span>: <span class="built_in">v-bind</span>(<span class="string">&#x27;theme.color&#x27;</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="attribute">background</span>: <span class="built_in">v-bind</span>(<span class="string">&#x27;theme.backgroundColor&#x27;</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="Pinia-状态"><a href="#Pinia-状态" class="headerlink" title="Pinia 状态"></a>Pinia 状态</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 取代 Vuex 的新一代官方状态管理器、npm i pinia -S</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  store 支持多个、mutations 舍弃，actions 支持同步和异步修改 state</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line"></span><br><span class="line"><span class="comment">// store/count.js：返回函数使用 useX，定义模式分为选项式和组合式</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useCounter = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;),</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">num</span>) &#123; <span class="variable language_">this</span>.<span class="property">count</span> += num &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> useCounter = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        count.<span class="property">value</span> += num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doubleCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; count, increment, doubleCount &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounter</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件调用</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> countStore = <span class="title function_">useCounter</span>()</span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(countStore)</span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = countStore  <span class="comment">// 会丢失数据响应式的错误写法</span></span><br><span class="line">countStore.<span class="property">count</span> = <span class="number">10</span>         <span class="comment">// 直接修改：不推荐</span></span><br><span class="line">countStore.<span class="title function_">increment</span>(<span class="number">1</span>)       <span class="comment">// 推荐修改</span></span><br><span class="line">countStore.$patch(<span class="function"><span class="params">state</span> =&gt;</span> &#123;  <span class="comment">// 批量修改</span></span><br><span class="line">    state.<span class="property">count</span>++</span><br><span class="line">&#125;)</span><br><span class="line">countStore.$reset()           <span class="comment">// 重置 state</span></span><br></pre></td></tr></table></figure>


<h2 id="VueUse-工具"><a href="#VueUse-工具" class="headerlink" title="VueUse 工具"></a>VueUse 工具</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 类似 React Hooks 的组合式函数工具集、npm i <span class="doctag">@vueuse</span>/core</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Animation：包含易于使用的过渡、超时和计时功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Browser：可用于不同的屏幕控制、剪贴板、偏好等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Component：提供了不同组件方法的简写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Formatters：提供响应时间格式化功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Sensors：用来监听不同的DOM事件、输入事件和网络事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> State：管理用户状态（全局、本地存储、会话存储）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Utility：不同的实用函数，如 getter、条件、引用同步等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Watch：高级观察器，如可暂停的、退避的观察器和条件观察器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Misc：不同类型的事件、WebSockets、WebWorker 的功能</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> &#123; useMouse, useCounter &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span>;</span><br><span class="line"><span class="comment">// useMouse：鼠标位置</span></span><br><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMouse</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">    <span class="attr">touch</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">resetOnTouchEnds</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">initialValue</span>: &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 基本计数器</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, inc, dec, set, reset &#125; = <span class="title function_">useCounter</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 响应式本地化存储</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">useStorage</span>(<span class="string">&#x27;my-count&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">useLocalStorage</span>(<span class="string">&#x27;my-lol&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;泰达&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;战士&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleReset</span> = (<span class="params"></span>) =&gt; &#123; state.<span class="property">value</span> = <span class="literal">null</span> &#125;</span><br><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> debouncedFn = <span class="title function_">useDebounceFn</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">&#125;, <span class="number">1000</span>, &#123; <span class="attr">maxWait</span>: <span class="number">5000</span> &#125;)</span><br><span class="line"><span class="comment">// 剪切</span></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">ref</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; text, copy, copied, isSupported &#125; = <span class="title function_">useClipboard</span>(&#123; source &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义封装 Hooks</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useRequest</span>(<span class="params">api</span>) &#123;        <span class="comment">// 统一管理网络请求相关状态</span></span><br><span class="line">    <span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchResource</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">        loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">api</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            result.<span class="property">value</span> = data</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            error.<span class="property">value</span> = e</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; loading, error, result, fetchResource &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">EventBus</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useEventBus</span>(<span class="params"></span>) &#123;   <span class="comment">// 组件卸载时自动取消监听事件</span></span><br><span class="line">    <span class="keyword">let</span> instance = &#123;</span><br><span class="line">        <span class="attr">eventMap</span>: <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">        <span class="attr">on</span>: bus.<span class="property">on</span>,</span><br><span class="line">        <span class="attr">once</span>: bus.<span class="property">once</span>,</span><br><span class="line">        <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">eventMap</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">list, key</span>) =&gt;</span> &#123;</span><br><span class="line">                list.<span class="title function_">forEach</span>(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">                    bus.<span class="title function_">off</span>(key, cb)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            eventMap.<span class="title function_">clear</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> eventMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">on</span> = (<span class="params">key, cb</span>) =&gt; &#123;</span><br><span class="line">        instance.<span class="title function_">on</span>(key, cb)</span><br><span class="line">        bus.<span class="title function_">on</span>(key, cb)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">once</span> = (<span class="params">key, cb</span>) =&gt; &#123;</span><br><span class="line">        instance.<span class="title function_">once</span>(key, cb)</span><br><span class="line">        bus.<span class="title function_">once</span>(key, cb)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        instance.<span class="title function_">clear</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        on,</span><br><span class="line">        once,</span><br><span class="line">        <span class="attr">off</span>: bus.<span class="property">off</span>.<span class="title function_">bind</span>(bus),</span><br><span class="line">        <span class="attr">emit</span>: bus.<span class="property">emit</span>.<span class="title function_">bind</span>(bus)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useModel</span>(<span class="params">hook</span>) &#123;  <span class="comment">// 多个组件共享状态</span></span><br><span class="line">    <span class="keyword">if</span> (!map.<span class="title function_">get</span>(hook)) &#123;</span><br><span class="line">        <span class="keyword">let</span> ans = <span class="title function_">hook</span>()</span><br><span class="line">        map.<span class="title function_">set</span>(hook, ans)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(hook)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useReducer</span>(<span class="params">reducer, initialState = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">ref</span>(initialState)</span><br><span class="line">    <span class="comment">// 约定 action 格式为 &#123;type:string, payload: any&#125;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">dispatch</span> = (<span class="params">action</span>) =&gt; &#123;</span><br><span class="line">        state.<span class="property">value</span> = <span class="title function_">reducer</span>(state.<span class="property">value</span>, action)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; state, dispatch &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;reset&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> initialState;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useRedux</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useModel</span>(useStore);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、组件开发"><a href="#二、组件开发" class="headerlink" title="二、组件开发"></a>二、组件开发</h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局注册：main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MySwiper.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyCom</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyCom.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyCom&#x27;</span>, <span class="title class_">Test</span>)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-swiper&#x27;</span>, <span class="title class_">Swiper</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IonApp</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ionic/vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="title class_">IonApp</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量引用</span></span><br><span class="line"><span class="comment">// components/IonicBase.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IonTitle</span>, <span class="title class_">IonContent</span>, <span class="title class_">IonButton</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ionic/vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;IonTitle&#x27;</span>, <span class="title class_">IonTitle</span>);</span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;IonContent&#x27;</span>, <span class="title class_">IonContent</span>);</span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;IonButton&#x27;</span>, <span class="title class_">IonButton</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IonicBase</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/IonicBase&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">IonicBase</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3 批量注册</span></span><br><span class="line"><span class="keyword">const</span> components = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">globEager</span>(<span class="string">&#x27;./*/index.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(components).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> component = components[key].<span class="property">default</span></span><br><span class="line">            app.<span class="title function_">component</span>(component.<span class="property">name</span>, component)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2 批量注册</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> components = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/index\.vue$/</span>);</span><br><span class="line">components.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> component = <span class="title function_">components</span>(key).<span class="property">default</span>;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(component.<span class="property">name</span>, component)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="三、组件通信"><a href="#三、组件通信" class="headerlink" title="三、组件通信"></a>三、组件通信</h1><blockquote>
<p>Pinia 实现跨组件通信的官方状态管理工具此处省略用法。</p>
</blockquote>
<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.vue：发送</span></span><br><span class="line">&lt;child :msg=<span class="string">&quot;msg&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;信息&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> msg = <span class="title function_">reactive</span>([<span class="string">&quot;信息&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue：接收</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="title class_">String</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">default</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// default: () =&gt; &quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Child.vue：发送</span></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;onClick&quot;</span>])</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;onClick&#x27;</span>, <span class="string">&#x27;数据&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.vue：接收</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">on-click</span>=<span class="string">&quot;onClickTag&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">onClickTag</span> = (<span class="params">msg: <span class="built_in">String</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h2><blockquote>
<p>Vue2 可以通过 this.$attrs、this.$listeners 分别访问传递给组件的 props 未定义属性和事件监听器，Vue3 $attrs 包括了之前除外的属性 class、style 并合并移除了 $listeners。</p>
</blockquote>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// Parent.vue：发送</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;1111&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Child.vue：接收</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inheritAttrs</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>默认插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:monkey</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;monkey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Parent.vue：作用域插槽</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">v</span>-slot：获取子组件的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> :list：给子组件传递数据 </span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123;scope&#125;&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>名字：&#123;&#123; scope.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>职业：&#123;&#123; scope.occupation &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Child.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> list = <span class="title function_">ref</span>([</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">name</span>: <span class="string">&#x27;雷猴&#x27;</span>, <span class="attr">occupation</span>: <span class="string">&#x27;打雷&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">name</span>: <span class="string">&#x27;鲨鱼辣椒&#x27;</span>, <span class="attr">occupation</span>: <span class="string">&#x27;游泳&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#123; <span class="attr">name</span>: <span class="string">&#x27;蟑螂恶霸&#x27;</span>, <span class="attr">occupation</span>: <span class="string">&#x27;扫地&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:scope</span>=<span class="string">&quot;item&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">list</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">default</span>: <span class="function">() =&gt;</span> []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">v-model.a</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;input&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="string">&quot;select&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue：自定义组件时，v-model prop 和事件的默认名称已更改但可以自定义</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handlerClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 默认绑定的属性名为 modelValue，通过 : 自定义名称，通过 . 自定义修饰符</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(<span class="string">&quot;modelValue&quot;</span>, <span class="string">&quot;modelModifiers&quot;</span>, <span class="string">&quot;value&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:modelValue&quot;</span>, <span class="string">&quot;update:value&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handlerClick</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">modelModifiers</span>.<span class="property">a</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">emit</span>(<span class="string">&quot;update:modelValue&quot;</span>, <span class="string">&quot;new name&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">emit</span>(<span class="string">&quot;update:value&quot;</span>, <span class="string">&quot;new value&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="expose-x2F-ref"><a href="#expose-x2F-ref" class="headerlink" title="expose&#x2F;ref"></a>expose&#x2F;ref</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">        <span class="attr">childName</span>: <span class="string">&quot;子组件的属性&quot;</span>,</span><br><span class="line">        <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件的方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.vue：调用子组件对外暴露的方法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;comp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handlerClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title function_">handlerClick</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> comp = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        comp.<span class="property">value</span>.<span class="title function_">someMethod</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="provide-x2F-inject"><a href="#provide-x2F-inject" class="headerlink" title="provide&#x2F;inject"></a>provide&#x2F;inject</h2><blockquote>
<p>实现树形组件的依赖注入功能，常用于层级嵌套较深的组件之间相互传递数据。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Parent.vue：所有后代组件的依赖提供者</span></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;传给子孙的数据&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue：依赖使用者</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> name = <span class="title function_">inject</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;默认值&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><a href="https://juejin.cn/post/7154579554034515982">https://juejin.cn/post/7154579554034515982</a></p>
]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>H5 页面可视化编辑器</title>
    <url>/2023/02/22/21-%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<blockquote>
<p>实现拖拽式生成 H5 页面</p>
</blockquote>
<h1 id="一、Umi"><a href="#一、Umi" class="headerlink" title="一、Umi"></a>一、Umi</h1><h1 id="一、React-Koa"><a href="#一、React-Koa" class="headerlink" title="一、React + Koa"></a>一、React + Koa</h1>]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>跨平台文档开发</title>
    <url>/2023/01/17/20-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%96%87%E6%A1%A3%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、uniapp-在线预览"><a href="#一、uniapp-在线预览" class="headerlink" title="一、uniapp 在线预览"></a>一、uniapp 在线预览</h1><blockquote>
<p>业务系统开发时大多遇到 PDF、Word、Excel、PPT、图片等文件在线预览的需求，而在线预览不是下载后再用本地软件或浏览器打开预览，而是直接通过文件流的形式查看。</p>
</blockquote>
<h2 id="PDF-预览"><a href="#PDF-预览" class="headerlink" title="PDF 预览"></a>PDF 预览</h2><blockquote>
<p><a href="https://mozilla.github.io/pdf.js/getting_started/#download">pdf.js 下载</a>解压并后将 build、web 目录拷贝到项目 hybrid&#x2F;html。</p>
</blockquote>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @title file-preview.vue</span><br><span class="line"> * </span><br><span class="line"> * @desp  fileUrl：部署在服务器的文件流访问地址</span><br><span class="line"> * @desp  web/viewer.html：插件解压后包含的文件</span><br><span class="line"> * @desp  web/viewer.js：注释代码行 not match</span><br><span class="line"> throw new Error(&#x27;file origin does not match viewer\&#x27;s&#x27;)</span><br><span class="line">**/ </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">web-view</span> <span class="attr">:src</span>=<span class="string">&quot;allUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;@/config&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">allUrl</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">viewUrl</span>: <span class="string">&#x27;/hybrid/html/web/viewer.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// fileUrl：文件流访问地址</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> fileUrl = <span class="built_in">encodeURIComponent</span>(options.<span class="property">url</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">allUrl</span> = <span class="variable language_">this</span>.<span class="property">viewUrl</span> + <span class="string">&#x27;?file=&#x27;</span> + fileUrl</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="office-预览"><a href="#office-预览" class="headerlink" title="office 预览"></a>office 预览</h2><blockquote>
<p>首先通过 <a href="https://sourceforge.net/projects/openofficeorg.mirror/files/">Apache_OpenOffice</a> 搭建 OpenOffice 服务，然后将 Doc、Word、Excel、PPT 等文件转换为 pdf 后通过 pdf.js 实现预览。</p>
</blockquote>
  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">// 搭建 openOffice 服务</span><br><span class="line"></span><br><span class="line">// <span class="number">1</span>、Apache_OpenOffice 下载后解压</span><br><span class="line">tar xzvfm Apache_OpenOffice_xxx.tar.gz</span><br><span class="line">cd zh-CN/RPMS</span><br><span class="line">rpm -ivh *rpm</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>、运行服务</span><br><span class="line"><span class="comment"># 127.0.0.1 只能本机使用该</span></span><br><span class="line">/opt/openoffice4/program/soffice <span class="string">&quot;-accept=socket,host=127.0.0.1,</span></span><br><span class="line"><span class="string">port=8100;urp;&quot;</span> -headless -nofirststartwizard &amp;</span><br><span class="line"><span class="comment"># 0.0.0.0 远程 ip 能使用</span></span><br><span class="line">/opt/openoffice4/program/soffice <span class="string">&quot;-accept=socket,host=0.0.0.0,</span></span><br><span class="line"><span class="string">port=8100;urp;&quot;</span> -headless -nofirststartwizard &amp;</span><br></pre></td></tr></table></figure>

  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 集成 java</span><br><span class="line"></span><br><span class="line">// 1、pom.xml 添加 jar 包</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>juh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jurt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ridl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openoffice<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unoil<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.artofsolving<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jodconverter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 2、jodconverter 2.2.2 下载后单独导入</span><br><span class="line">https://sourceforge.net/projects/jodconverter/files/) </span><br><span class="line"></span><br><span class="line">mvn install:install-file -Dfile=&quot;jodconverter-2.2.2.jar&quot; -DgroupId=com.</span><br><span class="line">artofsolving -DartifactId=jodconverter -Dversion=2.2.2 -Dpackaging=jar</span><br><span class="line"></span><br><span class="line">// 3、通过 openOffice 将文件转换为 pdf</span><br><span class="line">if (&quot;DOC&quot;.equals(ext) || &quot;DOCX&quot;.equals(ext) || &quot;XLS&quot;.equals(ext) || </span><br><span class="line">&quot;XLSX&quot;.equals(ext) || &quot;PPT&quot;.equals(ext) || &quot;PPTX&quot;.equals(ext)) &#123;</span><br><span class="line">    // 转换文件名：filePath 在数据库中不带文件后缀，jodConverter 必须识别后缀</span><br><span class="line">    String filePath = sourceFile.getPath();</span><br><span class="line">    File pdfFile;</span><br><span class="line">    if (filePath.contains(&quot;.&quot;)) &#123;</span><br><span class="line">        pdfFile = new File(filePath.substring(0, filePath.lastIndexOf(&quot;.&quot;)) + &quot;.pdf&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        pdfFile = new File(filePath + &quot;.pdf&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 不存在的文件直接报错</span><br><span class="line">    if (!sourceFile.exists()) &#123;</span><br><span class="line">        log.info(&quot;需要预览的文档在服务器中不存在!!!&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果文件已经转换过则直接预览</span><br><span class="line">    if (pdfFile.exists()) &#123;</span><br><span class="line">        sourceFile = pdfFile;</span><br><span class="line">        response.setContentType(&quot;application/pdf&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 打开 OpenOffice 连接开始转换</span><br><span class="line">    OpenOfficeConnection connection;</span><br><span class="line">    try &#123;</span><br><span class="line">        connection = new SocketOpenOfficeConnection(openofficeHost, openofficePort);</span><br><span class="line">        connection.connect();</span><br><span class="line"></span><br><span class="line">    &#125; catch (java.net.ConnectException e) &#123;</span><br><span class="line">        log.warn(&quot;openOffice未连接，正在重新连接...&quot;);</span><br><span class="line">        String command = openofficeInstallPath + &quot;program/soffice -headless -accept</span><br><span class="line">        =\&quot;socket,host=127.0.0.1,port=8100;urp;\&quot; -nofirststartwizard&quot;;</span><br><span class="line">        Runtime.getRuntime().exec(command);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        connection = new SocketOpenOfficeConnection(8100);</span><br><span class="line">        connection.connect();</span><br><span class="line">        log.warn(&quot;openOffice 重新连接成功!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        DocumentConverter converter = new StreamOpenOfficeDocumentConverter(connection);</span><br><span class="line">        converter.convert(sourceFile, pdfFile);</span><br><span class="line">        connection.disconnect();</span><br><span class="line"></span><br><span class="line">        sourceFile = pdfFile;</span><br><span class="line">        response.setContentType(&quot;application/pdf&quot;);</span><br><span class="line">    &#125; catch (OpenOfficeException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        log.info(&quot;读取转换文件失败!!!&quot;);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                connection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端预览</span></span><br><span class="line">uni.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">    <span class="attr">current</span>: <span class="number">0</span>,              <span class="comment">// 预览的图片索引</span></span><br><span class="line">    <span class="attr">urls</span>: [<span class="string">&#x27;文件流访问地址&#x27;</span>],  <span class="comment">// 预览的图片链接列表</span></span><br><span class="line">    <span class="attr">longPressActions</span>: &#123;      <span class="comment">// 长按图片显示操作菜单，默认为保存相册</span></span><br><span class="line">        <span class="attr">itemList</span>: [<span class="string">&#x27;发送给朋友&#x27;</span>, <span class="string">&#x27;保存图片&#x27;</span>, <span class="string">&#x27;收藏&#x27;</span>],   <span class="comment">// 按钮数组</span></span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;选中图片&#x27;</span>, data.<span class="property">index</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;选中按钮&#x27;</span>, data.<span class="property">tapIndex</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">errMsg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端文件流：根据文件后缀对应的不同类型进行预览 </span></span><br><span class="line"><span class="title class_">String</span> ext = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.<span class="title function_">equals</span>(url) &amp;&amp; url.<span class="title function_">contains</span>(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">    ext= url.<span class="title function_">substring</span>(url.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>,url.<span class="title function_">length</span>()).<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;PNG&quot;</span>.<span class="title function_">equals</span>(ext) || <span class="string">&quot;JPEG&quot;</span>.<span class="title function_">equals</span>(ext) || <span class="string">&quot;JPG&quot;</span>.<span class="title function_">equals</span>(ext)) &#123;</span><br><span class="line">    response.<span class="title function_">setContentType</span>(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;BMP&quot;</span>.<span class="title function_">equals</span>(ext)) &#123;</span><br><span class="line">    response.<span class="title function_">setContentType</span>(<span class="string">&quot;image/bmp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;GIF&quot;</span>.<span class="title function_">equals</span>(ext)) &#123;</span><br><span class="line">    response.<span class="title function_">setContentType</span>(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;PDF&quot;</span>.<span class="title function_">equals</span>(ext)) &#123;</span><br><span class="line">    response.<span class="title function_">setContentType</span>(<span class="string">&quot;application/pdf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="文档云预览"><a href="#文档云预览" class="headerlink" title="文档云预览"></a>文档云预览</h2><blockquote>
<p>以上方案只能实现简单的文档预览，加水印、防复制、在线编辑等复杂需求则需要使用永中云服务平台、金山WPS开放平台、腾讯文档开放API等。准备工作有：<a href="https://open.yozocloud.cn/">永中云服务</a>注册、登录、根据文档进行开发者申请、管理中心申请云预览等应用、应用列表查看 APPID APPKEY。</p>
</blockquote>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 开源项目</span><br><span class="line">https://gitee.com/twofloor/uniapp-admin</span><br><span class="line">https://gitee.com/twofloor/uniapp-file-upload</span><br><span class="line"></span><br><span class="line">// preview.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">web-view</span> <span class="attr">v-if</span>=<span class="string">&quot;yzPreviewUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;yzPreviewUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">v-else</span>&gt;</span>文档地址无效，无法加载该文档<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;@/config&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123; <span class="attr">yzPreviewUrl</span>: <span class="string">&#x27;&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">onLoad</span>(<span class="params">option</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 文档上传后跳转到当前预览页面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (option.<span class="property">fileData</span>) &#123; <span class="keyword">return</span> &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> d = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="built_in">decodeURIComponent</span>(option.<span class="property">fileData</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">yzPreviewUrl</span> = <span class="string">&#x27;http://eic.yozocloud.cn/api/view/file&#x27;</span> + </span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;?fileVersionId=&#x27;</span> + d.<span class="property">fileVersionId</span> + <span class="string">&#x27;&amp;appId=&#x27;</span> + config.<span class="property">APPID</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>






<h1 id="二、minio-文件管理"><a href="#二、minio-文件管理" class="headerlink" title="二、minio 文件管理"></a>二、minio 文件管理</h1><blockquote>
<p>一个基于 Apache License v2.0 开源协议的对象存储服务，用来存放管理文件的文件服务器。它兼容亚马逊S3云存储服务接口并支持多种语言客户端集成开发，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。</p>
</blockquote>
<h2 id="Node-项目集成"><a href="#Node-项目集成" class="headerlink" title="Node 项目集成"></a>Node 项目集成</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// minio.js：需要先安装 npm i minio --save-dev</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Minio</span> = <span class="built_in">require</span>(<span class="string">&#x27;minio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../../../config/config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> entityFun = <span class="built_in">require</span>(<span class="string">&#x27;../../Base/server/EntityFunction&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initBucket</span> = <span class="keyword">async</span> minioClient =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> exists</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      exists = <span class="keyword">await</span> minioClient.<span class="title function_">bucketExists</span>(config.<span class="property">minio</span>.<span class="property">BUCKET</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">const</span> errMsg = <span class="string">`initBucket - bucketExists: <span class="subst">$&#123;err&#125;</span>`</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(errMsg)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Bucket creatd&#x27;</span>)</span><br><span class="line">          <span class="keyword">await</span> minioClient.<span class="title function_">makeBucket</span>(</span><br><span class="line">              config.<span class="property">minio</span>.<span class="property">BUCKET</span>,</span><br><span class="line">              process.<span class="property">env</span>.<span class="property">MINIO_REGION</span> || <span class="string">&#x27;eu-west-2&#x27;</span></span><br><span class="line">          )</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="keyword">const</span> errMsg = <span class="string">`initBucket - makeBucket: <span class="subst">$&#123;err&#125;</span>`</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(errMsg)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getInstance</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> minioClient;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getSqlData</span>()</span><br><span class="line">    minioClient = <span class="keyword">new</span> <span class="title class_">Minio</span>.<span class="title class_">Client</span>(config.<span class="property">minio</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">initBucket</span>(minioClient)</span><br><span class="line">    <span class="keyword">return</span> minioClient</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">fmt, date</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret;</span><br><span class="line">    date = date || <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> opt = &#123;</span><br><span class="line">        <span class="string">&quot;Y+&quot;</span>: date.<span class="title function_">getFullYear</span>().<span class="title function_">toString</span>(), <span class="comment">// 年</span></span><br><span class="line">        <span class="string">&quot;m+&quot;</span>: (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>(), <span class="comment">// 月</span></span><br><span class="line">        <span class="string">&quot;d+&quot;</span>: date.<span class="title function_">getDate</span>().<span class="title function_">toString</span>(), <span class="comment">// 日</span></span><br><span class="line">        <span class="string">&quot;H+&quot;</span>: date.<span class="title function_">getHours</span>().<span class="title function_">toString</span>(), <span class="comment">// 时</span></span><br><span class="line">        <span class="string">&quot;M+&quot;</span>: date.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>(), <span class="comment">// 分</span></span><br><span class="line">        <span class="string">&quot;S+&quot;</span>: date.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>() <span class="comment">// 秒</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> opt) &#123;</span><br><span class="line">        ret = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).<span class="title function_">exec</span>(fmt);</span><br><span class="line">        <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">          fmt = fmt.<span class="title function_">replace</span>(ret[<span class="number">1</span>], (ret[<span class="number">1</span>].<span class="property">length</span> == <span class="number">1</span>) ? (opt[k]) : </span><br><span class="line">                (opt[k].<span class="title function_">padStart</span>(ret[<span class="number">1</span>].<span class="property">length</span>, <span class="string">&quot;0&quot;</span>)))</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getSqlData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = &#123;</span><br><span class="line">      <span class="title class_">Classification</span>: <span class="string">&#x27;SystemManage&#x27;</span>,</span><br><span class="line">      <span class="title class_">Code</span>: &#123;</span><br><span class="line">          <span class="attr">$in</span>: [<span class="string">&#x27;FileServerMgtUser&#x27;</span>,<span class="string">&#x27;FileServerMgtPW&#x27;</span>, <span class="string">&#x27;FileServerURL&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> parameters = <span class="keyword">await</span> entityFun.<span class="title function_">find</span>(<span class="string">&#x27;Parameter&#x27;</span>, condition);</span><br><span class="line">    <span class="keyword">if</span> (parameters &amp;&amp; parameters.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = parameters.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> param = parameters[i];</span><br><span class="line">            <span class="keyword">if</span> (param.<span class="property">Code</span> == <span class="string">&#x27;FileServerMgtUser&#x27;</span>) &#123;</span><br><span class="line">                config.<span class="property">minio</span>.<span class="property">accessKey</span> = param.<span class="property">Value</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (param.<span class="property">Code</span> == <span class="string">&#x27;FileServerMgtPW&#x27;</span>) &#123;</span><br><span class="line">                config.<span class="property">minio</span>.<span class="property">secretKey</span> = param.<span class="property">Value</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (param.<span class="property">Code</span> == <span class="string">&#x27;FileServerURL&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> url = param.<span class="property">Value</span>;</span><br><span class="line">                <span class="keyword">let</span> str = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">                config.<span class="property">minio</span>.<span class="property">endPoint</span> = str.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">                config.<span class="property">minio</span>.<span class="property">port</span> = <span class="title class_">Number</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">                config.<span class="property">minio</span>.<span class="property">BUCKET</span> = url.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  getInstance,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">uploadFileSteam</span>(<span class="params">filename, file, fileType</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fileStream = fs.<span class="title function_">createReadStream</span>(file)</span><br><span class="line">    <span class="keyword">const</span> filePath = <span class="title function_">formatDate</span>(<span class="string">&quot;YYYYmmdd&quot;</span>) + <span class="string">&quot;/&quot;</span> + filename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> minioClient = <span class="keyword">await</span> <span class="title function_">getInstance</span>()</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">stat</span>(file, <span class="keyword">function</span>(<span class="params">err, stats</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err) &#125;</span><br><span class="line">      <span class="keyword">return</span> minioClient.<span class="title function_">putObject</span>(config.<span class="property">minio</span>.<span class="property">BUCKET</span>, filePath, </span><br><span class="line">            fileStream, stats.<span class="property">size</span>, &#123; <span class="string">&#x27;content-type&#x27;</span>: fileType &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">uploadBase64</span>(<span class="params">filename, baseData, fileType,filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dataBuffer = <span class="keyword">new</span> <span class="title class_">Buffer</span>(baseData, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> minioClient = <span class="keyword">await</span> <span class="title function_">getInstance</span>()</span><br><span class="line">    <span class="keyword">if</span> (filePath &amp;&amp; filePath[filePath.<span class="property">length</span>-<span class="number">1</span>] != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        filePath = filePath+<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> minioClient.<span class="title function_">putObject</span>(config.<span class="property">minio</span>.<span class="property">BUCKET</span>, </span><br><span class="line">        filePath+filename, dataBuffer, &#123; <span class="string">&#x27;content-type&#x27;</span>: fileType &#125;)</span><br><span class="line">      <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">endPoint</span>: config.<span class="property">minio</span>.<span class="property">endPoint</span>,</span><br><span class="line">        <span class="attr">port</span>: config.<span class="property">minio</span>.<span class="property">port</span>,</span><br><span class="line">        <span class="attr">filePath</span>: filePath+filename,</span><br><span class="line">        <span class="attr">filename</span>: filename,</span><br><span class="line">        <span class="attr">bucket</span>: config.<span class="property">minio</span>.<span class="property">BUCKET</span>,</span><br><span class="line">        <span class="attr">bucketUrl</span>: <span class="string">&#x27;http://&#x27;</span> + config.<span class="property">minio</span>.<span class="property">endPoint</span> + <span class="string">&#x27;:&#x27;</span> + </span><br><span class="line">                config.<span class="property">minio</span>.<span class="property">port</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">minio</span>.<span class="property">BUCKET</span>,</span><br><span class="line">        <span class="attr">dataUrl</span>: <span class="string">&#x27;http://&#x27;</span> + config.<span class="property">minio</span>.<span class="property">endPoint</span> + <span class="string">&#x27;:&#x27;</span> + config.<span class="property">minio</span></span><br><span class="line">        .<span class="property">port</span> + <span class="string">&#x27;/&#x27;</span> + config.<span class="property">minio</span>.<span class="property">BUCKET</span> + <span class="string">&#x27;/&#x27;</span> +filePath+ filename</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (filePath) &#123;</span><br><span class="line">          obj.<span class="property">bucketUrl</span> += <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">          obj.<span class="property">bucketUrl</span> += filePath;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">listFiles</span>(<span class="params">prefix, endPoint, port, bucket</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!prefix) prefix = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">getSqlData</span>()</span><br><span class="line">      <span class="keyword">let</span> minioObj = &#123;</span><br><span class="line">          <span class="attr">endPoint</span>: endPoint,</span><br><span class="line">          <span class="attr">port</span>: port,</span><br><span class="line">          <span class="attr">useSSL</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">accessKey</span>: config.<span class="property">minio</span>.<span class="property">accessKey</span>,</span><br><span class="line">          <span class="attr">secretKey</span>: config.<span class="property">minio</span>.<span class="property">secretKey</span>,</span><br><span class="line">          <span class="attr">BUCKET</span>: bucket</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> newClient = <span class="keyword">new</span> <span class="title class_">Minio</span>.<span class="title class_">Client</span>(minioObj)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> stream = newClient.<span class="title function_">listObjects</span>(bucket, prefix, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">let</span> list = [];</span><br><span class="line">      stream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">          list.<span class="title function_">push</span>(obj);</span><br><span class="line">      &#125;)</span><br><span class="line">      stream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;)</span><br><span class="line">      stream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">              item.<span class="property">dataurl</span> = newClient.<span class="property">protocol</span> + <span class="string">&#x27;//&#x27;</span> + newClient.<span class="property">host</span> </span><br><span class="line">                + <span class="string">&#x27;:&#x27;</span> + newClient.<span class="property">port</span> + <span class="string">&#x27;/&#x27;</span> + bucket + <span class="string">&#x27;/&#x27;</span> + item.<span class="property">name</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(list);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getFile</span>(<span class="params">objName, tmpFile</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> minioClient = <span class="keyword">await</span> <span class="title function_">getInstance</span>()</span><br><span class="line">    <span class="keyword">return</span> minioClient.<span class="title function_">fGetObject</span>(config.<span class="property">minio</span>.<span class="property">BUCKET</span>, objName, tmpFile)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getFileStream</span>(<span class="params">objName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> minioClient = <span class="keyword">await</span> <span class="title function_">getInstance</span>()</span><br><span class="line">    <span class="keyword">return</span> minioClient.<span class="title function_">getObject</span>(config.<span class="property">minio</span>.<span class="property">BUCKET</span>, objName)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">deleteFile</span>(<span class="params">objName, endPoint, port, bucket</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">getSqlData</span>()</span><br><span class="line">      <span class="keyword">let</span> minioObj = &#123;</span><br><span class="line">          <span class="attr">endPoint</span>: endPoint,</span><br><span class="line">          <span class="attr">port</span>: port,</span><br><span class="line">          <span class="attr">useSSL</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">accessKey</span>: config.<span class="property">minio</span>.<span class="property">accessKey</span>,</span><br><span class="line">          <span class="attr">secretKey</span>: config.<span class="property">minio</span>.<span class="property">secretKey</span>,</span><br><span class="line">          <span class="attr">BUCKET</span>: bucket</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> newMinioClient = <span class="keyword">new</span> <span class="title class_">Minio</span>.<span class="title class_">Client</span>(minioObj)</span><br><span class="line">          <span class="keyword">await</span> newMinioClient.<span class="title function_">removeObject</span>(bucket, objName)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="attr">minio</span>: &#123;</span><br><span class="line">    <span class="attr">endPoint</span>: <span class="string">&quot;172.20.45.333&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">useSSL</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">accessKey</span>: <span class="string">&#x27;minioadmin&#x27;</span>,</span><br><span class="line">    <span class="attr">secretKey</span>: <span class="string">&#x27;minioadmin&#x27;</span>,</span><br><span class="line">    <span class="attr">BUCKET</span>: <span class="string">&#x27;bucket&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JS-后台封装"><a href="#JS-后台封装" class="headerlink" title="JS 后台封装"></a>JS 后台封装</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MinioClient.js</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minio = <span class="built_in">require</span>(<span class="string">&#x27;../../../Utils/server/controllers/minio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params">res, err</span>) &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: <span class="literal">null</span>, <span class="title class_">Error</span>: err &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleSuccess</span>(<span class="params">res, data</span>) &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: data, <span class="title class_">Error</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断桶是否存在</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bucketExists</span> = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">bucketName</span>) <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">end</span>();</span><br><span class="line">    minio.<span class="title function_">bucketExists</span>(req.<span class="property">body</span>.<span class="property">bucketName</span>, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">handleError</span>(res, err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, &#123; <span class="attr">message</span>: <span class="string">&quot;bucket exist&quot;</span> &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除桶</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">removeBucket</span> = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">bucketName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, &#123; <span class="attr">message</span>: <span class="string">&quot;桶名称为空&quot;</span> &#125;);</span><br><span class="line">    &#125; </span><br><span class="line">    minio.<span class="title function_">removeBucket</span>(req.<span class="property">body</span>.<span class="property">bucketName</span>, <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">handleError</span>(res, err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, &#123; <span class="attr">message</span>: <span class="string">&quot;removed successfully&quot;</span> &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出存储桶中所有对象</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">listObjects</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> objects = <span class="keyword">await</span> minio.<span class="title function_">listFiles</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, objects);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">uploadFileSteam</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fPath = req.<span class="property">body</span>.<span class="property">filePath</span></span><br><span class="line">        <span class="keyword">let</span> fName = req.<span class="property">body</span>.<span class="property">filename</span> || <span class="string">&#x27;123.png&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> fType = req.<span class="property">body</span>.<span class="property">fileType</span> || <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> objs = <span class="keyword">await</span> minio.<span class="title function_">uploadFileSteam</span>(fName, fPath, fType);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, objs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">uploadBase64</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">filename</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, &#123; <span class="attr">message</span>: <span class="string">&quot;请传入文件名&quot;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dataurl = req.<span class="property">body</span>.<span class="property">dataurl</span></span><br><span class="line">    <span class="keyword">var</span> filename = req.<span class="property">body</span>.<span class="property">filename</span></span><br><span class="line">    <span class="keyword">var</span> arr = dataurl.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> fType = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>] || <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> objects = <span class="keyword">await</span> minio.<span class="title function_">uploadBase64</span>(filename, arr[<span class="number">1</span>], fType)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, objects)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">deleteFile</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">url</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">handleError</span>(res, &#123; <span class="attr">message</span>: <span class="string">&quot;请传入文件路径&quot;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = req.<span class="property">body</span>.<span class="property">url</span>.<span class="title function_">split</span>(<span class="string">&#x27;//&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> point = arr[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> port = <span class="title class_">Number</span>(arr[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">let</span> bucket = arr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> fName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            fName += (arr[i] + <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == (arr.<span class="property">length</span>-<span class="number">1</span>)) &#123;</span><br><span class="line">            fName += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> objs = <span class="keyword">await</span> minio.<span class="title function_">deleteFile</span>(fName, point, port, bucket)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, objs)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次上传多张图片</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">uploadImgs</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> newError;</span><br><span class="line">    <span class="keyword">let</span> imgs = req.<span class="property">body</span>.<span class="property">imgs</span>;</span><br><span class="line">    <span class="keyword">if</span> (!imgs) &#123;</span><br><span class="line">        newError = <span class="string">&#x27;imgs 字段缺失&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(imgs)) &#123;</span><br><span class="line">        newError = <span class="string">&#x27;imgs 数据格式错误&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (imgs.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        newError = <span class="string">&#x27;请上传图片&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newError) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, &#123; <span class="attr">message</span>: newError &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> promise = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;imgs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> imgObj = imgs[i];</span><br><span class="line">        <span class="keyword">if</span> (imgObj.<span class="property">dataurl</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;,&#x27;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> filename = imgObj.<span class="property">filename</span>;</span><br><span class="line">        <span class="keyword">let</span> filePath = imgObj.<span class="property">filePath</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> arr = imgObj.<span class="property">dataurl</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> fileType = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>] || <span class="string">&#x27;image/png&#x27;</span>;</span><br><span class="line">        promise.<span class="title function_">push</span>(<span class="keyword">await</span> minio.<span class="title function_">uploadBase64</span>(filename, arr[<span class="number">1</span>], </span><br><span class="line">        fileType, filePath))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>(promise).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleSuccess</span>(res, result)</span><br><span class="line">    &#125;).<span class="property">catch</span> (<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, &#123; <span class="attr">message</span>: err.<span class="property">message</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">downloadImgsFunc</span> = <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">body</span>.<span class="property">folderName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handleError</span>(res, &#123; <span class="attr">message</span>: <span class="string">&quot;请传入要下载的图片路径&quot;</span> &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">let</span> url = req.<span class="property">body</span>.<span class="property">folderName</span>;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">charAt</span>(url.<span class="property">length</span>-<span class="number">1</span>) != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        url += <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = url.<span class="title function_">split</span>(<span class="string">&#x27;//&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> point = arr[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> port = <span class="title class_">Number</span>(arr[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">let</span> bucket = arr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> foldName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> foldArr = arr.<span class="title function_">slice</span>(<span class="number">2</span>, arr.<span class="property">length</span>-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; foldArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        foldName += (foldArr[i] + <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    foldName = foldName.<span class="title function_">substring</span>(<span class="number">0</span>, foldName.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 列出存储桶所有对象</span></span><br><span class="line">        <span class="keyword">let</span> objs = <span class="keyword">await</span> minio.<span class="title function_">listFiles</span>(foldName, point, port, bucket)   </span><br><span class="line">        <span class="keyword">return</span> objs</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JS-前台调用"><a href="#JS-前台调用" class="headerlink" title="JS 前台调用"></a>JS 前台调用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Http</span>.<span class="title function_">post</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/api/minio/downloadImgs&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">foldName</span>: <span class="string">&#x27;http://172.20.45.137:9000/bucket/chuang&#x27;</span> &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Http</span>.<span class="title function_">post</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/api/minio/uploadImgs&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">imgs</span>: [baseImg] &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> foldName = result[<span class="number">0</span>].<span class="property">bucketUrl</span> + <span class="string">&#x27;/chuang&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="三、uniapp-文件上传"><a href="#三、uniapp-文件上传" class="headerlink" title="三、uniapp 文件上传"></a>三、uniapp 文件上传</h1><blockquote>
<p>uni-app 项目为例实现上传包括图片和视频的所有目录文件并同时支持 Android、IOS。主要实现思路如下：uni-app 没有提供文件上传组件并且不支持 input type&#x3D;”file”、uni-app App 内置 HTML5+ 引擎并提供 plus 接口，可以直接调用 Android 系统函数来打开系统目录，IOS 则没有找到方法但可以通过直接嵌入 H5 页面实现。</p>
</blockquote>
<h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">uploadImg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    uni.<span class="title function_">chooseImage</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">sizeType</span>: [<span class="string">&quot;original&quot;</span>, <span class="string">&quot;compressed&quot;</span>],</span><br><span class="line">        <span class="attr">sourceType</span>: [<span class="string">&quot;album&quot;</span>, <span class="string">&quot;camera&quot;</span>],</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// tempFilePaths：数组的元素是字符串，临时本地图片路径</span></span><br><span class="line">            <span class="comment">// tempFiles：数组元素是字典对象，临时路径 path 和图片大小 size。</span></span><br><span class="line">            <span class="keyword">let</span> tempFiles = res.<span class="property">tempFiles</span>;</span><br><span class="line">            <span class="keyword">if</span> (tempFiles.<span class="property">length</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                uni.<span class="title function_">showToast</span>(&#123; <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;最多上传 3 张图片&#x27;</span> &#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> <span class="title class_">ImgList</span> = tempFiles.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;<span class="attr">name</span>:item.<span class="property">path</span>, <span class="attr">uri</span>:item&#125;)</span><br><span class="line">            uni.<span class="title function_">showLoading</span>(&#123; <span class="attr">mask</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;上传中...&#x27;</span> &#125;);</span><br><span class="line">            uni.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>,        </span><br><span class="line">                <span class="attr">fileType</span>: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">                <span class="attr">files</span>: <span class="title class_">ImgList</span>,</span><br><span class="line">                <span class="attr">url</span>: that.<span class="property">base_url</span> + <span class="string">&#x27;api/imgUpload&#x27;</span>,</span><br><span class="line">                <span class="attr">header</span>: &#123; <span class="attr">token</span>: uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>) &#125;,</span><br><span class="line">                <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                    uni.<span class="title function_">hideLoading</span>();</span><br><span class="line">                    <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>)</span><br><span class="line">                    that.<span class="property">ImgList</span> = result.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">newFile</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!err) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                    uni.<span class="title function_">showModal</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;失败&#x27;</span>, <span class="attr">showCancel</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">previewImg</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    uni.<span class="title function_">previewImage</span>(&#123; <span class="attr">current</span>: index, <span class="attr">urls</span>: <span class="variable language_">this</span>.<span class="property">ImgList</span>, <span class="attr">loop</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="视频上传"><a href="#视频上传" class="headerlink" title="视频上传"></a>视频上传</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">uploadVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    uni.<span class="title function_">chooseVideo</span>(&#123;</span><br><span class="line">        <span class="attr">maxDuration</span>: <span class="number">60</span>,   <span class="comment">// 最大 60s</span></span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">compressed</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">camera</span>: <span class="string">&#x27;front&#x27;</span>,   <span class="comment">// 默认 back</span></span><br><span class="line">        <span class="attr">sourceType</span>: [<span class="string">&quot;album&quot;</span>, <span class="string">&quot;camera&quot;</span>],</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            uni.<span class="title function_">showLoading</span>(&#123; <span class="attr">mask</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&quot;上传中...&quot;</span> &#125;);</span><br><span class="line">            uni.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: that.<span class="property">base_url</span> + <span class="string">&#x27;api/videoUpload&#x27;</span>,</span><br><span class="line">                <span class="attr">filePath</span>: res.<span class="property">tempFilePaths</span>[<span class="number">0</span>],</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">                <span class="attr">fileType</span>: <span class="string">&quot;video&quot;</span>,</span><br><span class="line">                <span class="attr">header</span>: &#123; <span class="attr">token</span>: uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>) &#125;,</span><br><span class="line">                <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">                    uni.<span class="title function_">hideLoading</span>();</span><br><span class="line">                    <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>)</span><br><span class="line">                    that.<span class="title function_">videoCompress</span>(result.<span class="property">data</span>[<span class="number">0</span>].<span class="property">newFile</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">videoCompress (tempFilePath) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    uni.<span class="title function_">compressVideo</span>(&#123;</span><br><span class="line">        <span class="attr">quality</span>: <span class="string">&quot;low&quot;</span>,     <span class="comment">// medium、high</span></span><br><span class="line">        <span class="attr">src</span>: tempFilePath,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">size</span> &gt; <span class="number">1025</span> * <span class="number">1024</span> * <span class="number">10</span>) &#123;</span><br><span class="line">                that.<span class="title function_">videoCompress</span>(res.<span class="property">tempFilePath</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                that.<span class="property">videoSrc</span> = res.<span class="property">tempFilePath</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            uni.<span class="title function_">showToast</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;压缩失败&quot;</span>, <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="文档上传"><a href="#文档上传" class="headerlink" title="文档上传"></a>文档上传</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以七牛存储为例，将七牛上传地址和 token 配置后即可</span></span><br><span class="line">uni.<span class="title function_">chooseFile</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">extension</span>: [<span class="string">&#x27;doc&#x27;</span>, <span class="string">&#x27;xlsx&#x27;</span>, <span class="string">&#x27;ppt&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>],</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">size</span> &gt; <span class="number">30</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">            uni.<span class="title function_">showToast</span>(&#123; <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;附件大小不能超过 30M&#x27;</span> &#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;   </span><br><span class="line">        uni.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;file&quot;</span>,</span><br><span class="line">            <span class="attr">filePath</span>: res.<span class="property">tempFilePaths</span>[<span class="number">0</span>], <span class="comment">// 临时地址</span></span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;七牛上传地址&#x27;</span>,</span><br><span class="line">            <span class="attr">formData</span>: &#123; <span class="attr">token</span>: <span class="string">&#x27;七牛 token&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                uni.<span class="title function_">showModal</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;成功&#x27;</span>, <span class="attr">showCancel</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                uni.<span class="title function_">showModal</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;失败&#x27;</span>, <span class="attr">showCancel</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);      </span><br></pre></td></tr></table></figure>

<h2 id="目录文件上传"><a href="#目录文件上传" class="headerlink" title="目录文件上传"></a>目录文件上传</h2><blockquote>
<p>如果需要上传图片等系统目录文件并支持 Android&#x2F;IOS，uni-app 却没有提供文件上传组件而且不支持 <code>input type=&quot;file&quot;</code>，则可基于 WebView 模式内嵌 H5 页面进行二次开发，注意小程序平台 web-view url 需要在后台配置域名白名单。</p>
</blockquote>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// fileUpload.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">web-view</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;/hybrid/html/index.html?info=&#x27; + info&quot;</span> </span></span><br><span class="line"><span class="tag">        @<span class="attr">message</span>=<span class="string">&quot;handleMessage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">web-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">info</span>: <span class="built_in">encodeURIComponent</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">appId</span>: <span class="string">&#x27;名称&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">appKey</span>: <span class="string">&#x27;密钥&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dmc</span>: <span class="string">&#x27;http://dmc.yozocloud.cn&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;))</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleMessage</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> msg = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(event.<span class="property">detail</span>.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;h5 发送数据：&#x27;</span>, msg)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * @title index.html</span><br><span class="line"> * </span><br><span class="line"> * @desp  uni 组件通过 web-view 标签来实现内嵌页面</span><br><span class="line"> * @desp  使用时应放到不编译的项目目录 /hybrid/html/</span><br><span class="line"> * @desp  uni-sdk 必须引入，js-sdk 则在不需要兼容小程序时不需要</span><br><span class="line">**/</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://res.wx.qq.com/open/js/</span></span></span><br><span class="line"><span class="string"><span class="tag">jweixin-1.4.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://js.cdn.aliyun.dcloud.</span></span></span><br><span class="line"><span class="string"><span class="tag">net.cn/dev/uni-app/uni.webview.1.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/h5uploader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/signclient.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    var info = getQueryString(&#x27;info&#x27;);</span><br><span class="line">    info = JSON.parse(decodeURIComponent(info))</span><br><span class="line"></span><br><span class="line">    uni.getEnv(function(res) &#123;</span><br><span class="line">        console.log(&#x27;当前环境：&#x27;, JSON.stringify(res))</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var btn = document.getElementById(&#x27;upload&#x27;);</span><br><span class="line">    btn.addEventListener(&quot;click&quot;, function(e) &#123;</span><br><span class="line">        H5Uploader.upload(&#123;</span><br><span class="line">            action: info.dmc + &#x27;/api/file/upload?appId=&#x27; + info.appId,</span><br><span class="line">            id: &#x27;fileBtn&#x27;,</span><br><span class="line">            size: &#123;</span><br><span class="line">                max: 50000, </span><br><span class="line">                valide: function(e)&#123; if(e)&#123; alert(e.name+&#x27;超过 5M&#x27;) &#125; &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            type: &#123;</span><br><span class="line">                name: &#x27;csv;doc;docx;xls;xltx;ppt;pptx;jpeg;jpg;png;gif;</span><br><span class="line">                bmp;tif;rar;zip;uof;uot;uos;uop;pdf;ofd;&#x27;,</span><br><span class="line">                valide: function(e)&#123; if(e)&#123; alert(e.name+&#x27;类型不支持&#x27;) &#125; &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            progress: function() &#123;</span><br><span class="line">                console.log(&#x27;上传中...&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">                var tmpJson = JSON.parse(data)</span><br><span class="line">                tmpJson.sign = generateSign(appKey, &#123;</span><br><span class="line">                    appId: [appId], </span><br><span class="line">                    fileVersionId: [tmpJson.fileVersionId]</span><br><span class="line">                &#125;);</span><br><span class="line">                uni.postMessage(&#123; data:&#123; action: tmpJson &#125; &#125;);</span><br><span class="line">                uni.navigateBack(&#123; delta: 1 &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: function(data) &#123;</span><br><span class="line">                alert(&#x27;上传失败&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">    function getQueryString(key) &#123;</span><br><span class="line">        var reg = new RegExp(&#x27;(^|&amp;)&#x27; + key + &#x27;=([^&amp;]*)(&amp;|$)&#x27;)</span><br><span class="line">        var r = window.location.search.substr(1).match(reg)</span><br><span class="line">        if (r != null) return unescape(r[2])</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// signclient.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateSign</span>(<span class="params">secret, params</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fullParamStr = <span class="title function_">uniqSortParams</span>(params);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">hmacSHA256</span>(fullParamStr, secret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uniqSortParams</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> params.<span class="property">sign</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> var5 = [];</span><br><span class="line">    <span class="keyword">var</span> var6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        var5[var6] = key;</span><br><span class="line">        var6++;</span><br><span class="line">    &#125;</span><br><span class="line">    var5.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123; <span class="keyword">return</span> a.<span class="title function_">localeCompare</span>(b, <span class="string">&#x27;zh-CN&#x27;</span>) &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> var7 = <span class="number">0</span>; var7 &lt; var5.<span class="property">length</span>; var7++) &#123;</span><br><span class="line">        <span class="keyword">var</span> key = var5[var7];</span><br><span class="line">        <span class="keyword">var</span> var8 = params[key];</span><br><span class="line">        var8.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.<span class="title function_">localeCompare</span>(b, <span class="string">&#x27;zh-CN&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> (var8 != <span class="literal">null</span> &amp;&amp; var8.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> var9 = <span class="number">0</span>; var9 &lt; var8.<span class="property">length</span>; var9++) &#123;</span><br><span class="line">                result += key + <span class="string">&quot;=&quot;</span> + var8[var9];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result += key + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hmacSHA256</span>(<span class="params">data, key</span>) &#123;</span><br><span class="line">    data != <span class="literal">null</span> ? data : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> var2 = <span class="title class_">CryptoJS</span>.<span class="title class_">HmacSHA256</span>(data, key);</span><br><span class="line">    <span class="keyword">var</span> var3 = var2.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>);</span><br><span class="line">    <span class="keyword">return</span> var3.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h5uploader.js</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">H5Uploader</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createXhr</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">ActiveXObject</span> != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">activeXString</span> != <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> versions = [<span class="string">&quot;MSXML2.XMLHttp.6.0&quot;</span>, <span class="string">&quot;MSXML2.XMLHttp.3.0&quot;</span>, </span><br><span class="line">          <span class="string">&quot;MSXML2.XMLHttp&quot;</span>];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = versions.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(versions[i]);</span><br><span class="line">              <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">activeXString</span> = versions[i];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Create XHR ActiveXObject error.&#x27;</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">activeXString</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;No XHR object avaliable.&#x27;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">upload</span>: <span class="keyword">function</span>(<span class="params">literals</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(literals)!=<span class="string">&#x27;[object Array]&#x27;</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">handUpload</span>(literals);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; literals.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handUpload</span>(literals[i]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="attr">handUpload</span>: <span class="keyword">function</span>(<span class="params">literals</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (literals.<span class="property">action</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;upload action address option is undefined.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="title function_">createXhr</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, literals.<span class="property">action</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;multipart/form-data&quot;);</span></span><br><span class="line">        <span class="comment">// xhr.setRequestHeader(&quot;X-Requested-With&quot;, &quot;XMLHttpRequest&quot;);</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> != <span class="number">4</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">var</span> body = xhr.<span class="property">responseText</span>;</span><br><span class="line">            <span class="keyword">if</span> ( xhr.<span class="property">status</span>==<span class="number">200</span> &amp;&amp; literals.<span class="property">success</span>) &#123;</span><br><span class="line">                literals.<span class="title function_">success</span>(body);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (literals) &#123;</span><br><span class="line">                literals.<span class="title function_">fail</span>(body);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!literals.<span class="property">id</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The file id option is undefined.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(literals.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;file element is undefined:&#x27;</span> + literals.<span class="property">id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> name = file.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;file input name is undefined.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (literals.<span class="property">size</span>) &#123;   <span class="comment">// Check file Size</span></span><br><span class="line">          <span class="keyword">var</span> evt = <span class="variable language_">this</span>.<span class="title function_">checkSize</span>(file.<span class="property">files</span>, literals.<span class="property">size</span>.<span class="property">max</span>);</span><br><span class="line">          <span class="keyword">if</span> (evt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (literals.<span class="property">size</span>.<span class="property">valide</span>) literals.<span class="property">size</span>.<span class="title function_">valide</span>(evt);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;file size exceed max value.&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (literals.<span class="property">type</span>) &#123;   <span class="comment">// Check file type</span></span><br><span class="line">          <span class="keyword">var</span> evt1 = <span class="variable language_">this</span>.<span class="title function_">checkType</span>(file.<span class="property">files</span>, literals.<span class="property">type</span>.<span class="property">name</span>);</span><br><span class="line">          <span class="keyword">if</span> (evt1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (literals.<span class="property">type</span>.<span class="property">valide</span>) literals.<span class="property">type</span>.<span class="title function_">valide</span>(evt1);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;file type is error.&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (literals.<span class="property">progress</span>) &#123;   <span class="comment">// Progress</span></span><br><span class="line">          literals.<span class="title function_">progress</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; file.<span class="property">files</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          data.<span class="title function_">append</span>(name, file.<span class="property">files</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          xhr.<span class="title function_">send</span>(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Validate file size</span></span><br><span class="line">      <span class="attr">checkSize</span>: <span class="keyword">function</span>(<span class="params">file, size</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; file.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (file[i].<span class="property">size</span> &gt; size * <span class="number">1024</span>) &#123; <span class="comment">// bytes</span></span><br><span class="line">            <span class="keyword">return</span> file[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Validate file type</span></span><br><span class="line">      <span class="attr">checkType</span>: <span class="keyword">function</span>(<span class="params">file, type</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; file.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> arr = file[i].<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (type.<span class="title function_">indexOf</span>(arr[arr.<span class="property">length</span> - <span class="number">1</span>]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> file[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure>


<h1 id="四、补丁版本管理"><a href="#四、补丁版本管理" class="headerlink" title="四、补丁版本管理"></a>四、补丁版本管理</h1><h2 id="补丁下载"><a href="#补丁下载" class="headerlink" title="补丁下载"></a>补丁下载</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> $scope.<span class="property">downloadFile</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> record = $scope.<span class="property">Module</span>.<span class="property">SystemManager</span>.<span class="property">FocusedRecord</span>;</span><br><span class="line">     <span class="keyword">if</span> (<span class="title function_">toNum</span>(record.<span class="property">NewVersion</span>) == <span class="title function_">toNum</span>(record.<span class="property">Version</span> || <span class="string">&#x27;0.0.0&#x27;</span>)) &#123;</span><br><span class="line">         <span class="title class_">BaseFunction</span>.<span class="title function_">alert</span>(<span class="string">&#x27;该版本是最新补丁！&#x27;</span>, <span class="string">&#x27;补丁下载错误&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 补丁备份</span></span><br><span class="line">     <span class="keyword">let</span> <span class="title class_">FilePaths</span> = [&#123;</span><br><span class="line">         <span class="title class_">OldPath</span>: <span class="string">&#x27;/downloads/umif-pc.zip&#x27;</span>,</span><br><span class="line">         <span class="title class_">NewPath</span>: <span class="string">&#x27;/downloads/umif-pc-back.zip&#x27;</span></span><br><span class="line">     &#125;];</span><br><span class="line">     <span class="keyword">let</span> appStoreUrl = <span class="string">&#x27;u9cmes.diwork.com&#x27;</span></span><br><span class="line">     <span class="keyword">let</span> ip = appStoreUrl.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">let</span> prefix = <span class="title function_">verifyIp</span>(ip) ? <span class="string">&#x27;http://&#x27;</span> : <span class="string">&#x27;https://&#x27;</span>;</span><br><span class="line">     <span class="keyword">let</span> params = &#123;</span><br><span class="line">         <span class="title class_">ServerPath</span>: <span class="string">`<span class="subst">$&#123;prefix&#125;</span><span class="subst">$&#123;appStoreUrl&#125;</span>/api/App/getFileStream`</span>,</span><br><span class="line">         <span class="title class_">DownloadFileName</span>: <span class="string">&#x27;umif-pc.zip&#x27;</span>,  <span class="comment">// 文件全名</span></span><br><span class="line">         <span class="title class_">FileName</span>: <span class="literal">null</span>,                   <span class="comment">// 本地保存文件名，默认为源文件名称</span></span><br><span class="line">         <span class="title class_">DeleteFileName</span>: <span class="literal">null</span>,             <span class="comment">// 本地要删除的文件名，可空</span></span><br><span class="line">         <span class="title class_">SocketId</span>: <span class="literal">null</span>                    <span class="comment">// 通过 Socket 向前端通知过程</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title class_">BaseFunction</span>.<span class="title function_">request</span>(<span class="string">&#x27;/api/base/fileRenames&#x27;</span>, &#123;<span class="title class_">FilePaths</span>&#125;)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title class_">BaseFunction</span>.<span class="title function_">request</span>(<span class="string">&#x27;/api/base/downloadFile&#x27;</span>, params)</span><br><span class="line">     &#125;)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载成功&#x27;</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`<span class="subst">$&#123;fileName&#125;</span>下载失败：<span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 校验url是否是IP</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">verifyIp</span>(<span class="params">ip = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="regexp">/^(([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])(\.(?!$)|(?=$)))&#123;4&#125;$/</span>.<span class="title function_">test</span>(ip);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">toNum</span>(<span class="params">a</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> a = a.<span class="title function_">toString</span>();</span><br><span class="line">     <span class="keyword">var</span> c = a.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);     <span class="comment">// a.split(/\./);</span></span><br><span class="line">     <span class="keyword">var</span> num_place = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;00&quot;</span>, <span class="string">&quot;000&quot;</span>, <span class="string">&quot;0000&quot;</span>],</span><br><span class="line">       r = num_place.<span class="title function_">reverse</span>();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">var</span> len = c[i].<span class="property">length</span>;</span><br><span class="line">       c[i] = r[len] + c[i];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> c.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 文件重命名</span></span><br><span class="line"> <span class="built_in">exports</span>.<span class="property">fileRenames</span> = <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">     newErr.<span class="property">leval</span> = <span class="number">5</span>;</span><br><span class="line">     newErr.<span class="property">title</span> = <span class="string">&#x27;文件重命名失败&#x27;</span>;</span><br><span class="line">     newErr.<span class="property">message</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> excuteCount = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">var</span> parameter = req.<span class="property">body</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; parameter.<span class="property">FilePaths</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">let</span> oldPath = process.<span class="title function_">cwd</span>() + parameter.<span class="property">FilePaths</span>[i].<span class="property">OldPath</span>;</span><br><span class="line">         <span class="keyword">let</span> newPath = process.<span class="title function_">cwd</span>() + parameter.<span class="property">FilePaths</span>[i].<span class="property">NewPath</span>;</span><br><span class="line">         <span class="title function_">fileRename</span>(oldPath, newPath, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                 newErr.<span class="property">message</span> += (<span class="string">&quot;\r\n&quot;</span> + oldPath);</span><br><span class="line">             &#125;</span><br><span class="line">             excuteCount++;</span><br><span class="line">             <span class="keyword">if</span> (excuteCount == parameter.<span class="property">FilePaths</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (newErr.<span class="property">message</span> != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                   newErr.<span class="property">message</span> = <span class="string">&quot;失败文件：&quot;</span> + newErr.<span class="property">message</span>;</span><br><span class="line">                   res.<span class="title function_">json</span>(&#123; <span class="title class_">Error</span>: newErr &#125;);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: excuteCount &#125;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fileRename</span>(<span class="params">oldPath, newPath, completeFun</span>) &#123;</span><br><span class="line">     fs.<span class="title function_">exists</span>(oldPath, <span class="keyword">function</span>(<span class="params">isExists</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isExists) &#123;</span><br><span class="line">             fs.<span class="title function_">rename</span>(oldPath, newPath, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                 completeFun &amp;&amp; <span class="title function_">completeFun</span>(err);</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">var</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">             newErr.<span class="property">leval</span> = <span class="number">0</span>;</span><br><span class="line">             newErr.<span class="property">title</span> = <span class="string">&#x27;重命名失败&#x27;</span>;</span><br><span class="line">             newErr.<span class="property">message</span> = <span class="string">&#x27;文件不存在&#x27;</span>;</span><br><span class="line">             completeFun &amp;&amp; <span class="title function_">completeFun</span>(newErr);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 下载文件，从别的服务器下载文件</span></span><br><span class="line"> <span class="built_in">exports</span>.<span class="property">downloadFile</span> = <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> params = req.<span class="property">body</span>;</span><br><span class="line">     <span class="title function_">downloadFile</span>(params.<span class="property">ServerPath</span>, params.<span class="property">DownloadFileName</span>, </span><br><span class="line">     params.<span class="property">FileName</span>, params.<span class="property">DeleteFileName</span>, params.<span class="property">SocketId</span>, </span><br><span class="line">     <span class="keyword">function</span>(<span class="params">err, file</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">             res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: file &#125;);</span><br><span class="line">             <span class="keyword">return</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">         newErr.<span class="property">leval</span> = <span class="number">5</span>;</span><br><span class="line">         newErr.<span class="property">title</span> = <span class="string">&#x27;下载失败&#x27;</span>;</span><br><span class="line">         newErr.<span class="property">message</span> = <span class="string">&#x27;未能连接上下载服务器&#x27;</span>;</span><br><span class="line">         <span class="title class_">BaseFun</span>.<span class="title function_">errorLog</span>(<span class="string">&#x27;补丁下载失败：&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">         res.<span class="title function_">json</span>(&#123; <span class="title class_">Error</span>: newErr &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">downloadFile</span>(<span class="params">serverPath, downloadFileName, fileName, </span></span><br><span class="line"><span class="params"> deleteFileName, socketId, returnHandle</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> isHttps = serverPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line">     serverPath = serverPath.<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">     fileName = fileName || downloadFileName;</span><br><span class="line">     <span class="keyword">if</span> (serverPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;//&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">         serverPath = serverPath.<span class="title function_">split</span>(<span class="string">&#x27;//&#x27;</span>)[<span class="number">1</span>];   <span class="comment">// 去掉 http 头</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 文件服务器信息</span></span><br><span class="line">     <span class="keyword">var</span> serverAddress = serverPath.<span class="title function_">substring</span>(<span class="number">0</span>, serverPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/&#x27;</span>)); </span><br><span class="line">     <span class="keyword">var</span> serverApiPath = serverPath.<span class="title function_">substring</span>(serverPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/&#x27;</span>), </span><br><span class="line">     serverPath.<span class="property">length</span>);</span><br><span class="line">     <span class="keyword">var</span> serverHostName = serverAddress;</span><br><span class="line">     <span class="keyword">var</span> serverPort = <span class="number">80</span>;</span><br><span class="line">     <span class="keyword">if</span> (serverAddress.<span class="title function_">indexOf</span>(<span class="string">&#x27;:&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         serverHostName = serverAddress.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">         serverPort = <span class="built_in">parseInt</span>(serverAddress.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> <span class="title class_">FilePath</span> = config.<span class="property">System</span>.<span class="property">FilePath</span> || <span class="string">&#x27;./downloads/&#x27;</span></span><br><span class="line">     <span class="keyword">var</span> fileFullPath = <span class="title class_">FilePath</span> + fileName;</span><br><span class="line">     <span class="keyword">var</span> fileWriteStream = fs.<span class="title function_">createWriteStream</span>(fileFullPath + <span class="string">&#x27;.temp&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> parameter = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="title class_">FileName</span>: fileName &#125;);</span><br><span class="line">     <span class="keyword">if</span> (isHttps &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> options = &#123;</span><br><span class="line">           <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;hostname&#x27;</span>: serverHostName,</span><br><span class="line">           <span class="string">&#x27;path&#x27;</span>: serverApiPath,</span><br><span class="line">           <span class="string">&#x27;maxRedirects&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">           <span class="string">&#x27;headers&#x27;</span>: &#123;</span><br><span class="line">             <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;acw_tc=2760827916413586286573778e6933772&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">// let https = require(&#x27;https&#x27;);</span></span><br><span class="line">       <span class="keyword">var</span> req = https.<span class="title function_">request</span>(options, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> eventName;</span><br><span class="line"></span><br><span class="line">           res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">               fileWriteStream.<span class="title function_">write</span>(data);</span><br><span class="line">               <span class="keyword">if</span> (!socketId) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">               eventName = downloadFileName + <span class="string">&quot;_DownloadSize&quot;</span></span><br><span class="line">               socket.<span class="title function_">emitBySocketId</span>(socketId, eventName, data.<span class="property">length</span>);</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">               fileWriteStream.<span class="title function_">end</span>();</span><br><span class="line">               <span class="keyword">if</span> (deleteFileName) &#123;</span><br><span class="line">                   fs.<span class="title function_">unlinkSync</span>(<span class="title class_">FilePath</span> + deleteFileName); <span class="comment">// 删除已有文件</span></span><br><span class="line">               &#125;</span><br><span class="line">               fs.<span class="title function_">renameSync</span>(fileFullPath + <span class="string">&#x27;.temp&#x27;</span>, fileFullPath);</span><br><span class="line">               <span class="keyword">if</span> (socketId) &#123;</span><br><span class="line">                   eventName = downloadFileName + <span class="string">&quot;_DownloadComplete&quot;</span></span><br><span class="line">                   socket.<span class="title function_">emitBySocketId</span>(socketId, eventName, <span class="literal">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="title function_">returnHandle</span>(<span class="literal">null</span>, &#123; <span class="title class_">FileName</span>: fileName &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           res.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">         req.<span class="title function_">write</span>(parameter);</span><br><span class="line">         req.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">             <span class="title function_">returnHandle</span>(err);</span><br><span class="line">         &#125;);</span><br><span class="line">         req.<span class="title function_">end</span>();</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">var</span> options = &#123;</span><br><span class="line">             <span class="attr">hostname</span>: serverHostName,</span><br><span class="line">             <span class="attr">port</span>: serverPort,</span><br><span class="line">             <span class="attr">path</span>: serverApiPath,</span><br><span class="line">             <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">             <span class="attr">headers</span>: &#123;</span><br><span class="line">               <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">               <span class="string">&quot;Content-Length&quot;</span>: parameter.<span class="property">length</span>,</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         <span class="keyword">var</span> fileFullPath = <span class="title class_">FilePath</span> + fileName;</span><br><span class="line">         <span class="keyword">var</span> fileWriteStream = fs.<span class="title function_">createWriteStream</span>(fileFullPath + <span class="string">&#x27;.temp&#x27;</span>);</span><br><span class="line">         <span class="keyword">var</span> httpRequest = http.<span class="title function_">request</span>(options, <span class="keyword">function</span>(<span class="params">httpResponse</span>) &#123;</span><br><span class="line">             httpResponse.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                 fileWriteStream.<span class="title function_">write</span>(data);</span><br><span class="line">                 <span class="keyword">if</span> (!socketId) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                 eventName = downloadFileName + <span class="string">&quot;_DownloadSize&quot;</span></span><br><span class="line">                 socket.<span class="title function_">emitBySocketId</span>(socketId, eventName, data.<span class="property">length</span>);</span><br><span class="line">             &#125;);</span><br><span class="line">             httpResponse.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                 fileWriteStream.<span class="title function_">end</span>();</span><br><span class="line">                 <span class="keyword">if</span> (deleteFileName) &#123;</span><br><span class="line">                     fs.<span class="title function_">unlinkSync</span>(<span class="title class_">FilePath</span> + deleteFileName);</span><br><span class="line">                 &#125;</span><br><span class="line">                 fs.<span class="title function_">renameSync</span>(fileFullPath + <span class="string">&#x27;.temp&#x27;</span>, fileFullPath);</span><br><span class="line">                 <span class="keyword">if</span> (socketId) &#123;</span><br><span class="line">                     eventName = downloadFileName + <span class="string">&quot;_DownloadComplete&quot;</span></span><br><span class="line">                     socket.<span class="title function_">emitBySocketId</span>(socketId, eventName, <span class="literal">true</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="title function_">returnHandle</span>(<span class="literal">null</span>, &#123; <span class="title class_">FileName</span>: fileName &#125;);</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">         httpRequest.<span class="title function_">write</span>(parameter);</span><br><span class="line">         httpRequest.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">             <span class="title function_">returnHandle</span>(err);</span><br><span class="line">         &#125;);</span><br><span class="line">         httpRequest.<span class="title function_">end</span>();</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// socket.js</span></span><br><span class="line"> <span class="keyword">var</span> <span class="title class_">BaseConst</span> = <span class="built_in">require</span>(<span class="string">&#x27;./Const&#x27;</span>),</span><br><span class="line"><span class="title class_">BaseFun</span> = <span class="built_in">require</span>(<span class="string">&#x27;./Function&#x27;</span>),</span><br><span class="line">http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>),</span><br><span class="line">socketIo = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(http);</span><br><span class="line"> <span class="keyword">var</span> clientList = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 发送给指定连接</span></span><br><span class="line"> <span class="built_in">exports</span>.<span class="property">emitBySocketId</span> = <span class="keyword">function</span>(<span class="params">socketId, eventName, data</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span> (clientList.<span class="title function_">hasOwnProperty</span>(socketId)) &#123;</span><br><span class="line">         clientList[socketId].<span class="title function_">emit</span>(eventName, data);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 广播给所有人</span></span><br><span class="line"> <span class="built_in">exports</span>.<span class="property">emit</span> = <span class="keyword">function</span>(<span class="params">eventName, data</span>)&#123;</span><br><span class="line">     socketIo.<span class="title function_">emit</span>(eventName, data);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 广播给该房间的所有人，包括自己</span></span><br><span class="line"> <span class="built_in">exports</span>.<span class="property">emitRoom</span> = <span class="keyword">function</span>(<span class="params">eventName, roomName, data</span>)&#123;</span><br><span class="line">     socketIo.<span class="title function_">in</span>(roomName).<span class="title function_">emit</span>(eventName, data);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">exports</span>.<span class="property">create</span> = <span class="keyword">function</span>(<span class="params">socketPort</span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> server = http.<span class="title function_">createServer</span>().<span class="title function_">listen</span>(socketPort);</span><br><span class="line">     socketIo.<span class="title function_">listen</span>(server);</span><br><span class="line"></span><br><span class="line">     socketIo.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span>(<span class="params">socket</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!clientList.<span class="title function_">hasOwnProperty</span>(socket.<span class="property">id</span>))&#123;</span><br><span class="line">           clientList[socket.<span class="property">id</span>] = socket;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 发给自己</span></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;toSelf&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socket.<span class="title function_">emit</span>(data.<span class="property">EventName</span>, data.<span class="property">Data</span>);	</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 发送除自己的其他所有人</span></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;toOther&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socket.<span class="property">broadcast</span>.<span class="title function_">emit</span>(data.<span class="property">EventName</span>, data.<span class="property">Data</span>);		</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 发给所有人，包括自己</span></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;toAll&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socketIo.<span class="title function_">emit</span>(data.<span class="property">EventName</span>, data.<span class="property">Data</span>);	</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;joinRoom&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socket.<span class="title function_">join</span>(data.<span class="property">RoomName</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;leaveRoom&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socket.<span class="title function_">leave</span>(data.<span class="property">RoomName</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 向一个房间广播消息（发送者收不到消息)</span></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;toRoom&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socket.<span class="property">broadcast</span>.<span class="title function_">to</span>(data.<span class="property">RoomName</span>).<span class="title function_">emit</span>(data.<span class="property">EventName</span>, data.<span class="property">Data</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 向一个房间广播消息（包括发送者都能收到消息)</span></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;inRoom&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">           socketIo.<span class="title function_">in</span>(data.<span class="property">RoomName</span>).<span class="title function_">emit</span>(data.<span class="property">EventName</span>, data.<span class="property">Data</span>);		</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;disconnect&#x27;</span>);</span><br><span class="line">           <span class="keyword">if</span> (clientList.<span class="title function_">hasOwnProperty</span>(socket.<span class="property">id</span>)) &#123;</span><br><span class="line">               socket.<span class="title function_">disconnect</span>();</span><br><span class="line">               <span class="keyword">delete</span> clientList[socket.<span class="property">id</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 程序调用，主动断开</span></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;clientDisconnect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clientDisconnect&#x27;</span>);</span><br><span class="line">           socket.<span class="title function_">ondisconnect</span>();</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       socket.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!err) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="title class_">BaseFun</span>.<span class="title function_">errorLog</span>(<span class="string">&quot;Scoket错误&quot;</span>, <span class="string">&quot;Socket异常关闭&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (clientList.<span class="title function_">hasOwnProperty</span>(socket.<span class="property">id</span>)) &#123;</span><br><span class="line">               <span class="keyword">delete</span> clientList[socket.<span class="property">id</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;即时通信服务开启，端口号：&quot;</span> + socketPort);</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="补丁更新"><a href="#补丁更新" class="headerlink" title="补丁更新"></a>补丁更新</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$scope.<span class="property">updateFile</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">BaseService</span>.<span class="title function_">filesUnzip</span>(<span class="string">&#x27;/downloads/umif-pc.zip&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> record = $scope.<span class="property">Module</span>.<span class="property">SystemManager</span>.<span class="property">FocusedRecord</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">toNum</span>(record.<span class="property">NewVersion</span>) &gt; <span class="title function_">toNum</span>(record.<span class="property">Version</span> || <span class="string">&#x27;0.0.0&#x27;</span>))&#123;</span><br><span class="line">            record.<span class="property">OldVersion</span> = record.<span class="property">Version</span>;</span><br><span class="line">            record.<span class="property">OldRemark</span> = record.<span class="property">Remark</span></span><br><span class="line">            record.<span class="property">Version</span> = record.<span class="property">NewVersion</span>;</span><br><span class="line">            record.<span class="property">Remark</span> = record.<span class="property">NewRemark</span>;</span><br><span class="line">            record.<span class="property">UpdateTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            $scope.<span class="property">Module</span>.<span class="property">SystemManager</span>.<span class="title function_">save</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            record.<span class="property">OldVersion</span> = record.<span class="property">Version</span>;</span><br><span class="line">            record.<span class="property">OldRemark</span> = record.<span class="property">Remark</span></span><br><span class="line">            record.<span class="property">Version</span> = record.<span class="property">NewVersion</span>;</span><br><span class="line">            record.<span class="property">Remark</span> = record.<span class="property">NewRemark</span>;</span><br><span class="line">            record.<span class="property">UpdateTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            $scope.<span class="property">Module</span>.<span class="property">SystemManager</span>.<span class="title function_">save</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">SystemManagerService</span>.<span class="title function_">updateTenantAppVersion</span>(&#123;</span><br><span class="line">            <span class="attr">tenantCode</span>: <span class="string">&#x27;tenant&#x27;</span>,</span><br><span class="line">            <span class="attr">appId</span>: <span class="string">&#x27;umif-pc&#x27;</span>,</span><br><span class="line">            <span class="attr">version</span>: record.<span class="property">NewVersion</span>,</span><br><span class="line">            <span class="attr">remark</span>: record.<span class="property">NewRemark</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="title class_">BaseFunction</span>.<span class="title function_">alert</span>(error, <span class="string">&#x27;补丁更新错误&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">filesUnzip</span> = <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> parameter = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">var</span> zipPath = process.<span class="title function_">cwd</span>() + parameter.<span class="property">zip</span>;</span><br><span class="line">    <span class="keyword">var</span> unzipPath = process.<span class="title function_">cwd</span>() + parameter.<span class="property">unzip</span>;</span><br><span class="line">    <span class="keyword">var</span> unzipExtractor = unzip.<span class="title class_">Extract</span>(&#123; <span class="attr">path</span>: unzipPath &#125;);</span><br><span class="line">    fs.<span class="title function_">exists</span>(path, <span class="keyword">function</span>(<span class="params">isExists</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isExist) &#123;</span><br><span class="line">            fs.<span class="title function_">createReadStream</span>(zipPath).<span class="title function_">pipe</span>(unzipExtractor);</span><br><span class="line">            unzipExtractor.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                res.<span class="title function_">json</span>(&#123; <span class="title class_">Error</span>: err &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            unzipExtractor.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: <span class="string">&#x27;close&#x27;</span> &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: <span class="string">&#x27;close&#x27;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 AppStore 上的租户的补丁版本</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">updateTenantAppVersion</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> param = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">let</span> port = req.<span class="property">headers</span>.<span class="property">host</span>.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">updateTenantAppVersion</span>(param.<span class="property">tenantCode</span>, </span><br><span class="line">        param.<span class="property">appId</span>, param.<span class="property">version</span>, param.<span class="property">remark</span>, port);</span><br><span class="line">        res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: data, <span class="title class_">Error</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: <span class="literal">null</span>, <span class="title class_">Error</span>: error &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程调用更新 TenantAppVersion</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateTenantAppVersion</span>(<span class="params">tenantCode, appId, version, </span></span><br><span class="line"><span class="params">    remark, port1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> param = <span class="keyword">await</span> entityFun.<span class="title function_">findOne</span>(<span class="string">&#x27;Parameter&#x27;</span>, &#123;<span class="title class_">Code</span>: <span class="string">&#x27;AppStore&#x27;</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span> (!param) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> url = param.<span class="property">Value</span>;</span><br><span class="line">    <span class="keyword">let</span> ip = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> port = <span class="number">80</span>;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;:&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        ip = url.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">        port = url.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ip = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        <span class="attr">hostname</span>: ip,</span><br><span class="line">        <span class="attr">port</span>: port,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;Post&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/api/tenant/httpUpdateTenantAppVersion&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">tenantCode</span>: tenantCode,</span><br><span class="line">        <span class="attr">appId</span>: appId,</span><br><span class="line">        <span class="attr">version</span>: version,</span><br><span class="line">        <span class="attr">remark</span>: remark,</span><br><span class="line">        <span class="attr">envType</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">port</span>: port1</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BaseFun</span>.<span class="title function_">verifyIp</span>(ip)) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">BaseFun</span>.<span class="title function_">requestHttp</span>(options, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="string">&#x27;https://&#x27;</span> + options.<span class="property">hostname</span> + options.<span class="property">path</span>;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">BaseFun</span>.<span class="title function_">axios</span>(options.<span class="property">method</span>, url, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">requestHttp</span> = <span class="keyword">function</span>(<span class="params">options, parameter, isParse</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">path</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">            newErr.<span class="property">leval</span> = <span class="number">9</span>;</span><br><span class="line">            newErr.<span class="property">title</span> = <span class="string">&#x27;请求服务器错误&#x27;</span>;</span><br><span class="line">            newErr.<span class="property">message</span> = <span class="string">&#x27;没有传入路径参数&#x27;</span>;</span><br><span class="line">            <span class="title function_">reject</span>(newErr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (parameter) &#123;</span><br><span class="line">            parameter = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">hostname</span>) &#123;</span><br><span class="line">            options.<span class="property">hostname</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">port</span>) &#123;</span><br><span class="line">            options.<span class="property">port</span> = <span class="number">3000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">method</span>) &#123;</span><br><span class="line">            options.<span class="property">method</span> = <span class="string">&#x27;POST&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">headers</span>) &#123;</span><br><span class="line">            options.<span class="property">headers</span> = &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> req = http.<span class="title function_">request</span>(options, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                result += data;</span><br><span class="line">            &#125;).<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = isParse ? result : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">                    result = &#123; <span class="title class_">Error</span>: result &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (result.<span class="property">Error</span>) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(result.<span class="property">Error</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.<span class="property">Data</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(result.<span class="property">Data</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parameter) &#123;</span><br><span class="line">            req.<span class="title function_">write</span>(parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        req.<span class="title function_">end</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="补丁还原"><a href="#补丁还原" class="headerlink" title="补丁还原"></a>补丁还原</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$scope.<span class="property">reductionFile</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">BaseService</span>.<span class="title function_">filesUnzip</span>(<span class="string">&#x27;/downloads/umif-pc-back.zip&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> record = $scope.<span class="property">Module</span>.<span class="property">SystemManager</span>.<span class="property">FocusedRecord</span>;</span><br><span class="line">        record.<span class="property">Version</span> = record.<span class="property">OldVersion</span>;</span><br><span class="line">        record.<span class="property">Remark</span> = record.<span class="property">OldRemark</span>;</span><br><span class="line">        record.<span class="property">UpdateTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        $scope.<span class="property">Module</span>.<span class="property">SystemManager</span>.<span class="title function_">save</span>();</span><br><span class="line">        <span class="keyword">let</span> param = &#123;</span><br><span class="line">            <span class="attr">tenantCode</span>: <span class="string">&#x27;tenant&#x27;</span>,</span><br><span class="line">            <span class="attr">appId</span>: <span class="string">&#x27;umif-pc&#x27;</span>,</span><br><span class="line">            <span class="attr">version</span>: record.<span class="property">OldVersion</span>,</span><br><span class="line">            <span class="attr">remark</span>: record.<span class="property">NewRemark</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">SystemManagerService</span>.<span class="title function_">updateTenantAppVersion</span>(param);</span><br><span class="line">    &#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="title class_">BaseFunction</span>.<span class="title function_">alert</span>(error, <span class="string">&#x27;补丁更新错误&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>百度智能云之在线识别</title>
    <url>/2023/01/10/19-%E7%99%BE%E5%BA%A6%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><ul>
<li><strong>Android、IOS 证书</strong><ul>
<li>Android 平台签名证书：打包发布 apk 时用来签名的数字证书（.keystore)。</li>
<li>IOS 开发证书：用于 APP 测试时安装到苹果手机真机的运行情况。</li>
<li>IOS 发布证书：用于 APP 上线时打包 ipa 并上传到 App Store。</li>
</ul>
</li>
<li><strong>百度智能云</strong><ul>
<li>获取密钥：<a href="https://ai.baidu.com/">百度AI开放平台</a>、注册&#x2F;登录、实名认证、人脸识别、创建应用。</li>
<li>领取额度：<a href="https://console.bce.baidu.com/ai/?_=1668753171812#/ai/face/overview/index">人脸识别</a>、<a href="https://console.bce.baidu.com/ai/?_=1668753171812#/ai/speech/overview/index">文字识别</a>、<a href="https://console.bce.baidu.com/ai/?_=1668753171812#/ai/ocr/overview/index">语音识别</a>。</li>
<li>查看文档：<a href="https://ai.baidu.com/ai-doc/FACE/yk37c1u4t">人脸识别</a>、<a href="https://cloud.baidu.com/doc/OCR/s/Ek3h7xypm">文字识别</a>、<a href="https://ai.baidu.com/ai-doc/SPEECH/Ek39uxgre">语音识别</a>。</li>
</ul>
</li>
<li><strong>引用插件和申请权限</strong><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插件库：人脸检测库 tracking、脸部追踪 face</span></span><br><span class="line">&lt;script src=<span class="string">&quot;js/tracking/tracking.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/tracking/face.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统权限：联网、查看网络状态、录像、录音、音量修改、拍照</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_VIDEO&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECORD_AUDIO&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用权限：每次安装后都需要重新设置</span></span><br><span class="line">智能工厂的权限设置、设置、应用和通知、权限管理器、允许麦克风/相机权限</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="二、接口封装"><a href="#二、接口封装" class="headerlink" title="二、接口封装"></a>二、接口封装</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">APP_ID</span> = <span class="string">&quot;28095556&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">API_KEY</span> = <span class="string">&quot;Tdi9l1a4jl7U0V1DsFz7AWpj&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&quot;v3I7gbR6PGxB978k8RsHzNQvyB2o7gbQ&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> baiduAipSdk = <span class="built_in">require</span>(<span class="string">&quot;baidu-aip-sdk&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">FaceClient</span> = <span class="keyword">new</span> baiduAipSdk.<span class="title function_">face</span>(<span class="variable constant_">APP_ID</span>, <span class="variable constant_">API_KEY</span>, <span class="variable constant_">SECRET_KEY</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">OcrClient</span> = <span class="keyword">new</span> baiduAipSdk.<span class="title function_">ocr</span>(<span class="variable constant_">APP_ID</span>, <span class="variable constant_">API_KEY</span>, <span class="variable constant_">SECRET_KEY</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SpeechClient</span> = <span class="keyword">new</span> baiduAipSdk.<span class="title function_">speech</span>(<span class="variable constant_">APP_ID</span>, <span class="variable constant_">API_KEY</span>, <span class="variable constant_">SECRET_KEY</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 人脸检测</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">method</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">image</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> imageType：BASE64/URL/FACE_TOKEN，默认 base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> userId：最多注册 20 个人脸</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> groupId：对应多个 user_id 的用户组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> groupIdList：从指定的 group 查找，用逗号分隔 (上限十个)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> faceToken：人脸图片的唯一标识</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  请求体格式化：Content-Type: application/json</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  Base64 图片：去掉头部 data:image/png;base64,</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  图片格式：支持 png/jpg/bmp/jpeg，不支持 gif</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  每个 appid 对应一个人脸库，每个用户可以多次注册一个人脸</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">AipFaceClient</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">prames</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">        newErr.<span class="property">leval</span> = <span class="number">9</span>;</span><br><span class="line">        newErr.<span class="property">title</span> = <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> result</span><br><span class="line">    <span class="keyword">let</span> method = prames.<span class="property">method</span> || <span class="string">&#x27;search&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> imageType = prames.<span class="property">imageType</span> || <span class="string">&#x27;BASE64&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (method != <span class="string">&#x27;faceDelete&#x27;</span> &amp;&amp; !prames.<span class="property">image</span>) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> = <span class="string">&#x27;请传入 image 参数&#x27;</span></span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&#x27;addUser&#x27;</span>, <span class="string">&#x27;updateUser&#x27;</span>, <span class="string">&#x27;faceDelete&#x27;</span>].<span class="title function_">includes</span>(method) &amp;&amp; !prames.<span class="property">user</span>) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> = <span class="string">&#x27;请传入 user 参数&#x27;</span></span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> user = prames.<span class="property">user</span></span><br><span class="line">    <span class="keyword">let</span> dept = prames.<span class="property">Department</span> || user.<span class="property">Department</span></span><br><span class="line">    <span class="keyword">let</span> image = prames.<span class="property">image</span>.<span class="title function_">replace</span>(<span class="string">&#x27;data:image/png;base64,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;addUser&#x27;</span>:    <span class="comment">// 注册：每个用户组可注册多次</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">FaceClient</span>.<span class="title function_">addUser</span>(image, imageType, dept, user.<span class="property">_id</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;updateUser&#x27;</span>: <span class="comment">// 更新</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">FaceClient</span>.<span class="title function_">updateUser</span>(image, imageType, dept, user.<span class="property">_id</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;faceDelete&#x27;</span>: <span class="comment">// 删除</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">FaceClient</span>.<span class="title function_">faceDelete</span>(user.<span class="property">_id</span>, dept, prames.<span class="property">faceToken</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;detect&#x27;</span>:     <span class="comment">// 检测</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">FaceClient</span>.<span class="title function_">detect</span>(image, imageType)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;search&#x27;</span>:</span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">FaceClient</span>.<span class="title function_">search</span>(image, imageType, prames.<span class="property">groupIdList</span>)</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">error_msg</span> &amp;&amp; result.<span class="property">error_msg</span> != <span class="string">&#x27;SUCCESS&#x27;</span>) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> = result.<span class="property">error_msg</span></span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文字识别</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">AipOcrClient</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">prames</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">        newErr.<span class="property">leval</span> = <span class="number">9</span>;</span><br><span class="line">        newErr.<span class="property">title</span> = <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> result, method = prames.<span class="property">method</span> || <span class="string">&#x27;accurateBasic&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!prames.<span class="property">image</span>) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> = <span class="string">&#x27;请传入 image 参数&#x27;</span></span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> image = prames.<span class="property">image</span>.<span class="title function_">replace</span>(<span class="string">&#x27;data:image/png;base64,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;accurateBasic&#x27;</span>:   <span class="comment">// 通用文字识别（高精度版）</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">OcrClient</span>.<span class="title function_">accurateBasic</span>(image, prames.<span class="property">options</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;licensePlate&#x27;</span>:    <span class="comment">// 车牌识别</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">OcrClient</span>.<span class="title function_">licensePlate</span>(image, prames.<span class="property">options</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;idcard&#x27;</span>:          <span class="comment">// 身份证</span></span><br><span class="line">            <span class="keyword">let</span> idCardSide = prames.<span class="property">idCardSide</span> || <span class="string">&#x27;front&#x27;</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">OcrClient</span>.<span class="title function_">idcard</span>(image, idCardSide, prames.<span class="property">options</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;docAnalysis&#x27;</span>:     <span class="comment">// 办公文档</span></span><br><span class="line">            <span class="keyword">let</span> lType = prames.<span class="property">languageType</span> || <span class="string">&#x27;CHN_ENG&#x27;</span></span><br><span class="line">            <span class="keyword">let</span> rType = prames.<span class="property">resultType</span> || <span class="string">&#x27;big&#x27;</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">OcrClient</span>.<span class="title function_">docAnalysis</span>(image, lType, rType, prames.<span class="property">options</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">error_msg</span>) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> = result.<span class="property">error_msg</span></span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@title</span> 语音识别：语音转文字 </span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> method：请求方法 recognize</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> speech：包含语音内容的 Buffer 对象，默认单声道、8000 采样率、wav 格式。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  声道数：声音的通道的数目，单声道使用一个喇叭，立体声两个喇叭分左右声道。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  采样频率：取样频率，指每秒钟取得声音样本的次数，频率越高则声音质量越好。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  采样位数：将采样幅度量化的取样值，是用来衡量声音波动变化的分辨率，取值 8/16。</span></span><br><span class="line"><span class="comment">  *                8 位指将数据分为 2 的 8 次方即 256 份，16 则是 16 次方。</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> format：音频格式</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  pcm：不压缩不需要解码的原始格式，根据采样频率和位数对量化数据进行编码。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  wav：不压缩的无损格式，只是在 PCM 数据前加上 44 字节来描述采样率、声道数等。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  amr：压缩比大于 mp3 的自适应多速率编码格式，由于质量较差而常用于语音通话。</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> rate：采样频率，取值 8000 / 16000</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> options：主要包含 用户唯一标识 cuid、语言类型 dev_pid。</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@title</span> 语音合成：文字转语音</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> method：请求方法 text2audio</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> text：UTF-8 编码文本、长度小于 1024 字节</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> text2audio options：spd 语速 0-9、pit 音调 0-9、vol 音量 0-15、per 发音人</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@title</span> 数据转换</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  base64 编码：Buffer.from(&#x27;hello world&#x27;, &#x27;utf8&#x27;).toString(&#x27;base64&#x27;)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  base64 解码：Buffer.from(&#x27;aGVsbG8gd29ybGQ=&#x27;, &#x27;base64&#x27;)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">AipSpeechClient</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">prames</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">        newErr.<span class="property">leval</span> = <span class="number">9</span>;</span><br><span class="line">        newErr.<span class="property">title</span> = <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">switch</span> (prames.<span class="property">method</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;recognize&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (!prames.<span class="property">speech</span>) &#123;</span><br><span class="line">                newErr.<span class="property">message</span> = <span class="string">&#x27;请传入参数 speech&#x27;</span></span><br><span class="line">                <span class="keyword">throw</span> newErr</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> speech = prames.<span class="property">speech</span>.<span class="title function_">replace</span>(<span class="string">&#x27;data:audio/wav;base64,&#x27;</span></span><br><span class="line">            <span class="keyword">let</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(speech, <span class="string">&#x27;&#x27;</span>), <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">            <span class="keyword">let</span> format = prames.<span class="property">format</span> || <span class="string">&#x27;wav&#x27;</span></span><br><span class="line">            <span class="keyword">let</span> rate = prames.<span class="property">rate</span> || <span class="number">8000</span></span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">SpeechClient</span>.<span class="title function_">recognize</span>(buffer, format, rate, prames.<span class="property">options</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;text2audio&#x27;</span>:</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">if</span> (!prames.<span class="property">text</span>) &#123;</span><br><span class="line">                newErr.<span class="property">message</span> = <span class="string">&#x27;请传入 text 参数&#x27;</span></span><br><span class="line">                <span class="keyword">throw</span> newErr</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> options = prames.<span class="property">options</span> || &#123; <span class="attr">spd</span>: <span class="number">5</span>, <span class="attr">pit</span>: <span class="number">5</span>, <span class="attr">per</span>: <span class="number">0</span> &#125;</span><br><span class="line">            result = <span class="keyword">await</span> <span class="title class_">SpeechClient</span>.<span class="title function_">text2audio</span>(prames.<span class="property">text</span>, options)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newErr.<span class="property">message</span> = result.<span class="property">error_msg</span> || result.<span class="property">err_msg</span></span><br><span class="line">    <span class="keyword">if</span> (newErr.<span class="property">message</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;limit reached&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> =  <span class="string">&#x27;没有当前接口额度&#x27;</span></span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newErr.<span class="property">message</span> &amp;&amp; newErr.<span class="property">message</span> != <span class="string">&#x27;success.&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> newErr</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prames.<span class="property">method</span> == <span class="string">&#x27;recognize&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result.<span class="property">result</span>[<span class="number">0</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;data:audio/wav;base64,&#x27;</span> + <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result.<span class="property">data</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、H5-识别"><a href="#三、H5-识别" class="headerlink" title="三、H5 识别"></a>三、H5 识别</h1><blockquote>
<p>人脸识别通过浏览器接口 navigator.mediaDevices.getUserMedia 实时获取视频流数据，然后通过第三方插件 face-api.js&#x2F;tracking.js 识别人脸，需要注意的是浏览器存在兼容问题和必须使用 https 网址。</p>
</blockquote>
<h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">input</span>-file-control &#123;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    <span class="attr">position</span>: relative;</span><br><span class="line">    margin-<span class="attr">right</span>: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">input</span>-file-control input &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">position</span>: absolute;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attr">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    z-<span class="attr">index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> onchange：报错 function 未定义，内容改变并且失焦后触发</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">ng</span>-change：必须配合 ng-model 使用，只要内容改变就会触发</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> angular.element(this).scope().fn：自定义 onchange 事件</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;input-file-control&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>图片上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">capture</span>=<span class="string">&quot;camera&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onchange</span>=<span class="string">&quot;angular.element(this).scope().changeImg(this.files[0])&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">$scope.<span class="property">changeImg</span> = <span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file) <span class="keyword">return</span>;</span><br><span class="line">    <span class="title function_">fileReader</span>(file).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">baseImg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>, baseImg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fileReader</span> (file, method) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        method = method || <span class="string">&#x27;readAsDataURL&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        reader[method](file);</span><br><span class="line">        reader.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;图片读取失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compress</span> (baseImg) &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span> = baseImg;</span><br><span class="line">    img.<span class="title function_">setAttribute</span>(<span class="string">&quot;crossOrigin&quot;</span>, <span class="string">&quot;Anonymous&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> </span><br><span class="line">        (img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>),</span><br><span class="line">                ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">                w = img.<span class="property">width</span>,</span><br><span class="line">                h = img.<span class="property">height</span>;</span><br><span class="line">            canvas.<span class="property">width</span> = w;</span><br><span class="line">            canvas.<span class="property">height</span> = h;</span><br><span class="line">            ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">            <span class="keyword">let</span> baseImg = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>, <span class="number">0.6</span>)</span><br><span class="line">            <span class="title function_">resolve</span>(baseImg);</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="人脸拍照"><a href="#人脸拍照" class="headerlink" title="人脸拍照"></a>人脸拍照</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$scope.<span class="property">onShowFace</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    imanDialog.<span class="title function_">showFace</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">base64Img</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>, base64Img)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showFace</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">var</span> defer = $q.<span class="title function_">defer</span>();</span><br><span class="line">    <span class="keyword">var</span> scope = $rootScope.$new(<span class="literal">true</span>);</span><br><span class="line">    scope.<span class="property">scanTip</span> = <span class="string">&#x27;正在调取摄像头&#x27;</span></span><br><span class="line">    scope.<span class="property">video</span> = <span class="literal">null</span></span><br><span class="line">    scope.<span class="property">canvas</span> = <span class="literal">null</span></span><br><span class="line">    scope.<span class="property">trackerTask</span> = <span class="literal">null</span></span><br><span class="line">    scope.<span class="property">tracker</span> = <span class="literal">null</span></span><br><span class="line">    scope.<span class="property">context</span> = <span class="literal">null</span></span><br><span class="line">    scope.<span class="property">stream</span> = <span class="literal">null</span></span><br><span class="line">    scope.<span class="property">isTokePhoto</span> = <span class="literal">false</span></span><br><span class="line">    scope.<span class="property">base64Img</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> templateString = <span class="string">&#x27;&lt;ion-modal-view class=&quot;im-modal im-modal--face&quot;&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;scanTip&quot;&gt;&#123;&#123;scanTip&#125;&#125;&lt;/div&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;video ng-if=&quot;!base64Img&quot; id=&quot;imVideo&quot; width=&quot;400&quot; height=&quot;300&quot; preload &#x27;</span> + </span><br><span class="line">        <span class="string">&#x27;autoplay loop muted&gt;&lt;/video&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;canvas ng-if=&quot;!base64Img&quot; id=&quot;imCanvas&quot; width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&lt;img ng-if=&quot;base64Img&quot; src=&quot;&#123;&#123;base64Img&#125;&#125;&quot; width=&quot;400&quot; height=&quot;300&quot; /&gt;&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;&lt;/ion-modal-view&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> modal = $ionicModal.<span class="title function_">fromTemplate</span>(templateString, &#123;</span><br><span class="line">        <span class="attr">scope</span>: scope,</span><br><span class="line">        <span class="attr">animation</span>: <span class="string">&#x27;im-slide-in-right&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    scope.$on(<span class="string">&#x27;modal.shown&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;</span><br><span class="line">            <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">300</span>, <span class="attr">facingMode</span>: <span class="string">&quot;user&quot;</span> &#125;</span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params">stream</span>) &#123;</span><br><span class="line">            scope.<span class="property">stream</span> = stream</span><br><span class="line">            scope.<span class="property">video</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;imVideo&#x27;</span>)</span><br><span class="line">            scope.<span class="property">canvas</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;imCanvas&#x27;</span>)</span><br><span class="line">            scope.<span class="property">context</span> = scope.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>, &#123;<span class="attr">willReadFrequently</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;srcObject&quot;</span> <span class="keyword">in</span> scope.<span class="property">video</span>) &#123;</span><br><span class="line">                scope.<span class="property">video</span>.<span class="property">srcObject</span> = stream</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                scope.<span class="property">video</span>.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(stream)</span><br><span class="line">            &#125;</span><br><span class="line">            scope.<span class="property">video</span>.<span class="property">onloadedmetadata</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; scope.<span class="property">video</span>.<span class="title function_">play</span>() &#125;</span><br><span class="line">            scope.<span class="property">tracker</span> = <span class="keyword">new</span> tracking.<span class="title class_">ObjectTracker</span>(<span class="string">&#x27;face&#x27;</span>)</span><br><span class="line">            scope.<span class="property">tracker</span>.<span class="title function_">setInitialScale</span>(<span class="number">4</span>)</span><br><span class="line">            scope.<span class="property">tracker</span>.<span class="title function_">setStepSize</span>(<span class="number">2</span>)</span><br><span class="line">            scope.<span class="property">tracker</span>.<span class="title function_">setEdgesDensity</span>(<span class="number">0.1</span>)</span><br><span class="line">            scope.<span class="property">trackerTask</span> = tracking.<span class="title function_">track</span>(<span class="string">&#x27;#imVideo&#x27;</span>, scope.<span class="property">tracker</span>, &#123;<span class="attr">camera</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">            scope.<span class="property">tracker</span>.<span class="title function_">on</span>(<span class="string">&#x27;track&#x27;</span>, handleTracked)</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">            _this.<span class="title function_">toastBottom</span>(<span class="string">&#x27;访问用户媒体失败：&#x27;</span> + error.<span class="property">message</span>)</span><br><span class="line">            modal.<span class="title function_">hide</span>();</span><br><span class="line">            defer.<span class="title function_">reject</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleTracked</span> (event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">data</span>.<span class="property">length</span> == <span class="number">0</span> &amp;&amp; !scope.<span class="property">isTokePhoto</span>) &#123;</span><br><span class="line">            scope.<span class="property">scanTip</span> = <span class="string">&#x27;未识别到人脸&#x27;</span></span><br><span class="line">            scope.$apply()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        scope.<span class="property">context</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        event.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">rect</span>) &#123;</span><br><span class="line">            scope.<span class="property">context</span>.<span class="property">strokeStyle</span> = <span class="string">&#x27;#eb652e&#x27;</span></span><br><span class="line">            scope.<span class="property">context</span>.<span class="title function_">strokeRect</span>(rect.<span class="property">x</span>, rect.<span class="property">y</span>, rect.<span class="property">width</span>, rect.<span class="property">height</span>)</span><br><span class="line">            scope.<span class="property">context</span>.<span class="property">font</span> = <span class="string">&#x27;11px Helvetica&#x27;</span></span><br><span class="line">            scope.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">            <span class="keyword">let</span> rectWidth = rect.<span class="property">x</span> + rect.<span class="property">width</span> + <span class="number">5</span></span><br><span class="line">            scope.<span class="property">context</span>.<span class="title function_">fillText</span>(<span class="string">&#x27;x: &#x27;</span> + rect.<span class="property">x</span> + <span class="string">&#x27;px&#x27;</span>, rectWidth, rect.<span class="property">y</span> + <span class="number">11</span>)</span><br><span class="line">            scope.<span class="property">context</span>.<span class="title function_">fillText</span>(<span class="string">&#x27;y: &#x27;</span> + rect.<span class="property">y</span> + <span class="string">&#x27;px&#x27;</span>, rectWidth, rect.<span class="property">y</span> + <span class="number">22</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> (!scope.<span class="property">isTokePhoto</span>) &#123;</span><br><span class="line">            scope.<span class="property">isTokePhoto</span> = <span class="literal">true</span></span><br><span class="line">            scope.<span class="property">scanTip</span> = <span class="string">&#x27;正在拍照，请保持当前姿势 2 秒&#x27;</span></span><br><span class="line">            scope.$apply()</span><br><span class="line">            <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                scope.<span class="property">context</span>.<span class="title function_">drawImage</span>(scope.<span class="property">video</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">                scope.<span class="property">base64Img</span> = scope.<span class="property">canvas</span>.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>, <span class="number">0.6</span>)</span><br><span class="line">                modal.<span class="title function_">hide</span>()</span><br><span class="line">                defer.<span class="title function_">resolve</span>(scope.<span class="property">base64Img</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    scope.$on(<span class="string">&#x27;modal.hidden&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        scope.<span class="property">context</span> &amp;&amp; scope.<span class="property">context</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        scope.<span class="property">tracker</span> &amp;&amp; scope.<span class="property">tracker</span>.<span class="title function_">removeListener</span>(<span class="string">&#x27;track&#x27;</span>, handleTracked)</span><br><span class="line">        scope.<span class="property">trackerTask</span> &amp;&amp; scope.<span class="property">trackerTask</span>.<span class="title function_">stop</span>()  <span class="comment">// 停止侦测</span></span><br><span class="line">        <span class="keyword">if</span> (scope.<span class="property">stream</span>) &#123;</span><br><span class="line">            scope.<span class="property">stream</span>.<span class="property">enabled</span> = <span class="literal">false</span></span><br><span class="line">            scope.<span class="property">stream</span>.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>()</span><br><span class="line">            scope.<span class="property">stream</span>.<span class="title function_">getVideoTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (scope.<span class="property">video</span>.<span class="property">srcObject</span>) &#123;</span><br><span class="line">            scope.<span class="property">video</span>.<span class="property">srcObject</span>.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(scope.<span class="property">video</span>.<span class="property">src</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        $timeout(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            modal.<span class="property">scope</span>.$destroy();</span><br><span class="line">            modal.<span class="property">$el</span>.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;, modal.<span class="property">hideDelay</span> || <span class="number">320</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    modal.<span class="title function_">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> defer.<span class="property">promise</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="语音录制"><a href="#语音录制" class="headerlink" title="语音录制"></a>语音录制</h2>  <div align="center">
    <img src="/images/web/audio-view.png" alt="浏览器结构" width="50%">
  </div>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.im-toast-view</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">95%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">15px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.im-toast-view</span> <span class="selector-class">.im-voice-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.im-toast-view</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">54px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: backgroundInfinite7 <span class="number">2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: backgroundInfinite6 <span class="number">2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: backgroundInfinite5 <span class="number">2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: backgroundInfinite4 <span class="number">2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: backgroundInfinite3 <span class="number">2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: backgroundInfinite2 <span class="number">2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.voice-animation</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">7</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> backgroundInfinite2 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">10%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">15%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> backgroundInfinite3 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">25%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">30%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> backgroundInfinite4 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">40%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">45%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> backgroundInfinite5 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">55%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">60%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> backgroundInfinite6 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">70%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">75%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> backgroundInfinite7 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">85%</span> &#123; <span class="attribute">background</span>: transparent; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">90%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">background</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.im-audio--item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.im-audio-view</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#d5e5ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.im-item-view--text</span> <span class="selector-class">.label</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-style</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-style</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#4c4c4c</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-style</span> <span class="selector-class">.small</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#4c4c4c</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-top-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-left-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-bottom-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-style</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">11px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-style</span> <span class="selector-class">.large</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-playing</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: audioPlaying <span class="number">1.2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.audio-playing</span> <span class="selector-class">.large</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: audioPlaying2 <span class="number">1.2s</span> ease-in-out infinite;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> audioPlaying &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">10%</span> &#123; <span class="attribute">opacity</span>: <span class="number">1</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> audioPlaying2 &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">50%</span> &#123; <span class="attribute">opacity</span>: <span class="number">1</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">60%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">im-card</span> <span class="attr">linenumber</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;im-audio--item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>录制语音：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;im-audio-view&quot;</span> <span class="attr">ng-click</span>=<span class="string">&quot;playAudio()&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;audio&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;audio-style&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">ng-class</span>=<span class="string">&quot;&#123;&#x27;audio-playing&#x27;: audioStatus == 2&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>&#123;&#123;duration&#125;&#125;&quot;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">im-item-view</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;im-item-view--text&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">&quot;识别结果：&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">&quot;speechData.audioText&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">im-item-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">im-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;im-toast-view&quot;</span> <span class="attr">ng-if</span>=<span class="string">&quot;audioStatus == 1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;im-voice-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;ion-ios-mic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;voice-animation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>手指上滑，取消录制<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;primary ion-ios-mic-outline&quot;</span> <span class="attr">on-hold</span>=<span class="string">&quot;onStartAudio()&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">on-release</span>=<span class="string">&quot;onStopAudio()&quot;</span> <span class="attr">on-swipe-up</span>=<span class="string">&quot;onStopAudio(true)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;audioStatus == 1 ? &#x27;录音中...&#x27; : &#x27;按住录音&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> createScript：存储用于语音识别的 PCM 音频、语音时长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> MediaRecorder：存储用于网页回放的 audio/webm 音频</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> wav 格式：一般是在 pcm 文件前增加 44 个字节的文件头</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> createScript：存储单声道 PCM 数据</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">$scope.<span class="property">audioStatus</span> = <span class="number">0</span>    <span class="comment">// 0 初始、1 正在录制、2 正在播放</span></span><br><span class="line">$scope.<span class="property">audioCtx</span> = <span class="keyword">new</span> <span class="title class_">AudioContext</span>();</span><br><span class="line"></span><br><span class="line">$scope.<span class="property">onStartAudio</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!navigator.<span class="property">mediaDevices</span>) &#123; </span><br><span class="line">        imanDialog.<span class="title function_">toastBottom</span>(<span class="string">&#x27;当前浏览器不支持麦克风&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    $scope.<span class="property">audio</span> = <span class="literal">null</span></span><br><span class="line">    $scope.<span class="property">mediaRecorder</span> = <span class="literal">null</span></span><br><span class="line">    $scope.<span class="property">duration</span> = <span class="number">0</span></span><br><span class="line">    $scope.<span class="property">bufferSize</span> = <span class="number">0</span></span><br><span class="line">    $scope.<span class="property">bufferArray</span> = []</span><br><span class="line">    navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;<span class="attr">audio</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">        $scope.<span class="property">stream</span> = stream</span><br><span class="line">        $scope.<span class="property">audioStatus</span> = <span class="number">1</span></span><br><span class="line">        $scope.<span class="property">audioInput</span> = $scope.<span class="property">audioCtx</span>.<span class="title function_">createMediaStreamSource</span>(stream)</span><br><span class="line">        <span class="keyword">let</span> createScript = $scope.<span class="property">audioCtx</span>.<span class="property">createScriptProcessor</span> || </span><br><span class="line">                           $scope.<span class="property">audioCtx</span>.<span class="property">createJavaScriptNode</span>;</span><br><span class="line">        <span class="comment">// 采集 4096 就触发一次 onaudioprocess、声道数</span></span><br><span class="line">        $scope.<span class="property">recorder</span> = createScript.<span class="title function_">apply</span>($scope.<span class="property">audioCtx</span>, [<span class="number">4096</span>, <span class="number">1</span>]);  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开始录音</span></span><br><span class="line">        $scope.<span class="property">audioInput</span>.<span class="title function_">connect</span>($scope.<span class="property">recorder</span>);</span><br><span class="line">        $scope.<span class="property">recorder</span>.<span class="title function_">connect</span>($scope.<span class="property">audioCtx</span>.<span class="property">destination</span>)</span><br><span class="line">        $scope.<span class="property">recorder</span>.<span class="property">onaudioprocess</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个 Float32Array 的 PCM 数据</span></span><br><span class="line">            <span class="keyword">let</span> channelData = e.<span class="property">inputBuffer</span>.<span class="title function_">getChannelData</span>(<span class="number">0</span>) </span><br><span class="line">            $scope.<span class="property">bufferArray</span>.<span class="title function_">push</span>(channelData.<span class="title function_">slice</span>(<span class="number">0</span>));</span><br><span class="line">            $scope.<span class="property">bufferSize</span> += channelData.<span class="property">length</span></span><br><span class="line">        &#125;; </span><br><span class="line">        <span class="keyword">let</span> chunks = []</span><br><span class="line">        $scope.<span class="property">mediaRecorder</span> = <span class="keyword">new</span> <span class="title class_">MediaRecorder</span>(stream);</span><br><span class="line">        $scope.<span class="property">mediaRecorder</span>.<span class="title function_">start</span>();</span><br><span class="line">        $scope.<span class="property">mediaRecorder</span>.<span class="property">ondataavailable</span> = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">            chunks.<span class="title function_">push</span>(e.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        $scope.<span class="property">mediaRecorder</span>.<span class="property">onstop</span> = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>(chunks, &#123;<span class="attr">type</span>:<span class="string">&quot;audio/webm;codecs=opus&quot;</span>&#125;); </span><br><span class="line">            <span class="keyword">let</span> audioUrl = (<span class="variable language_">window</span>.<span class="property">URL</span> || webkitURL).<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">            $scope.<span class="property">audio</span> = <span class="keyword">new</span> <span class="title class_">Audio</span>(audioUrl)</span><br><span class="line">        &#125;</span><br><span class="line">        $scope.$apply()</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        imanDialog.<span class="title function_">toastBottom</span>((err &amp;&amp; err.<span class="property">message</span> || err))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.<span class="property">onStopAudio</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!$scope.<span class="property">recorder</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    $scope.<span class="property">recorder</span>.<span class="title function_">disconnect</span>();</span><br><span class="line">    $scope.<span class="property">audioInput</span>.<span class="title function_">disconnect</span>();</span><br><span class="line">    $scope.<span class="property">stream</span>.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>();</span><br><span class="line">    $scope.<span class="property">duration</span> = <span class="title function_">getDuration</span>();</span><br><span class="line">    $scope.<span class="property">audioStatus</span> = <span class="number">0</span></span><br><span class="line">    $scope.<span class="property">mediaRecorder</span>.<span class="title function_">stop</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.<span class="property">playAudio</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 播放：createBufferSource 方式、audio 方式</span></span><br><span class="line">    <span class="keyword">if</span> ($scope.<span class="property">audioStatus</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        $scope.<span class="property">audioStatus</span> = <span class="number">0</span></span><br><span class="line">        $scope.<span class="property">audio</span>.<span class="title function_">pause</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    $scope.<span class="property">audioStatus</span> = <span class="number">2</span></span><br><span class="line">    $scope.<span class="property">audio</span>.<span class="title function_">play</span>();</span><br><span class="line">    $scope.<span class="property">audio</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $scope.<span class="property">audioStatus</span> = <span class="number">0</span></span><br><span class="line">        $scope.$apply()</span><br><span class="line">    &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDuration</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> duration = (<span class="number">4096</span>*$scope.<span class="property">bufferArray</span>.<span class="property">length</span>) / $scope.<span class="property">audioCtx</span>.<span class="property">sampleRate</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">RoundNum</span>(duration, &#123; <span class="title class_">RoundType</span>: <span class="number">3</span>, <span class="title class_">RoundValue</span>: <span class="number">5</span>, <span class="title class_">Precision</span>: <span class="number">2</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RoundNum</span> (val, round) &#123;</span><br><span class="line">    <span class="keyword">var</span> returnValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (val == <span class="literal">undefined</span> || val == <span class="literal">null</span> || val.<span class="title function_">toString</span>().<span class="title function_">trim</span>() == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (round &amp;&amp; angular.<span class="title function_">isObject</span>(round)) &#123;</span><br><span class="line">        round.<span class="property">Precision</span> = round.<span class="property">Precision</span> || <span class="number">0</span>;   <span class="comment">// 精度</span></span><br><span class="line">        round.<span class="property">RoundType</span> = round.<span class="property">RoundType</span> || <span class="number">3</span>;   <span class="comment">// 舍入类型</span></span><br><span class="line">        round.<span class="property">RoundValue</span> = round.<span class="property">RoundValue</span> || <span class="number">5</span>; <span class="comment">// 舍入值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (round.<span class="property">RoundType</span> == <span class="number">1</span>) &#123;               <span class="comment">// 1 全部进位</span></span><br><span class="line">            returnValue = <span class="built_in">parseInt</span>(val * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span> + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (returnValue % <span class="number">10</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                returnValue = <span class="built_in">parseInt</span>(val * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span>)) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                returnValue = <span class="built_in">parseInt</span>(val * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            returnValue = returnValue / <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (round.<span class="property">RoundType</span> == <span class="number">2</span>) &#123;       <span class="comment">// 2 全部舍位</span></span><br><span class="line">            <span class="keyword">var</span> _Precision = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span>)</span><br><span class="line">            returnValue = <span class="built_in">parseInt</span>(val * _Precision) / _Precision;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                                 <span class="comment">// 3 按值舍入</span></span><br><span class="line">            returnValue = <span class="built_in">parseInt</span>(val * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span> + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (returnValue % <span class="number">10</span> &gt;= round.<span class="property">RoundValue</span>) &#123;</span><br><span class="line">                returnValue = <span class="built_in">parseInt</span>(val * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span>)) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                returnValue = <span class="built_in">parseInt</span>(returnValue / <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            returnValue = returnValue / <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, round.<span class="property">Precision</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(returnValue).<span class="title function_">toFixed</span>(round.<span class="property">Precision</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="语音处理"><a href="#语音处理" class="headerlink" title="语音处理"></a>语音处理</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$scope.<span class="property">onSpeechRecognize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// speech 语音对象：单声道、8000 采样率、wav 格式</span></span><br><span class="line">    <span class="keyword">let</span> bufferData = <span class="title function_">mergeBuffers</span>($scope.<span class="property">bufferArray</span>, $scope.<span class="property">bufferSize</span>);</span><br><span class="line">    <span class="keyword">let</span> bufferWav = <span class="title function_">encodeToWAV</span>(bufferData)</span><br><span class="line">    <span class="title class_">DataService</span>.<span class="title function_">fileReader</span>(bufferWav).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">baseAudio</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">AipSpeechClient</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;recognize&#x27;</span>, <span class="attr">speech</span>: baseAudio &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据合并压缩：将多个 Float32Array 数组合并为一个 Float32Array</span></span><br><span class="line"><span class="comment"> * 根据采样率压缩，比如输入 48k 输出 16k，则输入数据中每隔 3 取 1 位</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">float32array</span>&#125; data        [-1, 1]的 pcm 数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; inputSampleRate   输入采样率</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; outputSampleRate  输出采样率</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span>  &#123;<span class="type">float32array</span>&#125;          压缩处理后的二进制数据</span></span><br><span class="line"><span class="comment">**/</span>     </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeBuffers</span> (bufferList, length, inputSampleRate, outputSampleRate) &#123;</span><br><span class="line">    <span class="comment">// 默认</span></span><br><span class="line">    inputSampleRate = inputSampleRate || (<span class="keyword">new</span> <span class="title class_">AudioContext</span>().<span class="property">sampleRate</span>)</span><br><span class="line">    outputSampleRate = outputSampleRate || <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并</span></span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bufferList.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        data.<span class="title function_">set</span>(bufferList[i], offset);</span><br><span class="line">        offset += bufferList[i].<span class="property">length</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    <span class="keyword">var</span> compression = <span class="built_in">parseInt</span> (inputSampleRate / outputSampleRate);</span><br><span class="line">    <span class="keyword">var</span> outLength = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(data.<span class="property">length</span> / compression);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(outLength);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; outLength; i += <span class="number">1</span>) &#123;</span><br><span class="line">        result[i] = data[<span class="title class_">Math</span>.<span class="title function_">floor</span>(s)];</span><br><span class="line">        s += compression;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * wav 格式一般是在 pcm 文件前增加 44 个字节的文件头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">DataView</span>&#125; bytes           pcm 二进制数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125;  SampleRate       输入采样率，输出为 8000</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125;  sampleBits       输出采样位数，取值 8、16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">DataView</span>&#125;               wav 二进制数据</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encodeToWAV</span> (bytes, sampleRate, sampleBits=<span class="number">16</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dataLength = bytes.<span class="property">length</span> * (sampleBits / <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">44</span> + dataLength);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line">    <span class="keyword">var</span> channelCount = <span class="number">1</span>;  <span class="comment">// 百度只支持单声道</span></span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> writeString = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            view.<span class="title function_">setUint8</span>(offset + i, str.<span class="title function_">charCodeAt</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write PCM</span></span><br><span class="line">    <span class="comment">// 资源交换文件标识符</span></span><br><span class="line">    <span class="title function_">writeString</span>(<span class="string">&#x27;RIFF&#x27;</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 下个地址开始到文件尾总字节数,即文件大小-8</span></span><br><span class="line">    view.<span class="title function_">setUint32</span>(offset, <span class="number">36</span> + dataLength, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// WAV文件标志</span></span><br><span class="line">    <span class="title function_">writeString</span>(<span class="string">&#x27;WAVE&#x27;</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 波形格式标志</span></span><br><span class="line">    <span class="title function_">writeString</span>(<span class="string">&#x27;fmt &#x27;</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 过滤字节,一般为 0x10 = 16</span></span><br><span class="line">    view.<span class="title function_">setUint32</span>(offset, <span class="number">16</span>, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 格式类别 (PCM形式采样数据)</span></span><br><span class="line">    view.<span class="title function_">setUint16</span>(offset, <span class="number">1</span>, <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 通道数</span></span><br><span class="line">    view.<span class="title function_">setUint16</span>(offset, channelCount, <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 采样率，每秒样本数，表示每个通道的播放速度</span></span><br><span class="line">    view.<span class="title function_">setUint32</span>(offset, sampleRate, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 波形数据传输率 (每秒平均字节数) 单声道 × 每秒数据位数 × 每样本数据位 / 8</span></span><br><span class="line">    view.<span class="title function_">setUint32</span>(offset, channelCount * sampleRate * (sampleBits / <span class="number">8</span>), <span class="literal">true</span>); </span><br><span class="line">    offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 快数据调整数 采样一次占用字节数 单声道 × 每样本的数据位数 / 8</span></span><br><span class="line">    view.<span class="title function_">setUint16</span>(offset, channelCount * (sampleBits / <span class="number">8</span>), <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 每样本数据位数</span></span><br><span class="line">    view.<span class="title function_">setUint16</span>(offset, sampleBits, <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 数据标识符</span></span><br><span class="line">    <span class="title function_">writeString</span>(<span class="string">&#x27;data&#x27;</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 采样数据总数，即数据总大小-44</span></span><br><span class="line">    view.<span class="title function_">setUint32</span>(offset, dataLength, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入采样数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.<span class="property">length</span>; i += <span class="number">1</span>, offset += sampleBits / <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="title class_">Math</span>.<span class="title function_">max</span>(-<span class="number">1</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, bytes[i]));</span><br><span class="line">        <span class="keyword">var</span> val = s &lt; <span class="number">0</span> ? s * <span class="number">0x8000</span> : s * <span class="number">0x7fff</span>;</span><br><span class="line">        <span class="keyword">if</span> (sampleBits == <span class="number">8</span>) &#123;</span><br><span class="line">            view.<span class="title function_">setInt8</span>(offset, <span class="built_in">parseInt</span>(<span class="number">255</span> / (<span class="number">65535</span>/(val+<span class="number">32768</span>)), <span class="number">10</span>), <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view.<span class="title function_">setInt16</span>(offset, val, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([view], &#123; <span class="attr">type</span>: <span class="string">&#x27;audio/wav&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encodeToPCM</span> (bytes, sampleBits=<span class="number">16</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dataLength = bytes.<span class="property">length</span> * (sampleBits / <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(dataLength);</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, offset=<span class="number">0</span>; i &lt; bytes.<span class="property">length</span>; i += <span class="number">1</span>, offset += sampleBits/<span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="title class_">Math</span>.<span class="title function_">max</span>(-<span class="number">1</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, bytes[i]));</span><br><span class="line">        <span class="keyword">var</span> val = s &lt; <span class="number">0</span> ? s * <span class="number">0x8000</span> : s * <span class="number">0x7fff</span>;</span><br><span class="line">        <span class="keyword">if</span> (sampleBits === <span class="number">8</span>) &#123;</span><br><span class="line">            view.<span class="title function_">setInt8</span>(offset, <span class="built_in">parseInt</span>(<span class="number">255</span> / (<span class="number">65535</span>/(val+<span class="number">32768</span>)), <span class="number">10</span>), <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view.<span class="title function_">setInt16</span>(offset, val, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> view.<span class="property">buffer</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、微信识别"><a href="#四、微信识别" class="headerlink" title="四、微信识别"></a>四、微信识别</h1><blockquote>
<p>微信浏览器无法调用 getUserMedia，而且必须使用微信的人脸识别而不能使用第三方插件。</p>
</blockquote>
<h2 id="拍照上传"><a href="#拍照上传" class="headerlink" title="拍照上传"></a>拍照上传</h2>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 小程序</span><br><span class="line"><span class="tag">&lt;<span class="name">van-image</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">round</span> <span class="attr">fit</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> @<span class="attr">click</span>=<span class="string">&quot;toCam(&#x27;camera&#x27;)&quot;</span>&gt;</span>拍照认证<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;toCam(&#x27;album&#x27;)&quot;</span>&gt;</span>上传照片认证<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;fileChange&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">ref</span>=<span class="string">&quot;avatarCamera&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">toCam(type) &#123;</span><br><span class="line">    let cameraInput = this.$refs[&#x27;avatarCamera&#x27;];</span><br><span class="line">    if (type === &#x27;camera&#x27;) &#123;</span><br><span class="line">      // 调起前置摄像头</span><br><span class="line">      cameraInput.setAttribute(&#x27;capture&#x27;, &#x27;user&#x27;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      cameraInput.removeAttribute(&#x27;capture&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    cameraInput.click();</span><br><span class="line">&#125;,</span><br><span class="line">async fileChange(e) &#123;</span><br><span class="line">    let files = e.target.files;</span><br><span class="line">    if (!files || files.length === 0) return;</span><br><span class="line">    let file = files[0];</span><br><span class="line">    const res = await this.$wxUtils.compressImg(file);</span><br><span class="line">    this.imgSrc = res.afterSrc;</span><br><span class="line">    // 调用后端接口验证身份</span><br><span class="line">    this.fetchfaceDetect(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 公众号</span><br><span class="line"><span class="tag">&lt;<span class="name">van-image</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">round</span> <span class="attr">fit</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> @<span class="attr">click</span>=<span class="string">&quot;takePhoto(&#x27;camera&#x27;)&quot;</span>&gt;</span>拍照认证<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;takePhoto(&#x27;album&#x27;)&quot;</span>&gt;</span>上传图片认证<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">created() &#123;</span><br><span class="line">    this.checkWxConfig();</span><br><span class="line">&#125;,</span><br><span class="line">async checkWxConfig() &#123;</span><br><span class="line">    const res = await getWxJsApiconfig();</span><br><span class="line">    const &#123; appId, timestamp, nonceStr, signature &#125; = res || &#123;&#125;;</span><br><span class="line">    window.wx.config(&#123;</span><br><span class="line">        debug: false,</span><br><span class="line">        appId,</span><br><span class="line">        timestamp,</span><br><span class="line">        nonceStr,</span><br><span class="line">        signature,</span><br><span class="line">        jsApiList: [&#x27;checkJsApi&#x27;, &#x27;chooseImage&#x27;, &#x27;getLocalImgData&#x27;],</span><br><span class="line">    &#125;);</span><br><span class="line">    window.wx.ready(() =&gt; &#123;</span><br><span class="line">        window.wx.checkJsApi(&#123;</span><br><span class="line">            jsApiList: [&#x27;checkJsApi&#x27;, &#x27;chooseImage&#x27;, &#x27;getLocalImgData&#x27;],</span><br><span class="line">            success: data =&gt; &#123;</span><br><span class="line">              console.log(&#x27;配置检查结果成功&#x27;, data);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: data =&gt; &#123;</span><br><span class="line">              console.log(&#x27;配置检查结果失败&#x27;, data);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    window.wx.error(err =&gt; &#123;</span><br><span class="line">        console.log(&#x27;微信配置错误~~~&#x27;, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">takePhoto(sourceType) &#123;</span><br><span class="line">    if (!this.$wxUtils.isWeiXin()) &#123;</span><br><span class="line">        this.$toast(&#x27;请在微信公众号或微信小程序环境下使用该服务&#x27;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    window.wx.chooseImage(&#123;</span><br><span class="line">        count: 1, // 默认9</span><br><span class="line">        sizeType: [&#x27;original&#x27;, &#x27;compressed&#x27;],</span><br><span class="line">        sourceType: [sourceType], // &#x27;album&#x27; 相册, &#x27;camera&#x27; 相机</span><br><span class="line">        success: data =&gt; &#123;</span><br><span class="line">            window.wx.getLocalImgData(&#123;</span><br><span class="line">                localId: data.localIds[0],</span><br><span class="line">                success: res =&gt; &#123;</span><br><span class="line">                    let localData = res.localData;</span><br><span class="line">                    // 兼容处理：安卓获取的图片 base64 码没有前缀，而苹果有</span><br><span class="line">                    if (localData.indexOf(&#x27;data:image&#x27;) === -1) &#123;</span><br><span class="line">                        localData = &#x27;data:image/png;base64,&#x27; + localData;</span><br><span class="line">                    &#125;</span><br><span class="line">                    localData = localData.replace(/\r|\n/g, &#x27;&#x27;).replace</span><br><span class="line">                    (&#x27;data:image/jgp&#x27;, &#x27;data:image/jpeg&#x27;);</span><br><span class="line">                    this.imgSrc = localData;</span><br><span class="line">                    this.fetchfaceDetect();</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: error =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;转换图片为 base64 失败&#x27;, error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: error =&gt; &#123;</span><br><span class="line">            console.log(&#x27;调起相机失败&#x27;, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">fetchfaceDetect(file) &#123;</span><br><span class="line">    const toast = this.$toast.loading(&#123;</span><br><span class="line">        mask: true,</span><br><span class="line">        duration: 0,</span><br><span class="line">        loadingType: &#x27;spinner&#x27;,</span><br><span class="line">        message: &#x27;识别中...&#x27;,</span><br><span class="line">    &#125;);</span><br><span class="line">    const &#123; name, idCard &#125; = this.$route.query;</span><br><span class="line">    const url = &#x27;/ehCard/healthCard/faceDetect&#x27;;</span><br><span class="line">    let params = new FormData();</span><br><span class="line">    params.append(&#x27;file&#x27;, file);</span><br><span class="line">    params.append(&#x27;name&#x27;, name);</span><br><span class="line">    params.append(&#x27;idCard&#x27;, idCard);</span><br><span class="line"></span><br><span class="line">    this.$postRequest(url, params, false, &#123;</span><br><span class="line">        &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;,</span><br><span class="line">        showError: false,</span><br><span class="line">    &#125;)</span><br><span class="line">    .then((&#123; data &#125;) =&gt; &#123;</span><br><span class="line">        toast.clear();</span><br><span class="line">        if (data.success) &#123;  &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(() =&gt; &#123;  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小程序人脸"><a href="#小程序人脸" class="headerlink" title="小程序人脸"></a>小程序人脸</h2><blockquote>
<p>由于功能涉及到用户的隐私信息，因此调用人脸核身接口的小程序需要在<a href="https://mp.weixin.qq.com/">微信公众平台-功能-人脸核身</a>申请权限并满足<a href="https://developers.weixin.qq.com/community/business/doc/000442d352c1202bd498ecb105c00d">一定条件</a>。微信会在触发接口后跳转到人脸识别界面，然后将用户人脸信息与人脸库对比后返回认证信息。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、检测设备是否支持</span></span><br><span class="line"><span class="title function_">checkIsSupportFacialRecognition</span>(&#123;</span><br><span class="line">    <span class="attr">checkAliveType</span>: <span class="number">2</span>,</span><br><span class="line">　　 <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  　　   <span class="keyword">if</span> (res.<span class="property">errCode</span> == <span class="number">0</span> || </span><br><span class="line">        res.<span class="property">errMsg</span> == <span class="string">&quot;checkIsSupportFacialRecognition:ok&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 2、调用人脸识别</span></span><br><span class="line">          　wx.<span class="title function_">startFacialRecognitionVerify</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;姓名&quot;</span>,</span><br><span class="line">                <span class="attr">idCardNumber</span>: <span class="string">&quot;身份证号&quot;</span>,</span><br><span class="line">                success (res) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">verifyResult</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                    wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">                        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">                        <span class="attr">showCancel</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">content</span>: <span class="string">&quot;人脸识别失败！&quot;</span> + res.<span class="property">errMsg</span>,</span><br><span class="line">                        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                            wx.<span class="title function_">navigateTo</span>()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">　　　　 &#125;</span><br><span class="line">        wx.<span class="title function_">showToast</span>(<span class="string">&#x27;微信版本过低，暂时无法使用此功能，请升级最新版本&#x27;</span>)</span><br><span class="line">　  &#125;,</span><br><span class="line">　　<span class="attr">fail</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">　　　　wx.<span class="title function_">showToast</span>(<span class="string">&#x27;微信版本过低，暂时无法使用此功能，请升级最新版本&#x27;</span>)</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="小程序语音"><a href="#小程序语音" class="headerlink" title="小程序语音"></a>小程序语音</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.wxml</span></span><br><span class="line">&lt;button type=<span class="string">&#x27;default&#x27;</span> bindtouchstart=<span class="string">&#x27;startRecord&#x27;</span> </span><br><span class="line">bindtouchend=<span class="string">&quot;StopRecord&quot;</span>&gt;录音&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> recorderManager = wx.<span class="title function_">getRecorderManager</span>();</span><br><span class="line">recorder.<span class="title function_">onStop</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    wx.<span class="title function_">getFileSystemManager</span>().<span class="title function_">readFile</span>(&#123;</span><br><span class="line">        <span class="attr">filePath</span>: result.<span class="property">tempFilePath</span>,</span><br><span class="line">        <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;https://vop.baidu.com/server_api&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">format</span>: <span class="string">&#x27;pcm&#x27;</span>,</span><br><span class="line">                    <span class="attr">rate</span>: <span class="number">16000</span>,</span><br><span class="line">                    <span class="attr">channel</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">cuid</span>: <span class="string">&#x27;sdfdfdfsfs&#x27;</span>,</span><br><span class="line">                    <span class="attr">token</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;token&quot;</span>),</span><br><span class="line">                    <span class="attr">speech</span>: wx.<span class="title function_">arrayBufferToBase64</span>(res.<span class="property">data</span>),</span><br><span class="line">                    <span class="attr">len</span>: res.<span class="property">data</span>.<span class="property">byteLength</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="attr">header</span>: &#123; <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">                <span class="title function_">success</span>(<span class="params">res</span>) &#123; &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    startRecord () &#123;</span><br><span class="line">        wx.<span class="title function_">showLoading</span>(&#123; <span class="attr">title</span>: <span class="string">&#x27;正在录音中...&#x27;</span> &#125;)</span><br><span class="line">        recorder.<span class="title function_">start</span>(&#123;</span><br><span class="line">            <span class="attr">format</span>: <span class="string">&#x27;PCM&#x27;</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">5000</span>,</span><br><span class="line">            <span class="attr">sampleRate</span>: <span class="number">16000</span>,</span><br><span class="line">            <span class="attr">numberOfChannels</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">encodeBitRate</span>: <span class="number">48000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    stopRecord () &#123;</span><br><span class="line">        recorder.<span class="title function_">stop</span>();</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务相关技术栈</title>
    <url>/2022/11/10/18-%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="一、微服务架构"><a href="#一、微服务架构" class="headerlink" title="一、微服务架构"></a>一、微服务架构</h1><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><blockquote>
<p><code>分布式</code>通过服务拆分解耦的方式实现了性能优化和按需更新但不能解决并发性和高可用性问题，<code>集群</code>则解决了系统的并发问题还可以在服务器宕机时正常运转，但是集群通过一台主机接收请求然后分发请求到部署相同服务的不同服务器实现负载均衡，本质上还是一个<code>单体应用架构</code>。具体设计时一般会结合分布式和集群的特点，即对拆分的子模块进行集群部署。</p>
</blockquote>
<ul>
<li><strong>单体应用</strong>：所有模块部署在一个服务器。优点是开发成本低、小型项目的首选，缺点是复杂项目不易开发和维护、性能扩展只能通过扩展集群结点但是有瓶颈和较高成本。<code>集群</code>可以提升性能但也有用户访问哪个服务器和数据共享的问题，<code>Niginx</code> 可用来反向代理用户请求地址并负载均衡完成用户请求的转发，<code>Redis + Tomcat</code> 则是实现数据共享的集群方案，但是这样的高并发问题导致数据库的压力过大，<code>数据库优化方案</code>主要有主从复制、Redis 缓存等。</li>
<li><strong>垂直应用</strong>：前后端分离的 MVC 分层架构，比如<code>水平拆分</code>根据层次拆分为工具库、数据持久、业务逻辑、后台管理、web 访问等模块并根据访问量合理部署，<code>垂直拆分</code>则根据功能拆分为商品、支付、购物车等独立模块。优点是前后端可以采用不同的技术开发、减轻了服务器的压力，缺点是某个模块更新时需要重新部署整个应用、不同服务器部署的模块之间无法交互。</li>
<li><strong>分布式架构</strong>：根据业务拆分为多个独立模块并通过 <code>RPC、Http、HttpClient</code> 等底层技术解决模块之间的调用问题。但是当服务越来越多，容量评估、小服务浪费资源等问题逐渐显现，此时需增加一个调度中心 SOA 基于访问压力实时管理集群容量并提高集群利用率。</li>
<li><strong>SOA 面向服务的架构</strong>：一种以粗粒度(表示类别)、松耦合的服务为中心的架构。实现方式主要有<code>中心化的 ESB、去中心化的微服务</code>。ESB 总线通过协议转换、消息路由、事务控制等底层技术对不同技术栈开发的<code>异构系统</code>实现连接通信和统一管理，将所有服务集成为一个松耦合的分布式系统，但是这种<code>单体架构模式</code>也带来了环境搭建困难和性能瓶颈等问题。 </li>
<li><strong>微服务架构</strong>：基于 SOA 理念针对业务实现细粒度(表示对象类别的实例)的组件化和服务化，通过<code>RPC/REST</code>协议对松耦合的微服务实现管理和整合，ESB 则是为各自为政的微服务们创造了一个中心化的政府。这种架构支持跨语言开发和独立部署，极大提升了复用性和可扩展性，但也有跨服务更改、调用链追踪、配置管理等问题，适用于长期迭代更新的项目。</li>
</ul>
<h2 id="开发技术"><a href="#开发技术" class="headerlink" title="开发技术"></a>开发技术</h2><blockquote>
<p>单体应用拆分出的独立服务就是微服务，这些微服务相互调用会形成一个中心的<code>服务集群</code>，不同中心则是<code>分布式</code>，为了统一管理和配置多个服务而有了<code>注册中心与配置中心</code>，用户访问服务时需要在服务集群中处理负载均衡和请求路由的 <code>API 网关</code>，服务之间的通信机制则基于 <code>对内的 REST、对外的 RPC、异步的消息队列</code>，为了数据库高并发查询数据时更安全快速而产生了<code>分布式缓存和分布式搜索</code>，为了在服务调用链某一环节出错时不影响整体而提出的方案有<code>重试机制、限流、熔断机制、负载均衡、降级</code>，为了排查服务故障而引入<code>分布式日志服务</code>来记录请求信息并通过<code>系统监控、链路追踪</code>来监控整个系统运行并在异常时快速反应，最后通过 <code>Jenkins + docker + kubernetes/rancher</code> 实现整体的自动化部署。一个微服务项目的架构和主要技术栈如下：</p>
</blockquote>
  <div align="center">
      <img src="/images/web/Microservice.png" alt="相关配置" width="100%">
  </div>

<ul>
<li><strong>架构方案</strong>：<code>聚合器</code>(将多个服务合并处理为一个新服务)、<code>代理</code>(服务转发和数据转换)、<code>链式</code>(同步调用的微服务链条)、<code>分步式</code>(支持同时调用多个微服务链)、<code>数据共享</code>(支持部分微服务共享数据库和缓存而存在强耦合)、<code>异步消息</code>(通过消息队列中间件实现异构系统的连接通信)。</li>
<li><strong>远程调用</strong>：同步消息通过基于 HTTP 对接第三方服务的接口规范 <code>REST</code>(对外暴露接口)、基于 TCP&#x2F;UDP 内部高效通信的远程调用协议 <code>RPC</code>(对内直接调用)，异步通信则通过<code>消息队列</code>。</li>
<li><strong>RPC 框架</strong>：Java 语言的 <code>Dubbo、Motan、SpringBoot、SpringCloud</code>，NodeJS 语言的 <code>Seneca、Hapi、Restify、LoopBack</code>，支持跨语言平台开发的 <code>gRPC、Thrift</code>。</li>
<li><strong>主要技术栈及其常用中间件</strong>：<code>配置管理</code> SpringCloudConfig Nacos、<code>注册发现</code> Nacos Eureka Zookeeper Consul、<code>API网关</code> SpringCloudGateway Zuul、<code>熔断限流</code> Hystrix Envoy Sentinel、<code>服务监控</code> Zabbix Nagios Metrics Specatator、<code>负载均衡</code> Ribbon Nginx、<code>消息队列</code> Kafka RabbitMQ ActiveMQ、<code>链路追踪</code> Zipkin Brave Dapper、<code>自动化部署</code> Jenkins Docker Rancher Kubernetes。</li>
</ul>
<h1 id="二、中间件服务"><a href="#二、中间件服务" class="headerlink" title="二、中间件服务"></a>二、中间件服务</h1><blockquote>
<p>一种用于连接操作系统、数据库等系统软件与应用软件，并管理计算资源和网络通信的中间软件。它为应用提供了开箱即用的业务服务和标准的通信接口，屏蔽了底层实现逻辑而让开发者专注于业务，解决了异构网络环境下分布式应用的通信问题，常作为服务器或插件被部署到应用开发工具。应用可以直接和用户交互但必须通过中间件和底层系统实现交互。</p>
</blockquote>
<h2 id="主要分类"><a href="#主要分类" class="headerlink" title="主要分类"></a>主要分类</h2><ul>
<li><strong>基础中间件</strong>：用于应用通信、请求处理、web 应用构建等。主要有<strong>交易中间件</strong> (用于银行业务等需要处理大量并发进程的联机交易系统)、<strong>消息中间件</strong> (用于应用之间的异步网络通信)、<strong>应用服务器中间件</strong> (用于浏览器和数据库之间业务处理的开发工具和运行平台)。</li>
<li><strong>集成中间件</strong>：用于数据库和应用等异构系统之间进行资源整合，构建一个分布式企业应用。</li>
<li><strong>行业领域应用平台</strong>：基于以上中间件针对特定行业开发文件管理、数据共享、云计算等功能。</li>
</ul>
<h2 id="常用实例"><a href="#常用实例" class="headerlink" title="常用实例"></a>常用实例</h2><ul>
<li><strong>路由与web服务器</strong>：处理和转发其他服务器数据的服务器。Nginx、Tengine、VipServer。</li>
<li><strong>RPC 框架</strong>：微服务时代的远程服务调用框架。grpc、Thrift、HSF、Dubbo、SOFA-RPC。</li>
<li><strong>消息中间件</strong>：分布式应用之间发送和接收消息的软件。Kafka、RabbitMQ、RocketMQ。</li>
<li><strong>缓存服务</strong>：分布式的高速数据存储层，一般是内存存储。Tair、Redis、Memcached。</li>
<li><strong>配置中心</strong>：统一管理各个项目中所有配置。阿里 Nacos、携程 Apollo、百度 Disconf。</li>
<li><strong>分布式事务</strong>：事务的参与者、支持事务的服务器、资源服务器以及事务管理器，分别位于不同的分布式系统的不同节点。阿里 seata、腾讯 DTF。</li>
<li><strong>任务调度</strong>：分布式环境下提供定时、任务编排、分布式跑批等功能的系统。阿里 SchedulerX、业界 xxl-job、当当 elastic-job、有赞 TSP。</li>
<li><strong>数据库层</strong>：支持弹性扩容和分库分表的 TDDL、数据库连接池 Driud、Binlog 同步的 Canal。</li>
</ul>
<h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><blockquote>
<p>缺点：系统可用性降低、系统稳定性降低、分布式一致性问题</p>
</blockquote>
<ul>
<li><strong>复杂链路的异步调用</strong>：如果大量并发请求不需要服务器及时响应时则可将消息缓存后按顺序处理，比如用户注册(发布)、数据入库、消息队列、异步发送注册短信。</li>
<li><strong>复杂系统的解耦</strong>：将服务拆分，比如用户下单(发布)、消息队列、库存系统(订阅)处理业务。</li>
<li><strong>瞬时高峰的削峰处理</strong>：商品秒杀活动时过滤掉大多数无效请求后转发，比如用户下单(发送)、消息队列(根据实际情况限制人数等)、订阅消息根据秒杀规则处理业务。</li>
<li><strong>分布式应用的通信</strong>：根据应用使用的开发语言选择合适接口实现通信并对数据进行处理和转发，比如服务 A (发送消息)、消息队列、服务 B (订阅消息)。</li>
</ul>
<h2 id="JS-实现"><a href="#JS-实现" class="headerlink" title="JS 实现"></a>JS 实现</h2><blockquote>
<p>每一个中间件执行结果传递给下一个中间件并等待其结束以后又回到当前执行逻辑，缺点主要有系统可用性降低、系统稳定性降低、分布式一致性问题。</p>
</blockquote>
<ul>
<li><strong>axios</strong>：最简单，直接 promise 链式调用。</li>
<li><strong>redux</strong>：通过 reduce 静态生成，将中间件的执行结果作为上一个中间件的 next 参数。</li>
<li><strong>express、Redux</strong>：next 通过 redux 静态生成并已确定执行顺序，express 则是动态执行。</li>
<li><strong>express、koa</strong>：通过递归动态执行，区别在于 koa 通过 return promise 形成洋葱模型，expres 则在调用时没有 return，最终执行的是 await undefind 而不是 await promise。</li>
<li><strong>compose 为什么必须返回 promise.resolve</strong>：防止只有请求中间件且为同步函数时报错。</li>
<li><strong>redux 中间件必须返回函数</strong>：redux 多了一个组合的过程，组合时需要将中间件的执行结果而不是函数来作为上一个中间件的 next 参数，否则传给中间件就会报错。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数处理前执行 fn</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> res = fn.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">if</span> (!res) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数处理后执行 fn</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交前上报数据、验证数据</span></span><br><span class="line">submit.<span class="title function_">before</span>(report).<span class="title function_">before</span>(validate)()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提交数据&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Axios</span></span><br><span class="line"><span class="comment">// 使用中间件：成功回调、失败回调、是否同步执行中间件 request、运行时是否添加中间件</span></span><br><span class="line"><span class="title class_">InterceptorManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">use</span> = <span class="keyword">function</span> (<span class="params">fulfilled, rejected, options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">fulfilled</span>: fulfilled,</span><br><span class="line">        <span class="attr">rejected</span>: rejected,</span><br><span class="line">        <span class="attr">runWhen</span>: options ? options.<span class="property">runWhen</span> : <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">synchronous</span>: options ? options.<span class="property">synchronous</span> : <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">handlers</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加中间件：adapter 是 node/browser 请求的适配器</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">dispatchRequest</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> adapter = config.<span class="property">adapter</span> || defaults.<span class="property">adapter</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">adapter</span>(config).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onAdapterResolution</span>(<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="keyword">function</span> <span class="title function_">onAdapterRejection</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、定义 request、response 拦截器并插在 dispatchRequest 前后</span></span><br><span class="line"><span class="title class_">Axios</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">request</span> = <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> requestInterceptorChain = [];</span><br><span class="line">  <span class="keyword">var</span> synchronousRequestInterceptors = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> interceptor.<span class="property">runWhen</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; </span><br><span class="line">      interceptor.<span class="title function_">runWhen</span>(config) === <span class="literal">false</span>) &#123; </span><br><span class="line">          <span class="keyword">return</span>; </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      synchronousRequestInterceptors = synchronousRequestInterceptors &amp;&amp; </span><br><span class="line">      interceptor.<span class="property">synchronous</span>;</span><br><span class="line">      requestInterceptorChain.<span class="title function_">unshift</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> responseInterceptorChain = [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">pushResponseInterceptors</span>(<span class="params">interceptor</span>) &#123;</span><br><span class="line">      responseInterceptorChain.<span class="title function_">push</span>(interceptor.<span class="property">fulfilled</span>, interceptor.<span class="property">rejected</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> promise;</span><br><span class="line">  <span class="comment">// 2、request 都是异步，构建链式调用 then(fulfilled, rejected).then(fulfilled, rejected)</span></span><br><span class="line">  <span class="keyword">if</span> (!synchronousRequestInterceptors) &#123;</span><br><span class="line">      <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">      <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unshift</span>.<span class="title function_">apply</span>(chain, requestInterceptorChain);</span><br><span class="line">      chain.<span class="title function_">concat</span>(responseInterceptorChain);</span><br><span class="line"></span><br><span class="line">      promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(config);</span><br><span class="line">      <span class="keyword">while</span> (chain.<span class="property">length</span>) &#123;</span><br><span class="line">          promise = promise.<span class="title function_">then</span>(chain.<span class="title function_">shift</span>(), chain.<span class="title function_">shift</span>());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、如果存在 request 同步拦截器则先执行并获取新配置，然后构建链式调用 promise.then.then</span></span><br><span class="line">  <span class="keyword">var</span> newConfig = config;</span><br><span class="line">  <span class="keyword">while</span> (requestInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> onFulfilled = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">var</span> onRejected = requestInterceptorChain.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          newConfig = <span class="title function_">onFulfilled</span>(newConfig);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">onRejected</span>(error);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      promise = <span class="title function_">dispatchRequest</span>(newConfig);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (responseInterceptorChain.<span class="property">length</span>) &#123;</span><br><span class="line">      promise = promise.<span class="title function_">then</span>(responseInterceptorChain.<span class="title function_">shift</span>(), </span><br><span class="line">      responseInterceptorChain.<span class="title function_">shift</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Redux：将中间件执行结果作为上一个中间件的 next 参数，类似 pipe 反向装载和正向执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">arg</span>) =&gt;</span> arg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例实现：依次执行中间件 add multiple、目标函数 print</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">next</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">num</span>) =&gt;</span> &#123; <span class="title function_">next</span>(num + <span class="number">1</span>) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiple</span>(<span class="params">next</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="title function_">next</span>(num * <span class="number">2</span>) &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> compute = <span class="title function_">compose</span>(add, multiple)(print) = <span class="title function_">add</span>(<span class="title function_">mulitple</span>(print))</span><br><span class="line"><span class="title function_">compute</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">Express</span></span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> app：管理多个中间件的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> funcs：存储待执行的函数数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@preme</span> app.use：将函数添加到函数数组的全局中间件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@preme</span> next：递归执行到最后一个任务 task[0]()、task[1]()</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">express</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> funcs = [];</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> task = funcs[i++]; <span class="comment">// 取出函数数组里的下一个函数</span></span><br><span class="line">            <span class="keyword">if</span> (!task) &#123; <span class="keyword">return</span> &#125;  <span class="comment">// 如果函数不存在则执行 return</span></span><br><span class="line">            <span class="title function_">task</span>(req, res, next);  <span class="comment">// 否则执行下个函数，没有 return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    app.<span class="property">use</span> = <span class="keyword">function</span> (<span class="params">task</span>) &#123;</span><br><span class="line">        funcs.<span class="title function_">push</span>(task);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据统计&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;日志统计&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa-compose</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span> (middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(middleware)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Middleware stack must be an array!&#x27;</span>)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Middleware must be composed!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">cxt, next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> newError = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dispatch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(newError)</span><br><span class="line">            index = i</span><br><span class="line">            <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">            <span class="comment">// 洋葱类型：中间件正常执行完则赋值为外部传入的目标函数</span></span><br><span class="line">            <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">            <span class="comment">// 终止条件，返回 promise</span></span><br><span class="line">            <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 递归返回：确保 fn() 返回 promise，并修改中间件的 next 参数</span></span><br><span class="line">              <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(cxt, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i+<span class="number">1</span>)))</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：1、2、3、4、5</span></span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">&#x27;koa-compose&#x27;</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">m1</span>(<span class="params">ctx, next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">m2</span>(<span class="params">ctx , next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">compose</span>([m1, m2])</span><br><span class="line"><span class="title function_">c</span>(<span class="literal">null</span>, <span class="function">()=&gt;</span>&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码转换</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">m1</span>(context, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">m2</span>(ctx, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">next</span>(ctx, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>((<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">        (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>((<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>) &#125;)())</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">        &#125;)()</span><br><span class="line">    )</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)())</span><br></pre></td></tr></table></figure>


<h1 id="三、微前端应用"><a href="#三、微前端应用" class="headerlink" title="三、微前端应用"></a>三、微前端应用</h1>]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>前端成长技能栈</title>
    <url>/2022/10/21/17-%E5%89%8D%E7%AB%AF%E6%8A%80%E8%83%BD/</url>
    <content><![CDATA[<h1 id="一、组件库在线文档"><a href="#一、组件库在线文档" class="headerlink" title="一、组件库在线文档"></a>一、组件库在线文档</h1><h2 id="Dumi-开发组件库"><a href="#Dumi-开发组件库" class="headerlink" title="Dumi 开发组件库"></a>Dumi 开发组件库</h2><blockquote>
<p>静态站点框架主要有：Dumi、Storybook、Gitbook、VuePress、VitePress、Docsify。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 1、初始化目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  npx：npm5.2 新增的执行包，依赖包不存在时自动下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  dumi 开发组件，father-build 将源码 md/ts 解析为 React</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">npx @umijs/create-dumi-lib         <span class="comment">// 文档模式：只包含组件文档</span></span><br><span class="line">npx @umijs/create-dumi-lib --site  <span class="comment">// 站点模式：完整的组件库网站</span></span><br><span class="line">npx @umijs/create-dumi-app         <span class="comment">// 纯静态站点：不包含组件源码</span></span><br><span class="line"></span><br><span class="line">npx @umijs/create-dumi-lib --site</span><br><span class="line">npm install、npm start、npm run build</span><br><span class="line"></span><br><span class="line">├── <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">├── docs                 <span class="comment">// 文档目录</span></span><br><span class="line">│   ├── index.<span class="property">md</span>         <span class="comment">// 文档首页</span></span><br><span class="line">│   └── otherDir         <span class="comment">// 文档其它路由</span></span><br><span class="line">│   		├── index.<span class="property">md</span></span><br><span class="line">│   		├── sample.<span class="property">md</span></span><br><span class="line">│   		└── help.<span class="property">md</span></span><br><span class="line">├── src                  <span class="comment">// 源码目录</span></span><br><span class="line">│   ├── index.<span class="property">ts</span>         <span class="comment">// 入口文件</span></span><br><span class="line">│   └── <span class="title class_">Foo</span>              <span class="comment">// 组件源码</span></span><br><span class="line">│       ├── index.<span class="property">md</span> </span><br><span class="line">│   		└── index.<span class="property">ts</span></span><br><span class="line">├── .<span class="property">umirc</span>.<span class="property">ts</span>            <span class="comment">// dumi 配置文件</span></span><br><span class="line">└── .<span class="property">fatherrc</span>.<span class="property">ts</span>         <span class="comment">// father-build 打包配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、新建组件 /src/MyButton/index.md：npm install antd -D</span></span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 页面名称</span><br><span class="line"><span class="attr">nav</span>:</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">Components</span>   <span class="comment">// 导航名称</span></span><br><span class="line">  <span class="attr">path</span>: <span class="regexp">/components   /</span><span class="regexp">/ 导航路由</span></span><br><span class="line"><span class="regexp">  order: 0            /</span><span class="regexp">/ 导航顺序，数字越小越靠前</span></span><br><span class="line"><span class="regexp">group:</span></span><br><span class="line"><span class="regexp">  title: MyButton</span></span><br><span class="line"><span class="regexp">  path: /</span>btn          <span class="comment">// 分组路由 = 导航路由+自己</span></span><br><span class="line">  <span class="attr">order</span>: <span class="number">1</span>            <span class="comment">// 分组顺序，默认以路径长度和字典序排序</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## <span class="title class_">MyButton</span></span><br><span class="line"><span class="comment">// ```tsx    使用时不注释</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyButton</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;my-dumi-doc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">MyButton</span>&gt;</span></span>;</span><br><span class="line"><span class="comment">// ```</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// /src/index.ts：暴露组件</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">MyButton</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./MyButton&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MyButton/index.tsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">ButtonProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd/dist/antd.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">MyButtonProps</span> <span class="keyword">extends</span> <span class="title class_">ButtonProps</span> &#123;</span><br><span class="line">    isMy?: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyButton</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">MyButtonProps</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, ...restProps &#125; = props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> &#123;<span class="attr">...restProps</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyButton</span>;</span><br></pre></td></tr></table></figure>


<h2 id="lerna-管理多个包"><a href="#lerna-管理多个包" class="headerlink" title="lerna 管理多个包"></a>lerna 管理多个包</h2><blockquote>
<p>用来优化托管在 git&#x2F;npm 上的多包代码库的工作流的一个管理工具，可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖并且发布时需要手动维护多个包的问题。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根目录初始化：自动生成 lerna.json、packages</span></span><br><span class="line">npm install -g lerna、lerna init</span><br><span class="line">lerna create @keith/button packages/button --yes</span><br><span class="line"></span><br><span class="line">lerna init       <span class="comment">// 初始化配置</span></span><br><span class="line">lerna create     <span class="comment">// 创建包</span></span><br><span class="line">lerna link       <span class="comment">// 链接包</span></span><br><span class="line">lerna add        <span class="comment">// 安装单个依赖</span></span><br><span class="line">lerna bootstrap  <span class="comment">// 安装全局依赖并链接到所有子包</span></span><br><span class="line">lerna clean      <span class="comment">// 清除 node_modules</span></span><br><span class="line">lerna list       <span class="comment">// 列出子包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;  <span class="comment">// 此处新增组件目录</span></span><br><span class="line">      <span class="string">&quot;@keith/button&quot;</span>: [<span class="string">&quot;./packages/button/src/index.tsx&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .fatherrc.ts：添加 button</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">headPkgs</span>: string[] = [<span class="string">&#x27;button&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json：添加 workspaces</span></span><br><span class="line"> <span class="string">&quot;workspaces&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;dumi dev&quot;</span>,</span><br><span class="line">  <span class="string">&quot;docs:build&quot;</span>: <span class="string">&quot;dumi build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;docs:deploy&quot;</span>: <span class="string">&quot;gh-pages -d docs-dist&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;father-build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;npm run docs:build &amp;&amp; npm run docs:deploy&quot;</span>,</span><br><span class="line">  <span class="string">&quot;prettier&quot;</span>: <span class="string">&quot;prettier --write \&quot;**/*.&#123;js,jsx,tsx,ts,less,md,json&#125;\&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;umi-test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test:coverage&quot;</span>: <span class="string">&quot;umi-test --coverage&quot;</span>,</span><br><span class="line">  <span class="string">&quot;prepublishOnly&quot;</span>: <span class="string">&quot;npm run build&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除多余目录：组件目录 lib/_test_、根目录 src</span></span><br></pre></td></tr></table></figure>

<h2 id="Prettier-Eslint-代码风格"><a href="#Prettier-Eslint-代码风格" class="headerlink" title="Prettier Eslint 代码风格"></a>Prettier Eslint 代码风格</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install @umijs/fabric -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="built_in">require</span>(<span class="string">&#x27;@umijs/fabric&#x27;</span>).<span class="property">prettier</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;@umijs/fabric/dist/eslint&#x27;</span>)],</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="GitHooks-Commitlin-提交规范"><a href="#GitHooks-Commitlin-提交规范" class="headerlink" title="GitHooks Commitlin 提交规范"></a>GitHooks Commitlin 提交规范</h2><blockquote>
<p><code>GitHooks</code> 是指在 git 操作时触发运行 .git&#x2F;hooks 目录下的钩子脚本，自定义钩子操作时如果直接修改 hooks 脚本并去掉 sample 后缀即可生效但是不能提交修改代码，所以一般通过引入工具 husky&#x2F;yorkie 来配置。<code>Commitlin</code> 是用来配置提交信息校验规则的工具。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install @umijs/yorkie -D</span><br><span class="line">npm install @commitlint/cli @commitlint/config-conventional -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;gitHooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span>,</span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E GIT_PARAMS&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;packages/**/*.&#123;js, ts, jsx, tsx, md, json&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">      <span class="string">&quot;git add .&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .commitlintrc.js / commitlint.config.js </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;feature&#x27;</span>,    <span class="comment">// 开发新功能</span></span><br><span class="line">        <span class="string">&#x27;fix&#x27;</span>,        <span class="comment">// 修补 bug</span></span><br><span class="line">        <span class="string">&#x27;refactor&#x27;</span>,   <span class="comment">// 代码重构</span></span><br><span class="line">        <span class="string">&#x27;docs&#x27;</span>,       <span class="comment">// 文档</span></span><br><span class="line">        <span class="string">&#x27;style&#x27;</span>,      <span class="comment">// 格式（不影响代码运行的变动）</span></span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>,       <span class="comment">// 增加测试</span></span><br><span class="line">        <span class="string">&#x27;build&#x27;</span>,      <span class="comment">// 变更项目构建或外部依赖（webpack、package等）</span></span><br><span class="line">        <span class="string">&#x27;revert&#x27;</span>,     <span class="comment">// 回滚</span></span><br><span class="line">        <span class="string">&#x27;perf&#x27;</span>,       <span class="comment">// 改善性能</span></span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],       <span class="comment">// 不符合规范时，可提交但有警告</span></span><br><span class="line">    <span class="string">&#x27;subject-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],    <span class="comment">// 不符合规范时，可提交但有警告</span></span><br><span class="line">    <span class="string">&#x27;subject-full-stop&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-case&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二、前端智能化"><a href="#二、前端智能化" class="headerlink" title="二、前端智能化"></a>二、前端智能化</h1><blockquote>
<p>AI 在前端领域基于设计稿生成源代码的一系列落地方案。<a href="https://code.fun/docs">CodeFun</a> 就是一款可以将 Figma、Sketch、Photoshop 等设计稿智能转换为前端源代码的工具。</p>
</blockquote>
<h1 id="渐进式应用-PWA"><a href="#渐进式应用-PWA" class="headerlink" title="渐进式应用 PWA"></a>渐进式应用 PWA</h1>]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 基础使用</title>
    <url>/2022/08/26/16-Nginx/</url>
    <content><![CDATA[<h1 id="一、基础概述"><a href="#一、基础概述" class="headerlink" title="一、基础概述"></a>一、基础概述</h1><blockquote>
<p>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到几个月不间断运行，而且可以在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是免费的并可以商业化，配置使用也比较简单。</p>
</blockquote>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>高并发和高性能。</li>
<li>模块化架构而具有高扩展性。</li>
<li>异步非阻塞的事件驱动模型相似于 Node.js。</li>
<li>可以几个月不需要重启服务器而具有高可靠性。</li>
<li>热部署和平滑升级。</li>
<li>完全开源和生态繁荣。</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote>
<p>Nginx 擅长于静态资源处理转发、反向代理、负载均衡等对底层服务器端资源的处理，NodeJS 更擅长上层具体业务逻辑的处理，两者可以完美组合。</p>
</blockquote>
<ul>
<li>静态资源服务，通过本地文件系统提供服务。</li>
<li>反向代理服务，延伸出包括缓存、负载均衡等。</li>
<li>API 服务：基于 Nginx 扩展开发的 Web 应用平台 OpenResty。</li>
</ul>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul>
<li><strong>代理</strong>：客户端和服务器之间假设的一层服务器，代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。</li>
<li><strong>简单请求</strong>：满足的两个条件为 请求方法 HEAD&#x2F;GET&#x2F;POST、HTTP 头信息不超过以下字段：Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type 只限于三个值 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain。浏览器处理时会在头信息增加用来说明请求来源(协议+域名+端口)的 Origin 字段后直接发出，服务器如果发现 Origin 指定的域名在许可范围内就返回包含 Access-Control- 头信息字段的数据，否则就抛出错误。</li>
<li><strong>非简单请求</strong>：指那种对服务器有特殊要求的请求，比如请求方法 PUT&#x2F;DELETE，或 Content-Type 值为 application&#x2F;json。浏览器会在正式通信之前，发送一次 HTTP 预检 OPTIONS 请求，先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 请求方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XHR 请求，否则报错。</li>
<li><strong>正向代理</strong>：客户端向代理发送一个请求并指定目标服务器，然后代理向目标服务器转交请求并将结果返回。正向代理可以让客户端访问到它本身无法访问到的服务器资源，但对服务端是不透明的，它并不知道请求是来自代理还是真实客户端。</li>
<li><strong>反向代理</strong>：代理接受客户端请求，然后转发给内部网络的服务器并将结果返回。反向代理可以帮助服务器接收或转发请求，但对对客户端是不透明的，主要优势有隐藏真实服务器、负载均衡而便于扩充后端动态服务、动静分离而提升系统健壮性。</li>
<li><strong>动静分离</strong>：将静态资源和动态资源分为不同系统访问的架构设计方法，可提升整个服务的访问性和可维护性。一般将静态资源部署在 Nginx 并利用反向代理的原理将动态资源的请求转发给对应后台处理，从而实现动静分离并提升静态资源的访问速度。</li>
<li><strong>负载均衡</strong>：将客户端请求转发给服务器集群然后分发给不同服务器，解决单个服务器处理多个复杂并发请求容易崩溃的问题。<strong>Nginx 实现策略</strong>有：请求轮询策略(将所有请求轮询分配而解决单个服务器影响所有)、最小连接数策略(优先分配给压力较小的服务器)、最快响应时间策略(优先分配给响应时间最短的服务器)、客户端 IP 绑定策略(同一个 IP 的请求只分配一台服务器而解决 session 共享问题)。</li>
</ul>
<h2 id="架构机制"><a href="#架构机制" class="headerlink" title="架构机制"></a>架构机制</h2><ul>
<li><strong>多进程架构</strong><ul>
<li><strong>主进程</strong>：用于接收外部信息和管理多个工作进程但本身并不真正处理用户请求。监听到子进程异常退出时重启新进程，监听到配置文件被修改时重新加载实现热部署。</li>
<li><strong>work 工作进程</strong>：用于执行处理网络连接、读取并写入内容到磁盘、与服务器通信等所有实际任务。每个工作进程都是以非阻塞的方式处理多个连接的独立单线程，但可以通过共享内存的方式进行通信。</li>
<li><strong>Cache Loader 缓存加载进程</strong>：启动时运行并把基于磁盘的缓存加载到内存后退出，调度很谨慎导致其资源需求很低。</li>
<li><strong>Cache Manager 缓存管理进程</strong>：周期性运行并削减磁盘缓存来使缓存保持在配置的大小范围内。</li>
</ul>
</li>
<li><strong>模块化架构</strong><ul>
<li><strong>核心模块</strong>：Nginx 服务器正常运行必不可少的模块，提供错误日志记录、配置文件解析、事件驱动、进程管理等核心功能。比如 ngx_core、ngx_errlog、ngx_conf、ngx_events、ngx_event、ngx_epoll、ngx_regex。</li>
<li><strong>标准 HTTP 模块</strong>：提供端口配置、网页编码设置、响应头设置等 HTTP 协议解析相关的功能，比如 ngx_http_core、ngx_http_charset。</li>
<li><strong>可选 HTTP 模块</strong>：用于实现压缩网络数据、支持安全协议 SSL 等标准 HTTP 扩展功能，比如 ngx_http_gzip、支持ssl协议ngx_http_ssl。</li>
<li><strong>邮件服务模块</strong>：主要用于支持邮件服务，比如 ngx_mail_core、ngx_mail_pop3。</li>
<li><strong>第三方模块</strong>：用于实现 Nginx 应用的扩展功能，比如 rds-json-nginx lua-nginx。</li>
</ul>
</li>
<li><strong>配置文件重载流程</strong><ol>
<li>reload 命令执行后向主进程发送 HUP 信号。</li>
<li>主进程检查配置语法是否正确，然后打开监听端口。</li>
<li>主进程使用新的配置文件启动新的 worker 子进程。</li>
<li>主进程向老的 worker 子进程发送 QUIT 信号。</li>
<li>老的 worker 进程关闭监听句柄，处理完当前连接后关闭进程。</li>
<li>整个过程 Nginx 始终平稳运行，实现了平滑更新而用户无感知。</li>
</ol>
</li>
</ul>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> mac 安装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 命令：安装、查看配置、brew 方式启动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 路径：安装、配置文件、服务器默认路径</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">brew install nginx</span><br><span class="line">brew info nginx</span><br><span class="line">brew services start/restart nginx</span><br><span class="line"></span><br><span class="line">/usr/local/<span class="title class_">Cellar</span>/nginx/<span class="number">1.15</span><span class="number">.5</span></span><br><span class="line">/usr/local/etc/nginx/nginx.<span class="property">conf</span></span><br><span class="line">/usr/local/<span class="keyword">var</span>/www</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Linux 安装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 命令：安装、查看安装信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 路径：子配置项、主配置文件、静态文件</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">yum install nginx -y</span><br><span class="line">rpm -ql nginx</span><br><span class="line"></span><br><span class="line">/etc/nginx/conf.<span class="property">d</span>/ </span><br><span class="line"><span class="regexp">/etc/</span>nginx/nginx.<span class="property">conf</span></span><br><span class="line">/usr/share/nginx/html/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 系统操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 防火墙：系统开启时则需要设置在防火墙加入需要开放的端口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> systemctl：Linux 系统应用管理工具 systemd 的主命令</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">systemctl start firewalld     <span class="comment">// 开启防火墙</span></span><br><span class="line">systemctl stop firewalld      <span class="comment">// 关闭防火墙</span></span><br><span class="line">systemctl status firewalld    <span class="comment">// 查看防火墙开启状态</span></span><br><span class="line">systemctl enable nginx        <span class="comment">// 开机自动启动</span></span><br><span class="line">systemctl disable nginx       <span class="comment">// 关闭开机自动启动</span></span><br><span class="line">systemctl start nginx         <span class="comment">// 启动 Nginx</span></span><br><span class="line">systemctl stop nginx          <span class="comment">// 停止 Nginx</span></span><br><span class="line">systemctl restart nginx       <span class="comment">// 重启 Nginx</span></span><br><span class="line">systemctl reload nginx        <span class="comment">// 重新加载 Nginx</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// nginx 应用命令</span></span><br><span class="line">nginx               <span class="comment">// 启动：http://localhost:8080</span></span><br><span class="line">nginx -s stop       <span class="comment">// 停止</span></span><br><span class="line">nginx -s reopen     <span class="comment">// 重启</span></span><br><span class="line">nginx -s reload     <span class="comment">// 重新加载</span></span><br><span class="line">nginx -s quit       <span class="comment">// 退出</span></span><br><span class="line">nginx -v            <span class="comment">// 查看版本</span></span><br><span class="line">nginx -c filename   <span class="comment">// 指定配置文件</span></span><br><span class="line">cat -n nginx.<span class="property">conf</span>   <span class="comment">// 查看配置</span></span><br></pre></td></tr></table></figure>


<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、主配置文件 /etc/nginx/nginx.conf，结构图如下：</span></span><br><span class="line">main                  <span class="comment"># 全局配置，对全局生效</span></span><br><span class="line">├── events            <span class="comment"># 配置 Nginx 服务器与用户的网络连接</span></span><br><span class="line">├── http              <span class="comment"># 配置代理、缓存、日志等大多数功能和第三方模块</span></span><br><span class="line">│   ├── upstream      <span class="comment"># 配置后端服务器具体地址，负载均衡配置不可或缺</span></span><br><span class="line">│   ├── server        <span class="comment"># 配置虚拟主机的相关参数，一个 http 可有多个 server</span></span><br><span class="line">│   ├── server        </span><br><span class="line">│   │   ├── location  <span class="comment"># 一个 server 块可以包含多个用于匹配路径的 location</span></span><br><span class="line">│   │   ├── location</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、配置文件的语法规则</span></span><br><span class="line">配置文件由指令与指令块构成；</span><br><span class="line">每条指令以 ; 分号结尾，指令与参数间以空格符号分隔；</span><br><span class="line">指令块以 &#123;&#125; 大括号将多条指令组织在一起；</span><br><span class="line">include 语句允许组合多个配置文件以提升可维护性；</span><br><span class="line">使用 <span class="comment"># 符号添加注释，提高可读性；</span></span><br><span class="line">使用 $ 符号使用变量；</span><br><span class="line">部分指令的参数支持正则表达式；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、典型配置如下</span></span><br><span class="line"><span class="comment"># main：全局配置</span></span><br><span class="line">user nginx lion;                           <span class="comment"># 用户 nginx、组 lion (可空)</span></span><br><span class="line">worker_processes  auto;                    <span class="comment"># 进程数，一般设置为同 CPU 核数</span></span><br><span class="line">error_log  /var/log/nginx/error.log warn;  <span class="comment"># 错误日志存放目录</span></span><br><span class="line">pid        /var/run/nginx.pid;             <span class="comment"># 运行服务的主进程 pid 存放位置</span></span><br><span class="line">worker_rlimit_nofile <span class="number">20480</span>;                <span class="comment"># 每个子进程的最大连接数量</span></span><br><span class="line">worker_rlimit_core 50M;                    <span class="comment"># 子进程异常终止后的 core 大小限制</span></span><br><span class="line">working_directory /opt/nginx/tmp;          <span class="comment"># 用于记录分析的 core 文件存放目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># events：Nginx 服务器与用户的网络连接</span></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;                             <span class="comment"># epoll I/O 轮询：默认最适合系统的</span></span><br><span class="line">    worker_connections <span class="number">1024</span>;               <span class="comment"># 每个子进程允许最大并发数</span></span><br><span class="line">    accept_mutex on                        <span class="comment"># 打开负载均衡互斥锁，默认 off 关闭</span></span><br><span class="line">    server_name www.nginx.com;             <span class="comment"># 指定虚拟主机域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 域名匹配的四种写法：精确 &gt; 左侧通配符 &gt; 右侧通配符 &gt; 正则表达式</span></span><br><span class="line">    server_name www.nginx.com;             <span class="comment"># 精确匹配</span></span><br><span class="line">    server_name *.nginx.com;               <span class="comment"># 左侧通配</span></span><br><span class="line">    server_name www.nginx.*;               <span class="comment"># 右侧通配</span></span><br><span class="line">    server_name ~^www\.nginx\.*$;          <span class="comment"># 正则匹配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http：代理、缓存、日志定义等大多数功能和第三方模块</span></span><br><span class="line">http &#123; </span><br><span class="line">    <span class="comment"># 设置日志模式</span></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    root /opt/nginx/static;       <span class="comment"># 静态资源目录，可用于 http、server、location</span></span><br><span class="line">    access_log /var/log/nginx/access.log main;   <span class="comment"># 访问日志存放位置</span></span><br><span class="line"></span><br><span class="line">    sendfile            on;       <span class="comment"># 开启高效传输模式</span></span><br><span class="line">    tcp_nopush          on;       <span class="comment"># 减少网络报文段的数量</span></span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   <span class="number">65</span>;       <span class="comment"># 保持连接的时间，也叫超时时间，单位秒</span></span><br><span class="line">    types_hash_max_size <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;      <span class="comment"># 文件扩展名与类型映射表</span></span><br><span class="line">    default_type        application/octet-stream;   <span class="comment"># 默认文件类型</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;               <span class="comment"># 加载子配置项</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># server：配置虚拟主机的相关参数，一个 http 块中可以有多个 server</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;            <span class="comment"># 监听端口</span></span><br><span class="line">        server_name  localhost;     <span class="comment"># 域名</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># location：配置路径 </span></span><br><span class="line">        <span class="comment"># 不带 / 时会在找不到 index 文件时查找 test 文件，带 / 则不会查找</span></span><br><span class="line">        <span class="comment"># = 精确匹配 &gt; ^~ 匹配即停止 &gt; ~ 区分大小写的正则 &gt; ~* 不区分的正则 &gt; 无字符</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;   <span class="comment"># 静态资源目录</span></span><br><span class="line">            index  index.html index.htm;    <span class="comment"># 默认首页文件</span></span><br><span class="line">            deny <span class="number">172.168</span><span class="number">.22</span><span class="number">.11</span>;             <span class="comment"># 禁止访问的 ip 地址，allow 允许</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span> <span class="string">&#x27;No Page&#x27;</span>;           <span class="comment"># 返回响应码或重定向地址</span></span><br><span class="line">            <span class="keyword">return</span> https://www.baidu.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location = /match_all/ &#123; &#125;</span><br><span class="line">        location ~ \.(jpeg|jpg|png|svg)$ &#123; &#125;</span><br><span class="line">        location ^~ /b/ &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># rewrite：根据指定正则表达式匹配规则，正则/替换内容/flag</span></span><br><span class="line">        location /search &#123;</span><br><span class="line">            <span class="comment"># flag 可选值：last、break、redirect、permanent</span></span><br><span class="line">            rewrite ^/(.*) https://www.baidu.com redirect;</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        location /images &#123;</span><br><span class="line">            rewrite /images/(.*) /pics/$<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;   <span class="comment"># 默认 50x 对应的访问页面</span></span><br><span class="line">        error_page <span class="number">400</span> <span class="number">404</span> error.html;          <span class="comment"># 同上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># upstream 配置后端服务器的具体地址，负载均衡配置时不可或缺</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx 配置文件中可以直接使用的内置预定义变量主要如下：</span></span><br><span class="line">remote_addr           <span class="comment"># 客户端 IP 地址</span></span><br><span class="line">remote_port           <span class="comment"># 客户端端口</span></span><br><span class="line">server_addr           <span class="comment"># 服务端 IP 地址</span></span><br><span class="line">server_port           <span class="comment"># 服务端端口</span></span><br><span class="line">server_protocol       <span class="comment"># 服务端协议</span></span><br><span class="line">binary_remote_addr    <span class="comment"># 二进制格式的客户端 IP 地址</span></span><br><span class="line">connection            <span class="comment"># TCP 连接的序号，递增</span></span><br><span class="line">connection_request    <span class="comment"># TCP 连接当前的请求数量</span></span><br><span class="line">uri                   <span class="comment"># 请求的 URL，不包含参数</span></span><br><span class="line">request_uri           <span class="comment"># 请求的 URL，包含参数</span></span><br><span class="line">scheme                <span class="comment"># http/https 协议名</span></span><br><span class="line">request_method        <span class="comment"># 请求方法</span></span><br><span class="line">request_length        <span class="comment"># 请求长度，包含请求行、请求头、请求体</span></span><br><span class="line">args                  <span class="comment"># 全部参数字符串</span></span><br><span class="line">arg_参数名             <span class="comment"># 获取特定参数值</span></span><br><span class="line">is_args               <span class="comment"># URL 是否有参数</span></span><br><span class="line">query_string          <span class="comment"># 同 args </span></span><br><span class="line">host                  <span class="comment"># 请求信息 Host</span></span><br><span class="line">http_user_agent       <span class="comment"># 用户浏览器</span></span><br><span class="line">http_referer          <span class="comment"># 从哪些链接过来的请求</span></span><br><span class="line">http_via              <span class="comment"># 每经过一层代理服务器都会添加相应信息</span></span><br><span class="line">http_cookie           <span class="comment"># 获取用户 cookie </span></span><br><span class="line">request_time          <span class="comment"># 处理请求已消耗的时间</span></span><br><span class="line">https                 <span class="comment"># 是否开启了 https</span></span><br><span class="line">request_filename      <span class="comment"># 磁盘文件系统待访问文件的完整路径</span></span><br><span class="line">document_root         <span class="comment"># URI、root/alias 规则生成的文件夹路径</span></span><br><span class="line">limit_rate            <span class="comment"># 返回响应时的速度上限值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8081</span>;</span><br><span class="line">    server_name var.lion-test.club;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># Nginx 写了 return 方法，浏览器会默下载文件，下面是下载的文件内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            remote_addr: $remote_addr</span></span><br><span class="line"><span class="string">            remote_port: $remote_port</span></span><br><span class="line"><span class="string">            server_addr: $server_addr</span></span><br><span class="line"><span class="string">            server_port: $server_port</span></span><br><span class="line"><span class="string">            server_protocol: $server_protocol</span></span><br><span class="line"><span class="string">            binary_remote_addr: $binary_remote_addr</span></span><br><span class="line"><span class="string">            connection: $connection</span></span><br><span class="line"><span class="string">            uri: $uri</span></span><br><span class="line"><span class="string">            request_uri: $request_uri</span></span><br><span class="line"><span class="string">            scheme: $scheme</span></span><br><span class="line"><span class="string">            request_method: $request_method</span></span><br><span class="line"><span class="string">            request_length: $request_length</span></span><br><span class="line"><span class="string">            args: $args</span></span><br><span class="line"><span class="string">            arg_pid: $arg_pid</span></span><br><span class="line"><span class="string">            is_args: $is_args</span></span><br><span class="line"><span class="string">            query_string: $query_string</span></span><br><span class="line"><span class="string">            host: $host</span></span><br><span class="line"><span class="string">            http_user_agent: $http_user_agent</span></span><br><span class="line"><span class="string">            http_referer: $http_referer</span></span><br><span class="line"><span class="string">            http_via: $http_via</span></span><br><span class="line"><span class="string">            request_time: $request_time</span></span><br><span class="line"><span class="string">            https: $https</span></span><br><span class="line"><span class="string">            request_filename: $request_filename</span></span><br><span class="line"><span class="string">            document_root: $document_root</span></span><br><span class="line"><span class="string">        &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二、实战配置"><a href="#二、实战配置" class="headerlink" title="二、实战配置"></a>二、实战配置</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 定义上游服务器(指后台提供的应用服务器) upstream</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> server    定义上游服务器地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> zone      定义共享内存，用于跨 worker 子进程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> keepalive 对上游服务启用长连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> keepalive_requests  一个长连接最多请求 HTTP 个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> keepalive_timeout   空闲时一个长连接的超时时长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> random    随机负载均衡算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> hash      哈希负载均衡算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> ip_hash   根据 IP 进行哈希计算的负载均衡算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> least_conn    最少连接数负载均衡算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> least_time    最短响应时间负载均衡算法</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">upstream back_end &#123;</span><br><span class="line">    <span class="comment">// max_conns=1000</span></span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span> weight=<span class="number">3</span> max_conns=<span class="number">1</span> fail_timeout=5s max_fails=<span class="number">2</span>;</span><br><span class="line">    keepalive <span class="number">32</span>;</span><br><span class="line">    keepalive_requests <span class="number">50</span>;</span><br><span class="line">    keepalive_timeout 30s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 配置代理服务器 proxy_pass</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> URL 参数原则     http/https 开头、可带变量、URI 影响上游地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 不带 /          Nginx 直接将用户地址转发给上游的应用服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 携带 /          Nginx 会删掉用户地址中的 location URL  </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">location /b/ &#123;</span><br><span class="line">    proxy_pass <span class="attr">http</span>:<span class="comment">//127:8080;   // 用户 /b/test.html，服务器相同</span></span><br><span class="line">    proxy_pass <span class="attr">http</span>:<span class="comment">//127:8080/;  // 用户 /b/test.html，服务器 /test.html</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 配置反向代理 server</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 上游服务器   121.42.11.34   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 代理服务器   121.5.180.193  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 本机 hosts：vim /etc/hosts、121.5.180.193 proxy.lion.club</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  1、访问 proxy.lion.club/proxy 通过 upstream 配置找到 121.42.11.34:8080</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  2、地址变为 http://121.42.11.34:8080/proxy，然后连接 121.42.11.34 服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  3、通过 8080 端口的 server 找到 /usr/share/nginx/html/proxy/index.html</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /etc/nginx/conf.d/proxy.conf：重新加载 nginx -s reload </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    </span><br><span class="line">    location /proxy/ &#123;</span><br><span class="line">        root /usr/share/nginx/html/proxy;</span><br><span class="line">        index index.<span class="property">html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /etc/nginx/conf.d/proxy.conf：max_conns=1000</span></span><br><span class="line">upstream back_end &#123;</span><br><span class="line">    server <span class="number">121.42</span><span class="number">.11</span><span class="number">.34</span>:<span class="number">8080</span> weight=<span class="number">2</span> max_conns=<span class="number">1</span> fail_timeout=5s max_fails=<span class="number">3</span>;</span><br><span class="line">    keepalive <span class="number">32</span>;</span><br><span class="line">    keepalive_requests <span class="number">80</span>;</span><br><span class="line">    keepalive_timeout 20s;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name proxy.<span class="property">lion</span>.<span class="property">club</span>;</span><br><span class="line">    location /proxy &#123;</span><br><span class="line">        proxy_pass <span class="attr">http</span>:<span class="comment">//back_end/proxy;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 配置负载均衡 upstream</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 上游服务器  121.42.11.34   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 代理服务器  121.5.180.193 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 本机 hosts：vim /etc/hosts、121.5.180.193 balance.lion.club</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 命令运行：nginx -t 检测配置正确、nginx -s reload 重启、ss -nlt 查看端口占用</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  客户端运行：curl http://balance.lion.club/balance/</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /etc/nginx/conf.d/balance.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8020</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span> <span class="string">&#x27;return 8020 \n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">8030</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span> <span class="string">&#x27;return 8030 \n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// /etc/nginx/conf.d/balance.conf</span></span><br><span class="line">upstream demo_server &#123;</span><br><span class="line">    ip_hash;                    <span class="comment">// 基于 IP 分配到对应主机</span></span><br><span class="line">    hash $request_uri;          <span class="comment">// 基于 hash 算法映射到特定的上游服务器</span></span><br><span class="line">    zone test 10M;              <span class="comment">// 设置共享内存空间的名字和大小</span></span><br><span class="line">    least_conn;                 <span class="comment">// 最少连接数算法</span></span><br><span class="line"></span><br><span class="line">    server <span class="number">121.42</span><span class="number">.11</span><span class="number">.34</span>:<span class="number">8020</span>;</span><br><span class="line">    server <span class="number">121.42</span><span class="number">.11</span><span class="number">.34</span>:<span class="number">8030</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name balance.<span class="property">lion</span>.<span class="property">club</span>;</span><br><span class="line">    </span><br><span class="line">    location /balance/ &#123;</span><br><span class="line">        proxy_pass <span class="attr">http</span>:<span class="comment">//demo_server;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缓存信息"><a href="#缓存信息" class="headerlink" title="缓存信息"></a>缓存信息</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 配置缓存 upstream</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 上游服务器  121.42.11.34   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 代理服务器  121.5.180.193</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> proxy_cache         缓存共享内存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> proxy_cache_path    缓存路径 (level 层级、keys_zone 共享、inactive 过期)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> proxy_cache_key     缓存文件的 key 为请求 URI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> proxy_cache_valid   配置什么状态码可以被缓存，以及缓存时长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> proxy_no_cache         定义保存到缓存的条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> proxy_cache_bypass     定义不会从缓存中获取响应的条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> upstream_cache_status  缓存信息并设置为头信息响应给客户端</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  缓存地址：/etc/nginx/cache_temp</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// /etc/nginx/conf.d/cache.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">1010</span>;</span><br><span class="line">    root /usr/share/nginx/html/<span class="number">1010</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.<span class="property">html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">1020</span>;</span><br><span class="line">    root /usr/share/nginx/html/<span class="number">1020</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.<span class="property">html</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /etc/nginx/conf.d/cache.conf</span></span><br><span class="line">proxy_cache_path /etc/nginx/cache_temp levels=<span class="number">2</span>:<span class="number">2</span> keys_zone=<span class="attr">cache_zone</span>:30m </span><br><span class="line">max_size=2g inactive=60m use_temp_path=off;</span><br><span class="line">upstream cache_server &#123;</span><br><span class="line">    server <span class="number">121.42</span><span class="number">.11</span><span class="number">.34</span>:<span class="number">1010</span>;</span><br><span class="line">    server <span class="number">121.42</span><span class="number">.11</span><span class="number">.34</span>:<span class="number">1020</span>;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name cache.<span class="property">lion</span>.<span class="property">club</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_cache cache_zone;      </span><br><span class="line">      proxy_cache_valid <span class="number">200</span> 5m;</span><br><span class="line">      proxy_cache_key $request_uri;</span><br><span class="line">      proxy_no_cache $http_pragma $http_authorization;</span><br><span class="line">      add_header <span class="title class_">Nginx</span>-<span class="title class_">Cache</span>-<span class="title class_">Status</span> $upstream_cache_status;</span><br><span class="line">      proxy_pass <span class="attr">http</span>:<span class="comment">//cache_server;   // 代理转发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="HTTPS-证书"><a href="#HTTPS-证书" class="headerlink" title="HTTPS 证书"></a>HTTPS 证书</h2><ol>
<li>浏览器访问百度网址，百度服务器返回 HTTPS 使用的 CA 证书。</li>
<li>浏览器验证 CA 证书为合法后生成一串随机数，使用证书的公钥加密后发给服务器。</li>
<li>百度服务器通过私钥对密文进行解密，获取到随机数 (私钥加密公钥解密也可以)。</li>
<li>百度服务器将要响应的内容加密后传输给浏览器，浏览器解密后展示到页面。</li>
<li>通过对称加密和非对称机密的配合使用，保证了传输内容的安全性。</li>
</ol>
  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载证书的压缩文件，Nginx/xx.crt、Nginx/xx.key 文件拷贝到服务器目录后配置如下</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl http2 default_server;          <span class="comment"># SSL 访问端口号为 443</span></span><br><span class="line">    server_name lion.club;                                   <span class="comment"># 证书域名</span></span><br><span class="line">    ssl_certificate /etc/nginx/https/lion.club_bundle.crt;   <span class="comment"># 证书地址</span></span><br><span class="line">    ssl_certificate_key /etc/nginx/https/lion.club.key;      <span class="comment"># 私钥地址</span></span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;    <span class="comment"># 支持 ssl 协议版本，主流 1.2</span></span><br><span class="line">  </span><br><span class="line">    location / &#123;</span><br><span class="line">        root      /usr/share/nginx/html;</span><br><span class="line">        index     index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fe.server.com 访问 Nginx 的 fe.server.com 属于同源访问</span></span><br><span class="line"><span class="comment"># Nginx 对服务端 dev.server.com 转发的请求不会触发浏览器的同源策略</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen   		 <span class="number">80</span>;</span><br><span class="line">    server_name  fe.server.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass dev.server.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gzip-压缩"><a href="#Gzip-压缩" class="headerlink" title="Gzip 压缩"></a>Gzip 压缩</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 配置服务器支持压缩 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  通过前端构建工具 webpack 等在打包代码时开启压缩并放到 Nginx 服务器。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  浏览器通过请求头 Accept-Encoding 来标识是否支持压缩。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  服务端通过 res content-encoding:gzip 标识开启了压缩。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  配置文件为：/etc/nginx/conf.d/gzip.conf</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">// gzip on、gzip_types：开启后就可以支持 Gzip 压缩了</span></span><br><span class="line">gzip on; </span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript </span><br><span class="line">text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nginx 检验请求静态文件的 gz 结尾的文件，有则直接返回文件内容</span></span><br><span class="line">gzip_static on;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nginx 作为反向代理时启用或禁用从代理服务器上接收内容并压缩</span></span><br><span class="line">gzip_proxied any;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在响应消息头中添加 Vary：Accept-Encoding 标识是否压缩</span></span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩级别 1-9，级别越高压缩率越大、压缩时间越长，建议 4-6</span></span><br><span class="line">gzip_comp_level <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位</span></span><br><span class="line">gzip_buffers <span class="number">16</span> 8k;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许压缩的页面最小字节数，页面字节数从 header Content-Length 获取。</span></span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认 1.1，启用 gzip 所需的 HTTP 最低版本；</span></span><br><span class="line">gzip_http_version <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Webpack Gzip 配置：vue-cli3 vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">CompressionWebpackPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$|\.html$|\.css/</span>,  <span class="comment">// 匹配文件名</span></span><br><span class="line">          <span class="attr">threshold</span>: <span class="number">10240</span>,             <span class="comment">// 文件压缩阈值，对超过10k的进行压缩</span></span><br><span class="line">          <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>   <span class="comment">// 是否删除源文件</span></span><br><span class="line">        &#125;)]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、常用技巧"><a href="#三、常用技巧" class="headerlink" title="三、常用技巧"></a>三、常用技巧</h1><h2 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  static.sherlocked93.club;</span><br><span class="line">    charset utf-<span class="number">8</span>;      <span class="comment"># 防止中文文件名乱码</span></span><br><span class="line"></span><br><span class="line">    location /download &#123;</span><br><span class="line">        alias	          /usr/share/nginx/html/static;  <span class="comment"># 静态资源目录</span></span><br><span class="line">        </span><br><span class="line">        autoindex               on;    <span class="comment"># 开启静态资源列目录</span></span><br><span class="line">        <span class="comment"># 默认 on 显示文件真实大小，单位 byte；off 则大概大小，单位 KB、MB、GB</span></span><br><span class="line">        autoindex_exact_size    off;   </span><br><span class="line">        <span class="comment"># 默认 off 时显示的文件时间为 GMT 时间，on 则为服务器时间</span></span><br><span class="line">        autoindex_localtime     off; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  *.sherlocked93.club;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 图片防盗链</span></span><br><span class="line">    location ~* \.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">        valid_referers none blocked <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>;  <span class="comment"># 只允许本机 IP 外链引用</span></span><br><span class="line">        <span class="keyword">if</span> ($invalid_referer)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">403</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="请求过滤"><a href="#请求过滤" class="headerlink" title="请求过滤"></a>请求过滤</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 非指定请求全返回 403</span></span><br><span class="line"><span class="keyword">if</span> ( $request_method !~ ^(GET|POST|HEAD)$ ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    <span class="comment"># IP访问限制（只允许 IP: 192.168.0.2 机器访问）</span></span><br><span class="line">    allow <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>;</span><br><span class="line">    deny <span class="built_in">all</span>;</span><br><span class="line">    </span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态文件缓存"><a href="#静态文件缓存" class="headerlink" title="静态文件缓存"></a>静态文件缓存</h2><blockquote>
<p>由于图片、字体、音频、视频等静态文件在打包的时候通常会增加了 hash，所以缓存可以设置的长一点，先设置强制缓存，再设置协商缓存；如果存在没有 hash 值的静态文件，建议不设置强制缓存，仅通过协商缓存判断是否需要使用缓存。</p>
</blockquote>
  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(css|js|gif|jpg|png|bmp|swf|jpeg|ttf|ico|woff|txt)$ &#123;</span><br><span class="line">    expires 10d;                        <span class="comment"># 缓存时间，不缓存则赋值 -1</span></span><br><span class="line">    rewrite  ^(.*)/syzz(.*)$  $<span class="number">1</span>$<span class="number">2</span>;     <span class="comment"># 静态文件的路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单页面项目-history-路由"><a href="#单页面项目-history-路由" class="headerlink" title="单页面项目 history 路由"></a>单页面项目 history 路由</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  fe.sherlocked93.club;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        root       /usr/share/nginx/html/dist;  <span class="comment"># vue 打包后的文件夹</span></span><br><span class="line">        index      index.html index.htm;</span><br><span class="line">        try_files  $uri$uri/ /index.html @rewrites;</span><br><span class="line">        </span><br><span class="line">        expires -<span class="number">1</span>;                            <span class="comment"># 首页一般没有强制缓存</span></span><br><span class="line">        add_header Cache-Control no-cache;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 接口转发，有需要则配置</span></span><br><span class="line">    location ~ ^/api &#123;</span><br><span class="line">        proxy_pass http://be.sherlocked93.club;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location @rewrites &#123;</span><br><span class="line">        rewrite ^(.+)$ /index.html <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-请求转发到-HTTPS"><a href="#HTTP-请求转发到-HTTPS" class="headerlink" title="HTTP 请求转发到 HTTPS"></a>HTTP 请求转发到 HTTPS</h2><blockquote>
<p>配置完 HTTPS 后浏览器也可以访问 <code>http://sherlocked93.club/</code>，可以做一个 301 跳转而将对应域名的 HTTP 请求重定向到 HTTPS。</p>
</blockquote>
  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">server &#123;</span><br><span class="line">    listen      <span class="number">80</span>;</span><br><span class="line">    server_name www.sherlocked93.club;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单域名重定向</span></span><br><span class="line">    <span class="keyword">if</span> ($host = <span class="string">&#x27;www.sherlocked93.club&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">301</span> https://www.sherlocked93.club$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 全局非 https 协议时重定向</span></span><br><span class="line">    <span class="keyword">if</span> ($scheme != <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 或者全部重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> https://$server_name$request_uri;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以上配置选择自己需要的即可，不用全部加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛域名路径分离"><a href="#泛域名路径分离" class="headerlink" title="泛域名路径分离"></a>泛域名路径分离</h2><blockquote>
<p>有时需要配置一些二级或者三级域名，希望通过 Nginx 自动指向对应目录，比如让 test1.doc.sherlocked93.club 自动指向 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;doc&#x2F;test1 服务器地址。</p>
</blockquote>
  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  ~^([\w-]+)\.doc\.sherlocked93\.club$;</span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/html/doc/$<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛域名转发"><a href="#泛域名转发" class="headerlink" title="泛域名转发"></a>泛域名转发</h2><blockquote>
<p>有时需要二级或三级域名链接重写到我们希望的路径，让后端就可以根据路由解析不同的规则，比如让 test1.serv.sherlocked93.club&#x2F;api?name&#x3D;a 自动转发到 127.0.0.1:8080&#x2F;test1&#x2F;api?name&#x3D;a。</p>
</blockquote>
  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name ~^([\w-]+)\.serv\.sherlocked93\.club$;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header     X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header     X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header     Host $http_host;</span><br><span class="line">        proxy_set_header     X-NginX-Proxy true;</span><br><span class="line">        proxy_pass           http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/$<span class="number">1</span>$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li>为了使 Nginx 配置更易于维护，建议为每个服务创建一个单独的配置文件，存储在 &#x2F;etc&#x2F;nginx&#x2F;conf.d 目录，根据需求可以创建任意多个独立的配置文件。</li>
<li>独立的配置文件，建议遵循以下命名约定 &lt;服务&gt;.conf，比如域名是 sherlocked93.club，那么你的配置文件的应该是这样的 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;sherlocked93.club.conf，如果部署多个服务，也可以在文件名中加上 Nginx 转发的端口号，比如 sherlocked93.club.8080.conf，如果是二级域名，建议也都加上 fe.sherlocked93.club.conf。</li>
<li>常用配置可以放到 &#x2F;etc&#x2F;nginx&#x2F;snippets 文件夹，在 Nginx 配置文件中需要用到的位置 include 进去，以功能来命名，并在每个 snippet 配置文件的开头注释标明主要功能和引入位置，方便管理。比如将 gzip、cors 等常用配置都设置 snippet。</li>
<li>Nginx 日志目录内以 域名.type.log 命名的 be.sherlocked93.club.access.[error].log 等文件位于目录 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;，并为每个独立的服务都配置不同的访问权限和错误日志文件，这样查找错误时会更加方便快捷。</li>
</ul>
<h1 id="四、项目集成"><a href="#四、项目集成" class="headerlink" title="四、项目集成"></a>四、项目集成</h1><h2 id="za-insureflow-h5"><a href="#za-insureflow-h5" class="headerlink" title="za-insureflow-h5"></a>za-insureflow-h5</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># server_name  devops.zhonganinfo.com;</span></span><br><span class="line">  index        index.html;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line">  client_max_body_size 20m;</span><br><span class="line">  gzip on;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /api/order/ &#123;</span><br><span class="line">    <span class="comment"># rewrite ^/(.*)$ /$1 break;</span></span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass &lt;urlA&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /api/template/ &#123;</span><br><span class="line">    rewrite ^/api/(.*)$ /$<span class="number">1</span> <span class="keyword">break</span>;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass &lt;urlB&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /api/ops/goods/ &#123;</span><br><span class="line">    rewrite ^/api/(.*)$ /$<span class="number">1</span> <span class="keyword">break</span>;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass &lt;urlC&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 微前端</span></span><br><span class="line">  location ~ \.(html|js|css)$ &#123;</span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="video-claim-web"><a href="#video-claim-web" class="headerlink" title="video-claim-web"></a>video-claim-web</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /videoclaim &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /oss/ &#123;</span><br><span class="line">      add_header Cache-Control public,<span class="built_in">max</span>-age=<span class="number">7200</span>;</span><br><span class="line">      proxy_pass  http://wujieshan-new.oss-internal.aliyuncs.com/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.prd.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /videoclaim &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /oss/ &#123;</span><br><span class="line">      add_header Cache-Control public,<span class="built_in">max</span>-age=<span class="number">7200</span>;</span><br><span class="line">      proxy_pass  http://wjsprd.oss-internal.aliyuncs.com/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /videoclaim &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /oss/ &#123;</span><br><span class="line">      add_header Cache-Control public,<span class="built_in">max</span>-age=<span class="number">7200</span>;</span><br><span class="line">      proxy_pass  http://wujieshan-new.oss-internal.aliyuncs.com/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="video-claim-cdt"><a href="#video-claim-cdt" class="headerlink" title="video-claim-cdt"></a>video-claim-cdt</h2>  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /claim &#123;</span><br><span class="line">      add_header Cache-Control no-cache;</span><br><span class="line">      alias    /root/app/dist/;</span><br><span class="line">      index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx.prd.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /claim &#123;</span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">    alias    /root/app/dist/;</span><br><span class="line">    index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /claim/castle/ &#123;</span><br><span class="line">    proxy_pass http://videoclaim-zhongan.prd.za-tech.net/castle/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx.test.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       <span class="number">8080</span>;</span><br><span class="line">  root         /root/app/dist;</span><br><span class="line"></span><br><span class="line">  location /health &#123;</span><br><span class="line">    add_header Content-<span class="type">Type</span> text/plain;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /claim &#123;</span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">    alias    /root/app/dist/;</span><br><span class="line">    index    index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /claim/castle/ &#123;</span><br><span class="line">    proxy_pass http://videoclaim-zhongan.test.za-tech.net/castle/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>智能工厂</title>
    <url>/2020/12/10/15-%E6%99%BA%E8%83%BD%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="this is an invalid password. Check and try again" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="944a136d1beca7655931ef0a379785491f38b0e91018c92f7a2d9837546300b2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">My Name</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 高阶技能</title>
    <url>/2020/11/11/5-3-vue%E9%AB%98%E9%98%B6%E6%8A%80%E8%83%BD/</url>
    <content><![CDATA[<h1 id="一、Proxy-对象"><a href="#一、Proxy-对象" class="headerlink" title="一、Proxy 对象"></a>一、Proxy 对象</h1><h2 id="对比-defineProperty"><a href="#对比-defineProperty" class="headerlink" title="对比 defineProperty"></a>对比 defineProperty</h2><blockquote>
<p>Vue2.0 数据双向绑定通过 <strong>Object.defineProperty</strong> 去监听对象的每一个属性，然后在 get、set 方法中通过发布订阅者模式来实现的数据响应，但是存在一定的缺陷，比如只能监听已存在的属性而对增删属性无能为力，同时无法监听数组的变化，所以 Vue3.0 将其换成了功能更强大的 <strong>Proxy</strong>。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">observe</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;瑶瑶&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`属性[<span class="subst">$&#123;key&#125;</span>]的值被修改为[<span class="subst">$&#123;value&#125;</span>]`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;妹纸&#x27;</span></span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;女&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(newObj, key, &#123;</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        obj[key] = newVal</span><br><span class="line">        <span class="title function_">callback</span>(key, newVal)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">obj, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!target.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新增属性<span class="subst">$&#123;key&#125;</span>, 值为<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      target[key] = value</span><br><span class="line">      <span class="title function_">callback</span>(key, value)</span><br><span class="line">      <span class="comment">// return true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取：目标对象、访问属性、proxy 对象本身</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>)&#123; &#125;,      </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置：目标对象、赋值属性、新值、proxy 对象本身</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>)&#123; &#125;, </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断：目标对象、属性       </span></span><br><span class="line">  <span class="title function_">has</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(key.<span class="title function_">startsWith</span>(<span class="string">&#x27;_&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,key)</span><br><span class="line">  &#125;      </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target,key</span>) &#123;</span><br><span class="line">    <span class="comment">// const readonlyKeys = [&#x27;name&#x27;, &#x27;gzh&#x27;]</span></span><br><span class="line">    <span class="keyword">if</span>(readonlyKeys.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`属性<span class="subst">$&#123;key&#125;</span>不能被删除`</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> target[key]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// proxy 监听函数</span></span><br><span class="line">  <span class="title function_">apply</span>(<span class="params"></span>)&#123;&#125;,      </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Object.getOwnPropertyNames、Object.getownPropertySymbols、</span></span><br><span class="line">  <span class="comment">// Object.keys、Reflect.ownKeys 获取对象信息时</span></span><br><span class="line">  <span class="title function_">ownKeys</span>(<span class="params"></span>)&#123;&#125;,   </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 new 操作符时 </span></span><br><span class="line">  <span class="title function_">construct</span>(<span class="params"></span>)&#123;&#125;,      </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Object.defineProperty 修改属性修饰符时</span></span><br><span class="line">  <span class="title function_">defineProperty</span>(<span class="params"></span>)&#123;&#125;,  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取对象的原型时 </span></span><br><span class="line">  <span class="title function_">getPrototypeOf</span>(<span class="params"></span>)&#123;&#125;,  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置对象的原型时</span></span><br><span class="line">  <span class="title function_">setPrototypeOf</span>(<span class="params"></span>)&#123;&#125;,   </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 Object.isExtensible 判断对象是否可以添加新属性时</span></span><br><span class="line">  <span class="title function_">isExtensible</span>(<span class="params"></span>)&#123;&#125;,   </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 Object.preventExtensions 设置对象不可以修改新属性时</span></span><br><span class="line">  <span class="title function_">preventExtensions</span>(<span class="params"></span>)&#123;&#125;,  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取代理对象某个属性的属性描述时</span></span><br><span class="line">  <span class="title function_">getOwnPropertyDescriptor</span>(<span class="params"></span>)&#123;&#125;,  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote>
<p>Proxy内部调用对象的默认行为的 API，提供的静态方法与 Proxy handler 相同。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;子君&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> has = <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj</span><br><span class="line"><span class="keyword">let</span> _has = <span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj,<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="二、装饰器"><a href="#二、装饰器" class="headerlink" title="二、装饰器"></a>二、装饰器</h1><blockquote>
<p>ts 开发时 vue-property-decorator 提供了很多装饰器，但是没有 ts 时也可以使用装饰器。</p>
</blockquote>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果有 eslint 则需要配置支持装饰器</span></span><br><span class="line"><span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaFeatures</span>: &#123; <span class="attr">legacyDecorators</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target 对应 methods 这个对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name 对应属性方法的名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> descriptor 对应属性方法的修饰符</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = descriptor.<span class="property">value</span></span><br><span class="line">        descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...rest</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`调用方法【<span class="subst">$&#123;name&#125;</span>】前`</span>)</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...rest)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`调用方法【<span class="subst">$&#123;name&#125;</span>】后`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getData</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        @<span class="title function_">log</span>()</span><br><span class="line">        <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="节流防抖"><a href="#节流防抖" class="headerlink" title="节流防抖"></a>节流防抖</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; throttle, debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 函数节流装饰器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; wait 节流的毫秒</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; options 节流选项对象</span></span><br><span class="line"><span class="comment">* [options.leading=true] (boolean): 指定调用在节流开始前。</span></span><br><span class="line"><span class="comment">* [options.trailing=true] (boolean): 指定调用在节流结束后。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="keyword">function</span> (<span class="params">wait, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">        descriptor.<span class="property">value</span> = <span class="title function_">throttle</span>(descriptor.<span class="property">value</span>, wait, options)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 函数防抖装饰器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; wait 需要延迟的毫秒数。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; options 选项对象</span></span><br><span class="line"><span class="comment">* [options.leading=false] (boolean): 指定在延迟开始前调用。</span></span><br><span class="line"><span class="comment">* [options.maxWait] (number): 设置 func 允许被延迟的最大值。</span></span><br><span class="line"><span class="comment">* [options.trailing=true] (boolean): 指定在延迟结束后调用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="keyword">function</span> (<span class="params">wait, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">        descriptor.<span class="property">value</span> = <span class="title function_">debounce</span>(descriptor.<span class="property">value</span>, wait, options)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">&#x27;@/decorator&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    @<span class="title function_">debounce</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="title function_">resize</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* loading 装饰器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; message 提示信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; errorFn 异常处理逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loading = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  message = <span class="string">&#x27;加载中...&#x27;</span>, </span></span><br><span class="line"><span class="params">  errorFn = <span class="keyword">function</span> () &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = descriptor.<span class="property">value</span></span><br><span class="line">        descriptor.<span class="property">value</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">...rest</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> loading = <span class="title class_">Toast</span>.<span class="title function_">loading</span>(&#123;</span><br><span class="line">                <span class="attr">message</span>: message,</span><br><span class="line">                <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...rest)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="comment">// 调用失败并且用户自定义失败的回调函数时执行</span></span><br><span class="line">                errorFn &amp;&amp; errorFn.<span class="title function_">call</span>(<span class="variable language_">this</span>, error, ...rest)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                loading.<span class="title function_">clear</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    @<span class="title function_">loading</span>(<span class="string">&#x27;加载中&#x27;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">loadData</span>()</span><br><span class="line">      &#125;<span class="keyword">catch</span>(error)&#123; </span><br><span class="line">        <span class="title class_">Toast</span>.<span class="title function_">fail</span>(<span class="string">&#x27;加载失败&#x27;</span>) </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="确认框"><a href="#确认框" class="headerlink" title="确认框"></a>确认框</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dialog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 确认提示框装饰器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; message 提示信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; title 标题</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; cancelFn 取消回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">confirm</span>(<span class="params"></span></span><br><span class="line"><span class="params">  message = <span class="string">&#x27;确定要删除数据，此操作不可回退。&#x27;</span>,</span></span><br><span class="line"><span class="params">  title = <span class="string">&#x27;提示&#x27;</span>,</span></span><br><span class="line"><span class="params">  cancelFn = <span class="keyword">function</span>() &#123;&#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originFn = descriptor.<span class="property">value</span></span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">...rest</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Dialog</span>.<span class="title function_">confirm</span>(&#123;</span><br><span class="line">          message,</span><br><span class="line">          <span class="attr">title</span>: title</span><br><span class="line">        &#125;)</span><br><span class="line">        originFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, rest)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        cancelFn &amp;&amp; <span class="title function_">cancelFn</span>(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    @<span class="title function_">confirm</span>()</span><br><span class="line">    <span class="title function_">deleteData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在这里做删除操作&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、Typescript-Vue"><a href="#三、Typescript-Vue" class="headerlink" title="三、Typescript Vue"></a>三、Typescript Vue</h1><blockquote>
<p>项目构建：vue create typescript-app。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">project</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Prop</span>, <span class="title class_">Vue</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Project</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Project.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">@<span class="title class_">Component</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    project</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  private <span class="attr">msg</span>: string = <span class="string">&quot;welcome to my app&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  private <span class="attr">list</span>: <span class="title class_">Array</span>&lt;object&gt; = [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;Preetish&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="string">&#x27;26&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="string">&#x27;30&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Prop</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Prop</span>() readonly msg!: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Prop</span>(&#123;<span class="attr">default</span>: <span class="string">&#x27;John&#x27;</span>&#125;) readonly <span class="attr">name</span>: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Prop</span>(&#123;<span class="attr">required</span>: <span class="literal">true</span>&#125;) readonly <span class="attr">age</span>: number</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Prop</span>(<span class="title class_">String</span>) readonly <span class="attr">address</span>: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Prop</span>(&#123;<span class="attr">required</span>: <span class="literal">false</span>, <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">default</span>: <span class="string">&#x27;A&#x27;</span>&#125;) readonly <span class="attr">job</span>: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Computed</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">get</span> <span class="title function_">fullName</span>(): string &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">first</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">last</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Methods</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  public <span class="title function_">clickMe</span>(): <span class="keyword">void</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">addNum</span>(<span class="number">4</span>, <span class="number">2</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  public <span class="title function_">addNum</span>(<span class="attr">num1</span>: number, <span class="attr">num2</span>: number): number &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> num1 + num2</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Watchers</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Watch</span>(<span class="string">&#x27;name&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">nameChanged</span>(<span class="params">newVal: string</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">name</span> = newVal</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Watch</span>(<span class="string">&#x27;project&#x27;</span>, &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">projectChanged</span>(<span class="params">newVal: Person, oldVal: Person</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// Emit</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Emit</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">addToCount</span>(<span class="params">n: number</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">count</span> += n</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @<span class="title class_">Emit</span>(<span class="string">&#x27;resetData&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">resetCount</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 生命周期</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123; &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123; &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// Mixins：ProjectMixin.ts</span></span><br><span class="line"><span class="language-xml">import &#123; Component, Vue &#125; from &#x27;vue-property-decorator&#x27;</span></span><br><span class="line"><span class="language-xml">@Component</span></span><br><span class="line"><span class="language-xml">class ProjectMixin extends Vue &#123;</span></span><br><span class="line"><span class="language-xml">  public projName: string = &#x27;My project&#x27;</span></span><br><span class="line"><span class="language-xml">  public setProjectName(newVal: string): void &#123;</span></span><br><span class="line"><span class="language-xml">    this.projName = newVal</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">export default ProjectMixin</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">import &#123; Component, Vue, Mixins &#125; from &#x27;vue-property-decorator&#x27;</span></span><br><span class="line"><span class="language-xml">import ProjectMixin from &#x27;@/mixins/ProjectMixin&#x27;</span></span><br><span class="line"><span class="language-xml">@Component</span></span><br><span class="line"><span class="language-xml">export default class Project extends Mixins(ProjectMixin) &#123;</span></span><br><span class="line"><span class="language-xml">  get projectDetail(): string &#123;</span></span><br><span class="line"><span class="language-xml">    return this.projName + &#x27; &#x27; + &#x27;Preetish HS&#x27;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// Vuex</span></span><br><span class="line"><span class="language-xml">npm install vuex-module-decorators vuex-class -D</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// store/modules/user.ts</span></span><br><span class="line"><span class="language-xml">import &#123; VuexModule, Module, Mutation, Action &#125; from &#x27;vuex-module-decorators&#x27;</span></span><br><span class="line"><span class="language-xml">@Module(&#123; namespaced: true, name: &#x27;test&#x27; &#125;)</span></span><br><span class="line"><span class="language-xml">class User extends VuexModule &#123;</span></span><br><span class="line"><span class="language-xml">  public name: string = &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">  @Mutation</span></span><br><span class="line"><span class="language-xml">  public setName(newName: string): void &#123;</span></span><br><span class="line"><span class="language-xml">    this.name = newName</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  @Action</span></span><br><span class="line"><span class="language-xml">  public updateName(newName: string): void &#123;</span></span><br><span class="line"><span class="language-xml">    this.context.commit(&#x27;setName&#x27;, newName)</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">export default User</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// store/modules/index.ts</span></span><br><span class="line"><span class="language-xml">import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="language-xml">import Vuex from &#x27;vuex&#x27;</span></span><br><span class="line"><span class="language-xml">import User from &#x27;@/store/modules/user&#x27;</span></span><br><span class="line"><span class="language-xml">Vue.use(Vuex)</span></span><br><span class="line"><span class="language-xml">const store = new Vuex.Store(&#123;</span></span><br><span class="line"><span class="language-xml">  modules: &#123;</span></span><br><span class="line"><span class="language-xml">    User</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">export default store</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;details&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span>User: &#123;&#123; nameUpperCase &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">keydown</span>=<span class="string">&quot;updateName($event.target.value)&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Vue</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; namespace &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-class&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> user = <span class="title function_">namespace</span>(<span class="string">&#x27;user&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">@<span class="title class_">Component</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vue</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @user.<span class="property">State</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  public name!: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @user.<span class="property">Getter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  public nameUpperCase!: string</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  @user.<span class="property">Action</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  public updateName!: <span class="function">(<span class="params">newName: string</span>) =&gt;</span> <span class="keyword">void</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="四、require-context"><a href="#四、require-context" class="headerlink" title="四、require.context"></a>四、require.context</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@title</span> require.context(directory, useSubdirectories, regExp)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> directory：检索目录。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> useSubdirectories：是否检索子文件夹。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> regExp：匹配文件的正则表达式，一般是文件名。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件内引入多个组件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;@/components/home&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.vue$/</span>)</span><br><span class="line"><span class="keyword">const</span> modules = &#123;&#125;</span><br><span class="line">files.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = path.<span class="title function_">basename</span>(key, <span class="string">&#x27;.vue&#x27;</span>)</span><br><span class="line">  modules[name] = <span class="title function_">files</span>(key).<span class="property">default</span> || <span class="title function_">files</span>(key)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">components</span>: modules</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js 引入大量公共组件：.vue 结尾的文件</span></span><br><span class="line"><span class="keyword">const</span> requireComponents = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;../components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.vue/</span>)</span><br><span class="line">requireComponents.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reqCom = requireComponents(fileName)</span><br><span class="line">  <span class="comment">// 兼容 import export、require module.export 两种规范</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(reqCom.<span class="property">name</span>, reqCom.<span class="property">default</span> || reqCom)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex 动态引入模块文件</span></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;../modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.<span class="title function_">keys</span>().<span class="title function_">reduce</span>(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// set &#x27;./app.js&#x27; =&gt; &#x27;app&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> moduleName = modulePath.<span class="title function_">replace</span>(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">modulesFiles</span>(modulePath)</span><br><span class="line">  modules[moduleName] = value.<span class="property">default</span></span><br><span class="line">  <span class="keyword">return</span> modules</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  modules,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="五、render-函数"><a href="#五、render-函数" class="headerlink" title="五、render 函数"></a>五、render 函数</h1><blockquote>
<p>render：自定义渲染、适合复杂逻辑、性能较高。template：声明是渲染、适合逻辑简单、性能较低。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 初级</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 6&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 优化版：利用 render 函数减小了代码重复率</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">:level</span>=<span class="string">&quot;level&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Vue.component(&#x27;child&#x27;, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    const tag = [&#x27;div&#x27;, &#x27;p&#x27;, &#x27;h1&#x27;, &#x27;textarea&#x27;][this.level-1]</span><br><span class="line">    return h(tag, this.$slots.default)</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    level: &#123;  type: Number,  required: true  &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)   </span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;hehe&#x27;,</span><br><span class="line">  data() &#123; return &#123; level: 3 &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、异步组件"><a href="#六、异步组件" class="headerlink" title="六、异步组件"></a>六、异步组件</h1><blockquote>
<p>项目过大时会导致加载缓慢，则需要异步组件实现按需加载。异步组件的渲染本质上是执行 2 次或 2 次以上的渲染，先把当前组件渲染为注释节点, 然后通过 forceRender 重新渲染。或者渲染为注释节点, 然后再渲染为 loading 节点, 在渲染为请求完成的组件。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一、异步注册组件</span></span><br><span class="line"><span class="comment">// 1、工厂函数执行 resolve 回调：切割代码为多个包并通过 Ajax 加载</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;async-webpack-example&#x27;</span>, <span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>([<span class="string">&#x27;./async-com&#x27;</span>], resolve)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、工厂函数返回 Promise</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(</span><br><span class="line">  <span class="string">&#x27;async-webpack-example&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./async-com&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、工厂函数返回一个配置化组件对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AsyncComponent</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="title function_">import</span>(<span class="string">&#x27;./MyCom.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">loading</span>: <span class="title class_">LoadingComponent</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二、路由的按需加载</span></span><br><span class="line"><span class="comment">// webpack&lt; 2.4 时</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: <span class="function"><span class="params">resolve</span>=&gt;</span><span class="built_in">require</span>([<span class="string">&#x27;@/components/home&#x27;</span>], resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack&gt; 2.4 时</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: <span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;@/components/home&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




















]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 组件化开发</title>
    <url>/2020/11/03/14-2-angular%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、路由机制"><a href="#一、路由机制" class="headerlink" title="一、路由机制"></a>一、路由机制</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line">ng <span class="keyword">new</span> my-app --skip-install --routing</span><br><span class="line">ng generate component <span class="title class_">Index</span></span><br><span class="line">ng generate component <span class="title class_">HeroList</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由配置：app-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;heroes&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HeroListComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;hero/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HeroDetailComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;参数错误或者地址不存在&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h2>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 1、两种方式</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;hero&quot;</span> <span class="attr">routerLinkActive</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Hero<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/hero&#x27;]&quot;</span> [<span class="attr">routerLinkActive</span>]=<span class="string">&quot;[&#x27;active&#x27;]&quot;</span>&gt;</span>Hero<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 2、路径匹配：假设当前路由为 /home/index</span><br><span class="line"></span><br><span class="line">// 路由名字</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;hero&quot;</span>&gt;</span>/home/index/hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 绝对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/hero/list&quot;</span>&gt;</span>/hero/list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/hero&#x27;]&quot;</span>&gt;</span>/hero<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 相对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;../hero&#x27;]&quot;</span>&gt;</span>/home/hero<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">this.router.navigate([&#x27;hero&#x27;], &#123; relativeTo: this.route &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、路由配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;hero&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">HeroComponent</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;页1&#x27;</span>, <span class="attr">subtitle</span>: <span class="string">&#x27;页2&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> title = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">snapshot</span>.<span class="property">data</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> title = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">snapshot</span>.<span class="property">data</span>[<span class="string">&#x27;subtitle&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、动态路由</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;hero/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HeroDetailComponent</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">`&lt;a routerLink=&quot;/hero/1&quot; &gt;详情&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a [routerLink]=&quot;[&#x27;/hero/2&#x27;]&quot;&gt;详情&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a [routerLink]=&quot;[&#x27;/hero&#x27;, 3]&quot;&gt;详情&lt;/a&gt;`</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/hero/1&#x27;</span>]);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/hero&#x27;</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActivatedRoute</span>, <span class="title class_">Params</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">private route: ActivatedRoute</span>) &#123; &#125;</span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 三种获取方式</span></span><br><span class="line">  <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">snapshot</span>.<span class="property">paramMap</span>.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">snapshot</span>.<span class="property">params</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">params: Params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = params[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、queryParams</span></span><br><span class="line"><span class="string">`&lt;a [routerLink]=&quot;[&#x27;/hero&#x27;]&quot; [queryParams]=&quot;&#123;id: 4, title: &#x27;hero&#x27;&#125;&quot;&gt;&lt;/a&gt;`</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/hero&#x27;</span>], &#123; <span class="attr">queryParams</span>: &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">title</span>: <span class="string">&#x27;hero&#x27;</span>&#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">snapshot</span>.<span class="property">queryParams</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">queryParams</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">params: Params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = params[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">const</span> title = params[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><blockquote>
<p>常用于实现用户的访问权限问题，实现惰性加载模块。守卫类型主要有：CanLoad (是否加载)、Resolve (预先获取数据)、CanActivate (是否进入)、CanActivateChild (是否进入子路由)、CanDeactivate (是否离开)。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 AuthGuard</span></span><br><span class="line">ng g <span class="variable language_">module</span> admin -routing --flat --<span class="variable language_">module</span>=app</span><br><span class="line">ng g component admin/admin</span><br><span class="line">ng g component admin/admin-dashboard</span><br><span class="line">ng g guard auth/auth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、定义：auth/auth.guard.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Router</span>, <span class="title class_">ActivatedRouteSnapshot</span>, <span class="title class_">RouterStateSnapshot</span>,</span><br><span class="line">  <span class="title class_">CanActivate</span>, <span class="title class_">CanActivateChild</span>, <span class="title class_">CanLoad</span>, <span class="title class_">CanDeactivate</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span></span><br><span class="line">@<span class="title class_">Injectable</span>(&#123; <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> implements <span class="title class_">CanActivate</span>, </span><br><span class="line"><span class="title class_">CanActivateChild</span>, <span class="title class_">CanLoad</span>, <span class="title class_">CanDeactivate</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    private router: Router, </span></span><br><span class="line"><span class="params">    private _http: HttpClient</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getIsAdmin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/user/isAdmin&#x27;</span>)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">res: boolean</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">canActivate</span>(</span><br><span class="line">    <span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, </span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span>): boolean &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getIsAdmin</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">isAdmin</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAdmin) &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigateByUrl</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">canDeactivate</span>(<span class="params"></span></span><br><span class="line"><span class="params">    component: HomeComponent,</span></span><br><span class="line"><span class="params">    currentRoute: ActivatedRouteSnapshot,</span></span><br><span class="line"><span class="params">    currentState: RouterStateSnapshot,</span></span><br><span class="line"><span class="params">    nextState: RouterStateSnapshot</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivateChild</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">canLoad</span>(<span class="params">route: Route</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Resolve</span> (</span><br><span class="line">    <span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, </span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span>): any &#123;</span><br><span class="line">      <span class="keyword">if</span>(route.<span class="property">params</span>[<span class="string">&#x27;id&#x27;</span>])&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigateByUrl</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、注入：app-routing.module.ts 或 app.modules.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">AdminComponent</span>, </span><br><span class="line">    <span class="attr">canLoad</span>: [<span class="title class_">AuthGuard</span>],</span><br><span class="line">    <span class="attr">canActivate</span>: [<span class="title class_">AuthGuard</span>],</span><br><span class="line">    <span class="attr">canActivateChild</span>: [<span class="title class_">AuthGuard</span>],</span><br><span class="line">    <span class="attr">canDeactivate</span>: [<span class="title class_">AuthGuard</span>],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">admin</span>: <span class="title class_">AuthGuard</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthGuard</span>, <span class="title class_">DetailResolver</span>]</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure>


<h1 id="三、HTTP-请求"><a href="#三、HTTP-请求" class="headerlink" title="三、HTTP 请求"></a>三、HTTP 请求</h1><h2 id="Angular4-3-后"><a href="#Angular4-3-后" class="headerlink" title="Angular4.3 后"></a>Angular4.3 后</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span>, <span class="title class_">HttpHeaders</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, catchError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpService</span> &#123;</span><br><span class="line">    public http;</span><br><span class="line">    private <span class="attr">baseUrl</span>: any;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">http</span> = http;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">baseUrl</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">get</span>(<span class="params">url: string</span>) &#123;</span><br><span class="line">        url = <span class="variable language_">this</span>.<span class="property">baseUrl</span> + url;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(url, options)</span><br><span class="line">            .<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">extractData</span>), <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">post</span>(<span class="params">url: string, params?: any</span>) &#123;</span><br><span class="line">        url = <span class="variable language_">this</span>.<span class="property">baseUrl</span> + url;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">post</span>(url, params, options)</span><br><span class="line">            .<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">extractData</span>), <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">delete</span>(<span class="params">url: string</span>) &#123;</span><br><span class="line">        url = <span class="variable language_">this</span>.<span class="property">baseUrl</span> + url;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">delete</span>(url, options)</span><br><span class="line">            .<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">extractData</span>), <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">postForm</span>(<span class="params">url: string, params?: any</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">formData</span>: <span class="title class_">FormData</span> = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, params.<span class="property">username</span>);</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&#x27;password&#x27;</span>, params.<span class="property">password</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">post</span>(url, formData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">extractData</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">return</span> data || &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">handleError</span>(<span class="params">error: Response | any</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">errMsg</span>: string;</span><br><span class="line">        <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">Response</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> data = error.<span class="title function_">json</span>() || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span> err = data.<span class="property">toString</span> || <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">            errMsg = <span class="string">`<span class="subst">$&#123;error.status&#125;</span> - <span class="subst">$&#123;error.statusText || <span class="string">&#x27;&#x27;</span>&#125;</span> <span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errMsg = error.<span class="property">message</span> ? error.<span class="property">message</span> : error.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="keyword">throw</span>(errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、Rxjs-异步"><a href="#四、Rxjs-异步" class="headerlink" title="四、Rxjs 异步"></a>四、Rxjs 异步</h1><blockquote>
<p>ReactiveX 编程理念的 Js 库。ReactiveX 来自微软，它是一种基于事件处理异步数据流的编程。简单来说，它将用户操作、网络响应、定时器、Worker 等一切数据都包装成流的形式，然后通过强大丰富的操作符对流进行处理，使你能以同步编程的方式处理异步数据，并组合不同的操作符来实现功能。</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li><strong>Observable</strong>：可观察对象，一个可调用的未来值或事件的集合，用于存储流动的数据。</li>
<li><strong>Observer</strong>：观察者，一个监听 Observable 流动结果的回调函数集合，用于作为参数传入订阅方法 subscribe 来获取数据流动结果。</li>
<li><strong>Subscription</strong>：订阅，一个可执行的 Observable，主要用于取消订阅。</li>
<li><strong>Operators</strong>：操作符，map、filter、concat、flatMap 等采用函数式编程风格的纯函数，用于处理数据。</li>
<li><strong>Subject</strong>：主体，相当于 EventEmitter，用于将值或事件多路推送给多个 Observer。</li>
<li><strong>Schedulers</strong>：集中式调度程序用来控制并发的调度器，用于将所有任务进行排序并控制执行时机 (计时器、动画等)。</li>
</ul>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote>
<p>数据流是一种可观察的序列，可以被订阅，也可以被用来做一些转换和组合。</p>
</blockquote>
<ul>
<li>创建<ul>
<li>单值：<strong>of、empty、never</strong></li>
<li>多值：<strong>from</strong></li>
<li>定时：<strong>interval、timer</strong></li>
<li>事件：<strong>fromEvent</strong></li>
<li>Promise：<strong>fromPromise</strong></li>
<li>自定义：<strong>create</strong></li>
</ul>
</li>
<li>转换<ul>
<li>改变数据形态：<strong>map、mapTo、pluck</strong></li>
<li>过滤：<strong>filter、skip、first、last、take</strong></li>
<li>时间轴：<strong>delay、timeout、throttle、debounce、audit、buffer</strong></li>
<li>累加：<strong>reduce、scan</strong></li>
<li>异常处理：<strong>throw、catch、retry、finally</strong></li>
<li>条件执行：<strong>takeUntil、delayWhen、retryWhen、subscribeOn、ObserveOn</strong></li>
<li>转接：<strong>switch</strong></li>
</ul>
</li>
<li>组合<ul>
<li><strong>merge</strong>：合并序列。</li>
<li><strong>concat</strong>：保持原顺序连接两个数据流。</li>
<li><strong>race</strong>：预设条件为其中一个数据流完成。</li>
<li><strong>forkJoin</strong>：预设条件为所有数据流都完成。</li>
<li><strong>zip</strong>：将各数据流最后一个值合并为对象。</li>
<li><strong>combineLatest</strong>：各数据流最后一个值合并为数组。</li>
</ul>
</li>
<li>特殊 subject<ul>
<li><strong>AsyncSubject</strong>：结束时传送最后一个值。</li>
<li><strong>ReplaySubject</strong>：新订阅时发送最后几个值。</li>
<li><strong>BehaviorSubject</strong>：新订阅时发送当前的最新值。</li>
</ul>
</li>
</ul>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="title class_">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// take 取前 3 个数据、map 对数据翻倍、filter 过滤数据</span></span><br><span class="line">stream.<span class="title function_">take</span>(<span class="number">3</span>).<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">0</span>).<span class="title function_">subscribe</span>(<span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)  <span class="comment">// 2、4</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整参数为函数集合，只传一个函数时指 next 函数</span></span><br><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">val</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`get <span class="subst">$&#123;val&#125;</span>`</span>), <span class="comment">// 正常流动</span></span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err),      <span class="comment">// 流中出错</span></span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)    <span class="comment">// 流结束</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> subscription = stream.<span class="title function_">subscribe</span>(observer)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscription.<span class="title function_">unsubscribe</span>();   <span class="comment">// 取消订阅</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次订阅</span></span><br><span class="line"><span class="keyword">const</span> observerA = &#123; <span class="attr">next</span>: <span class="function"><span class="params">val</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`A：<span class="subst">$&#123;val&#125;</span>`</span>) &#125;;</span><br><span class="line"><span class="keyword">const</span> observerB = &#123; <span class="attr">next</span>: <span class="function"><span class="params">val</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`B：<span class="subst">$&#123;val&#125;</span>`</span>) &#125;;</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observerA);</span><br><span class="line">subject.<span class="title function_">subscribe</span>(observerB);</span><br><span class="line">observable.<span class="title function_">subscribe</span>(subject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广播简化</span></span><br><span class="line"><span class="keyword">var</span> source = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">3</span>), <span class="title function_">multicast</span>(<span class="keyword">new</span> <span class="title class_">Subject</span>()));</span><br><span class="line">source.<span class="title function_">subscribe</span>(observerA);</span><br><span class="line">source.<span class="title function_">subscribe</span>(observerB);</span><br><span class="line"></span><br><span class="line"><span class="comment">// before subscribe、after subscribe、get 1、get 2、done</span></span><br><span class="line"><span class="keyword">const</span> stream = <span class="title class_">Observable</span>.<span class="title function_">create</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    observer.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">    observer.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">    observer.<span class="title function_">complete</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">observeOn</span>(<span class="title class_">Scheduler</span>.<span class="property">async</span>);   <span class="comment">// 改变执行时机</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before subscribe&#x27;</span>);</span><br><span class="line"><span class="comment">// observer 是多个函数的集合，订阅时传入的一个函数指 next</span></span><br><span class="line">stream.<span class="title function_">subscribe</span>(observer);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after subscribe&#x27;</span>);</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 项目开发</title>
    <url>/2020/09/09/14-1-angular%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一、项目构建"><a href="#一、项目构建" class="headerlink" title="一、项目构建"></a>一、项目构建</h1><ul>
<li><strong>独立开发者</strong>：利用 cli 可以简单的创建 Angular 应用程序、组件和其他模块，Standalone 无需很多模板也可以轻松创建组件。</li>
<li><strong>初创公司</strong>：利用 Angular Language Service 插件，开发人员可以生成一致的代码，通过类型检测和其他工具，开发人员可以在部署前发现错误。</li>
<li><strong>中型公司</strong>：Angular 目前已经支持国际化和渐进式 Web 应用程序(PWA)。</li>
<li><strong>大型公司</strong>：微前端。</li>
</ul>
<h2 id="项目新建"><a href="#项目新建" class="headerlink" title="项目新建"></a>项目新建</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装：当前 angular@14</span></span><br><span class="line">cnpm i -g @angular/cli</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过依赖安装、覆盖现有文件、更严格的 typescript 编译选项</span></span><br><span class="line">ng <span class="keyword">new</span> my-app --skip-install、--force、--strict</span><br><span class="line">ng test、ng e2e            <span class="comment">// 单元测试、端对端测试</span></span><br><span class="line">ng serve、ng build         <span class="comment">// 运行、打包</span></span><br><span class="line">ng serve -o/--open         <span class="comment">// 打开浏览器</span></span><br><span class="line">ng serve --prod            <span class="comment">// 开发环境运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建类、接口、组件、指令、服务、模块、管道、枚举</span></span><br><span class="line">ng g <span class="keyword">class</span> <span class="title class_">model</span>/name</span><br><span class="line">ng g interface model/hero</span><br><span class="line">ng g component components/name</span><br><span class="line">ng g directive directives/name</span><br><span class="line">ng g service services/name</span><br><span class="line">ng g <span class="variable language_">module</span> name</span><br><span class="line">ng g pipe name</span><br><span class="line">ng g enum name</span><br></pre></td></tr></table></figure>


<h2 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行时文件加载顺序</span></span><br><span class="line">main.<span class="property">ts</span>、app.<span class="property">module</span>.<span class="property">ts</span>、app.<span class="property">component</span>.<span class="property">ts</span>、index.<span class="property">html</span>、app.<span class="property">component</span>.<span class="property">html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目目录 </span></span><br><span class="line">├── e2e            <span class="comment">// 端对端测试文件</span></span><br><span class="line">├── config.<span class="property">xml</span>     <span class="comment">// 打包成 app 的配置文件</span></span><br><span class="line">├── package.<span class="property">json</span>   <span class="comment">// 配置项目的元数据和管理项目所需要的依赖</span></span><br><span class="line">├── angular.<span class="property">json</span>   <span class="comment">// angular 配置文件</span></span><br><span class="line">├── karma.<span class="property">conf</span>.<span class="property">js</span>  <span class="comment">// 测试相关的配置文件</span></span><br><span class="line">├── tsconfig.<span class="property">json</span>  <span class="comment">// 指定编译 typescript 项目的根文件和编译选项</span></span><br><span class="line">├── tslint.<span class="property">json</span>    <span class="comment">// 格式化和校验 typescript</span></span><br><span class="line">└── src：          <span class="comment">// 工作空间源代码</span></span><br><span class="line">    ├── app           <span class="comment">// 应用根目录（组件、路由、静态资源等）</span></span><br><span class="line">    ├── environments  <span class="comment">// 环境配置</span></span><br><span class="line">    ├── favicon.<span class="property">ico</span>   <span class="comment">// 网站图标</span></span><br><span class="line">    ├── index.<span class="property">html</span>    <span class="comment">// 应用的主页面</span></span><br><span class="line">    ├── styles.<span class="property">scss</span>   <span class="comment">// 全局样式文件</span></span><br><span class="line">    ├── main.<span class="property">ts</span>       <span class="comment">// 主入口文件</span></span><br><span class="line">    ├── test.<span class="property">js</span>       <span class="comment">// 测试入口文件</span></span><br><span class="line">    └── polyfills.<span class="property">ts</span>  <span class="comment">// 兼容不同浏览器</span></span><br></pre></td></tr></table></figure>


<h2 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h2><blockquote>
<p>内置模块主要有：核心模块 @angular&#x2F;core、通用模块 @angular&#x2F;common、表单模块 @angular&#x2F;forms、网络模块 @angular&#x2F;http。简单项目时可以将所有组件都挂载到根模块，复杂项目时则需要通过自定义模块来组织代码和实现路由懒加载。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义模块：新建模块、组件、服务</span></span><br><span class="line">ng g m <span class="variable language_">module</span>/user --routing          <span class="comment">// m == module</span></span><br><span class="line">ng g s <span class="variable language_">module</span>/user/services/common    <span class="comment">// s == service</span></span><br><span class="line">ng g c <span class="variable language_">module</span>/user                    <span class="comment">// c == component、根组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义子组件</span></span><br><span class="line">ng g c <span class="variable language_">module</span>/user/components/order</span><br><span class="line">ng g c <span class="variable language_">module</span>/user/components/address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 路由懒加载模块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> forRoot、forChild：分别用于根模块、子模块加载路由的 RouterModule 对象方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> component、loadChildren：分别用于加载模块、组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> loadChildren：导入模块的相对路径、\#分隔符、导出模块类的名称</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line"><span class="comment">// user-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">    <span class="comment">// &lt;a [routerLink]=&quot;[&#x27;/user&#x27;]&quot;&gt;用户模块&lt;/a&gt;</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">UserComponent</span>, </span><br><span class="line">      <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;order&#x27;</span>, <span class="attr">component</span>: <span class="title class_">OrderComponent</span> &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// &lt;a [routerLink]=&quot;[&#x27;/user/address&#x27;]&quot;&gt;用户地址&lt;/a&gt;</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;address&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AddressComponent</span> &#125;</span><br><span class="line">]</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>(routes)],</span><br><span class="line">    <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserRoutingModule</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OrderComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/order/order.component&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">declarations</span>: [<span class="title class_">UserComponent</span>, <span class="title class_">OrderComponent</span>, <span class="title class_">AddressComponent</span>],</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">UserRoutingModule</span>],</span><br><span class="line">    <span class="attr">exports</span>: [<span class="title class_">UserComponent</span>]       <span class="comment">// 暴露组件</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 懒加载模式一：导入模块的相对路径、#分隔符、导出模块类的名称</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">loadChildren</span>: <span class="string">&#x27;./module/user/user.module#UserModule&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./module/user/user.module&#x27;</span>)</span><br><span class="line">                                        .<span class="title function_">then</span>( <span class="function"><span class="params">m</span> =&gt;</span> m.<span class="property">UserModule</span>) &#125;,</span><br><span class="line">];</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">    <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.module.ts：告诉 Angular 如何编译和启动应用的根模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../module/user/user.module&#x27;</span>     <span class="comment">// 自定义模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./services/common.service&#x27;</span>   <span class="comment">// 自定义服务</span></span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;           <span class="comment">// 模块装饰器：接受一个元数据对象，将相关代码组织为功能单元</span></span><br><span class="line">    <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],  <span class="comment">// 声明定义的组件、指令、管道 (静态的元数据)</span></span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">AppRoutingModule</span>, <span class="title class_">UserModule</span>],  <span class="comment">// 导入/挂载模块：&lt;app-user&gt;  </span></span><br><span class="line">    <span class="attr">exports</span>: [<span class="title class_">FocusDirective</span>],     <span class="comment">// 导出/暴露模块</span></span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">CommonService</span>],    <span class="comment">// 声明模块定义的公共服务 (运行时的元数据)  </span></span><br><span class="line">    <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],     <span class="comment">// 指定应用的主视图</span></span><br><span class="line">    <span class="attr">entryComponents</span>: [<span class="title class_">Users</span>],      <span class="comment">// 入口文件，引导动态加载组件</span></span><br><span class="line">    <span class="attr">schemas</span>: []                    <span class="comment">// 声明非 Angular 组件、指令的元素或属性</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>



<h1 id="二、组件开发"><a href="#二、组件开发" class="headerlink" title="二、组件开发"></a>二、组件开发</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><blockquote>
<p>angular 应用是通过一个个组件所构成的组件树，每个组件都包含了一组独立功能并且可以重复使用，通过 angular-cli 命令行创建的组件会被放到目录 src&#x2F;app&#x2F; 并自动注册到应用的根模块 app.module.ts。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个 hero 组件</span></span><br><span class="line">ng g component hero</span><br><span class="line"></span><br><span class="line"><span class="comment">// components 目录下新建 hero 组件</span></span><br><span class="line">ng g component components/hero</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件包含的四个部分</span></span><br><span class="line">hero.<span class="property">component</span>.<span class="property">ts</span>：组件类，用来处理数据和功能，为视图呈现提供支持</span><br><span class="line">hero.<span class="property">component</span>.<span class="property">html</span>：组件对应的页面 <span class="variable constant_">HTML</span> 模板，用来呈现组件的功能</span><br><span class="line">hero.<span class="property">component</span>.<span class="property">scss</span>：只针对当前组件的样式</span><br><span class="line">hero.<span class="property">component</span>.<span class="property">spec</span>.<span class="property">ts</span>：当前组件的单元测试文件（非必须）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件装饰器：定义组件在运行期间该如何处理、实例化和使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HeroService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../hero.service&#x27;</span>;</span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;app-hero&#x27;</span>,  <span class="comment">// 自定义标签：标签位置会创建并插入组件实例</span></span><br><span class="line">    <span class="attr">templateUrl</span>: <span class="string">&#x27;./hero.component.html&#x27;</span>,</span><br><span class="line">    <span class="attr">styleUrls</span>: [<span class="string">&#x27;./hero.component.less&#x27;</span>],</span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">HeroService</span>],  <span class="comment">// 声明服务</span></span><br><span class="line">    <span class="attr">template</span>:</span><br><span class="line">    <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li *ngFor=&quot;let hero of heroes&quot; (click)=&quot;onSelect(hero)&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    <span class="attr">heroes</span>: <span class="title class_">Hero</span>[];</span><br><span class="line">    <span class="attr">onSelect</span>: <span class="title class_">Hero</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span> (private <span class="attr">service</span>: <span class="title class_">HeroService</span>) &#123;  <span class="comment">// 注入服务</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hero</span> = <span class="string">&#x27;Tony&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit () &#123;     <span class="comment">// 初始化组件时调用一次的钩子</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heroes</span> = <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">getHeroes</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onSelect (<span class="attr">hero</span>: <span class="title class_">Hero</span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hero</span> = hero; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">插值表达式</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>显示变量值：&#123;&#123;name.toUpperCase()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ngNonBindable</span>&gt;</span>显示花括号：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">属性绑定：赋值为常量时需加引号</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> [<span class="attr">title</span>]=<span class="string">&quot;name&quot;</span>&gt;</span>推荐方式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">bind-href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>bind 方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">指令绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let hero of heroes; let i=index; trackBy: trackByIndex&quot;</span></span></span><br><span class="line"><span class="tag">    *<span class="attr">ngIf</span>=<span class="string">&quot;hero.name&quot;</span> </span></span><br><span class="line"><span class="tag">    [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;active: hero.isSelected&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    [<span class="attr">ngStyle</span>]=<span class="string">&quot;&#123;color: hero.color&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> [<span class="attr">style.width</span>]=<span class="string">&quot;&#x27;100px&#x27;&quot;</span> [<span class="attr">class</span>]=<span class="string">&quot;&#x27;a b&#x27;&quot;</span>&gt;</span>属性绑定 []<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>属性型指令：NgClass、NgStyle 设置多个动态的类名和样式<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>trackByIndex(i: number, item: any): string &#123; return item.id &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">事件绑定 ()</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">&quot;onClick()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">on-click</span>=<span class="string">&quot;onClick()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">双向绑定：FormModule 引入后才能使用 ngModel</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">bindon-ngModel</span>=<span class="string">&quot;hero.name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;hero.name&quot;</span> (<span class="attr">ngModelChange</span>)=<span class="string">&quot;onChange()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;hero.name&quot;</span> (<span class="attr">input</span>)=<span class="string">&quot;hero.name=$event.target.value&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">模板引用变量：可用来直接访问元素</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> #<span class="attr">refMsgInput</span> (<span class="attr">keyup</span>)=<span class="string">&quot;getRefMsg(refMsgInput.value)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">内嵌视图</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngTemplateOutlet</span>]=<span class="string">&quot;a&quot;</span> <span class="attr">ngOutletContext</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 精确匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;hero&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchCase</span>=<span class="string">&quot;&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 范围匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngPlural</span>]=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">ngPluralCase</span>=<span class="string">&quot;=0&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">ngPluralCase</span>=<span class="string">&quot;=1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">ngPluralCase</span>=<span class="string">&quot;other&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 内置指令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 属性型指令：NgClass、NgStyle、NgModel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 结构型指令：NgIf、NgFor、NgSwitch</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 自定义指令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 新建指令：ng g directive directives/highlight</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 模块声明：<span class="doctag">@NgModule</span>(&#123; declarations: [HighlightDirective] &#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 组件使用：&lt;span [appHighlight]=&quot;green&quot;&gt;点亮&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line">@<span class="title class_">Directive</span>(&#123; <span class="attr">selector</span>: <span class="string">&#x27;[appHighlight]&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HighlightDirective</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private el: ElementRef</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Input</span>() <span class="attr">appHighlight</span>: string;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">HostListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>) <span class="title function_">onMouseEnter</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">highlight</span>(<span class="variable language_">this</span>.<span class="property">appHighlight</span> || <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">HostListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>) <span class="title function_">onMouseLeave</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">highlight</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">highlight</span>(<span class="params">color: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">el</span>.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置管道：date、json、uppercase、lowercase、currency、percent、slice</span></span><br><span class="line">&lt;span&gt;&#123;&#123;today | <span class="attr">date</span>:<span class="string">&#x27;yyyy-MM-dd&#x27;</span>/<span class="string">&#x27;fullDate&#x27;</span>/<span class="string">&#x27;shortTime&#x27;</span>&#125;&#125;&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;&#x27;abcdefg&#x27; | slice:0:3 | uppercase&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 自定义管道</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 新建管道：ng g pipe pipes/strLength</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 模块声明：<span class="doctag">@NgModule</span>(&#123; declarations: [StrLengthPipe] &#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 组件使用：&lt;span&gt;&#123;&#123;title | strLength&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">@<span class="title class_">Pipe</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;strLength&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">StrLengthPipe</span> implements <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">    <span class="title function_">transform</span>(<span class="attr">value</span>: string, args?: any): any &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><blockquote>
<p>封装了日志服务等公共方法的独立模块，通过依赖注入提供给专注业务的组件。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 自定义服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 新建服务：ng g service services/hero</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 组件使用：import 导入、providers 注册、constructor 依赖注入</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">// hero.service.ts：创建可注入服务</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;</span><br><span class="line">    <span class="comment">// 依赖注入：声明一个私有属性并标记为注入点 (组件创建时赋值 Logger 单例对象)</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        private logger: Logger,</span></span><br><span class="line"><span class="params">        private http: HttpClient</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getHeroes</span>(): <span class="title class_">Hero</span>[] &#123;</span><br><span class="line">        <span class="keyword">let</span> heroes = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/hexo&#x27;</span>)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">heroes: Hero[]</span>) =&gt;</span> &#123;</span><br><span class="line">            heroes.<span class="title function_">push</span>(...heroes);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;heroes.length&#125;</span> heroes`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> heroes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hero.component.ts：组件使用</span></span><br><span class="line">@<span class="title class_">Component</span>(&#123;  </span><br><span class="line">    <span class="attr">selector</span>:  <span class="string">&#x27;hero&#x27;</span>,</span><br><span class="line">    <span class="attr">templateUrl</span>: <span class="string">&#x27;./hero.component.html&#x27;</span>,</span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">HeroService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HomeComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    private <span class="attr">heroes</span>: <span class="title class_">Hero</span>[] = [];</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private heroService: HeroService</span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">getHeroes</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heroes</span> = <span class="variable language_">this</span>.<span class="property">heroService</span>.<span class="title function_">getHeroes</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务的三种方式</span></span><br><span class="line">@<span class="title class_">Injectable</span>()   <span class="comment">// 声明为可注入的服务但未注册</span></span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;     <span class="comment">// 模块中注册：当前模块下所有组件可使用</span></span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">HeroService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line">@<span class="title class_">Component</span>(&#123;    <span class="comment">// 组件中注册：当前组件的每一个实例可使用</span></span><br><span class="line">    <span class="attr">providers</span>: [<span class="title class_">HeroService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>(&#123;   <span class="comment">// 声明服务并在根注入器中注册，可以全局使用</span></span><br><span class="line">    <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>  </span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>


<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote>
<p>组件加载过程中会按照以下顺序依次执行，页面加载过程中涉及数据绑定和更新时会再次触发 ngDoCheck、ngAfterContentChecked、ngAfterViewChecked。</p>
</blockquote>
<ul>
<li><strong>constructor</strong>：构造函数而并非生命周期钩子，一般用于注入服务。</li>
<li><strong>ngOnChanges</strong>：绑定数据变化时调用，注意无法监听对象内部数据的变化。</li>
<li><strong>ngOnInit</strong>：组件初始化，在首次 ngOnChanges 之后调用。</li>
<li><strong>ngDoCheck</strong>：可以检测一切数据的变化，可用来自定义检测逻辑。</li>
<li><strong>ngAfterContentInit</strong>：组件内容初始化之后。</li>
<li><strong>ngAfterContentChecked</strong>：组件内容变更之后。</li>
<li><strong>ngAfterViewInit</strong>：视图初始化之后。</li>
<li><strong>ngAfterViewChecked</strong>：视图每次发生变化时。</li>
<li><strong>ngOnDestroy</strong>：组件注销时调用一次。</li>
</ul>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ============================= 父子通信 ===============================</span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;printData()&quot;&gt;调用子组件的方法&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;app-child #child [name]=&quot;name&quot; (childEmit)=&quot;onClick($event)&quot;&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">    <span class="comment">// 1、父组件发送数据</span></span><br><span class="line">    public <span class="attr">name</span>:string = <span class="string">&#x27;儿子&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、父组件接收数据</span></span><br><span class="line">    public <span class="title function_">onClick</span>(<span class="attr">bool</span>:<span class="title class_">Boolean</span>):<span class="keyword">void</span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、父组件获取子组件的实例：static 是否在运行更改检测前处理查询结果</span></span><br><span class="line">    @<span class="title class_">ViewChild</span>(<span class="string">&#x27;child&#x27;</span>, &#123; <span class="attr">static</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    public child!: <span class="title class_">ElementRef</span>&lt;<span class="title class_">HTMLElement</span>&gt;;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">printData</span>():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">child</span>)  &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">child</span>.<span class="title function_">print</span>(<span class="string">&#x27;hello2&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span>, <span class="title class_">Output</span>, <span class="title class_">EventEmitter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;h3 (click)=&quot;myClick()&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroChildComponent</span> &#123;</span><br><span class="line">    <span class="comment">// 1、子组件接收数据</span></span><br><span class="line">    @<span class="title class_">Input</span>() </span><br><span class="line">    public <span class="attr">name</span>: string;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、子组件发送数据</span></span><br><span class="line">    @<span class="title class_">Output</span>()</span><br><span class="line">    public readonly <span class="attr">childEmit</span>: <span class="title class_">EventEmitter</span>&lt;boolean&gt; = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">myClick</span>():<span class="keyword">void</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">childEmit</span>.<span class="title function_">emit</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">print</span>(<span class="attr">content</span>:string):<span class="keyword">void</span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================= 全局通信 ============================</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> dataService.ts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> BehaviorSubject：用来创建一个共享服务，实现发布订阅模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> rxjs：使用 Observables 的响应式编程的库，方便编写异步或回调代码</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BehaviorSubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/BehaviorSubject&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>(&#123; <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    private message = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>&lt;string&gt;(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">getMessage</span>(): <span class="title class_">Observable</span>&lt;string&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">asObservable</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">setMessage</span>(<span class="attr">msg</span>: string): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">next</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a.component.ts：发布</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">messageService</span>.<span class="title function_">setMessage</span>(<span class="string">&#x27;update&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.component.ts：订阅、取消订阅</span></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">messageService</span>.<span class="title function_">getMessage</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">m</span> =&gt;</span> &#123; &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isRecoverSub</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、表单控件"><a href="#三、表单控件" class="headerlink" title="三、表单控件"></a>三、表单控件</h1><blockquote>
<p>模板驱动表单通过表单指令将数据和相关验证绑定到组件模板并通过修改 ngModel 绑定的数据模型来完成数据更新，响应式表单则是在表单数据发生变更时通过 FormControl 实例返回一个新的数据模型而不是直接修改原模型。</p>
</blockquote>
<h2 id="模板驱动表单"><a href="#模板驱动表单" class="headerlink" title="模板驱动表单"></a>模板驱动表单</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.js：引入 ngModel 依赖的 FormsModule</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">FormsModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// css 样式：输入内容不满足条件时进行提示</span></span><br><span class="line">.<span class="property">ng</span>-valid[required], .<span class="property">ng</span>-valid.<span class="property">required</span>  &#123;</span><br><span class="line">    border-<span class="attr">left</span>: 5px solid #42A948;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">ng</span>-<span class="attr">invalid</span>:<span class="title function_">not</span>(<span class="params">form</span>)  &#123;</span><br><span class="line">    border-<span class="attr">left</span>: 5px solid #a94442;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用的控件状态</span></span><br><span class="line">valid、invalid：校验成功/失败</span><br><span class="line">pristine、dirty：数据未/已被修改</span><br><span class="line">enabled、disabled：启用/禁用状态</span><br><span class="line">touched、untouched：未/已被触摸或点击过</span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;submit()&quot;</span> #<span class="attr">heroForm</span>=<span class="string">&quot;ngForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将 ngModel 指令通过模板引用变量的形式暴露出来，从而获取控件状态 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;hero.name&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">&quot;4&quot;</span> #<span class="attr">name</span>=<span class="string">&quot;ngModel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.invalid &amp;&amp; (name.dirty || name.touched)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.errors.required&quot;</span>&gt;</span>姓名不能为空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.errors.minlength&quot;</span>&gt;</span>姓名信息至少 4 个字符长度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;hero.age&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let gender of genderList&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-check&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&#123;&#123;gender.id&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;gender.value&#125;&#125;&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;hero.gender&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&#123;&#123;gender.id&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;gender.text&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>住址：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;hero.address&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;address&#125;&#125;&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let address of addressList&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!heroForm.form.valid&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>表单数据：&#123;&#123;hero | json&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="响应式表单"><a href="#响应式表单" class="headerlink" title="响应式表单"></a>响应式表单</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.js：引入 FormControl 依赖的 ReactiveFormsModule</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactiveFormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [<span class="title class_">ReactiveFormsModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单：&lt;input type=&quot;text&quot; id=&quot;name&quot; [formControl]=&#x27;name&#x27; autocomplete=&quot;off&quot;&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormControl</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveFormsComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    <span class="comment">// 定义属性来承接 FormControl 实例</span></span><br><span class="line">    public name = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">setValue</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂表单</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Validators</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormBuilder</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormControl</span>, <span class="title class_">FormGroup</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveFormsComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    <span class="comment">// 定义对象属性来承接 FormGroup 实例</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    public profileForm = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;李先生&#x27;</span>),</span><br><span class="line">        <span class="attr">age</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="number">12</span>),</span><br><span class="line">        <span class="attr">address</span>: <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">            <span class="attr">province</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;河南省&#x27;</span>),</span><br><span class="line">            <span class="attr">city</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;郑州市&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 表单控件过多时 FormGroup 很麻烦，此时可使用 FormBuilder 表单构造器 </span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private formBuilder: FormBuilder</span>) &#123; &#125;</span><br><span class="line">    public profileForm = <span class="variable language_">this</span>.<span class="property">formBuilder</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: [<span class="string">&#x27;&#x27;</span>, [</span><br><span class="line">            <span class="title class_">Validators</span>.<span class="property">required</span>,</span><br><span class="line">            <span class="title class_">Validators</span>.<span class="title function_">minLength</span>(<span class="number">4</span>)</span><br><span class="line">        ]],</span><br><span class="line">        <span class="attr">age</span>: [<span class="number">12</span>],</span><br><span class="line">        <span class="attr">address</span>: <span class="variable language_">this</span>.<span class="property">formBuilder</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">            <span class="attr">province</span>: [<span class="string">&#x27;河南省&#x27;</span>],</span><br><span class="line">            <span class="attr">city</span>: [<span class="string">&#x27;郑州市&#x27;</span>],</span><br><span class="line">            <span class="attr">district</span>: [<span class="string">&#x27;金水区&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 验证控件添加 getter 方法用来在模板中获取状态信息</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">updateProfile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 更新某个控件的数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="title function_">patchValue</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">profileForm</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&#x27;profileForm&#x27;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&#x27;submit()&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">formControlName</span>=<span class="string">&#x27;name&#x27;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.invalid &amp;&amp; (name.dirty || name.touched)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.errors.required&quot;</span>&gt;</span>姓名不能为空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;name.errors.minlength&quot;</span>&gt;</span>姓名信息至少 4 个字符长度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">formControlName</span>=<span class="string">&#x27;age&#x27;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">step</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">formGroupName</span>=<span class="string">&#x27;address&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;province&quot;</span>&gt;</span>省：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span> <span class="attr">formControlName</span>=<span class="string">&#x27;province&#x27;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;city&quot;</span>&gt;</span>市：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">formControlName</span>=<span class="string">&#x27;city&#x27;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;updateProfile()&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!profileForm.valid&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>FormGroup 表单组控件的值： &#123;&#123;profileForm.value | json&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应式表单自定义验证器：&lt;div *ngIf=&quot;name.errors.nameinvalid&quot;&gt;姓名无效&lt;/div&gt;</span></span><br><span class="line">public profileForm = <span class="variable language_">this</span>.<span class="property">formBuilder</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: [<span class="string">&#x27;&#x27;</span>, [</span><br><span class="line">        <span class="title class_">Validators</span>.<span class="property">required</span>,</span><br><span class="line">        <span class="title class_">Validators</span>.<span class="title function_">minLength</span>(<span class="number">4</span>),</span><br><span class="line">        validatorName</span><br><span class="line">    ]]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validatorName</span>(<span class="params">name: FormControl</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name.<span class="property">value</span> === <span class="string">&#x27;lala&#x27;</span> ? &#123; <span class="attr">nameinvalid</span>: <span class="literal">true</span> &#125; : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板驱动表单添加一个自定义指令实现校验：&lt;input type=&quot;text&quot; appHeroValidate&gt;</span></span><br><span class="line">ng g directive direactives/hero-validate</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AbstractControl</span>, <span class="title class_">Validator</span>, <span class="title class_">ValidationErrors</span>, <span class="variable constant_">NG_VALIDATORS</span> &#125; </span><br><span class="line"><span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Directive</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;[appHeroValidate]&#x27;</span>,</span><br><span class="line">    <span class="attr">providers</span>: [&#123; </span><br><span class="line">        <span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>, </span><br><span class="line">        <span class="attr">useExisting</span>: <span class="title class_">HeroValidateDirective</span>, </span><br><span class="line">        <span class="attr">multi</span>: <span class="literal">true</span>  <span class="comment">// 将该验证器添加到现存的验证器集合</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroValidateDirective</span> implements <span class="title class_">Validator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// 对指定的控件执行同步验证方法</span></span><br><span class="line">    <span class="title function_">validate</span>(<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): <span class="title class_">ValidationErrors</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> control.<span class="property">value</span> === <span class="string">&#x27;lala&#x27;</span> ? &#123; <span class="string">&#x27;nameInvalid&#x27;</span>: <span class="literal">true</span> &#125; : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跨字段验证"><a href="#跨字段验证" class="headerlink" title="跨字段验证"></a>跨字段验证</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应式表单：&lt;div *ngIf=&quot;profileForm.errors?.formInvalid&gt;l 不是 12 岁&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">    <span class="title class_">Validators</span>,</span><br><span class="line">    <span class="title class_">FormBuilder</span>,</span><br><span class="line">    <span class="title class_">FormControl</span>, </span><br><span class="line">    <span class="title class_">FormGroup</span>, </span><br><span class="line">    <span class="title class_">ValidatorFn</span>, </span><br><span class="line">    <span class="title class_">ValidationErrors</span> </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">formCrossValidator</span>: <span class="title class_">ValidatorFn</span> = (<span class="attr">controlGroup</span>: <span class="title class_">FormGroup</span>): </span><br><span class="line"><span class="title class_">ValidationErrors</span> | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取子控件的信息</span></span><br><span class="line">    <span class="keyword">const</span> name = controlGroup.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> age = controlGroup.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> flag = name &amp;&amp; age &amp;&amp; name.<span class="property">value</span> === <span class="string">&#x27;l&#x27;</span> &amp;&amp; age.<span class="property">value</span> === <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">return</span> flag ? &#123; <span class="string">&#x27;formInvalid&#x27;</span>: <span class="literal">true</span> &#125; : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveFormsComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private formBuilder: FormBuilder</span>) &#123; &#125;</span><br><span class="line">    public profileForm = <span class="variable language_">this</span>.<span class="property">formBuilder</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: [<span class="string">&#x27;&#x27;</span>, [</span><br><span class="line">          <span class="title class_">Validators</span>.<span class="property">required</span>,</span><br><span class="line">          <span class="title class_">Validators</span>.<span class="title function_">minLength</span>(<span class="number">4</span>)</span><br><span class="line">      ]],</span><br><span class="line">      <span class="attr">age</span>: [<span class="number">12</span>],</span><br><span class="line">      <span class="attr">address</span>: <span class="variable language_">this</span>.<span class="property">formBuilder</span>.<span class="title function_">group</span>(&#123; <span class="attr">province</span>: [<span class="string">&#x27;河南省&#x27;</span>], <span class="attr">city</span>: [<span class="string">&#x27;郑州市&#x27;</span>] &#125;)</span><br><span class="line">    &#125;, &#123; <span class="attr">validators</span>: [formCrossValidator] &#125;);     <span class="comment">// 添加针对控件组的验证器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板驱动表单：自定义指令</span></span><br><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">    <span class="title class_">Validator</span>, </span><br><span class="line">    <span class="title class_">AbstractControl</span>, </span><br><span class="line">    <span class="title class_">ValidationErrors</span>, </span><br><span class="line">    <span class="title class_">ValidatorFn</span>, </span><br><span class="line">    <span class="title class_">FormGroup</span>, </span><br><span class="line">    <span class="variable constant_">NG_VALIDATORS</span> </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">formCrossValidator</span>: <span class="title class_">ValidatorFn</span> = (<span class="attr">controlGroup</span>: <span class="title class_">FormGroup</span>): </span><br><span class="line"><span class="title class_">ValidationErrors</span> | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = controlGroup.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> age = controlGroup.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> flag = name &amp;&amp; age &amp;&amp; name.<span class="property">value</span> === <span class="string">&#x27;l&#x27;</span> &amp;&amp; age.<span class="property">value</span> === <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">return</span> flag ? &#123; <span class="string">&#x27;formInvalid&#x27;</span>: <span class="literal">true</span> &#125; : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line">@<span class="title class_">Directive</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;[appCrossFieldValidate]&#x27;</span>,</span><br><span class="line">    <span class="attr">providers</span>: [&#123; </span><br><span class="line">        <span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>, </span><br><span class="line">        <span class="attr">useExisting</span>: <span class="title class_">CrossFieldValidateDirective</span>, </span><br><span class="line">        <span class="attr">multi</span>: <span class="literal">true</span> </span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CrossFieldValidateDirective</span> implements <span class="title class_">Validator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">validate</span>(<span class="attr">control</span>: <span class="title class_">AbstractControl</span>): <span class="title class_">ValidationErrors</span> | <span class="literal">null</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">formCrossValidator</span>(control)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="四、HTTP-请求"><a href="#四、HTTP-请求" class="headerlink" title="四、HTTP 请求"></a>四、HTTP 请求</h1><h2 id="http-服务"><a href="#http-服务" class="headerlink" title="http 服务"></a>http 服务</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.module.ts：请求模块、解决跨域模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClientModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123; <span class="attr">imports</span>: [<span class="title class_">HttpClientModule</span>] &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/proxy.conf.json：解决本地开发跨域问题</span></span><br><span class="line"><span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;secure&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;pathRewrite&quot;</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">    <span class="string">&quot;changeOrigin&quot;</span>: <span class="literal">true</span>    <span class="comment">// 后端服务器不在 localhost 时设置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;serve&quot;</span>: &#123;     <span class="comment">// angular.json 添加 proxyConfig 选项</span></span><br><span class="line">    <span class="string">&quot;builder&quot;</span>: <span class="string">&quot;@angular-devkit/build-angular:dev-server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browserTarget&quot;</span>: <span class="string">&quot;hero:build&quot;</span>,</span><br><span class="line">        <span class="string">&quot;proxyConfig&quot;</span>: <span class="string">&quot;src/proxy.conf.json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用环境配置：如果线上环境不需要路径 /api</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;      <span class="comment">// environment.ts</span></span><br><span class="line">    <span class="attr">production</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;/api&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;      <span class="comment">// environment.prod.ts</span></span><br><span class="line">    <span class="attr">production</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">baseUrl</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hero.service.ts：封装请求服务</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, catchError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; forkJoin &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/observable/forkJoin&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpClient</span>, <span class="title class_">HttpHeaders</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;../environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>(&#123; <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private http: HttpClient</span>) &#123; &#125;</span><br><span class="line">    private <span class="attr">baseUrl</span>: string = environment.<span class="property">baseUrl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getHeroes</span>(params): <span class="title class_">Hero</span>[] &#123;</span><br><span class="line">        <span class="keyword">let</span> heroes = []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/hexo&#x27;</span>, &#123;<span class="attr">params</span>: params&#125;)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">heroes: Hero[]</span>) =&gt;</span> &#123;</span><br><span class="line">            heroes.<span class="title function_">push</span>(...heroes)</span><br><span class="line">        &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> heroes</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> characterUrl = <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/people&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> homeworldUrl = <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/planet&#x27;</span>);</span><br><span class="line">        <span class="comment">// 处理并发请求：forkJoin 相当于 Promise.all()</span></span><br><span class="line">        <span class="title function_">forkJoin</span>([characterUrl, homeworldUrl])</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> character = results[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> homeworld = results[<span class="number">1</span>];</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jsonp 解决跨域：第二个参数必须和后端对应上</span></span><br><span class="line">    getDataJsonp (url) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">jsonp</span>(url, <span class="string">&#x27;callback&#x27;</span>)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;)  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    public get (<span class="attr">url</span>: string) &#123;</span><br><span class="line">        <span class="keyword">let</span> options = &#123;</span><br><span class="line">            <span class="attr">params</span>: params,</span><br><span class="line">            <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123; <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;abcdefgh&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>, options)</span><br><span class="line">            .<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">extractData</span>), <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">post</span>(<span class="params">url: string, data?: any</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> options = &#123;</span><br><span class="line">            <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>, data, options)</span><br><span class="line">            .<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">extractData</span>), <span class="title function_">catchError</span>(<span class="variable language_">this</span>.<span class="property">handleError</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">postForm</span>(<span class="params">url: string, data: object</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">formData</span>: <span class="title class_">FormData</span> = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, data.<span class="property">username</span>)</span><br><span class="line">        formData.<span class="title function_">append</span>(<span class="string">&#x27;password&#x27;</span>, data.<span class="property">password</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">post</span>(url, formData)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">extractData</span>(<span class="params">response: Response</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response.<span class="title function_">json</span>()</span><br><span class="line">        <span class="keyword">return</span> res || &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">handleError</span>(<span class="params">error: Response | any</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">errMsg</span>: string;</span><br><span class="line">        <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">Response</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> data = error.<span class="title function_">json</span>() || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span> err = data.<span class="property">toString</span> || <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">            errMsg = <span class="string">`<span class="subst">$&#123;error.status&#125;</span> - <span class="subst">$&#123;error.statusText || <span class="string">&#x27;&#x27;</span>&#125;</span> <span class="subst">$&#123;err&#125;</span>`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errMsg = error.<span class="property">message</span> ? error.<span class="property">message</span> : error.<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="keyword">throw</span>(errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// hero.component.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HomeComponent</span> implements <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    private <span class="attr">heroes</span>: <span class="title class_">Hero</span>[] = [];</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private heroService: HeroService</span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">getHeroes</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heroes</span> = <span class="variable language_">this</span>.<span class="property">heroService</span>.<span class="title function_">getHeroes</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="RxJS-编程"><a href="#RxJS-编程" class="headerlink" title="RxJS 编程"></a>RxJS 编程</h2><blockquote>
<p>基于微软 ReactiveX 响应式编程理念来实现异步编程的 JS 工具库，常用的异步编程范式有回调函数、事件监听、发布订阅、Promise、async&#x2F;await、RxJS。响应式编程是一种面向数据流和变更传播的异步编程范式，它将普通数据、http 请求、dom 事件等都包装成流并监听到更新后执行操作，流可看作是数据基于事件变化的整体(流 &#x3D; 数据 + 事件)，它是不可改变的但可以通过通过操作符转换或合并为一个新流并返回。核心概念主要如下：</p>
</blockquote>
<ul>
<li><strong>Observable</strong>：可观察对象，随时间产生的数据集合而可看作异步流，subscribe 启动流。</li>
<li><strong>Observer</strong>：观察者，回调函数的集合，监听 Observable 数据并执行相应操作。</li>
<li><strong>Subscription</strong>：订阅，存储已经启动过的流，unsubscribe 停止该流。</li>
<li><strong>Operators</strong>：操作符，函数式编程风格的纯函数，将异步代码以声明式的方式组合处理。</li>
<li><strong>Subject</strong>：主体，一种特殊类型的 Observable，用于通过多播模式将数据共享给多个观察者。不同于单播订阅者总是需要从头开始获取数据，多播模式能够保证数据的实时性。</li>
<li><strong>Schedulers</strong>：调度器，用来控制何时启动 subscription 和何时发送通知。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建流</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Rx</span> = <span class="built_in">require</span>(<span class="string">&#x27;rxjs/Rx&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> observable = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">of</span>(<span class="number">1</span>)/.<span class="title function_">from</span>([<span class="number">2</span>])/.<span class="title function_">interval</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> stream = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">create</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                observer.<span class="title function_">complete</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                observer.<span class="title function_">error</span>(<span class="string">&#x27;不会执行&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                observer.<span class="title function_">next</span>(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动流：订阅后才会执行 next()</span></span><br><span class="line"><span class="keyword">const</span> subscription = stream.<span class="title function_">subscribe</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val) )</span><br><span class="line"><span class="keyword">const</span> subscription = stream.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val),</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err),</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finish&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关闭流：取消订阅</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; subscription.<span class="title function_">unsubscribe</span>() &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> subject：多播，以下为其三个变体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> BehaviorSubject：有新订阅时会额外发出最新值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> BehaviorSubject：保存所有值，然后回放给新的订阅者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> AsyncSubject：只有 Observable 执行完成时才会发出最后的值</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">const</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="property">Subject</span>&lt;number&gt;()</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">BehaviorSubject</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">ReplaySubject</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">AsyncSubject</span>()</span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">value: number</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A：&#x27;</span> + value))</span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">value: number</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B：&#x27;</span> + value))</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>)</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>)</span><br><span class="line">source.<span class="title function_">subscribe</span>(subject)  <span class="comment">// 注释掉就不会执行</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>  Schedulers 调度器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prames</span> null：不传递调度器，以同步方式发送通知，用于定时或尾递归操作。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prames</span> Rx.Scheduler.queue：当前事件帧中的队列调度，用于迭代操作。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prames</span> Rx.Scheduler.asap：微任务的队列调度，用于异步转换。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prames</span> Rx.Scheduler.async：setInterval 调度，用于基于时间的操作符。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 打印结果：before、after、1、done</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line"><span class="keyword">var</span> observable = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">create</span>(<span class="keyword">function</span> (<span class="params">observer</span>) &#123;</span><br><span class="line">    observer.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">    observer.<span class="title function_">complete</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">observeOn</span>(<span class="title class_">Rx</span>.<span class="property">Scheduler</span>.<span class="property">async</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before&#x27;</span>);</span><br><span class="line">observable.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Operators 常用操作符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 创建类：create、from、fromEvent、fromPromise、of、range、interval</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 合并类：concat、merge、zip、race、startWith、forkJoin、switch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 转化类：map、scan、concatMap、mergeMap、switchMap、exhaustMap</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">import</span> &#123;fromEvent, <span class="title class_">Observable</span>, <span class="keyword">of</span>, throwError&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;catchError, debounceTime, pluck, switchMap&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> stream = <span class="title function_">fromEvent</span>(input, <span class="string">&#x27;keyup&#x27;</span>).<span class="title function_">pipe</span>(  <span class="comment">// 创建事件流</span></span><br><span class="line">                <span class="title function_">debounceTime</span>(<span class="number">500</span>),            <span class="comment">// 防抖动：忽略 0.5s 间隔内的输入</span></span><br><span class="line">                <span class="title function_">pluck</span>(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;value&#x27;</span>),     <span class="comment">// 获取输入值</span></span><br><span class="line">                <span class="comment">// 输入流转 http：每一次请求前先取消上一次的请求</span></span><br><span class="line">                .<span class="title function_">switchMap</span>(<span class="function"><span class="params">value</span> =&gt;</span> value.<span class="property">length</span> ? <span class="title function_">httpInput</span>(value) : <span class="title function_">of</span>([])),</span><br><span class="line">                <span class="title function_">catchError</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">throwError</span>(err))</span><br><span class="line">             )</span><br><span class="line">             .<span class="title function_">subscribe</span>(</span><br><span class="line">                <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res),</span><br><span class="line">                <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error)</span><br><span class="line">             )</span><br></pre></td></tr></table></figure>

<h2 id="http-拦截器"><a href="#http-拦截器" class="headerlink" title="http 拦截器"></a>http 拦截器</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ngModule 引入拦截器</span></span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [&#123; </span><br><span class="line">        <span class="attr">provide</span>: <span class="variable constant_">HTTP_INTERCEPTORS</span>, <span class="attr">useClass</span>: <span class="title class_">ParamInterceptor</span>, <span class="attr">multi</span>: <span class="literal">true</span> </span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 拦截器自定义：ng g interceptor xxx</span></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParamInterceptor</span> implements <span class="title class_">HttpInterceptor</span> &#123;</span><br><span class="line">    <span class="title function_">intercept</span>(<span class="params">req: HttpRequest&lt;any&gt;, next: HttpHandler</span>) &#123;</span><br><span class="line">        <span class="comment">// HttpRequest、HttpResponse 实例的属性是只读的，所以需要克隆后回传</span></span><br><span class="line">        <span class="keyword">const</span> authReq = req.<span class="title function_">clone</span>(&#123;</span><br><span class="line">            <span class="attr">setHeaders</span>: &#123; <span class="attr">token</span>: req.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;Authorization&#x27;</span>) || <span class="string">&#x27;123&#x27;</span> &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> next.<span class="title function_">handle</span>(authReq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装拦截器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">Injector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">HttpInterceptor</span>,</span><br><span class="line">    <span class="title class_">HttpRequest</span>,</span><br><span class="line">    <span class="title class_">HttpHandler</span>,</span><br><span class="line">    <span class="title class_">HttpErrorResponse</span>,</span><br><span class="line">    <span class="title class_">HttpResponse</span>,</span><br><span class="line">    <span class="title class_">HttpEvent</span>,</span><br><span class="line">    <span class="title class_">HttpResponseBase</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, <span class="keyword">of</span>, throwError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mergeMap, catchError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CODEMESSAGE</span> = &#123;</span><br><span class="line">  <span class="number">200</span>: <span class="string">&#x27;服务器成功返回请求的数据。&#x27;</span>,</span><br><span class="line">  <span class="number">201</span>: <span class="string">&#x27;新建或修改数据成功。&#x27;</span>,</span><br><span class="line">  <span class="number">202</span>: <span class="string">&#x27;一个请求已经进入后台排队（异步任务）。&#x27;</span>,</span><br><span class="line">  <span class="number">204</span>: <span class="string">&#x27;删除数据成功。&#x27;</span>,</span><br><span class="line">  <span class="number">400</span>: <span class="string">&#x27;发出的请求有错误，服务器没有进行新建或修改数据的操作。&#x27;</span>,</span><br><span class="line">  <span class="number">401</span>: <span class="string">&#x27;用户没有权限（令牌、用户名、密码错误）。&#x27;</span>,</span><br><span class="line">  <span class="number">403</span>: <span class="string">&#x27;用户得到授权，但是访问是被禁止的。&#x27;</span>,</span><br><span class="line">  <span class="number">404</span>: <span class="string">&#x27;发出的请求针对的是不存在的记录，服务器没有进行操作。&#x27;</span>,</span><br><span class="line">  <span class="number">406</span>: <span class="string">&#x27;请求的格式不可得。&#x27;</span>,</span><br><span class="line">  <span class="number">410</span>: <span class="string">&#x27;请求的资源被永久删除，且不会再得到的。&#x27;</span>,</span><br><span class="line">  <span class="number">422</span>: <span class="string">&#x27;当创建一个对象时，发生一个验证错误。&#x27;</span>,</span><br><span class="line">  <span class="number">500</span>: <span class="string">&#x27;服务器发生错误，请检查服务器。&#x27;</span>,</span><br><span class="line">  <span class="number">502</span>: <span class="string">&#x27;网关错误。&#x27;</span>,</span><br><span class="line">  <span class="number">503</span>: <span class="string">&#x27;服务不可用，服务器暂时过载或维护。&#x27;</span>,</span><br><span class="line">  <span class="number">504</span>: <span class="string">&#x27;网关超时。&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DefaultInterceptor</span> implements <span class="title class_">HttpInterceptor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private injector: Injector</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">msg</span>(): <span class="title class_">NzMessageService</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">NzMessageService</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">goTo</span>(<span class="params">url: string</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">Router</span>).<span class="title function_">navigateByUrl</span>(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">checkStatus</span>(<span class="params">ev: HttpResponseBase</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; ev.<span class="property">status</span> &lt; <span class="number">300</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> errortext = <span class="variable constant_">CODEMESSAGE</span>[ev.<span class="property">status</span>] || ev.<span class="property">statusText</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">NzNotificationService</span>)</span><br><span class="line">                     .<span class="title function_">error</span>(<span class="string">`请求错误 <span class="subst">$&#123;ev.status&#125;</span>: <span class="subst">$&#123;ev.url&#125;</span>`</span>, errortext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">handleData</span>(<span class="attr">ev</span>: <span class="title class_">HttpResponseBase</span>): <span class="title class_">Observable</span>&lt;any&gt; &#123;</span><br><span class="line">        <span class="comment">// 可能会因为 throw 导出无法执行 _HttpClient end() 操作</span></span><br><span class="line">        <span class="keyword">if</span> (ev.<span class="property">status</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">injector</span>.<span class="title function_">get</span>(_HttpClient).<span class="title function_">end</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">checkStatus</span>(ev);</span><br><span class="line">        <span class="comment">// 业务处理：一些通用操作</span></span><br><span class="line">        <span class="keyword">switch</span> (ev.<span class="property">status</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">                <span class="comment">// 业务层级错误处理，比如响应内容 &#123; status: 0, response: &#123;&#125; &#125;</span></span><br><span class="line">                <span class="keyword">if</span> (event <span class="keyword">instanceof</span> <span class="title class_">HttpResponse</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> <span class="attr">body</span>: any = event.<span class="property">body</span>;</span><br><span class="line">                    <span class="keyword">if</span> (body &amp;&amp; body.<span class="property">status</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="title function_">error</span>(body.<span class="property">msg</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">throwError</span>(&#123;&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 重新修改 body 内容为 response 内容</span></span><br><span class="line">                    <span class="keyword">let</span> _event = <span class="title class_">Object</span>.<span class="title function_">assign</span>(event, &#123;<span class="attr">body</span>: body.<span class="property">response</span>&#125;) </span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">of</span>(<span class="keyword">new</span> <span class="title class_">HttpResponse</span>(_event));</span><br><span class="line">                    <span class="comment">// 或者依然保持完整格式</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">of</span>(event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">401</span>: <span class="comment">// 请求错误 401: 用户没有权限（令牌、用户名、密码错误）</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goTo</span>(<span class="string">&#x27;/passport/login?clean=token&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goTo</span>(<span class="string">`/exception/<span class="subst">$&#123;ev.status&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">if</span> (ev <span class="keyword">instanceof</span> <span class="title class_">HttpErrorResponse</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未可知错误&#x27;</span>, ev);</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="title function_">error</span>(ev.<span class="property">message</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">of</span>(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">intercept</span>(<span class="attr">req</span>: <span class="title class_">HttpRequest</span>, <span class="attr">next</span>: <span class="title class_">HttpHandler</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&gt; &#123;</span><br><span class="line">        <span class="comment">// 统一加上服务端前缀</span></span><br><span class="line">        <span class="keyword">let</span> url = req.<span class="property">url</span>;</span><br><span class="line">        <span class="keyword">if</span> (!url.<span class="title function_">startsWith</span>(<span class="string">&#x27;https://&#x27;</span>) &amp;&amp; !url.<span class="title function_">startsWith</span>(<span class="string">&#x27;http://&#x27;</span>)) &#123;</span><br><span class="line">            url = environment.<span class="property">SERVER_URL</span> + url;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newReq = req.<span class="title function_">clone</span>(&#123; url &#125;);</span><br><span class="line">        <span class="keyword">return</span> next.<span class="title function_">handle</span>(newReq).<span class="title function_">pipe</span>(</span><br><span class="line">            <span class="title function_">mergeMap</span>(<span class="function">(<span class="params">event: any</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 允许统一对请求错误处理</span></span><br><span class="line">                <span class="keyword">if</span> (event <span class="keyword">instanceof</span> <span class="title class_">HttpResponseBase</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">handleData</span>(event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 若一切都正常，则后续操作</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">of</span>(event);</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="title function_">catchError</span>(<span class="function">(<span class="params">err: HttpErrorResponse</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">handleData</span>(err))</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="五、Router-路由"><a href="#五、Router-路由" class="headerlink" title="五、Router 路由"></a>五、Router 路由</h1>]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题之提升篇</title>
    <url>/2020/04/05/13-%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E6%8F%90%E5%8D%87%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、源码实现"><a href="#一、源码实现" class="headerlink" title="一、源码实现"></a>一、源码实现</h1><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><blockquote>
<p>指将多个参数的函数拆解为单一参数的多个函数的依次调用，即使用闭包返回一个延迟执行函数。优点是可以实现延迟计算和参数复用。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 柯里化实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">currying</span> = x =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">y</span> =&gt;</span> &#123; <span class="keyword">return</span> x+y &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">currying</span>(<span class="number">1</span>)(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curringAdd</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    args = [...args, [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>)];</span><br><span class="line">    <span class="keyword">return</span> add</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  add.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">t, a</span>) =&gt;</span> t + +a, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curringAdd</span>(<span class="number">1</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curringAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>))  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curringAdd</span>(<span class="number">2</span>, <span class="number">6</span>)(<span class="number">1</span>))  <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>


<h2 id="bind、call、apply"><a href="#bind、call、apply" class="headerlink" title="bind、call、apply"></a>bind、call、apply</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyCall</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="variable language_">arguments</span>[<span class="number">1</span>] || [];</span><br><span class="line"></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context.<span class="title function_">fn</span>(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    context.<span class="title class_">MyApply</span>(context, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="模拟-new"><a href="#模拟-new" class="headerlink" title="模拟 new"></a>模拟 new</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  result = fn.<span class="title function_">apply</span>(newObj, [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&quot;object&quot;</span> ? result : newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Proxy-Fetch-实现-axios"><a href="#Proxy-Fetch-实现-axios" class="headerlink" title="Proxy + Fetch 实现 axios"></a>Proxy + Fetch 实现 axios</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">&quot;node-fetch&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosOriginal = &#123;</span><br><span class="line">  <span class="attr">methods</span>: [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>, <span class="string">&#x27;OPTIONS&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> axios = <span class="keyword">new</span> <span class="title class_">Proxy</span>(axiosOriginal, &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Can&#x27;t set any property&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, name</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> method = name.<span class="title function_">toLocaleUpperCase</span>();</span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">methods</span>.<span class="title function_">indexOf</span>(method) === -<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Can&#x27;t support method <span class="subst">$&#123;method&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">        method,</span><br><span class="line">        ...options</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>


<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESOLVED</span> = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolvedHandlers</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rejectedHandlers</span> = [];</span><br><span class="line">    <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">RESOLVED</span>;</span><br><span class="line">      <span class="keyword">const</span> resolveHandler = <span class="variable language_">this</span>.<span class="property">resolvedHandlers</span>.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">if</span> (!resolveHandler) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">resolveHandler</span>(props);</span><br><span class="line">      <span class="keyword">if</span> (result &amp;&amp; result <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        result.<span class="title function_">then</span>(...<span class="variable language_">this</span>.<span class="property">resolvedHandlers</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">      <span class="keyword">const</span> rejectHandler = <span class="variable language_">this</span>.<span class="property">rejectedHandlers</span>.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="keyword">if</span> (!rejectHandler) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">rejectHandler</span>(error);</span><br><span class="line">      <span class="keyword">if</span> (result &amp;&amp; result <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">        result.<span class="title function_">catch</span>(...<span class="variable language_">this</span>.<span class="property">rejectedHandlers</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">...handlers</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resolvedHandlers</span> = [...<span class="variable language_">this</span>.<span class="property">resolvedHandlers</span>, ...handlers];</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(...handlers) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rejectedHandlers</span> = [...<span class="variable language_">this</span>.<span class="property">rejectedHandlers</span>, ...handlers];</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> promise = promises[i];</span><br><span class="line">      promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        results.<span class="title function_">push</span>(res);</span><br><span class="line">        <span class="keyword">if</span> (results.<span class="property">length</span> === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(results);</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyPromise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> promise = promises[i];</span><br><span class="line">      promise.<span class="title function_">then</span>(resolve).<span class="title function_">catch</span>(reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise.finally 实现</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> P = <span class="variable language_">this</span>.<span class="property">constructor</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">value</span>  =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">    <span class="function"><span class="params">reason</span> =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ol>
<li>React 实现主要分为 Component、Element。</li>
<li>Component 属于 React 实例，创建实例的过程中会在实例中注册 state、props 属性，还会依次调用内置的生命周期函数。Component render 函数会返回一个 ElementObj &#x2F; null。</li>
<li>Element 对象分为原生 Element 对象和组件式对象，它们会被一起解析成虚拟 DOM 树，内部使用的 state、props 也会以 AST 的形式注入进去。</li>
<li>虚拟 DOM 树渲染前后会触发 componentWillMount、componentDidMount 等生命周期函数，解析完成后将被渲染成真实 DOM 树。</li>
<li>调用 setState 时会更新 Component state，并会触发内部的一个 updater。调用 render 会生成新的虚拟 DOM 树，利用 diff 算法对比后的醋最优方案去更新 DOM。</li>
</ol>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul>
<li><strong>实现原理</strong>：创建一个状态中心，通过纯函数来对其数据进行修改，然后将修改结果以发布订阅的方式通知到所有订阅者，从而达到一个共享状态的效果。</li>
<li><strong>核心</strong>：函数式编程，使用无副作用的同步函数 action 来触发 reducer 对数据进行修改。</li>
<li><strong>创建函数</strong>：createStore，这个函数的作用是创建一个 store 对象，关键步骤如下：<ul>
<li>1、将 reducer 利用闭包存储在函数内。</li>
<li>2、导出 subscribe 函数，内部将订阅者添加到一个订阅者列表中并等待通知。</li>
<li>3、导出 dispatch 函数，内部执行 reducer 函数并将 action 作为参数传入到 reducer。</li>
<li>4、将 reducer 函数的返回结果存到 currentState，并通知所有订阅者 state 已更新。</li>
<li>5、订阅者可以通过 getState 得到最新的 state。</li>
</ul>
</li>
<li><strong>中间件原理</strong>：Decorator 装饰器模式，将中间件通过装饰后返回一个增强型的 dispatch。</li>
<li><strong>redux-thunk 实现异步</strong>：内部判断 action 的类型，是函数则将 dispatch 作为参数执行，action 函数决定何时（可能是异步操作后）执行 dispatch。</li>
</ul>
<h2 id="new-Vue-执行后"><a href="#new-Vue-执行后" class="headerlink" title="new Vue 执行后"></a>new Vue 执行后</h2><ol>
<li>new Vue 会调用 Vue 原型链上的 _init 方法对 Vue 实例进行初始化。</li>
<li>首先 initLifecycle 初始化生命周期，对 children、isMounted 等实例属性进行初始化。</li>
<li>initEvents，初始化当前实例上的一些自定义事件（Vue.$on）。</li>
<li>initRender，解析 slots 绑定在 Vue 实例上，绑定 createElement 方法在实例上。</li>
<li>完成对生命周期、自定义事件等属性的初始化后，触发生命周期钩子 beforeCreate。</li>
<li>initInjections，在初始化 data、props 之前完成依赖注入（类似于 React.Context）。</li>
<li>initState，初始化 data、props，并对内部属性完成数据劫持，更新时触发回调。</li>
<li>initProvide，对依赖注入进行解析。</li>
<li>完成对数据（state 状态）的初始化后，触发生命周期钩子 created。</li>
<li>进入挂载阶段，将 vue 模板语法通过 vue-loader 解析成虚拟 DOM 树，虚拟 DOM 树与数据完成双向绑定，触发生命周期钩子 beforeMount。</li>
<li>将解析好的虚拟 DOM 树通过 vue 渲染成真实 DOM，触发生命周期钩子 mounted。</li>
</ol>
<h2 id="webpack-热更新原理"><a href="#webpack-热更新原理" class="headerlink" title="webpack 热更新原理"></a>webpack 热更新原理</h2><ol>
<li>修改一个或多个文件时，文件系统会接收更改并通知 webpack 重新编译。</li>
<li>webpack 构建一或多个模块，并通知 HMR（Hot Module Replacement）服务器更新。</li>
<li>HMR Server 使用 Websocket 通知 HMR runtime 更新，runtime 通过 HTTP 更新 jsonp。</li>
<li>HMR runtime 替换更新中的模块，如果确定这些模块无法更新，则触发整个页面刷新。</li>
</ol>
<h1 id="二、网络相关"><a href="#二、网络相关" class="headerlink" title="二、网络相关"></a>二、网络相关</h1><h2 id="HTTP-状态码及其功能"><a href="#HTTP-状态码及其功能" class="headerlink" title="HTTP 状态码及其功能"></a>HTTP 状态码及其功能</h2><ul>
<li>100~199：信息提示</li>
<li>200~299：成功</li>
<li>300~399：重定向</li>
<li>400~499：客户端错误</li>
<li>500~599：服务端错误</li>
<li>200 成功</li>
<li>204 无内容</li>
<li>301 永久移动（回应 GET 响应时会自动将请求者转到新位置）</li>
<li>304 未修改（协商缓存）</li>
<li>400 Bad Request</li>
<li>401 未授权</li>
<li>403 服务器拒绝请求</li>
<li>404 未找到</li>
<li>409 请求发生冲突</li>
<li>500 服务器内部错误</li>
<li>502 错误网关</li>
<li>503 服务不可用</li>
</ul>
<h2 id="输入-URL-到页面加载的全过程"><a href="#输入-URL-到页面加载的全过程" class="headerlink" title="输入 URL 到页面加载的全过程"></a>输入 URL 到页面加载的全过程</h2><ol>
<li>用户输入 URL，浏览器进程通过 URL 和协议组装为完整 URL。</li>
<li>网络进程接收到浏览器进程通过进程通信发送的 URL 后检查本地缓存资源。</li>
<li>网络进程没有请求缓存时向服务器发起 HTTP 请求：通过 DNS 查询获取服务器的 IP 地址和端口、通过 IP 和服务器建立 TCP 连接、发送请求并接收服务器的响应内容。</li>
<li>网络进程解析响应内容：状态码为 301&#x2F;302 时重定向，200 时则检查响应类型 Content-Type，字节流时将请求转给下载管理器并不再渲染，html 则发给渲染进程处理。</li>
<li>渲染进程构建 DOM 树：如果 URL 和已打开的渲染进程根域名不同时会开启新进程。</li>
<li>浏览器进程根据 DOM 树更新页面：关闭连接并重复请求至资源全部加载后更新页面。</li>
</ol>
<h2 id="HTTP-请求流程"><a href="#HTTP-请求流程" class="headerlink" title="HTTP 请求流程"></a>HTTP 请求流程</h2><ol>
<li>构建请求：浏览器构建请求行后准备发起网络请求。</li>
<li>查找缓存：浏览器首先会查询缓存中是否有请求资源副本，有则拦截请求并返回资源副本。</li>
<li>准备 IP 地址和端口：浏览器请求 DNS 返回域名对应 IP 并缓存域名解析结果。</li>
<li>等待 TCP 队列：Chrome 机制下同一个域名同时最多只能建立 6 个 TCP 连接。</li>
<li>建立 TCP 连接：TCP 通过三次握手建立连接和传输数据，通过四次挥手断开连接。</li>
<li>发送 HTTP 请求：浏览器建立 TCP 连接后首先会向服务器发送请求行，然后以请求头形式发送一些其他信息，如果是 POST 请求还会发送请求体。</li>
<li>服务器处理请求：如果请求头或响应头有 Connection:keep-alive TCP 则保持打开状态。</li>
<li>服务器返回请求和断开连接。</li>
</ol>
<h2 id="HTTPS-原理-握手过程"><a href="#HTTPS-原理-握手过程" class="headerlink" title="HTTPS 原理 (握手过程)"></a>HTTPS 原理 (握手过程)</h2><ol>
<li>客户端使用 https 的 url 访问 web 服务器，要求与服务器建立 ssl 连接。</li>
<li>web 服务器收到客户端请求后，会将网站的证书（包含公钥）传送一份给客户端。</li>
<li>客户端收到网站证书后会检查颁发机构和过期时间，没问题则随机生成一个秘钥。</li>
<li>客户端利用公钥将会话秘钥加密，并传送给服务端，服务端利用自己的私钥解密。</li>
<li>之后服务器与客户端使用秘钥加密传输。</li>
</ol>
<h2 id="HTTPS-握手时客户端验证证书"><a href="#HTTPS-握手时客户端验证证书" class="headerlink" title="HTTPS 握手时客户端验证证书"></a>HTTPS 握手时客户端验证证书</h2><ol>
<li>首先浏览器读取证书中的证书所有者、有效期等信息进行校验，校验证书的网站域名是否与证书颁发的域名一致，校验证书是否在有效期内。</li>
<li>浏览器开始查找操作系统中已内置的受新人的证书发布机构 CA，与服务器发来的证书中的颁发者 CA 比对，用于校验证书是否为合法机构颁发。</li>
<li>如果找不到，浏览器就会报错，说明浏览器发来的证书是不可信任的。</li>
<li>如果找到，浏览器就会从操作系统中取出颁发者 CA 的公钥（浏览器开发商一般会实现在内部植入常用认证机关的公开密钥），然后对服务器发来的证书里面的签名进行解密。</li>
<li>浏览器使用相同 hash 算法计算出服务器发送证书的 hash 值，然后与证书中签名做对比。</li>
<li>对比结果一致，则证明服务器发来的证书合法，没有被冒充。</li>
</ol>
<h2 id="HTTP2-多路复用"><a href="#HTTP2-多路复用" class="headerlink" title="HTTP2 多路复用"></a>HTTP2 多路复用</h2><ul>
<li>HTTP&#x2F;1 每次请求都会建立一次 HTTP 连接，即 3 次握手和 4 次挥手，这个过程在一次请求过程中占用了较长时间，即使开启了 Keep-Alive 解决了多次连接的问题，但是依然有两个效率上的问题，一是串行的文件传输，二是连接数过多导致的性能问题。HTTP&#x2F;2 的多路复用就是为了解决上述的两个性能问题。</li>
<li>HTTP&#x2F;2 有两个重要概念，分别是帧（frame）和流（stream）。帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流是多个帧组成的数据流。</li>
<li>多路复用，就是在一个 TCP 连接中可以存在多条流。即可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</li>
</ul>
<h2 id="HTTPS-中间人攻击"><a href="#HTTPS-中间人攻击" class="headerlink" title="HTTPS 中间人攻击"></a>HTTPS 中间人攻击</h2><blockquote>
<p>https 协议由 http + ssl 协议构成。攻击的防范方法：服务器在发送浏览器的公钥中加入 CA 证书，浏览器可以验证 CA 证书的有效性（HTTPS 只有信任了劫持者的 CA 证书才会被劫持）。中间人攻击过程如下：</p>
</blockquote>
<ol>
<li>服务器向客户端发送公钥。</li>
<li>攻击者截获公钥，保留在自己手上。</li>
<li>然后攻击者自己生成一个【伪造的】公钥，发给客户端。</li>
<li>客户端收到伪造的公钥后，生成加密 hash（秘钥） 值发给服务器。</li>
<li>攻击者获得加密 hash 值，用自己的私钥解密获得真秘钥。</li>
<li>同时生成假的加密 hash 值，发给服务器。</li>
<li>服务器用私钥解密获得假秘钥。</li>
<li>服务器用假秘钥加密传输信息。</li>
</ol>
<h2 id="token-加密"><a href="#token-加密" class="headerlink" title="token 加密"></a>token 加密</h2><blockquote>
<p>JWT (JSON Web Token) 是一种用于通信双方之间传递安全信息的基于 JSON 的开放标准，常用于跨域身份验证。它可以通过 HMAC 算法或 RSA 公私秘钥生成签名，具有简洁 (数据量小)、自包含 (负载中包含了所有用户所需要的信息，避免了多次查询数据库) 的特点。JWT 加密的实现过程如下：</p>
</blockquote>
<ol>
<li>需要一个 secret（随机数）。</li>
<li>后端利用 secret 和加密算法（如：HMAC-SHA256）对 payload（如账号密码）生成一个字符串（token），然后返回前端。</li>
<li>前端每次 request 都在 header 中带上 token。</li>
<li>后端用同样的算法解密。</li>
</ol>
<h2 id="SSL-连接断开后如何恢复"><a href="#SSL-连接断开后如何恢复" class="headerlink" title="SSL 连接断开后如何恢复"></a>SSL 连接断开后如何恢复</h2><ul>
<li><strong>Session ID</strong>：每次会话都有一个编号，当对话中断后重新连接时，只要客户端提供编号并且服务器有该编号的记录，则双方可以继续使用以前的密钥，而不用重新生成。</li>
<li><strong>Session Ticket</strong>：服务器在上一次对话中发送给客户的。这个 ticket 是加密的并且只有服务器能够解密，里面包含了本次会话的信息，比如对话密钥和加密方法等。不管请求是否转移到其他服务器，服务器将 ticket 解密后，就能获取上次对话的信息而不用重新生成对话秘钥了。</li>
</ul>
<h2 id="CDN-服务"><a href="#CDN-服务" class="headerlink" title="CDN 服务"></a>CDN 服务</h2><blockquote>
<p>CDN 是一个内容分发网络，通过对源网站资源的缓存，利用本身多台位于不同地域、不同运营商的服务器，向用户提供资源就近访问的功能。也就是说，用户的请求并不是直接发送给源网站，而是发送给 CDN 服务器，由 CDN 服务器将请求定位到最近的含有该资源的服务器上去请求。这样有利于提高网站的访问速度，同时也减轻了源服务器的访问压力。CDN 访问过程如下：</p>
</blockquote>
<ol>
<li>用户输入访问的域名,操作系统向 LocalDns 查询域名的ip地址。</li>
<li>LocalDns 向 ROOT DNS 查询域名的授权服务器(这里假设 LocalDns 缓存过期)。</li>
<li>ROOT DNS 将域名授权 dns 记录回应给 LocalDns。</li>
<li>LocalDns 得到域名的授权 dns 记录后,继续向域名授权 dns 查询域名的 ip 地址。</li>
<li>域名授权 dns 查询域名记录后(一般是 CNAME )，回应给 LocalDns。</li>
<li>LocalDns 得到域名记录后,向智能调度 DNS 查询域名的 ip 地址。</li>
<li>智能调度 DNS 根据一定的算法和策略(比如静态拓扑、容量等)，将最适合的 CDN 节点ip地址回应给 LocalDns。</li>
<li>LocalDns 将得到的域名 ip 地址，回应给用户端。</li>
<li>用户得到域名 ip 地址后，访问站点服务器。</li>
<li>CDN 节点服务器应答请求，将内容返回给客户端.(缓存服务器一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程)。</li>
</ol>
<h1 id="三、设计模式"><a href="#三、设计模式" class="headerlink" title="三、设计模式"></a>三、设计模式</h1><h2 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h2><blockquote>
<p>设计模式描述了一个不断发生的问题和解决方案的核心，可以重复使用而减少工作量。解决复杂问题时主要通过分解(将复杂问题简单化)、抽象(忽略细节而处理抽象模型)。</p>
</blockquote>
<ul>
<li><strong>组件协作</strong><ol>
<li>Template Method 模式：定义一个操作中算法的骨架(稳定)，将一些步骤(变化)延迟到子类，比如 React 生命周期。</li>
<li>Observer 模式：定义对象间的一种一对多的依赖关系，当对象 Subject 的状态发生变化时则所有依赖它的对象都得到通知并自动更新，比如 Redux 实现。</li>
<li>Strategy 模式：定义一系列算法并封装，并且使它们可互相替换(变化)。该模式使得算法可独立于使用它的客户程序(稳定)而变化(扩展、子类化)，比如国际化语言。</li>
</ol>
</li>
<li><strong>单一职责</strong><ol>
<li>Decorator 模式：给一个对象动态(组合)增加额外功能，在增加功能方面比生成子类(继承)更加灵活，比如 React 高阶组件、中间件。</li>
<li>Bridge 模式：将业务功能与平台实现分离，使它们都可以独立变化，比如组件。</li>
</ol>
</li>
<li><strong>对象创建</strong><ol>
<li>Factory Method 模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使得一个类的实例化延迟（目的：解耦，手段：抽象）到子类，比如 React.createElement()、gin.Default()。</li>
<li>Abstract Factory：提供一个接口，让该接口负责创建一系列相关或相互依赖的对象而无需指定他们具体的类，比如 SQL API 有连接类、创建类、操作类。</li>
</ol>
</li>
<li><strong>对象性能</strong><ol>
<li>Singleton 模式：一个类只有一个实例并提供实例的全局访问点，比如游戏主角。</li>
<li>FlyWeight 享元模式：运行共享技术有效支持大量细粒度的对象，比如对象池优化。</li>
</ol>
</li>
<li><strong>接口隔离</strong><ol>
<li>Facade 模式：为子系统的一组接口提供一致(稳定)的界面，Facade 模式定义了一个方便子系统复用的高层接口，比如各种硬件驱动。</li>
<li>Proxy 模式：为其他对象提供一种代理以控制(隔离、使用接口)对这种对象的访问，比如使用闭包导出方法(代理操作对象)。</li>
<li>Adapter 模式：将一个类的接口转换为客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作，比如 Go http.ListenAndServe 所接受的结构体只需要实现 ServeHTTP 方法即可满足 http 的接口条件。</li>
<li>Composite 模式：将对象组合成树形结构以表示 部分-整体 的层次结构。Composite 使得用户对单个对象和组合对象的使用具有一致性(稳定)，比如树形结构中 Parent&#x2F;Child Node 都继承于同一抽象类 Node 并通过 process 执行方法。</li>
</ol>
</li>
</ul>
<h2 id="观察者模式、订阅-发布模式"><a href="#观察者模式、订阅-发布模式" class="headerlink" title="观察者模式、订阅-发布模式"></a>观察者模式、订阅-发布模式</h2><blockquote>
<p>发布-订阅模式是观察者模式的一种变体，它只是把一部分功能抽象成一个独立的变更管理器。一对多时使用观察者，多对多时则使用订阅-发布。观察者模式的主体和观察者是互相感知的，发布-订阅模式是借助第三方来实现调度的，发布者和订阅者之间互不感知。</p>
</blockquote>
<h2 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h2><ul>
<li><strong>依赖倒置原则</strong>：高层模块(稳定)不应该依赖低层模块(变化)，两者都应该依赖于抽象(稳定)。抽象(稳定)不应该依赖于实现细节(变化)，实现细节(变化)应该依赖于抽象(稳定)。</li>
<li><strong>开放封闭原则</strong>：对扩展开放而对更改封闭，类模块应该是可扩展的但不可修改。</li>
<li><strong>单一职责原则</strong>：一个类应该只有一个引起它变化的原因，变化方向隐含了类的责任。</li>
<li><strong>Liskov 替换原则</strong>：子类必须能够替换他们的基类 IS-A，继承表达类型抽象。</li>
<li><strong>接口隔离原则</strong>：不应该强迫客户端使用他们不用的方法，接口应该小而完备。</li>
<li><strong>优先使用对象组合，而不是类继承</strong>：类继承通常为白箱复用，对象组合通常为黑箱复用。继承在某种程度上破坏了封装性而导致子类和父类耦合度高，对象组合则只要求被组合的对象具有良好定义的接口而耦合度低。&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 白箱复用为 B 类继承 A 类的功能并了解内部细节从而实现复用但是耦合性较强，黑箱复用则是 B 类只需要关注 A 类所暴露的一些外部方法即可实现复用从而达到了解耦效果。</li>
<li><strong>封装变化点</strong>：使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li>
<li><strong>针对接口编程，而不是针对实现编程</strong>：不将变量类型声明为具体的某个类，而是声明为某个接口。客户程序无需获取对象的具体类型，只需要知道对象所具有的接口。减少系统中的各部分依赖关系，从而实现高内聚、低耦合的类型设计方案。</li>
</ul>
<h1 id="四、算法相关"><a href="#四、算法相关" class="headerlink" title="四、算法相关"></a>四、算法相关</h1><h2 id="迭代方式实现-flatten-函数"><a href="#迭代方式实现-flatten-函数" class="headerlink" title="迭代方式实现 flatten 函数"></a>迭代方式实现 flatten 函数</h2><blockquote>
<p>迭代指按顺序访问数组、对象等的每一项 (查找、遍历)。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">      arr = arr.<span class="title function_">concat</span>(arr[i])</span><br><span class="line">      arr.<span class="title function_">splice</span>(i, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>], <span class="number">8</span>], <span class="number">9</span>, <span class="number">10</span>, [<span class="number">11</span>, [<span class="number">12</span>, <span class="number">13</span>]]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure>

<h2 id="数组的随机排序"><a href="#数组的随机排序" class="headerlink" title="数组的随机排序"></a>数组的随机排序</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随机数排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">random1</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机插入排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">random2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cArr = [...arr];</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  <span class="keyword">while</span> (cArr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * cArr.<span class="property">length</span>);</span><br><span class="line">    newArr.<span class="title function_">push</span>(cArr[index]);</span><br><span class="line">    cArr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洗牌算法，随机交换排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">random3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> l = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (l - i)) + i;</span><br><span class="line">    <span class="keyword">const</span> temp = arr[index];</span><br><span class="line">    arr[index] = arr[i];</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="五、Nodejs"><a href="#五、Nodejs" class="headerlink" title="五、Nodejs"></a>五、Nodejs</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><blockquote>
<p>Node 中的每个文件模块都是一个对象，定义如下：</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Module</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = <span class="keyword">new</span> <span class="title class_">Module</span>(filename, parent);</span><br></pre></td></tr></table></figure>


<h2 id="require-模块加载机制"><a href="#require-模块加载机制" class="headerlink" title="require 模块加载机制"></a>require 模块加载机制</h2><ol>
<li>计算模块绝对路径。</li>
<li>如果缓存中有该模块，则从缓存中取出该模块。</li>
<li>按优先级依次寻找并编译执行模块，将模块推入缓存（require.cache）。</li>
<li>输出模块的 exports 属性。</li>
</ol>
<h2 id="两个模块互相引用"><a href="#两个模块互相引用" class="headerlink" title="两个模块互相引用"></a>两个模块互相引用</h2><blockquote>
<p>假设 A、B 模块互相引用，此时运行 A 模块的话，先运行的 A 模块将会被缓存，但是此时缓存的是一个未执行完毕的 A 模块，而 A 模块中引入的 B 模块将会被完整加载并且正常使用，而 B 模块中调用的 A 模块将会是个默认的空对象（module.exports 的默认值），不具备 A 模块的任何功能。</p>
</blockquote>
<h2 id="异步-I-x2F-O"><a href="#异步-I-x2F-O" class="headerlink" title="异步 I&#x2F;O"></a>异步 I&#x2F;O</h2><ul>
<li>进程启动时，Node 会创建一个类似于 while(true) 的循环，每执行一次循环体的过程成为 Tick。每个 Tick 的过程就是查看是否有事件待处理，如果有就取出事件及其相关的回调函数。如果存在关联的回调函数就执行，然后进入下个循环，不再有事件处理时退出进程。（每个 Tick 都会把观察者中可执行的事件执行完毕后，再进行下一个 Tick）。</li>
<li>事件循环是一个典型的生产者&#x2F;消费者模型。异步I&#x2F;O、网络请求等则是事件的生产者，生产出的事件被传递到对应的观察者，事件循环从观察者取出事件并处理（消费者）。</li>
<li>具体流程<ul>
<li>1、发起异步调用</li>
<li>2、封装异步执行对象，设置回调函数和参数</li>
<li>3、将异步执行对象推入线程池（主线程继续往下执行）</li>
<li>4、异步执行对象执行完毕后，将执行结果连同线程一起交还给主线程。</li>
<li>5、主线程的 Tick 检测到有执行完成的异步任务，取出对象并执行对应的回调函数。</li>
<li>6、完成</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简易型 tick</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> events = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checking...&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (events.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> event = events.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="title function_">event</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;event callback&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  events.<span class="title function_">push</span>(fn);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">observer</span>();</span><br></pre></td></tr></table></figure>


<h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><blockquote>
<p>Node 中用于处理二进制数据的类，其中与 IO 相关的操作（网络&#x2F;文件等）均基于 Buffer。Buffer 类的实例非常类似于整数数组，但其大小是固定不变的，并且其内存在 V8 堆栈外分配原始内存空间。Buffer 类的实例创建之后，其所占用的内存大小就不能再进行调整。</p>
</blockquote>
<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><blockquote>
<p>Node 中处理流式数据的抽象接口，stream 模块用于构建实现了流接口的对象。Node 提供了 http 请求、process.stdout 等多种流对象。流可以是可读的、可写的、或者可读可写的，所有的流都是 EventEmitter 的实例。</p>
</blockquote>
<h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><ul>
<li>IPC 又称进程间通信技术，是用于 Node 内部父子进程之间进行通信的方法。</li>
<li>Node IPC 是通过不同平台的管道技术实现的，特点是本地网络通信、速度快、效率高。</li>
<li>Node 在启动子进程时，主进程先建立 IPC 通道，然后将 IPC 通道的 fd（文件描述符）通过环境变量（NODE_CHANNEL_FD）的方式传递给子进程，然后子进程通过 fd 与 父进程建立 IPC 连接。</li>
</ul>
<h2 id="实现热更新"><a href="#实现热更新" class="headerlink" title="实现热更新"></a>实现热更新</h2><blockquote>
<p>Node API require.cache，该对象引用被清除后重新调用时就会重新加载，这个机制可以用来热加载更新的模块。然后使用 fs.watchFile 监听文件的更改，文件更改后调用 clearCache 传入对应的模块名即可。使用 pm2 reload 可以实现暴力热更新，它会保证在新实例重启成功后才会把旧进程杀死，可以保持服务一直在可响应状态。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clearCache</span>(<span class="params">modulePath</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> path = <span class="built_in">require</span>.<span class="title function_">resolve</span>(modulePath);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">require</span>.<span class="property">cache</span>[path]) &#123;</span><br><span class="line">    <span class="built_in">require</span>.<span class="property">cache</span>[path] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Node-更适合处理-I-x2F-O-密集型任务还是-CPU-密集型任务"><a href="#Node-更适合处理-I-x2F-O-密集型任务还是-CPU-密集型任务" class="headerlink" title="Node 更适合处理 I&#x2F;O 密集型任务还是 CPU 密集型任务"></a>Node 更适合处理 I&#x2F;O 密集型任务还是 CPU 密集型任务</h2><ul>
<li>Node 更适合处理 I&#x2F;O 密集型的任务。因为 Node 的 I&#x2F;O 密集型任务可以异步调用，利用事件循环的处理能力，资源占用极少，并且事件循环能力避开了多线程的调用，在调用方面是单线程，内部处理其实是多线程的。</li>
<li>由于 JS 是单线程，Node 不适合处理 CPU 密集型的任务，CPU 密集型的任务会导致 CPU 时间片不能释放，使得后续 I&#x2F;O 无法发起，从而造成阻塞。但是可以利用到多进程的特点完成对一些 CPU 密集型任务的处理，不过由于 JS 并不支持多线程，所以在这方面的处理能力会弱于其他多线程语言（例如 Java、Go）。</li>
</ul>
<h2 id="Node-为何不给每个-js-文件以独立的上下文来避免作用域被污染"><a href="#Node-为何不给每个-js-文件以独立的上下文来避免作用域被污染" class="headerlink" title="Node 为何不给每个 js 文件以独立的上下文来避免作用域被污染"></a>Node 为何不给每个 js 文件以独立的上下文来避免作用域被污染</h2><blockquote>
<p>Node 模块正常情况下对作用域不会造成污染（模块函数内执行），意外创建全局变量是一种例外，可以采用严格模式来避免。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">a</span>); <span class="comment">// 1 意外的全局上下文污染</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">b</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>.<span class="property">b</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>


<h2 id="console-log-是同步还是异步"><a href="#console-log-是同步还是异步" class="headerlink" title="console.log 是同步还是异步?"></a>console.log 是同步还是异步?</h2><blockquote>
<p>内部实现是 process.stdout，将输入内容打印到 stdout，同步异步取决于 stdout 连接的数据流的类型（需要写入的位置）以及不同的操作系统。造成这种差异的原因是因为一些历史遗留问题，不过这个问题并不会影响正常的输出结果。</p>
</blockquote>
<ul>
<li>文件：Windows、POSIX 同步。</li>
<li>TTY（终端）：Windows 异步，POSIX 同步。</li>
<li>管道（和 socket）：Windows 同步，POSIX 异步。</li>
</ul>
<h2 id="父-x2F-子进程的死亡有何影响"><a href="#父-x2F-子进程的死亡有何影响" class="headerlink" title="父&#x2F;子进程的死亡有何影响"></a>父&#x2F;子进程的死亡有何影响</h2><ul>
<li>子进程死亡不会影响父进程，不过子进程死亡时会向它的父进程发送死亡信号。反之父进程死亡，一般情况下子进程也会随之死亡，但如果此时子进程处于可运行状态、僵死状态等等的话，子进程将被 init 进程手痒，从而成为孤儿进程。</li>
<li>子进程死亡时（处于“终止状态”），父进程没有及时调用 wait() 或 waitpid() 来返回死亡进程的相关信息，此时子进程还有一个 PCB 残留在进程表中，被成为僵尸进程。</li>
</ul>
<h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><blockquote>
<p>不依赖终端 (tty) 的进程，不会因为用户退出终端而停止运行的进程。实现思路如下：</p>
</blockquote>
<ol>
<li>创建一个进程 A。</li>
<li>在进程 A 中创建进程 B，可以使用 child_process.fork 或其他方法。</li>
<li>启动子进程时，设置 detached 属性为 true，保证子进程在父进程退出后继续运行。</li>
<li>进程 A 退出，进程 B 由 init 进程接管。此时进程 B 为守护进程。</li>
</ol>
<h2 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h2><blockquote>
<p>默认情况下，TCP 连接会采用延迟传送算法（Nagle 算法），在数据发送之前缓存他们。如果短时间有多个数据发送，会缓冲到一起作一次发送（缓冲大小是 socket.bufferSize），这样可以减少 IO 消耗提高性能。（TCP 有这个问题，HTTP 协议已解决）。解决方法如下：</p>
</blockquote>
<ul>
<li>多次发送之前间隔一个等待时间：处理简单，但是影响传输效率。</li>
<li>关闭 Nagle 算法：消耗资源高，整体性能下降。</li>
<li>封包&#x2F;拆包：使用一些有标识来进行封包拆包（类似 HTTP 协议头尾）。</li>
</ul>
<h2 id="cookie、session"><a href="#cookie、session" class="headerlink" title="cookie、session"></a>cookie、session</h2><ul>
<li>session 存在服务端，cookie 存在客户端。session 比 cookie 更安全，而且 cookie 不一定一直能用（可能被浏览器禁止）。服务端可以通过设 cookie 的值为空并设置一个及时的 expires 来清除存在客户端上的 cookie。</li>
<li>cookie 可能会包含一些关键信息，而 session 一般都是一个加密串。</li>
</ul>
<h2 id="hosts-文件"><a href="#hosts-文件" class="headerlink" title="hosts 文件"></a>hosts 文件</h2><blockquote>
<p>一个没有扩展名的系统文件，作用是将网址域名和对应的 IP 地址建立一个关联“数据库”。当用户在浏览器中输入一个 url 时，系统会先从 hosts 文件中寻找对应的 IP 地址。</p>
</blockquote>
]]></content>
      <categories>
        <category>面试题库</category>
      </categories>
      <tags>
        <tag>面试题库</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题之基础篇</title>
    <url>/2020/03/22/12-%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、HTML、CSS"><a href="#一、HTML、CSS" class="headerlink" title="一、HTML、CSS"></a>一、HTML、CSS</h1><ul>
<li><strong>语义化理解</strong>：使用合理标签来创建页面内容，让页面结构更清晰。好处是便于浏览器和搜索引擎解析，提高代码的可读性和重用性。</li>
<li><strong>CSS 盒模型</strong>：width&#x2F;height 设置的宽高只是指 content、盒子宽高 &#x3D;&#x3D; 内容 + 填充 + 边距 + 边框、标准盒模型 box-sizing: content-box、IE 盒模型 box-sizing: border-box。</li>
<li><strong>图片加载优化</strong>：可视区域的图片懒加载 (按需加载)、前后图片的预加载 (页面加载完成之前下载所需资源，使用时从缓存中调用) 、使用雪碧图。</li>
<li><strong>WebP</strong>：谷歌开发的一种支持有损压缩和无损压缩的新图片格式，优点是相同质量的图片拥有更小的文件体积，非常适合于网络图片的传输。</li>
<li><strong>header token 为何不会被劫持</strong>：token 不是防止 XSS 而是为了防止 CSRF、CSRF 攻击的原因是浏览器会自动带上 cookie 而浏览器不会自动带上 token。</li>
<li><strong>宽高覆盖规则</strong>：min-width &gt; max-width &gt; width，即使设置了行内样式或 !important。</li>
<li><strong>性能指标</strong>：FP 首次绘制、FCP 首次内容绘制、LCP 最大内容绘制时间、FPS 每秒传输帧数、TTI 页面可交互时间、HTTP 请求响应时间、DNS 解析时间、TCP 连接时间</li>
</ul>
<h2 id="link、-import-导入"><a href="#link、-import-导入" class="headerlink" title="link、@import 导入"></a>link、@import 导入</h2><ul>
<li><strong>从属关系</strong>：@import 只能用于加载 CSS，link 是 XHTML 标签，它还可以定义 RSS、rel 连接属性、引入网站图标等。</li>
<li><strong>加载顺序</strong>：加载页面时，link 引入的 CSS 被同时加载，@import 引入的 CSS 会等到页面被全部加载完成后再加载。</li>
<li><strong>兼容性</strong>：link 无兼容性问题，@import 只有 IE5+ 才能被识别。</li>
</ul>
<h2 id="HTML5-form-自动完成"><a href="#HTML5-form-自动完成" class="headerlink" title="HTML5 form 自动完成"></a>HTML5 form 自动完成</h2><ul>
<li><strong>autocomplete</strong> 属性规定表单是否应该启用自动完成功能，它自动完成允许浏览器预测对输入字段。在用户在开始键入时，浏览器基于之前键入过的值显示出历史选项。</li>
<li>关闭自动完成功能的方法：IE Internet 选项菜单的内容–自动完成设置、form autocomplete&#x3D;”off” 关闭整个表单的自动提示功能、input autocomplete&#x3D;”off” 关闭输入框的自动完成功能。</li>
</ul>
<h2 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h2><blockquote>
<p>渲染引擎为了更好的用户体验会尽快将内容呈现到屏幕，它是解析完一部分内容就会显示而不会等到所有内容解析完成之后再去构建 render tree。</p>
</blockquote>
<ol>
<li>解析 HTML 标记并构建 <strong>DOM 树</strong>。</li>
<li>解析 CSS 标记并构建 <strong>CSSOM 树</strong>。</li>
<li>根据 DOM、CSSOM 构建<strong>渲染树</strong>，节点是包含颜色等属性的渲染对象。</li>
<li><strong>布局</strong>：根据渲染树进行布局，计算各个节点在页面的位置、大小等信息。</li>
<li><strong>绘制</strong>：调用渲染对象的 paint 方法，将它们的内容显示在屏幕并绘制基础组件。</li>
</ol>
<h2 id="浏览器通信"><a href="#浏览器通信" class="headerlink" title="浏览器通信"></a>浏览器通信</h2><blockquote>
<p>由于标签页之间无法直接通信，它们的通信本质都是通过中介者转发消息来实现的。</p>
</blockquote>
<ol>
<li><strong>Websocket</strong>：通信的标签页连接同一个服务器，服务器将收到的消息推送给所有客户端。</li>
<li><strong>localStorage</strong>：localStorage 在浏览上下文中新增&#x2F;修改&#x2F;删除时会触发 storage 事件。</li>
<li><strong>SharedWorker</strong>：服务器注册一个 onmessage 监听信息的事件，客户端(即使用 sharedWorker 的标签页)发送 message 时就会触发。</li>
</ol>
<h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><ul>
<li>缓存类型：根据响应头内容分为强制缓存和协商缓存，优先级顺序依次为 <strong>cache-control、Expires、Etag、Last-modified</strong>。</li>
<li>缓存位置：<strong>Service Worker</strong> (运行在浏览器背后的独立线程)、<strong>Memory Cache</strong> (包含页面资源的内存缓存，关闭页面则释放)、<strong>Disk Cache</strong> (存储在硬盘)、<strong>Push Cache</strong> (会话缓存)。</li>
<li>缓存过程：浏览器在缓存中查找请求结果和缓存标识后发起请求，将返回结果存入缓存并根据响应头内容进行相应处理。</li>
</ul>
<h2 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h2><ul>
<li><strong>实现</strong>：跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态（cookie），绕过后台的用户验证，冒充用户向服务器执行一些操作。</li>
<li><strong>本质</strong>：利用 cookie 会在同源请求中携带发送给服务器的特点来实现冒充用户。</li>
<li><strong>防护方法</strong>：同源检测和服务器检测请求来源、使用 token 验证、设置 cookie 时设置 Samesite 并限制为不能作为被第三方使用。</li>
</ul>
<h2 id="CSP-内容安全策略"><a href="#CSP-内容安全策略" class="headerlink" title="CSP 内容安全策略"></a>CSP 内容安全策略</h2><ul>
<li><strong>实现</strong>：本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。它也是解决 XSS 攻击的一个强力手段。</li>
<li><strong>开启</strong>：一种是设置 <code>HTTP 头部 Content-Security-Policy</code>，一种是设置 <code>meta 标签 &lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code>。</li>
</ul>
<h2 id="PWA-渐进式网页应用"><a href="#PWA-渐进式网页应用" class="headerlink" title="PWA 渐进式网页应用"></a>PWA 渐进式网页应用</h2><blockquote>
<p>Progressive Web App 是一个让普通站点过渡到 Web 应用的渐进式过渡方案。目的是降低站点改造代价并逐渐支持新技术，从而提升性能和改善用户体验。</p>
</blockquote>
<ul>
<li>可安装：可以像原生 APP 在主屏幕上留有图标。</li>
<li>支持离线存储和消息推送：运行在浏览器进程的 ServiceWorker 能够为所有页面提供服务。</li>
<li>ServiceWorker：本质是一段在后台运行的脚本。作为一个运行环境不同于普通脚本的独立线程，不能直接参与 Web 交互行为，属于一种客户端代理。</li>
</ul>
<h2 id="HTTPS-让数据传输更安全"><a href="#HTTPS-让数据传输更安全" class="headerlink" title="HTTPS 让数据传输更安全"></a>HTTPS 让数据传输更安全</h2><ul>
<li>TCP、HTTP 之间插入一个安全层，所有经过安全层的数据都会被加密或解密。</li>
<li>对称加密：浏览器发送加密套件列表和一个随机数，服务器从列表选取一个加密套件并生成一个随机数返回，然后通过相同方法将两个随机数混合生成一个密钥后进行数据加密。缺点是随机数的过程都是明文，黑客可以拿到协商的加密套件和随机数，生成密钥并破解数据。</li>
<li>非对称加密：浏览器发送加密套件列表，服务器选择一个加密套件返回加密套件和公钥，浏览器用公钥加密数据，服务器用私钥解密。缺点是加密效率太低，不能保证服务器发送给浏览器的数据安全，黑客可以获取公钥。</li>
<li>对称加密结合非对称加密：浏览器发送对称加密套件列表、非对称加密列表和随机数，服务器生成随机数并选择加密套件和公钥返回，浏览器通过随机数计算出 pre-master 并利用公钥给 pre-master 加密后发送，服务器用私钥解密出 pre-master 数据并结合随机数生成对称密钥，使用对称密钥传输加密数据。</li>
<li>数字证书：用于向浏览器证明服务器的身份或用于服务器公钥。CA 使用 Hash 函数技术明文信息得出信息摘要，然后 CA 使用私钥对信息摘要加密后的秘文就是数字签名。验证是否合法时，读取证书明文信息并将相同 Hash 函数计算得到的信息摘要 A 和 CA 公钥解密得到的 B 进行对比，一致则确认证书合法。</li>
</ul>
<h2 id="沙盒隔离页面和系统"><a href="#沙盒隔离页面和系统" class="headerlink" title="沙盒隔离页面和系统"></a>沙盒隔离页面和系统</h2><ul>
<li>浏览器被划分为浏览器内核和渲染内核两个核心模块，其中浏览器内核由网络进程、浏览器主进程和 GPU 进程组成的，渲染内核就是渲染进程。</li>
<li>浏览器中的安全沙箱是利用操作系统提供的安全技术，让渲染进程在执行过程中无法访问或者修改操作系统中的数据，在渲染进程需要访问系统资源时需要通过浏览器内核来实现，然后将访问的结果通过 IPC 转发给渲染进程。</li>
<li>站点隔离（Site Isolation）将同一站点（包含相同根域名和相同协议的地址）中相互关联的页面放到同一个渲染进程中执行，这样就可以将恶意的 iframe 隔离在恶意进程内部而无法继续访问其他 iframe 进程的内容，因此无法攻击其他站点。</li>
</ul>
<h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><ul>
<li><strong>viewport 缩放</strong>：针对不同分辨率的手机设置等比例缩放，但是 PC 端可能会界面变形。</li>
<li><strong>响应式布局</strong>：通过媒体查询根据不同分辨率适配，但代码可维护性差，适用于简单页面。</li>
<li><strong>弹性布局</strong>：使容器子元素的宽高能够合理填充空间，可通过百分比、vw + vh、rem。</li>
<li><strong>vue 方案</strong>：通过 vw 实现适配，安装插件 postcss-px-to-viewport 并配置即可。</li>
</ul>
<h2 id="BFC-及其应用"><a href="#BFC-及其应用" class="headerlink" title="BFC 及其应用"></a>BFC 及其应用</h2><ul>
<li><strong>简单介绍</strong>：Block Format Context 块级格式化上下文，是页面盒模型的一种 CSS 渲染模式，相当于一个独立容器，里面的元素和外部的元素相互不影响。</li>
<li><strong>创建方式</strong>：html 根元素、float、position: absolute&#x2F;fixed、overflow: !visible、display: inline-block&#x2F;table&#x2F;flex。</li>
<li><strong>主要作用</strong>：清除浮动、不同 BFC 时可以阻止 margin 重叠。</li>
</ul>
<h2 id="重绘、回流"><a href="#重绘、回流" class="headerlink" title="重绘、回流"></a>重绘、回流</h2><ul>
<li><strong>重绘重排</strong><ul>
<li>重绘：简单外观的改变而不会影响布局，比如 outline、visibility、color。</li>
<li>回流：布局或几何属性改变而重新计算布局，大部分都会会导致页面的重新渲染。</li>
<li>关系：重绘不一定会引发回流，回流必定会发生重绘，它们都会重新生成渲染树。</li>
</ul>
</li>
<li><strong>优化方案</strong><ul>
<li><strong>JS</strong>：避免频繁操作 DOM、缓存频繁读取的属性值、对复杂动画的元素使用定位。</li>
<li><strong>CSS</strong>：CSS 硬件加速、尽量在 DOM 树的最末端改变 class、避免使用 CSS 表达式而导致回流、避免设置多层内联样式而提高 CSS 选择符从右往左匹配查找速度、将动画效果应用到定位元素而避免影响其他布局。</li>
</ul>
</li>
</ul>
<h2 id="Web-性能优化"><a href="#Web-性能优化" class="headerlink" title="Web 性能优化"></a>Web 性能优化</h2><ul>
<li><strong>减少请求量</strong>：合并资源、减少 HTTP 请求、gzip 压缩、WebP 图片、路由懒加载。</li>
<li><strong>加快请求速度</strong>：预解析 DNS、减少域名数、并行加载、CDN 分发。 </li>
<li><strong>资源预加载</strong>：支持预拉取图片、脚本以及任何可以被浏览器缓存的资源。</li>
<li><strong>渲染优化</strong>：静态渲染 SR、前端渲染 CSR、服务端渲染 SSR、客户端渲染 NSR。</li>
<li><strong>特效优化</strong>：合理利用 CSS 合成动画而避免重绘、将动画效果应用到定位元素。</li>
</ul>
<h2 id="opacity、visibility、display"><a href="#opacity、visibility、display" class="headerlink" title="opacity、visibility、display"></a>opacity、visibility、display</h2><ul>
<li><strong>opacity: 0</strong>：占据空间，可以点击，引起重绘，子元素不影响。</li>
<li><strong>display: none</strong>：不占空间，不能点击，会引起回流，子元素不影响。</li>
<li><strong>visibility: hidden</strong>：占据空间，不能点击，引起重绘，子元素可设置 visible 进行显示。</li>
</ul>
<h2 id="Rem-及其原理"><a href="#Rem-及其原理" class="headerlink" title="Rem 及其原理"></a>Rem 及其原理</h2><ul>
<li><strong>Rem</strong>：CSS3 新增的相对长度单位，指相对于根元素 html 的 font-size 大小，移动端新型浏览器支持较好。px 是相对固定单位，无法随着浏览器进行缩放。</li>
<li><strong>转换原理</strong>：默认根元素的 font-size: 16px，如果想要设置为 12px 则就是 12px&#x2F;16px &#x3D; 0.75rem。通过 postcss-px-to-viewport 插件可以实现对 px 到 vw 的自动转换。</li>
</ul>
<h2 id="移动端视口配置"><a href="#移动端视口配置" class="headerlink" title="移动端视口配置"></a>移动端视口配置</h2><ul>
<li><strong>initial-scale</strong>: 初始的缩放比例。</li>
<li><strong>minimum-scale</strong>: 允许用户缩放到的最小比例。</li>
<li><strong>maximum-scale</strong>: 允许用户缩放到的最大比例。</li>
<li><strong>user-scalable</strong>: 用户是否可以手动缩放。</li>
</ul>
<h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><ul>
<li><strong>伪类</strong>：用于为处于某种状态的已有元素添加样式，该状态是随着用户行为变化的。比如说 :hover。它只有处于 dom 树无法描述的状态才能为元素添加样式，所以称为伪类。</li>
<li><strong>伪元素</strong>：用于创建一些原本不在文档树中的元素，并为其添加样式。比如 ::before，虽然用户可以看到这些内容，但是其实它不在文档树中。</li>
<li><strong>区别</strong>：伪类的操作对象是文档树中已存在的元素，而伪元素是创建一个文档树外的元素。css 规范规定使用双冒号 :: 表示伪元素，一个冒号 : 表示伪类。</li>
</ul>
<h2 id="css-可继承属性"><a href="#css-可继承属性" class="headerlink" title="css 可继承属性"></a>css 可继承属性</h2><ul>
<li><strong>字体系列属性</strong>：font-family、font-size、font-weight、font-style。</li>
<li><strong>文本系列属性</strong>：text-indent、text-align、line-hight、word-spacing、color。</li>
<li><strong>其他</strong>：cursor、visibility。</li>
</ul>
<h1 id="二、JS"><a href="#二、JS" class="headerlink" title="二、JS"></a>二、JS</h1><ul>
<li><strong>JS 特性</strong>：运行在客户端浏览器、不用预编译而直接解析执行代码、弱类型语言而较为灵活、跨平台的语言而与操作系统无关、脚本语言、解释性语言。</li>
<li><strong>变量提升</strong>：JS 代码执行前需要先编译，在编译阶段将变量设为 undefined 并和函数存到变量环境 (重复则被覆盖)，JS 引擎会在代码执行阶段从变量环境中查找自定义的变量和函数。</li>
<li><strong>变量执行</strong>：JS 引擎使用变量时会在当前的执行上下文中查找变量，没有找到则会继续在作用域链指向的执行上下文中查找。函数总是可以访问其外部函数中声明的变量，当在函数内调用一个外部函数时引用的变量会一直保存在内存，这些变量的集合称为闭包。</li>
<li><strong>闭包</strong>：指能够读取其他函数内部变量的函数，用来实现私有的方法和变量。主要特点有：函数嵌套函数、函数内部引用外部的参数和变量、参数和变量不会被垃圾回收机制回收。优点是可以避免全局变量的污染，缺点是闭包会常驻内存而容易造成内存泄漏。</li>
<li><strong>块级作用域</strong>：let&#x2F;const 变量不会被提升而是在编译后保存到词法环境的一个单独栈区域，作用域内部变量压入栈顶并在作用域执行完后从栈顶弹出。</li>
<li><strong>new 操作符</strong>：新建一个原型 <code>__proto__</code> 指向构造函数 prototype 的空对象，然后将这个新对象赋值给构造函数 this 指向并在执行构造函数后返回。</li>
<li><strong>自执行函数</strong>：声明并立刻调用的匿名函数，用来创建一个独立的作用域，一般用于框架、插件等场景。好处如下：防止变量扩散到全局而造成冲突、隔离作用域避免闭包造成引用变量无法释放、利用立即执行特性返回需要的函数或对象而避免每次通过条件判断处理。</li>
<li><strong>尾调用优化</strong>：指函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以在一个函数里调用另一个函数时，会保留当前的执行上下文并新建另外一个加入栈中。使用尾调用时则不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</li>
<li><strong>Babel 实现 ES6 转为 ES5</strong>：将代码字符串解析成抽象语法树 ES6 AST、处理后转换为 ES5 AST、通过新语法树生成代码字符串。</li>
<li><strong>事件委托</strong>：将原本需要绑定在子元素的监听事件委托给父元素，通过 DOM 元素的事件冒泡机制实现父元素监听到子元素上事件的触发，特别适用于动态元素的绑定。</li>
<li><strong>事件冒泡</strong>：一个事件触发后会在子元素和父元素之间分为三个阶段传播：捕获阶段(window 对象传导到目标节点，不响应任何事件)、目标阶段(在目标节点上触发)，冒泡阶段(从目标节点传导回 window 对象)。</li>
<li><strong>面向对象思想</strong>：将问题分解并抽象为一个个具体对象，并且将对象及其公共的属性和方法封装成一个类，整个程序由对象之间的分工和合作完成。主要特点有封装 (通过对象相互访问)、继承 (从已有对象上继承出新对象)、多态 (多对象的不同形态)，极大提高了程序的复用性性和可维护性。核心在于类的实现：js 基于 function 模拟类，通过 prototype 属性实现类方法的共享，ES6 class 是定义类的一个语法糖，通过 extends 继承父类。</li>
</ul>
<h2 id="JS-编译"><a href="#JS-编译" class="headerlink" title="JS 编译"></a>JS 编译</h2><ul>
<li><strong>两种计算机语言</strong>：编译型语言经过编译器编译后保留机器能读懂的二进制文件，比如 C&#x2F;C++、go。解释型语言是在程序运行时通过解释器对程序进行动态解释和执行，比如 Python、JavaScript。</li>
<li><strong>编译过程</strong>：编译型语言编译器首先将代码进行词法分析和语法分析并生成抽象语法树 AST，编译型语言和最后会被分别处理为机器码和字节码。</li>
<li><strong>字节码</strong>：直接将 AST 转化为机器码时执行效率是非常高但是会消耗大量内存，可以通过转化为字节码解决内存问题，字节码配合解释器和编译器的计数实现称为即时编译 JIT。</li>
</ul>
<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><ul>
<li><strong>typeof</strong>：判断所有的基本数据类型，返回一个字符串。</li>
<li><strong>instanceOf</strong>：判断一个对象是否某构造函数的实例，返回值为 true&#x2F;false。</li>
<li><strong>constructor</strong>：返回一个对象具体的构造函数，比如 Array、Function、Map。</li>
<li>**Object.prototype.toString.call()**：对象的一个原型扩展函数，可以判断所有数据类型。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6 种原始数据类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;a&#x27;</span>);   <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>);     <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);  <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>());  <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);    <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);    <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Map</span>());  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Set</span>());  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function 类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;); <span class="comment">// &quot;function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Apple</span> () &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line"><span class="keyword">let</span> apple = <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun <span class="keyword">instanceof</span> <span class="title class_">Function</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple <span class="keyword">instanceof</span> <span class="title class_">Apple</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple <span class="keyword">instanceof</span> <span class="title class_">Function</span>);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Map</span>() <span class="keyword">instanceof</span> <span class="title class_">Map</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Map</span>() <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">constructor</span> === <span class="title class_">Function</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">constructor</span> === <span class="title class_">Apple</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apple.<span class="property">constructor</span> === <span class="title class_">Function</span>);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">constructor</span> === <span class="title class_">Array</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="property">constructor</span> === <span class="title class_">Object</span>);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Map</span>().<span class="property">constructor</span> === <span class="title class_">Map</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Map</span>().<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">constructor</span> === <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(fun));        <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(apple));      <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]));         <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Map</span>()));  <span class="comment">// &quot;[object Map]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;));         <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><ul>
<li><strong>运算符转换</strong>：-、*、&#x2F;、% 会转换为数字后计算，+ 则进行数字相加或字符串拼接。</li>
<li><strong>双等号转换</strong>：两边会转换为同一类型再进行比较，有一个 NaN 则返回 false。</li>
<li><strong>点号操作符</strong>：数字、字符串等通过点调用方法时，隐式地将类型转换成对象。</li>
<li><strong>if() 语句</strong>：括号里的表达式部分会被隐式转换为布尔类型进行判断。</li>
</ul>
<h2 id="小数精度丢失"><a href="#小数精度丢失" class="headerlink" title="小数精度丢失"></a>小数精度丢失</h2><blockquote>
<p>有些小数在计算机使用二进制方式表示时无法准确表示，类似于十进制的 1&#x2F;3 无理数、无限循环。但是计算机存储小数的类型不管是 float&#x2F;double 都是有位数限制的，所以它们存储的只是一个近似值，这就导致了精度丢失。解决办法如下：</p>
</blockquote>
<ul>
<li>整数的出现问题几率较低，毕竟很少有业务需要用到超大整数，只要运算结果不超过 <strong>Math.pow(2, 53)</strong> 就不会丢失精度。</li>
<li>小数的出现问题几率很大，尤其是一些电商网站的金额等数据。解决方式：把小数放到位整数（乘倍数），再缩小回原来倍数（除倍数）。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// true, false</span></span><br><span class="line"><span class="keyword">var</span> two   = <span class="number">0.2</span></span><br><span class="line"><span class="keyword">var</span> one   = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">var</span> eight = <span class="number">0.8</span></span><br><span class="line"><span class="keyword">var</span> six   = <span class="number">0.6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two - one == one, eight - six == two)</span><br><span class="line"></span><br><span class="line"><span class="comment">// floatObj：包含加减乘除四个方法，确保浮点数运算不丢失精度</span></span><br><span class="line"><span class="keyword">var</span> floatObj = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断obj是否为一个整数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isInteger</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(obj) === obj</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</span></span><br><span class="line"><span class="comment">    * @param floatNum &#123;number&#125; 小数</span></span><br><span class="line"><span class="comment">    * @return &#123;object&#125;</span></span><br><span class="line"><span class="comment">    *   &#123;times:100, num: 314&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">toInteger</span>(<span class="params">floatNum</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> ret = &#123;<span class="attr">times</span>: <span class="number">1</span>, <span class="attr">num</span>: <span class="number">0</span>&#125;</span><br><span class="line">      <span class="keyword">var</span> isNegative = floatNum &lt; <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isInteger</span>(floatNum)) &#123;</span><br><span class="line">          ret.<span class="property">num</span> = floatNum</span><br><span class="line">          <span class="keyword">return</span> ret</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> strfi  = floatNum + <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">var</span> dotPos = strfi.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">      <span class="keyword">var</span> len    = strfi.<span class="title function_">substr</span>(dotPos+<span class="number">1</span>).<span class="property">length</span></span><br><span class="line">      <span class="keyword">var</span> times  = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">10</span>, len)</span><br><span class="line">      <span class="keyword">var</span> intNum = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(floatNum) * times + <span class="number">0.5</span>, <span class="number">10</span>)</span><br><span class="line">      ret.<span class="property">times</span>  = times</span><br><span class="line">      <span class="keyword">if</span> (isNegative) &#123;</span><br><span class="line">          intNum = -intNum</span><br><span class="line">      &#125;</span><br><span class="line">      ret.<span class="property">num</span> = intNum</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 核心方法，实现加减乘除运算，确保不丢失精度</span></span><br><span class="line"><span class="comment">    * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param a &#123;number&#125; 运算数1</span></span><br><span class="line"><span class="comment">    * @param b &#123;number&#125; 运算数2</span></span><br><span class="line"><span class="comment">    * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数</span></span><br><span class="line"><span class="comment">    * @param op &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide）</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">operation</span> (a, b, digits, op) &#123;</span><br><span class="line">    <span class="keyword">var</span> o1 = <span class="title function_">toInteger</span>(a)</span><br><span class="line">    <span class="keyword">var</span> o2 = <span class="title function_">toInteger</span>(b)</span><br><span class="line">    <span class="keyword">var</span> n1 = o1.<span class="property">num</span></span><br><span class="line">    <span class="keyword">var</span> n2 = o2.<span class="property">num</span></span><br><span class="line">    <span class="keyword">var</span> t1 = o1.<span class="property">times</span></span><br><span class="line">    <span class="keyword">var</span> t2 = o2.<span class="property">times</span></span><br><span class="line">    <span class="keyword">var</span> max = t1 &gt; t2 ? t1 : t2</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (t1 === t2) &#123;  <span class="comment">// 两个小数位数相同</span></span><br><span class="line">                result = n1 + n2</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123;  <span class="comment">// o1 小数位 大于 o2</span></span><br><span class="line">                result = n1 + n2 * (t1 / t2)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;          <span class="comment">// o1 小数位 小于 o2</span></span><br><span class="line">                result = n1 * (t2 / t1) + n2</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result / max</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;subtract&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (t1 === t2) &#123;</span><br><span class="line">                result = n1 - n2</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123;</span><br><span class="line">                result = n1 - n2 * (t1 / t2)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = n1 * (t2 / t1) - n2</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result / max</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;multiply&#x27;</span>:</span><br><span class="line">            result = (n1 * n2) / (t1 * t2)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;divide&#x27;</span>:</span><br><span class="line">            result = (n1 / n2) * (t2 / t1)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加减乘除的四个接口</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, digits</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">operation</span>(a, b, digits, <span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b, digits</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">operation</span>(a, b, digits, <span class="string">&#x27;subtract&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b, digits</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">operation</span>(a, b, digits, <span class="string">&#x27;multiply&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b, digits</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">operation</span>(a, b, digits, <span class="string">&#x27;divide&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// exports</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: add,</span><br><span class="line">    <span class="attr">subtract</span>: subtract,</span><br><span class="line">    <span class="attr">multiply</span>: multiply,</span><br><span class="line">    <span class="attr">divide</span>: divide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>


<h2 id="JS-继承模式"><a href="#JS-继承模式" class="headerlink" title="JS 继承模式"></a>JS 继承模式</h2><blockquote>
<p>按照几种继承模式的从最次的继承模式到最佳的继承模式的顺序去讲，讲出当前这种继承模式的利弊和相对前一种继承模式解决了什么问题，最关键的代码部分在哪里。</p>
</blockquote>
<ul>
<li><strong>原型链继承</strong><ul>
<li>实现：将子类的原型指向父类的实例，从而继承父类的私有属性和原型属性。</li>
<li>优点：子类实例能访问到父类新增的原型属性和方法、简单易用。</li>
<li>缺点：无法实现多继承(一个子类继承多个父类)、创建子类实例时无法向父类构造函数传参、存在子类实例共享父类引用属性而相互影响的问题。</li>
</ul>
</li>
<li><strong>父类构造函数继承</strong><ul>
<li>实现：子类构造函数中通过 call&#x2F;apply 调用父类构造函数来实现父类私有属性继承。</li>
<li>优点：可以实现多继承、创建子类实例时可以向父类传递参数、解决了原型链继承中子类实例共享父类引用属性的问题(引用类型数据会重新创建一份)。</li>
<li>缺点：每次创建子类实例时都要调用一次父类构造函数而影响性能、只继承父类的实例属性(私有属性)而没有继承父类的原型属性。</li>
</ul>
</li>
<li><strong>组合式继承 (原型链 + 构造函数)</strong><ul>
<li>实现：通过调用父类构造函数继承父类的属性并保留传参的优点，并通过 Object.create(Parent.prototype) 来创建继承了父类属性的对象并赋给子类原型，这样既让父类构造函数不用执行两次，又让子类继承了父类的原型方法。</li>
<li>本质：先创建子类的实例对象 this，然后通过 Parent.apply(this) 添加父类方法。</li>
<li>优点：构造函数继承的所有优点、父类构造函数只用执行一次。</li>
</ul>
</li>
<li><strong>ES6 class 继承</strong><ul>
<li>实现：使用 extends 关键字继承父类的原型属性，使用 static 关键字定义类的静态方法，调用 super 来继承父类的实例属性并且可以传参。</li>
<li>本质：先将父类实例对象的属性和方法添加到 this (所以必须先调用 super 方法)，然后再通过子类的构造函数修改 this。</li>
<li>优点：简单易用，不需要直接修改原型链来完成继承。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合式继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span> (sex) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setSex</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> (name, age, sex) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, sex)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;Tony&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 class 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (sex) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">    showSex () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父类方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (name, age, sex) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(sex)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    showSex () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子类方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;Tony&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure>


<h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><blockquote>
<p>this 代表当前方法执行时自动生成的一个上下文对象。</p>
</blockquote>
<ul>
<li>元素绑定事件：指向当前操作的元素。</li>
<li>普通函数：指向点前面的对象，没有点则指向 window (js 严格模式下是 undefined)。</li>
<li>构造函数：指向生成的对象实例，而且 this 指向无法改变。new 的过程是在内部新建一个空对象，添加构造函数的属性和方法并返回该对象。</li>
<li>箭头函数：指向定义时所在的对象，因为它没有自身的 this，使用的是外层 this。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;哈哈哈&#x27;</span>, <span class="attr">fn</span>: fn &#125;</span><br><span class="line"><span class="title function_">fn</span>();       <span class="comment">// window</span></span><br><span class="line">obj.<span class="title function_">fn</span>();   <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// p：&#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tony&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="function">()=&gt;</span>&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;,       <span class="comment">// Window</span></span><br><span class="line">    <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;  <span class="comment">// obj</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="各种位置"><a href="#各种位置" class="headerlink" title="各种位置"></a>各种位置</h2><ul>
<li><strong>offsetHeight</strong>：表示可视区域的高度，包含边框和滚动条。</li>
<li><strong>clientHeight</strong>：表示可视区域的高度，不包含边框和滚动条。</li>
<li><strong>scrollHeight</strong>：表示所有区域的高度，包含因为滚动被隐藏的部分。 </li>
<li><strong>clientTop</strong>：表示边框厚度，在未指定的情况下默认为 0。</li>
<li><strong>scrollTop</strong>：滚动后被隐藏的高度，相对于 offsetParent 父坐标距离顶端的高度。</li>
</ul>
<h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><blockquote>
<p>在网页实际运行的某些场景下，有些事件会被连续触发而频繁进行 DOM 操作和资源加载，严重影响了网页性能，甚至会造成浏览器崩溃。两者都是针对连续触发的某个行为，区别在于是要优化到减少它的执行次数还是只执行一次。</p>
</blockquote>
<ul>
<li><strong>防抖</strong>：将一个弹簧连续按下但只会在最后放手的一瞬反弹，即我们希望高频事件只执行一次而实现回调函数的延时执行。常见的应用场景有：搜索框输入内容时 keyup、浏览器窗口调整时 resize。</li>
<li><strong>节流</strong>：一个水龙头在滴水时保持 一滴水&#x2F;s 的频率。即我们希望高频事件以一定频率重复调用，减少函数的执行次数。常见的应用场景有：拖拽元素时 drag、监听滚动时 scroll、鼠标移动时 mousemove、手指滑动时 touchmove。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防抖：n 秒内高频事件再次被触发则重新执行。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">callback, delay=<span class="number">200</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handleSeach = <span class="title function_">debounce</span>(seachAjax, <span class="number">500</span>)</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="params">e</span>=&gt;</span>&#123; <span class="title function_">handleSeach</span>(e.<span class="property">target</span>.<span class="property">value</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流：n 秒内只会执行一次。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">callback, duration=<span class="number">200</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, duration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handleScroll = <span class="title function_">throttle</span>(handleScroll)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, handleScroll);</span><br></pre></td></tr></table></figure>


<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul>
<li>原因：对象存储的内存空间在使用完毕后并没有重置为 null 释放，导致该内存单元在离开当前作用域前无法被释放或者被垃圾回收。</li>
<li>出现场景：setTimeout 首个参数使用字符串而非函数、闭包、意外的全局变量、未被清空的定时器、未被销毁的事件监听、DOM 引用等。</li>
<li>解决方案：不要动态绑定事件、不要给动态元素绑定事件而通过事件冒泡在父容器监听事件、动态时则必须提供 destroy 方法、尽量单例化、少创建 dom、少绑事件。</li>
</ul>
<h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><ul>
<li>内存：由可读写单元组成而表示一片可操作空间。</li>
<li>内存管理：JS 解释器对新建的字符串和对象动态分配一块内存空间并自动管理，但由于没有相关 API 而无法像 C&#x2F;C++ 主动调用。</li>
<li>垃圾回收机制：JS 执行引擎将垃圾占用的对象空间回收的过程。对象创建时自动分配一块内存空间，对象不再被引用或者根作用域不能被访问时会自动释放它占用的内存。</li>
</ul>
<h2 id="堆栈溢出"><a href="#堆栈溢出" class="headerlink" title="堆栈溢出"></a>堆栈溢出</h2><ul>
<li><strong>递归</strong>：指一个函数不断的调用自身。它将原来的问题转化为更小的同一问题来求解，只需要少量代码就可以完成多次重复计算，大大地减少了程序的代码量。</li>
<li><strong>堆栈溢出</strong>：JS 引擎每调用一个函数时都会为其创建执行上下文并压入调用栈，执行函数代码时如果调用其它函数则创建新函数的执行上下文并压入栈顶。每个函数通过栈分配一定空间的数据块来保存参数、返回值等临时信息，等到函数执行完成时才出栈，但是当用来分配的调用栈空间被占满时会导致数据覆盖问题，即递归中经常发生的栈溢出错误 stackOverflow。</li>
<li><strong>栈溢出的解决方案</strong>：使用闭包 (每次调用时返回一个匿名函数，相关的参数和局部变量将会被释放而不会额外增加堆栈大小)、优化调用、尾递归 (添加一个参数，记录递归次数)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fibonacci</span> (n) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( n &lt;= <span class="number">2</span> ) &#123;<span class="keyword">return</span> <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Fibonacci</span>(n - <span class="number">1</span>) + <span class="title class_">Fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈溢出</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾递归</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    count ++;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;超过了最大调用次数&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="JS-异步任务"><a href="#JS-异步任务" class="headerlink" title="JS 异步任务"></a>JS 异步任务</h2><blockquote>
<p>先主线程后异步任务队列、先微任务再宏任务。</p>
</blockquote>
<ol>
<li>JS 引擎将所有操作分为 同步任务、异步任务。</li>
<li>同步任务进入主线程，然后直接按顺序执行。</li>
<li>异步任务进入工作线程，当满足触发条件后推入任务队列。</li>
<li>事件循环机制：主线程执行完所有同步任务之后空闲时，重复去任务队列中查看是否有可执行的异步任务，有则推入主进程的执行栈。<br>1. 执行一个宏任务（栈中没有就从事件队列中获取）。<br>2. 执行过程中如果遇到微任务，就将它添加到微任务的任务队列中。<br>3. 宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）。<br>4. 当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染。<br>5. 渲染完毕后，JS 线程继续接管，开始下一个宏任务（从任务队列中获取）。</li>
</ol>
<h2 id="JS-异步编程"><a href="#JS-异步编程" class="headerlink" title="JS 异步编程"></a>JS 异步编程</h2><ul>
<li><strong>回调函数</strong>：解决了同步问题但可能存在回调地狱，不能使用 try catch、return。</li>
<li><strong>Promise</strong>：同步的立即执行函数，解决了回调地狱但无法取消，需要回调函数捕获错误。</li>
<li><strong>Generator</strong>：多个线程互相协作来完成异步任务的异步编程方案，主要特点是线程 A 执行到某处之后暂停执行并等到线程 B 执行完毕后继续执行。</li>
<li><strong>Async&#x2F;Await</strong>：本质是一个自执行的 generate 函数，以同步方式实现异步代码提高了代码的可维护性，async 函数遇到 await 时会先执行异步操作并返回一个 Promise 对象。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">yield</span> x + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>(<span class="number">1</span>);</span><br><span class="line">g.<span class="title function_">next</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> g.<span class="title function_">next</span>(res)).<span class="title function_">then</span>()</span><br></pre></td></tr></table></figure>


<h2 id="apply、call、bind"><a href="#apply、call、bind" class="headerlink" title="apply、call、bind"></a>apply、call、bind</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">&#x27;linxin&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span> (x, y) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) &#125;</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">apply</span>(a, [<span class="number">1</span>, <span class="number">2</span>])  <span class="comment">// 参数为数组、函数直接执行</span></span><br><span class="line">f.<span class="title function_">call</span>(a, <span class="number">1</span>, <span class="number">2</span>)     <span class="comment">// 参数为值、函数直接执行</span></span><br><span class="line">f.<span class="title function_">bind</span>(a, <span class="number">1</span>, <span class="number">2</span>)()   <span class="comment">// 参数为值或数组、函数返回一个绑定新 this 的函数但不执行</span></span><br></pre></td></tr></table></figure>



<h2 id="箭头函数和普通函数"><a href="#箭头函数和普通函数" class="headerlink" title="箭头函数和普通函数"></a>箭头函数和普通函数</h2><blockquote>
<p>箭头函数是普通函数的简写，可以更优雅的定义一个函数，和普通函数的差异如下：</p>
</blockquote>
<ul>
<li>函数体内的 this 对象，是定义时所在的对象，而不是使用时所在的对象。</li>
<li>不可以使用 arguments 对象，函数体内不存在该对象但可用 rest 代替。</li>
<li>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</li>
<li>不可以使用 new 命令：没有自己的 this 而无法调用 call&#x2F;apply、没有 prototype 属性。</li>
</ul>
<h2 id="MVC、MVP、MVVM"><a href="#MVC、MVP、MVVM" class="headerlink" title="MVC、MVP、MVVM"></a>MVC、MVP、MVVM</h2><ul>
<li><strong>MVC</strong>：View、Model 直接绑定，因此很多 view 可以修改多个 model 而变得混乱，交互增加导致代码不好维护。</li>
<li><strong>MVP</strong>：View 绑定事件的事件驱动机制，并通过 Presenter 实现分离和通信。它定义了 View、Presenter 之间的接口，需要维护 Presenter 的内部实现。</li>
<li><strong>MVVM</strong>：View、Model 分别通过 ViewModel 的 DOM-Listeners、Data-Bindings 绑定事件和监听数据而实现了双向绑定。它实现了数据与视图的分离，通过数据来驱动视图，开发者只需要关心数据变化 (DOM 操作被封装了)。</li>
</ul>
<h2 id="Set、Map、WeakSet、WeakMap"><a href="#Set、Map、WeakSet、WeakMap" class="headerlink" title="Set、Map、WeakSet、WeakMap"></a>Set、Map、WeakSet、WeakMap</h2><ul>
<li><strong>Set</strong>：成员不能重复、只有键值而没有键名、可以遍历。</li>
<li><strong>WeakSet</strong>：成员都是对象、成员都是弱引用而不计入垃圾回收机制、不能遍历。</li>
<li><strong>Map</strong>：本质是键值对的集合、可以遍历、可以和各种数据格式转换。</li>
<li><strong>WeakMap</strong>：只接收对象为键名、键名指向的对象不计入垃圾回收机制、不能遍历。</li>
</ul>
<h2 id="webpack-loader、plugin"><a href="#webpack-loader、plugin" class="headerlink" title="webpack loader、plugin"></a>webpack loader、plugin</h2><ul>
<li><strong>loader</strong>：一个转换器，将 A 文件进行编译成 B 文件，属于单纯的文件转换过程。</li>
<li><strong>plugin</strong>：一个扩展器，它丰富了 webpack 本身，针对的是 loader 结束后 webpack 打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听 webpack 打包过程中的某些节点，执行广泛的任务。</li>
</ul>
<h1 id="三、JS-框架"><a href="#三、JS-框架" class="headerlink" title="三、JS 框架"></a>三、JS 框架</h1><h2 id="Angular、React、Vue"><a href="#Angular、React、Vue" class="headerlink" title="Angular、React、Vue"></a>Angular、React、Vue</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li><strong>Vue</strong>：双向数据流，vuex 集中管理数据，有指令且能自定义指令，双向数据绑定。</li>
<li><strong>React</strong>：单项数据流，操作虚拟 dom，redux 集中管理数据，无指令。</li>
<li><strong>Angular</strong>：单项数据流，学习成本高而且性能稍差于其它两个，双向绑定原理不同 vue。</li>
</ul>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><blockquote>
<p>尤雨溪开发的用于构建用户界面的一个渐进式 JS 库、数据驱动的组件系统、轻量高效的前端组件化方案，专注于视图层而不是一个全能框架。</p>
</blockquote>
<ul>
<li>特点：轻量级、双向数据绑定、数据驱动视图、视图与数据分离。</li>
<li>优点：渐进式构建能力、简单语法、更快的渲染速度和更小的体积。</li>
<li>缺点：不支持低端浏览器、首页加载缓慢，适用于中小型项目。</li>
</ul>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><blockquote>
<p>Facebook 开源的一个用于动态构建用户界面的 JS 库、需要集成 Redux 等库才能实现复杂应用的非完整解决方案。</p>
</blockquote>
<ul>
<li>特点：采用声明式描述应用、引入 Virtual DOM 和 react-diff 算法实现高效渲染、通过 JSX 语法实现组件化、单向数据流。</li>
<li>优点：高效渲染、标准 API 解决了跨浏览器兼容问题、代码更加模块化。</li>
<li>缺点：专注于视图层而需要集成其它库，不适合大型项目。</li>
</ul>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><blockquote>
<p>Google 开源的一个基于 TypeScript 的 JS 框架、最完善的前端工程框架。</p>
</blockquote>
<ul>
<li>特点：良好的结构程序、双向数据绑定(脏检查机制)、依赖注入、服务等。</li>
<li>优点：兼容所有平台、通过依赖注入实现注入服务、大型应用中实现静态类型检查。</li>
<li>缺点：验证功能错误信息显示比较薄弱，需要写很多模板标签。ngView 只能有一个，不能嵌套多个视图。比较笨重，没有让用户选择的轻量级版本，只适合大型项目。</li>
</ul>
<h2 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h2><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><blockquote>
<p>数据流指组件之间的数据流动，vue、react 遵循数据只能由外层组件向内层组件传递的单向数据流。特点是子组件不能直接修改从父组件传递过来的数据，否则一个子组件修改数据就会导致所有子组件变化。优点是所有状态的改变可记录、可跟踪，组件数据只有唯一的入口和出口，有利于代码维护。缺点是写起来不太方便，变更时需要创建各种 action 来维护对应的 state。</p>
</blockquote>
<h3 id="双向绑定数据"><a href="#双向绑定数据" class="headerlink" title="双向绑定数据"></a>双向绑定数据</h3><blockquote>
<p>单双向绑定指 view、model 之间的映射关系，和数据流无关。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点是无法追踪局部状态的变化，增加了 debug 难度。react 采取单向绑定，vue 支持单向绑定(<code>插值，v-bind</code>) 和双向绑定(<code>v-model</code>)。</p>
</blockquote>
<ul>
<li><strong>实现原理</strong>：vue2.0 采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的 setter、getter 操作，在数据变动时发布消息给订阅者，触发相应监听回调。</li>
<li><strong>实现流程</strong> <ul>
<li><strong>1、模板解析为 render 函数</strong>：函数包含所有的模板信息并返回一个虚拟 DOM，模板的 data 和指令变成了 JS 变量和 JS 逻辑。</li>
<li><strong>2、响应式监听</strong>：通过 Object.defineProperty 设置对象的 get&#x2F;set 实现监听 data 的属性变化，然后将 data 属性代理到实例对象 vm。</li>
<li><strong>3、页面渲染</strong>：通过 updateComponent() 将模板渲染为 html。首次渲染时直接渲染虚拟 DOM，data 属性变化触发重新渲染时对比新旧节点后局部渲染。</li>
</ul>
</li>
<li><strong>实现方式</strong><ul>
<li><strong>发布者-订阅者模式</strong>：一般通过 sub、pub 的方式实现数据和视图的绑定监听，更新数据 <code>vm.set(&#39;property&#39;, value)</code>。</li>
<li><strong>脏值检查</strong>：angular 在指定事件触发时进入脏值检测，通过对比新旧数据来决定是否更新视图，它只对改变的数据进行更新元素。</li>
<li><strong>数据劫持</strong>：vue2.0 通过 <code>Object.defineProperty()</code> 来监听对象各个属性的 getter、setter，属性改变时触发回调。</li>
<li><strong>ES6 Proxy</strong>：vue3.0 用来替代 Object.defineProperty，因为它可以劫持整个对象而不需要遍历对象的所有属性。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>, key);</span><br><span class="line">                <span class="keyword">return</span> data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, newVal);</span><br><span class="line">                data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">obj, key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">        obj[key] = val;</span><br><span class="line">        <span class="title function_">scan</span>();</span><br><span class="line">        <span class="keyword">return</span> obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="双向绑定和-vuex-是否冲突"><a href="#双向绑定和-vuex-是否冲突" class="headerlink" title="双向绑定和 vuex 是否冲突"></a>双向绑定和 vuex 是否冲突</h3><blockquote>
<p>严格模式下使用时，Vuex state 上使用 v-model 会导致出错。解决方案如下：</p>
</blockquote>
<ul>
<li>使用带有 setter 的双向绑定计算属性。</li>
<li><code>&lt;Input&gt;</code> 绑定 value，然后监听 input&#x2F;change 事件并在事件回调中调用方法。</li>
</ul>
<h3 id="Proxy-替代-Object-defineProperty"><a href="#Proxy-替代-Object-defineProperty" class="headerlink" title="Proxy 替代 Object.defineProperty"></a>Proxy 替代 Object.defineProperty</h3><ul>
<li><strong>Object.defineProperty</strong>：无法低耗费的监听到数组下标的变化，导致通过数组下标添加元素时不能实时响应。只能劫持对象的属性，从而需要对每个对象、每个属性进行遍历，如果属性值是对象则还需要深度遍历。</li>
<li><strong>Proxy</strong>：可以劫持整个对象并返回一个新对象。可以代理对象、数组、动态增加的属性。</li>
</ul>
<h3 id="如何监控到属性修改并触发警告"><a href="#如何监控到属性修改并触发警告" class="headerlink" title="如何监控到属性修改并触发警告"></a>如何监控到属性修改并触发警告</h3><ul>
<li>因为 Vue 是单向数据流，易于检测数据的流动，出现了错误可以更加迅速的定位到错误发生的位置。</li>
<li>通过 setter 属性进行检测，修改值将会触发 setter，从而触发警告。</li>
</ul>
<h3 id="v-for-时给元素绑定事件要事件代理吗"><a href="#v-for-时给元素绑定事件要事件代理吗" class="headerlink" title="v-for 时给元素绑定事件要事件代理吗"></a>v-for 时给元素绑定事件要事件代理吗</h3><blockquote>
<p>v-for 中使用事件代理可以使监听器数量和内存占用率都减少，vue 内部并不会自动做事件代理，所以在 v-for 上使用事件代理在性能上会更优。</p>
</blockquote>
<h3 id="父子组件生命周期的执行顺序"><a href="#父子组件生命周期的执行顺序" class="headerlink" title="父子组件生命周期的执行顺序"></a>父子组件生命周期的执行顺序</h3><blockquote>
<p>vue 生命周期：beforeCreate、created、beforeMount、Mounted、beforeUpdate、updated、beforedestroy、destroyed。</p>
</blockquote>
<ul>
<li><strong>加载渲染过程</strong>：父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted。</li>
<li><strong>子组件更新过程</strong>：父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated。</li>
<li><strong>父组件更新过程</strong>：父 beforeUpdate -&gt; 父 updated。</li>
<li><strong>销毁过程</strong>：父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed。</li>
</ul>
<h3 id="NextTick"><a href="#NextTick" class="headerlink" title="NextTick"></a>NextTick</h3><blockquote>
<p>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM。</p>
</blockquote>
<h3 id="组件-key"><a href="#组件-key" class="headerlink" title="组件 key"></a>组件 key</h3><ul>
<li>Key 是用于追踪哪些列表中的元素被修改、被添加或被移除的辅助标识，开发时需要保证元素的 key 在其同级元素中具有唯一性。</li>
<li>vue、react 都是通过 diff 算法来对比新旧虚拟节点，从而实现更新。Key 值则用来判断该元素是新创建的还是被移动而来的元素，从而减少不必要的重复渲染。</li>
</ul>
<h3 id="组件-data-必须是函数"><a href="#组件-data-必须是函数" class="headerlink" title="组件 data 必须是函数"></a>组件 data 必须是函数</h3><blockquote>
<p>因为 JS 本身的特性带来的，如果 data 是一个对象，那么由于对象本身属于引用类型，当我们修改其中的一个属性时，会影响到所有 Vue 实例的数据。如果将 data 作为一个返回一个对象的函数，那么每一个实例的 data 属性都是独立的，不会相互影响了。</p>
</blockquote>
<h3 id="vuex-全局挂载"><a href="#vuex-全局挂载" class="headerlink" title="vuex 全局挂载"></a>vuex 全局挂载</h3><ul>
<li><strong>window 挂载</strong>：相当于增加全局属性，容易造成变量污染。数据是静态的而只能通过手动更新，数据更新后相关组件也不会重新渲染，必须手动渲染。</li>
<li><strong>vue 实例挂载</strong>：store 数据更新后就会立即渲染所有使用 store 数据的组件。Vuex 使用单向数据流，store 数据的更新需要经过 action 层、mutation 层，层次划分明确，便于管理。</li>
</ul>
<h3 id="Vuex-mutation、Redux-reducer-不能异步"><a href="#Vuex-mutation、Redux-reducer-不能异步" class="headerlink" title="Vuex mutation、Redux reducer 不能异步"></a>Vuex mutation、Redux reducer 不能异步</h3><blockquote>
<p>纯函数，给定同样的输入返回同样的输出，可预测性。</p>
</blockquote>
<h3 id="performance-性能模式"><a href="#performance-性能模式" class="headerlink" title="performance 性能模式"></a>performance 性能模式</h3><blockquote>
<p>通过 Performance API 可以获取到当前页面中与性能相关的信息，Performance.timing 对象包含了各种与浏览器处理相关的时间数据 (接口耗时、资源加载时间等)。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js：适用于开发模式和支持 performance.mark 的浏览器，开发工具的性能/时间线面板展示。</span></span><br><span class="line"><span class="keyword">const</span> isDev = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">performance</span> = isDev;</span><br></pre></td></tr></table></figure>

<h2 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h2><h3 id="redux-reducer-为何设计成纯函数"><a href="#redux-reducer-为何设计成纯函数" class="headerlink" title="redux reducer 为何设计成纯函数"></a>redux reducer 为何设计成纯函数</h3><blockquote>
<p>redux 的设计思想是不产生副作用、数据更改的状态可回溯。</p>
</blockquote>
<h3 id="react-router-里的标签和普通标签的区别"><a href="#react-router-里的标签和普通标签的区别" class="headerlink" title="react-router 里的标签和普通标签的区别"></a>react-router 里的标签和普通标签的区别</h3><ul>
<li>有 onClick 则执行 OnClick。</li>
<li>阻止 a 标签默认事件（跳转页面）。</li>
<li>使用 history&#x2F;hash 跳转，只是链接发现改变而并没有刷新页面。</li>
</ul>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、组件挂载</span></span><br><span class="line">constructor   <span class="comment">// 实例化：初始化 state，本地化 props，给事件处理函数绑定 this</span></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromProps  <span class="comment">// 实例化时或 props 变化时调用，返回 新state/null</span></span><br><span class="line">render        <span class="comment">// 渲染函数：不能省略并且必须有返回值 (返回 null/false 表示不渲染)</span></span><br><span class="line">componentDidMount  <span class="comment">// 挂载完成函数：axios 请求、事件绑定、setState 数据、操作 dom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、组件更新</span></span><br><span class="line"><span class="keyword">static</span> getDeriverdStateFromProps  <span class="comment">// 从 props 中获取 state</span></span><br><span class="line">shouldComponentUpdate    <span class="comment">// 返回 true/false 表示是否更新组件，常用于组件性能优化</span></span><br><span class="line">render                   <span class="comment">// 渲染</span></span><br><span class="line">getSnapshotBeforeUpdate  <span class="comment">// 获取快照：最新渲染输出（提交到 DOM 节点）前被调用</span></span><br><span class="line">componentDidUpdate       <span class="comment">// 更新完成函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、组件卸载</span></span><br><span class="line">componentWillUnmount     <span class="comment">// 预销毁函数：移除定时器、事件绑定等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、错误处理</span></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromError <span class="comment">// 从错误中获取 state</span></span><br><span class="line">componentDidCatch        <span class="comment">// 捕获错误并进行处理</span></span><br></pre></td></tr></table></figure>


<h3 id="Mixin、HOC、Render-Prop、React-Hooks"><a href="#Mixin、HOC、Render-Prop、React-Hooks" class="headerlink" title="Mixin、HOC、Render Prop、React Hooks"></a>Mixin、HOC、Render Prop、React Hooks</h3><h4 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h4><blockquote>
<p>缺陷如下：</p>
</blockquote>
<ul>
<li>命名冲突：多个 Mixin 可能定义了相同的 state 字段而导致数据覆盖问题。</li>
<li>相关依赖：组件与 Mixin、多个 Mixin 之间都可能存在依赖关系，维护成本较高。</li>
<li>增加复杂性：一个组件引入过多 mixin 时，代码逻辑将会非常复杂，过多的状态也降低了应用的可预测性。</li>
</ul>
<h4 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h4><ul>
<li>优势<ul>
<li>HOC 不会影响组件内部的状态，不存在冲突和互相干扰，这就降低了耦合度。</li>
<li>不同于 Mixin 的打平+合并，HOC 具有层级结构（组件树结构），降低了复杂度。</li>
</ul>
</li>
<li>缺陷<ul>
<li>嵌套地狱：每一次 HOC 调用都会产生一个组件实例，过多的嵌套会导致难以溯源，而且可能会存在 props 属性覆盖问题。</li>
<li>静态构建：HOC 只是声明了新组件但不会马上渲染，只有在组件被渲染时才执行。</li>
</ul>
</li>
</ul>
<h4 id="Render-Prop"><a href="#Render-Prop" class="headerlink" title="Render Prop"></a>Render Prop</h4><ul>
<li>优势<ul>
<li>动态构建，组件会重新渲染。</li>
<li>不用担心 props 的命名冲突。</li>
<li>可以溯源，子组件的 props 一定是来自于直接父组件。</li>
</ul>
</li>
<li>缺陷<ul>
<li>嵌套地狱：虽然摆脱了组件多层嵌套的问题，但是转化为了函数回调的嵌套。</li>
<li>使用繁琐：HOC 可以通过装饰器语法的一行代码实现复用，Render Props 则不行。</li>
<li>没有组件的上下文：没有 this.props 属性，不能像 HOC 那样可以直接获取到子组件实例对象 this.props.children。</li>
</ul>
</li>
</ul>
<h4 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h4><ul>
<li>优势<ul>
<li>解决了以上的嵌套问题，而且实现了视图和状态的分离，Hooks 还可以相互组合。</li>
<li>Hooks 为函数组件而生，从而解决了类组件的几大问题：this 指向容易错误、声明周期中的逻辑代码难以理解和维护、代码复用成本高等。</li>
</ul>
</li>
<li>缺陷<ul>
<li>存在不能出现在条件、循环中等写法限制，内部实现也不直观，增加了学习成本。</li>
<li>在闭包场景可能会引用到旧的 state、props 值，React.memo 也不能完全替代 shouldComponentUpdate（因为拿不到 state change，只针对 props change）。</li>
</ul>
</li>
</ul>
<h3 id="Flux-思想"><a href="#Flux-思想" class="headerlink" title="Flux 思想"></a>Flux 思想</h3><blockquote>
<p>主要特点就是数据单向流动，具体流程如下：</p>
</blockquote>
<ol>
<li>用户访问 View。</li>
<li>View 发出用户的 Action。</li>
<li>Dispatcher 收到 Action，要求 Store 进行对应的更新。</li>
<li>Store 更新后，发出一个 change 事件。</li>
<li>View 收到 change 后，更新页面。</li>
</ol>
<h3 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a>合成事件</h3><blockquote>
<p>React SyntheticEvent 中间层通过事件委托的方式基于原生 DOM 事件封装并暴露接口的事件对象，优化了浏览器兼容和性能等问题，</p>
</blockquote>
<ul>
<li>当用户在为 onClick 添加函数时，React 并没有将 Click 时间绑定到 DOM，而是在 document 处监听所有支持的事件。</li>
<li>当事件发生并冒泡至 document 时，React 才会让中间层 SyntheticEvent 将所有事件合成。所以原生事件会先执行，然后执行 React 合成事件，最后执行真正在 document 上挂载的事件。</li>
<li>React 事件和原生事件最好不要混用。原生事件中如果执行了 stopPropagation 方法，就会导致其他 React 事件失效。因为所有元素的事件将无法冒泡到 document上，导致所有的 React事件都将无法被触发。</li>
</ul>
<h3 id="setState-是异步还是同步"><a href="#setState-是异步还是同步" class="headerlink" title="setState 是异步还是同步"></a>setState 是异步还是同步</h3><ul>
<li>setState 只在合成事件和钩子函数中是异步的，在原生事件和 setTimeout 中都是同步的。</li>
<li>setState 的异步并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中无法马上获取更新后的值，形成了所谓的“异步”。但可以通过第二个参数 callback 获取最新数据。<br>  setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和 setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 setState，setState的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。</li>
</ul>
<h3 id="redux、dva、vuex"><a href="#redux、dva、vuex" class="headerlink" title="redux、dva、vuex"></a>redux、dva、vuex</h3><ul>
<li>redux：通过 store 存储，通过 dispatch(action) 唯一更改，reducer 描述如何更改。</li>
<li>dva：基于 redux，结合 redux-saga 等中间件进行封装。</li>
<li>vuex：类似dva，集成化。action 异步，mutation 同步。</li>
</ul>
<h3 id="redux-中间件"><a href="#redux-中间件" class="headerlink" title="redux 中间件"></a>redux 中间件</h3><blockquote>
<p>中间件提供第三方插件的模式，自定义拦截 action -&gt; reducer 的过程。变为 action -&gt; middlewares -&gt; reducer。这种机制可以让我们改变数据流，实现异步 action、action 过滤、日志输出、异常报告等功能。常见的中间件如下：</p>
</blockquote>
<ul>
<li><strong>redux-thunk</strong>：处理异步操作。</li>
<li><strong>redux-logger</strong>：提供日志输出。</li>
<li><strong>redux-promise</strong>：处理异步操作，actionCreator 的返回值是 promise。</li>
</ul>
<h3 id="redux-缺点"><a href="#redux-缺点" class="headerlink" title="redux 缺点"></a>redux 缺点</h3><ul>
<li>组件所需要的数据必须由父组件传过来，而不能像 flux 中直接从 store 获取。</li>
<li>组件相关数据更新时，父组件即使用不到该组件也会重新 render，这样可能会影响效率，或者需要写复杂的 shouldComponentUpdate 进行判断。</li>
</ul>
<h3 id="性能优化方案"><a href="#性能优化方案" class="headerlink" title="性能优化方案"></a>性能优化方案</h3><ul>
<li>使用 production 版本的 react.js。</li>
<li>重写 shouldComponentUpdate 来避免不必要的 dom 操作。</li>
<li>使用 key 来帮助 React 识别列表中所有子组件的最小变化。</li>
</ul>
<h3 id="setState-执行"><a href="#setState-执行" class="headerlink" title="setState 执行"></a>setState 执行</h3><ul>
<li>前两次都是在 react 自身声明周期内，触发时 <code>isBatchingUpdates: true</code>，所以并不会直接执行更新，而是加入了 dirtyComponents，所以获取的都是更新前的状态 0。</li>
<li>两次 setState 相同，react 内部会合并而只执行一次，完成后 state.val 值为 1。</li>
<li>setTimeout 中的代码触发时 <code>isBatchingUpdate: false</code>，直接更新而输出 2、3。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0、0、2、3</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、小程序"><a href="#四、小程序" class="headerlink" title="四、小程序"></a>四、小程序</h1><h2 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h2><ul>
<li>数据驱动的架构模式，UI 和数据是分离的，所有的页面更新都通过对更新数据来实现。</li>
<li>小程序本质是一个单页面应用，所有的页面渲染和事件处理都在一个页面内进行，但又可以通过微信客户端调用原生的各种接口。</li>
<li>它从技术讲和现有的前端开发差不多，采用 JS、WXML、WXSS 三种技术进行开发。功能可分为 webview、appService 两个部分。webview 用来展现 UI，appService 用来处理业务逻辑、数据及接口调用。两个部分在两个进程中运行，通过系统层 JSBridge 实现通信、UI 渲染、事件处理等。</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>**onLoad()**：页面加载时触发，只会调用一次，可获取当前页面路径中的参数。</li>
<li>**onShow()**：页面显示&#x2F;切入前台时触发，一般用来发送数据请求。</li>
<li>**onReady()**：页面初次渲染完成时触发, 只会调用一次，代表页面已可和视图层进行交互。</li>
<li>**onHide()**：页面隐藏&#x2F;切入后台时触发, 如底部 tab 切换到其他页面或小程序切入后台等。</li>
<li>**onUnload()**：页面卸载时触发，比如 redirectTo、navigateBack 到其他页面时。</li>
</ul>
<h2 id="双向绑定对比-vue"><a href="#双向绑定对比-vue" class="headerlink" title="双向绑定对比 vue"></a>双向绑定对比 vue</h2><blockquote>
<p>大体相同，但小程序直接 this.data 的属性不可以同步到视图，必须调用 this.setData() 方法。</p>
</blockquote>
<h2 id="wxml-与标准-html"><a href="#wxml-与标准-html" class="headerlink" title="wxml 与标准 html"></a>wxml 与标准 html</h2><blockquote>
<p>wxml 基于 xml 设计，标签只能在微信小程序中使用，不能使用 html 标签。</p>
</blockquote>
<h2 id="页面间传递数据"><a href="#页面间传递数据" class="headerlink" title="页面间传递数据"></a>页面间传递数据</h2><ul>
<li>使用全局变量实现数据传递。</li>
<li>页面跳转或重定向时，使用 url 带参数传递数据。</li>
<li>使用组件模板 template 传递参数。</li>
<li>使用缓存传递参数。</li>
<li>使用数据库传递数据。</li>
</ul>
<h2 id="提高应用速度"><a href="#提高应用速度" class="headerlink" title="提高应用速度"></a>提高应用速度</h2><ul>
<li>提高页面加载速度</li>
<li>用户行为预测</li>
<li>减少默认 data 的大小</li>
<li>组件化方案</li>
</ul>
<h1 id="五、编程相关"><a href="#五、编程相关" class="headerlink" title="五、编程相关"></a>五、编程相关</h1><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结果：[1, NaN, NaN]</span></span><br><span class="line"><span class="comment">// 原因：map 回调传入 item、index，执行 parseInt(1, 0)、parseInt(2, 1)、parseInt(3, 2)。</span></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>].<span class="title function_">map</span>(<span class="built_in">parseInt</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 什么情况下会打印 1</span></span><br><span class="line"><span class="keyword">var</span> a = ?;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ++<span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 (5).add(3).minus(2)</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span> + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">minus</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span> - n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 某公司 1-12 月的销售额为：&#123;1:22, 2:12, 5: 88&#125;，请处理为：</span></span><br><span class="line"><span class="comment">// [22, 12, null, null, 88, null, null, null, null, null, null, null]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">12</span> &#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> obj[i] || <span class="literal">null</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="综合考察"><a href="#综合考察" class="headerlink" title="综合考察"></a>综合考察</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  getName = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);&#125;;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getName</span>();        <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">getName</span>();            <span class="comment">// 4</span></span><br><span class="line"><span class="title class_">Foo</span>().<span class="title function_">getName</span>();      <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">getName</span>();            <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>.<span class="title function_">getName</span>();    <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>();  <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>();    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>



<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desp</span> 变量提升：JS 解析器都会将函数体内声明的变量移到函数体的顶部。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@result</span> ：Goodbye Jack、World</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// var name; </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye &#x27;</span> + name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 查找变量时，当前函数体内没找到则到一直向上到全局对象中寻找。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值表达式：undefined、&#123; n: 2 &#125;</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.<span class="property">x</span> = a = &#123;<span class="attr">n</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>, b.<span class="property">x</span>)</span><br></pre></td></tr></table></figure>

<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 内部作用域会先去查找已有变量的声明，有则赋值，但 IIFE 函数无法赋值。</span></span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);         <span class="comment">// [Function b]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>);  <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// window.b = 20 打印：[Function b]、20</span></span><br><span class="line">    <span class="comment">// var b = 20 打印：20、10</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)   <span class="comment">// undefined</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)   <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)   <span class="comment">// 20</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>


<h2 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4 2 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Foo</span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Foo</span>(); </span><br><span class="line">obj.<span class="title function_">a</span>();</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">a</span>();</span><br></pre></td></tr></table></figure>

<h2 id="对象应用"><a href="#对象应用" class="headerlink" title="对象应用"></a>对象应用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http://www.baidu.com</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeObjProperty</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  o.<span class="property">siteUrl</span> = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">  o = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  o.<span class="property">siteUrl</span> = <span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> webSite = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">changeObjProperty</span>(webSite);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(webSite.<span class="property">siteUrl</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// [ , , 1, 2]</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;splice&#x27;</span>: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>,</span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">obj.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>


<h2 id="事件循环-x2F-异步"><a href="#事件循环-x2F-异步" class="headerlink" title="事件循环&#x2F;异步"></a>事件循环&#x2F;异步</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// script start、async1 start、async2、promise1、</span></span><br><span class="line"><span class="comment">// script end、async1 end、promise2、setTimeout</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="jsonp-封装"><a href="#jsonp-封装" class="headerlink" title="jsonp 封装"></a>jsonp 封装</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span> (&#123;url, param, callback&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">callback</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> param = &#123;...param, callback&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> param) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;param[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arr.join(<span class="string">&#x27;&amp;&#x27;</span>)&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="实现一个-sleep-函数"><a href="#实现一个-sleep-函数" class="headerlink" title="实现一个 sleep 函数"></a>实现一个 sleep 函数</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep1</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sleep1</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sleep1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">sleep2</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="title function_">sleep1</span>(time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="title function_">sleep2</span>(<span class="number">1500</span>);</span><br><span class="line">s.<span class="title function_">next</span>().<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sleep2&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Async/Await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sleep3</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep1</span>(time);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep3</span>(<span class="number">2000</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sleep3&quot;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>


<h2 id="消息队列的类实现"><a href="#消息队列的类实现" class="headerlink" title="消息队列的类实现"></a>消息队列的类实现</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设计一个 LazyMan 类，实现以下功能</span></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(<span class="string">&#x27;lunch&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>).<span class="title function_">eat</span>(<span class="string">&#x27;lunch&#x27;</span>).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(<span class="string">&#x27;dinner&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating diner</span></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>).<span class="title function_">eat</span>(<span class="string">&#x27;lunch&#x27;</span>).<span class="title function_">eat</span>(<span class="string">&#x27;dinner&#x27;</span>).<span class="title function_">sleepFirst</span>(<span class="number">5</span>).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(<span class="string">&#x27;junk food&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// 等待了5秒...</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"><span class="comment">// I am eating dinner</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating junk food</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyManClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span> = [];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sleep</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`等待了<span class="subst">$&#123;time&#125;</span>秒...`</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">      &#125;, time * <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sleepFirst</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`等待了<span class="subst">$&#123;time&#125;</span>秒...`</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">      &#125;, time * <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">unshift</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am eating <span class="subst">$&#123;food&#125;</span>`</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="variable language_">this</span>.<span class="property">fns</span>.<span class="title function_">shift</span>();</span><br><span class="line">    fn &amp;&amp; <span class="title function_">fn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LazyMan</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyManClass</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>面试题库</category>
      </categories>
      <tags>
        <tag>面试题库</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 进阶语法</title>
    <url>/2019/11/06/11-2-typescript%20%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、类型检查"><a href="#一、类型检查" class="headerlink" title="一、类型检查"></a>一、类型检查</h1><blockquote>
<p>TS 的类型约束对象为变量、函数的参数和返回值，比如字面量类型约束变量、void 和 never 约束函数返回值等。</p>
</blockquote>
<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><ul>
<li>实现：<code>&lt;类型&gt; 值、值 as 类型</code>，注意使用 JSX 时只允许 as 语法。</li>
<li>用来指定一个值的类型而使 TS 假设已经类型检查，注意指定的必须是其子类型。</li>
<li>类似类型转换但并不进行数据检查和解构，它只在编译阶段起作用而运行时没影响。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">val</span>: <span class="built_in">any</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">len_1</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;val).<span class="property">length</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">len_2</span>: <span class="built_in">number</span> = (val <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例：将一个联合类型的变量指定为一个更加具体的类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="comment">// 类型断言不是类型转换，不能断言成一个联合类型中不存在的类型</span></span><br><span class="line">  <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).<span class="property">length</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> something.<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><blockquote>
<p>没有明确指定变量的类型时，TS 会根据某些规则自动推断出类型，常见场景有：声明变量时没有指定类型、函数默认参数、函数返回值。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;         <span class="comment">// 推断为 any</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;     <span class="comment">// 推断为 number</span></span><br><span class="line"><span class="keyword">let</span> c = [];    <span class="comment">// 推断为由 any 类型构成的数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">d</span> = (<span class="params">x=<span class="number">1</span></span>) =&gt; x+<span class="number">1</span>;  <span class="comment">// 函数默认参数被推断为 number，返回值也会被推断</span></span><br><span class="line"><span class="keyword">let</span> e = [<span class="number">1</span>, <span class="literal">null</span>];     <span class="comment">// 推断出兼容所有数据的类型：number、null 的联合类型</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">a = <span class="number">7</span>;</span><br><span class="line">b = <span class="string">&#x27;3&#x27;</span>;  <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文类型：根据变量所在位置的上下文进行推论</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">mouseEvent: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 编译通过，如果不指定 mouseEvent 类型则会报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">button</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS 推论有时不符合预期，可以通过类型断言进行覆盖。</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line">  <span class="attr">bar</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="title class_">Foo</span> = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Foo</span>;  <span class="comment">// 约定对象按照接口规范</span></span><br><span class="line">foo.<span class="property">bar</span> = <span class="number">1</span>;               <span class="comment">// 实现对象的具体定义</span></span><br></pre></td></tr></table></figure>


<h2 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h2><ul>
<li>TS 允许类型相互兼容的变量（函数、类等结构）相互赋值</li>
</ul>
<h3 id="兼容规则"><a href="#兼容规则" class="headerlink" title="兼容规则"></a>兼容规则</h3><blockquote>
<p>基于(成员的)结构类型，与通过明确的声明或类型名称决定兼容性的名义类型形成对比。基础规则为：函数之间是参数多的兼容参数少的、结构之间则是成员少的兼容成员多的，两个兼容的类型之间必须具有共同的属性。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于结构类型系统的 TS 会检查成功，Java 则会报错</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Named</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: <span class="title class_">Named</span>;</span><br><span class="line">p = <span class="keyword">new</span> <span class="title class_">Person</span>();  <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>


<h3 id="兼容实例"><a href="#兼容实例" class="headerlink" title="兼容实例"></a>兼容实例</h3><blockquote>
<p>如果类型 Y 可以被赋值给类型 X 时，则认为 X 兼容 Y，X 为目标类型，Y 为源类型。</p>
</blockquote>
<ul>
<li>函数<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 形参需要包含关系，参数名可以不相同</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">x</span> = (<span class="params">a: <span class="built_in">number</span></span>) =&gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">y</span> = (<span class="params">b: <span class="built_in">number</span>, s: <span class="built_in">string</span></span>) =&gt; <span class="number">0</span>;</span><br><span class="line">y = x;    <span class="comment">// 正确</span></span><br><span class="line">x = y;    <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回类型需要被包含关系</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">x</span> = (<span class="params"></span>)=&gt;(&#123;<span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">y</span> = (<span class="params"></span>)=&gt;(&#123;<span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;);</span><br><span class="line">y = x;    <span class="comment">// 报错</span></span><br><span class="line">x = y     <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数和剩余参数的兼容</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">a1</span> = (<span class="params">p1: <span class="built_in">number</span>, p2: <span class="built_in">number</span></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">b1</span> = (<span class="params">p1?: <span class="built_in">number</span>, p2?: <span class="built_in">number</span></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">c1</span> = (<span class="params">...args: <span class="built_in">number</span>[]</span>) =&gt; &#123;&#125;;</span><br><span class="line">a1 = b1;</span><br><span class="line">a1 = c1;</span><br><span class="line">b1 = a1;    <span class="comment">// 报错：可选参数不能被兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于有重载的函数，源函数的每个重载都要在目标函数上找到对应的函数签名。</span></span><br></pre></td></tr></table></figure></li>
<li>接口<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> X &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Y &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: X = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: Y = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line">x = y; <span class="comment">// x 兼容 y，成员少的会兼容成员多的</span></span><br></pre></td></tr></table></figure></li>
<li>枚举：枚举类型与数字类型兼容，不同枚举类型之间不兼容。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123; <span class="title class_">Ready</span>, <span class="title class_">Waiting</span> &#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123; <span class="title class_">Red</span>, <span class="title class_">Blue</span>, <span class="title class_">Green</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> status = <span class="title class_">Status</span>.<span class="property">Ready</span>;   <span class="comment">// 0</span></span><br><span class="line">status = <span class="title class_">Color</span>.<span class="property">Green</span>;        <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li>类<ul>
<li>比较两个类的对象时，只会比较实例的成员而不比较静态成员和构造函数。</li>
<li>类的私有成员和受保护成员会影响兼容性。当检查类实例的兼容时，如果目标类型包含一个私有成员或受保护成员，那么源类型必须包含来自同一个类的这个成员。这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">feet</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Size</span> &#123;</span><br><span class="line">  <span class="attr">feet</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">numFeet: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">Animal</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">Size</span>;</span><br><span class="line">a = s;         <span class="comment">// 正确</span></span><br><span class="line">s = a;         <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>泛型：类型参数只影响使用其做为类型一部分的结果类型。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NotEmpty</span>&lt;T&gt; &#123; </span><br><span class="line">  <span class="attr">data</span>: T;   <span class="comment">// 注释掉则正确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="title class_">NotEmpty</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: <span class="title class_">NotEmpty</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">x = y;       <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="子类型与赋值"><a href="#子类型与赋值" class="headerlink" title="子类型与赋值"></a>子类型与赋值</h3><blockquote>
<p>TS 有两种类型的兼容性：子类型与赋值。它们的区别在于，赋值扩展了子类型兼容，允许和 any 来回赋值，以及 enum 和对应数字值之间的来回赋值。实际上，类型兼容性是由赋值兼容性来控制的，包括 implements、extends 语句。</p>
</blockquote>
<h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><blockquote>
<p>通过类型判断等方式在特定语句块中确定变量的类型，从而可以放心地访问它的属性和方法。TS 支持的四种方式如下：</p>
</blockquote>
<ul>
<li>in：判断一个属性&#x2F;方法是否属于某对象，比如 <code>a in obj</code>。</li>
<li>typeof：判断基本类型，比如 <code>typeof b === &#39;number&#39;</code>。</li>
<li>instanceof：判断一个实例是否属于某个类，比如 <code>x instanceof ClassX</code>。</li>
<li>类型保护函数：当判断逻辑复杂时，可以自定义返回值是一个 类型谓词的判断函数。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义类型保护函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> name === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型保护函数：类型谓词为 name is Type</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFish</span>(<span class="params">pet: Fish | Bird</span>): pet is <span class="title class_">Fish</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (&lt;<span class="title class_">Fish</span>&gt;pet).<span class="property">swim</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isFish</span>(pet)) &#123;  <span class="comment">// pet 是 Fish 类型</span></span><br><span class="line">    pet.<span class="title function_">swim</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    pet.<span class="title function_">fly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><blockquote>
<p>对已知的一些类型通过 type 定义新名字以避免重复。它和接口的区别如下：</p>
</blockquote>
<ul>
<li>类型别名不能使用 extends、implement。</li>
<li>接口创建了一个新名字，可以在其他任何地方使用。类型别名并不创建新名字。</li>
<li>如果无法通过接口描述一个类型而需要使用联合&#x2F;元组类型，则一般可以选择类型别名。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameResolver</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrResolver</span> = <span class="title class_">Name</span> | <span class="title class_">NameResolver</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">n</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Container</span> &lt;T&gt; =  &#123;<span class="attr">value</span>: T&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性中引用</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Tree</span> &lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">value</span>: T;</span><br><span class="line">  <span class="attr">left</span>: <span class="title class_">Tree</span> &lt;T&gt;;   </span><br><span class="line">  <span class="attr">right</span>: <span class="title class_">Tree</span> &lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合交叉类型使用</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LinkedList</span> &lt;T&gt; = T &amp; &#123; <span class="attr">next</span>: <span class="title class_">LinkedList</span> &lt;T&gt; &#125;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">people</span>: <span class="title class_">LinkedList</span>&lt;<span class="title class_">Person</span>&gt;;</span><br><span class="line"><span class="keyword">var</span> s = people.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">var</span> s = people.<span class="property">next</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：类型别名不能出现在声明右侧的任何地方</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Yikes</span> = <span class="title class_">Array</span>&lt;<span class="title class_">Yikes</span>&gt;;</span><br></pre></td></tr></table></figure>


<h1 id="二、高级类型"><a href="#二、高级类型" class="headerlink" title="二、高级类型"></a>二、高级类型</h1><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><blockquote>
<p>通过 <code>&amp;</code> 获取多个类型的并集，与继承的区别是继承可以有自己的属性而交叉没有。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> extend&lt;T, U&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: U): T &amp; U &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">  for (let id in first) &#123;</span><br><span class="line">      (&lt;T&gt;result)[id] = first[id];</span><br><span class="line">  &#125;</span><br><span class="line">  for (let id in second) &#123;</span><br><span class="line">    if (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">        (&lt;U&gt;result)[id] = second[id];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const x = extend(&#123; a: &#x27;hello&#x27; &#125;, &#123; b: 42 &#125;);</span><br><span class="line"></span><br><span class="line">// 现在 x 拥有了 a、b 属性</span><br><span class="line">const a = x.a;</span><br><span class="line">const b = x.b;</span><br></pre></td></tr></table></figure>


<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><blockquote>
<p>通过 <code>|</code> 获取多个类型中的一个，具体类型需要等到赋值时根据类型推论的规则推断出。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型限定</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="comment">// 取值限定</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">string</span> | <span class="built_in">number</span></span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a = <span class="number">20</span>        <span class="comment">// 报错：已经推断出 string</span></span><br></pre></td></tr></table></figure>


<h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><blockquote>
<p>使用不存在的索引时会返回 undefined 而且没有约束，因此我们需要有对索引的约束。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用索引类型：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">obj: <span class="built_in">any</span>,keys: <span class="built_in">string</span>[]</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> keys.<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(obj,[<span class="string">&quot;c&quot;</span>,<span class="string">&quot;f&quot;</span>]))  <span class="comment">// 返回 undefined，没有约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用索引类型：T[k][] 表示返回值必须是 obj 中的值组成的列表</span></span><br><span class="line"><span class="keyword">function</span> getValue&lt;T,K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">keys</span>: K[]): T[K][] &#123; </span><br><span class="line">  <span class="keyword">return</span> keys.<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> obj[key]); <span class="comment">// keys 中的元素只能是 obj 中的键</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(obj,[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(obj,[<span class="string">&quot;c&quot;</span>,<span class="string">&quot;f&quot;</span>]));  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><blockquote>
<p>从旧类型中创建新类型的一种方式，比如将接口中的所有成员变成只读、可选。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span>&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有属性变为只读，生成一个新接口</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyObj</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Obj</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有属性变为可选</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialObj</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Obj</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取原类型的子集：两个等同</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickObj</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Obj</span>,<span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PickObj</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h2><blockquote>
<p>指由表达式所决定的类型，它使类型具有了不唯一性并增加了语言的灵活性。</p>
</blockquote>
<ul>
<li>实例<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果类型 T 可以被赋值给类型 U，name 结果就赋予 X 类型，否则赋予 Y 类型</span></span><br><span class="line">T <span class="keyword">extends</span> U ? X : Y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeName</span>&lt;T&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="built_in">string</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="built_in">number</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="built_in">boolean</span> ? <span class="built_in">boolean</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="literal">undefined</span> ? <span class="literal">undefined</span> :</span><br><span class="line">  T <span class="keyword">extends</span> <span class="title class_">Function</span> ? <span class="title class_">Function</span> :</span><br><span class="line">  <span class="built_in">object</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">TypeName</span>&lt;<span class="built_in">string</span>&gt;;   <span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">TypeName</span>&lt;<span class="built_in">string</span>[]&gt;; <span class="comment">// object 类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">TypeName</span>&lt;<span class="title class_">Function</span>&gt;; <span class="comment">// function 类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T4</span> = <span class="title class_">TypeName</span>&lt;<span class="built_in">string</span> | <span class="built_in">string</span>[]&gt;; <span class="comment">// string、obj 的联合类型</span></span><br></pre></td></tr></table></figure></li>
<li>应用：类型的过滤<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Diff</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作用是过滤掉第一个参数中的&#x27;a&#x27;。T5 为联合类型 &#x27;b&#x27; | &#x27;c&#x27; </span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T5</span> = <span class="title class_">Diff</span>&lt; <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;b&#x27;</span>|<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;e&#x27;</span> &gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析过程</span></span><br><span class="line"><span class="title class_">Diff</span>&lt;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;e&#x27;</span>&gt; | <span class="title class_">Diff</span>&lt;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;e&#x27;</span>&gt; | <span class="title class_">Diff</span>&lt;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>|<span class="string">&#x27;e&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">never</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>TS 内置<ul>
<li><code>Exclude&lt;T, U&gt;</code>：从 T 中剔除可以赋值给 U 的类型。</li>
<li><code>Extract&lt;T, U&gt;</code>：提取 T 中可以赋值给 U 的类型。</li>
<li><code>NonNullable&lt;T&gt;</code>：从 T 中剔除 null、undefined。</li>
<li><code>ReturnType&lt;T&gt;</code>：获取函数返回值类型。</li>
<li><code>InstanceType&lt;T&gt;</code>：获取构造函数类型的实例类型。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &quot;b&quot; | &quot;d&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T0</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;f&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;a&quot; | &quot;c&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="title class_">Extract</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;d&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="string">&quot;f&quot;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">T3</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>&gt;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="可以为-null-的类型"><a href="#可以为-null-的类型" class="headerlink" title="可以为 null 的类型"></a>可以为 null 的类型</h2><blockquote>
<p>TS 有两种特殊的类型 <code>null、undefined</code>，类型检查器默认它们可以赋值给任意类型。<code>--strictNullChecks</code> 标记可以解决此错误：当声明一个变量时，它不会自动包含 null、undefined，但是可以使用联合类型明确的包含它们：</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">s = <span class="literal">null</span>;        <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sn</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">sn = <span class="literal">null</span>;       <span class="comment">// 正确</span></span><br><span class="line">sn = <span class="literal">undefined</span>;  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>

<h3 id="可选参数-x2F-属性"><a href="#可选参数-x2F-属性" class="headerlink" title="可选参数&#x2F;属性"></a>可选参数&#x2F;属性</h3><blockquote>
<p>使用 strictNullChecks 标记之后默认添加 <code>| undefined</code>。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x:<span class="built_in">number</span>, y?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + (y || <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="literal">undefined</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="literal">null</span>)  <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">c.<span class="property">a</span> = <span class="literal">undefined</span>;   <span class="comment">// 报错</span></span><br><span class="line">c.<span class="property">b</span> = <span class="literal">undefined</span>;   <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<h3 id="类型保护和断言"><a href="#类型保护和断言" class="headerlink" title="类型保护和断言"></a>类型保护和断言</h3><blockquote>
<p>由于可以为 null 的类型是通过联合类型实现，那么需要使用类型保护来去除 null。如果编译器不能够去除 null&#x2F;undefined，可以使用类型断言手动去除，语法 <code>identifier!</code> 表示从 identifier 的类型里去除了 null、undefined。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用类型保护来去除 null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (sn == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> sn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简洁方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">sn: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sn || <span class="string">&quot;default&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型断言手动去除 null/undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fixed</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 去掉 ! 就会报错</span></span><br><span class="line">    <span class="keyword">return</span> name!.<span class="title function_">charAt</span>(<span class="number">0</span>) + <span class="string">&#x27;.  the &#x27;</span> + epithet;</span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">postfix</span>(<span class="string">&quot;great&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><blockquote>
<p>分为字符串、数字字面量类型，通过指定一个固定值实现类型约束或区分函数重载</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>| <span class="string">&quot;女&quot;</span>;   <span class="comment">// 只能为是男或女</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="string">&quot;A&quot;</span>;               <span class="comment">// 只能为 A</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: &#123;              <span class="comment">// 必须有 name、age</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNum</span>(<span class="params"></span>): <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分函数重载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">tagName: <span class="string">&quot;img&quot;</span></span>): <span class="title class_">HTMLImageElement</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">tagName: <span class="string">&quot;input&quot;</span></span>): <span class="title class_">HTMLInputElement</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">tagName: <span class="built_in">string</span></span>): <span class="title class_">Element</span> &#123; &#125;</span><br></pre></td></tr></table></figure>


<h2 id="可辨识联合"><a href="#可辨识联合" class="headerlink" title="可辨识联合"></a>可辨识联合</h2><blockquote>
<p>合并单例类型、联合类型、类型保护和类型别名来创建一个叫做 可辨识联合 的高级模式，它也称为 标签联合、代数数据类型。它在函数式编程很有用处。一些语言会自动地为你辨识联合，TS 则基于已有的 JS 模式。</p>
</blockquote>
<ul>
<li>实现要素<ul>
<li>具有普通的单例类型属性：可辨识的特征。</li>
<li>一个类型别名包含了那些类型的联合：联合。</li>
<li>此属性上的类型保护。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将要联合的接口：都有 kind 属性但有不同的字符串字面量类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">  <span class="attr">size</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用可辨识联合</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Rectangle</span> | <span class="title class_">Circle</span> | triangle;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">s: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">height</span> * s.<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * s.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 报错：switch 没有包涵所有情况，没有处理 case triangle</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>完整性检查：没有涵盖所有可辨识联合的变化时让编译器通知<ul>
<li>法一：启用 <code>--strictNullChecks</code> 并指定一个返回值类型。</li>
<li>法二：使用 never 类型，用来除去所有可能情况后剩下的类型。<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错：TS 认为函数返回值为 number | undefined</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Rectangle</span> | <span class="title class_">Circle</span> | triangle;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">s: Shape</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">height</span> * s.<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * s.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assertNever</span>(<span class="params">x: <span class="built_in">never</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unexpected object: &quot;</span> + x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">s: Shape</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.<span class="property">kind</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>: <span class="keyword">return</span> s.<span class="property">size</span> * s.<span class="property">size</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>: <span class="keyword">return</span> s.<span class="property">height</span> * s.<span class="property">width</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>: <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * s.<span class="property">radius</span> ** <span class="number">2</span>;</span><br><span class="line">    <span class="attr">default</span>: <span class="keyword">return</span> <span class="title function_">assertNever</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="多态的-this-类型"><a href="#多态的-this-类型" class="headerlink" title="多态的 this 类型"></a>多态的 this 类型</h2><blockquote>
<p>表示某个包含类或接口的子类型，称为 <code>F-bounded 多态性</code>。它能很容易的表现连贯接口间的继承。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasicCalculator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> value: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">currentValue</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">add</span>(<span class="attr">operand</span>: <span class="built_in">number</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> += operand;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">multiply</span>(<span class="attr">operand</span>: <span class="built_in">number</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> *= operand;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// other operations go here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> <span class="title class_">BasicCalculator</span>(<span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">multiply</span>(<span class="number">5</span>)</span><br><span class="line">            .<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">            .<span class="title function_">currentValue</span>();</span><br></pre></td></tr></table></figure>



<h1 id="三、命名空间"><a href="#三、命名空间" class="headerlink" title="三、命名空间"></a>三、命名空间</h1><h2 id="单文件"><a href="#单文件" class="headerlink" title="单文件"></a>单文件</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IPage</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="attr">data</span>: <span class="built_in">object</span>): <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">IndexPage</span> <span class="keyword">implements</span> <span class="title class_">IPage</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="attr">data</span>: <span class="built_in">object</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;Index page content&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用别名：import a = x.y</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Polygons</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> polygons = <span class="title class_">Shapes</span>.<span class="property">Polygons</span>;</span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.<span class="title class_">Square</span>();</span><br></pre></td></tr></table></figure>


<h2 id="文件拆分"><a href="#文件拆分" class="headerlink" title="文件拆分"></a>文件拆分</h2><blockquote>
<p>三斜线指令引用当前目录文件：<code>/// &lt;reference path=&quot;./IPage.ts&quot; /&gt;</code>。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPage.ts</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IPage</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="attr">data</span>: <span class="built_in">object</span>): <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IndexPage.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;./IPage.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Page</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">IndexPage</span> <span class="keyword">implements</span> <span class="title class_">IPage</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="attr">data</span>: <span class="built_in">object</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;Index page content&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;./IndexPage.ts&quot; /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;./DetailPage.ts&quot; /&gt;</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Page</span>.<span class="title class_">IndexPage</span>().<span class="title function_">render</span>(&#123;<span class="attr">value</span>: <span class="string">&#x27;index&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="命名空间和模块"><a href="#命名空间和模块" class="headerlink" title="命名空间和模块"></a>命名空间和模块</h2><ul>
<li><strong>命名空间</strong><ul>
<li>内部模块，通过 namespace 声明的全局对象，主要用于组织代码并避免命名冲突。</li>
<li>命名空间通过三斜线指令引入，相当于源码嵌入，会引入额外变量到当前作用域。</li>
<li>本质是 IIFE，不存在文件即模块的加载机制约束，算是旧时代的产物，不建议使用。</li>
</ul>
</li>
<li><strong>模块</strong><ul>
<li>外部模块的简称，一个文件即一个模块，主要用于代码复用并解决加载依赖关系。</li>
<li>模块通过 import&#x2F;require 引入，调用时通过变量引用而不会主动影响当前作用域。</li>
<li>TS 遵从文件即模块的 ES Module 规范，通过编译可以输出 CommonJS、AMD、UMD 等模块形式，推荐使用。</li>
</ul>
</li>
</ul>
<h1 id="四、声明合并"><a href="#四、声明合并" class="headerlink" title="四、声明合并"></a>四、声明合并</h1><blockquote>
<p>编译器将多个地方具有相同名称的声明合并为一个，合并后的声明同时拥有原先所有声明的特性。TS 声明会创建出声明实体中的一至三类，比如一个 namespace 会创建出 namespace、value，声明实体可以在一定条件下进行合并。</p>
</blockquote>
<h2 id="声明分类"><a href="#声明分类" class="headerlink" title="声明分类"></a>声明分类</h2><ul>
<li><strong>声明实体</strong><ul>
<li><strong>命名空间 namespace</strong>：指声明的分类而非实体。建立应用时需要通过 <code>import</code>，如果使用 <code>const/let/var</code> 则会使新的实体不再具有命名空间的属性。</li>
<li><strong>类型 type</strong>：可以描述一个值的形状，它只能存在于命名空间。它可以是写在变量声明时冒号右边的部分，也可以是类型别名的值 (<code>type Foo = string;</code>)。</li>
<li><strong>值 value</strong>：编译为 js 后唯一会被保留的一种，命名空间与类型都会被清除。</li>
</ul>
</li>
<li><strong>声明及其实体</strong><ul>
<li>**命名空间 (namespace)**：命名空间、值。一个命名空间实体如果不包含值的声明则只属于命名空间一类。</li>
<li>**类 (class)**：类型、值</li>
<li>**枚举 (enum)**：类型、值</li>
<li>**接口 (interface)**：类型</li>
<li>**类别名 (type)**：类型</li>
<li>**函数 (function)**：值</li>
<li>**变量 (let、const、var、parameters)**：值</li>
</ul>
</li>
</ul>
<h2 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote>
<p>将双方的成员放到一个同名的接口。</p>
</blockquote>
<ul>
<li>对于非函数成员，必须类型一致，否则报错。</li>
<li>对于函数成员，会发生重载，重载的顺序按照以下规则。<ul>
<li>接口内部按照先后顺序。接口之间，声明在后的接口函数成员排序更靠前。</li>
<li>如果参数类型为单一的字符串字面量，排名最靠前。后面的接口的排在第一位，前面接口的排在第二位。</li>
</ul>
</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口合并</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="attr">bar</span>: <span class="built_in">string</span>[]): <span class="built_in">string</span>[],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">box</span>: <span class="title class_">Box</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="string">&quot;15&quot;</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params">bar: <span class="built_in">any</span></span>) &#123; <span class="keyword">return</span> bar &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释为合并后的函数排序</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StateMerge</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="title function_">foo</span>(<span class="attr">bar</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;   <span class="comment">// 4</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="attr">bar</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;   <span class="comment">// 5</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="attr">bar</span>: <span class="string">&quot;b&quot;</span>): <span class="built_in">number</span>;      <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StateMerge</span> &#123;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="attr">bar</span>: <span class="built_in">string</span>[]): <span class="built_in">string</span>[],  <span class="comment">// 3</span></span><br><span class="line">  <span class="title function_">foo</span>(<span class="attr">bar</span>: <span class="string">&quot;a&quot;</span>): <span class="built_in">number</span>,         <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul>
<li>同名的 namespace 也会合并导出的成员。</li>
<li>注意合并后的命名空间成员无法访问非导出成员。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isFlag</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 合并后会报错：flag 并没有导出</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="命名空间与类、函数、枚举"><a href="#命名空间与类、函数、枚举" class="headerlink" title="命名空间与类、函数、枚举"></a>命名空间与类、函数、枚举</h3><ul>
<li>可以用来扩展 class、function、Enum。</li>
<li>注意合并时需要将命名空间放在它们的后面，否则会报错。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命名空间和类：相当于为类 C 添加了属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> C&#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> state = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(C.<span class="property">state</span>);   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间和函数：相当于为函数 Lib 添加了属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Lib</span>(<span class="params"></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Lib</span>.<span class="property">version</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Lib</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> version = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Lib</span>());   <span class="comment">// 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间和枚举类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green = <span class="number">2</span>,</span><br><span class="line">  blue = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mixColor</span>(<span class="params">colorName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (colorName === <span class="string">&#x27;yellow&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">green</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (colorName === <span class="string">&#x27;white&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">green</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;magenta&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">red</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">&quot;cyan&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Color</span>.<span class="property">green</span> + <span class="title class_">Color</span>.<span class="property">blue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="非法合并"><a href="#非法合并" class="headerlink" title="非法合并"></a>非法合并</h2><blockquote>
<p>TS 并非允许所有的合并，目前不支持 class 与其它 class、变量合并。模仿类的合并可以参考 TypeScript Mixins (混入)。</p>
</blockquote>
<h1 id="五、装饰器"><a href="#五、装饰器" class="headerlink" title="五、装饰器"></a>五、装饰器</h1>  <div style="text-indent: 2em">一种特殊类型的声明，能够被附加到类声明、方法、访问符、属性或参数而用于监视、修改或替换其定义。它可以看作是在原有代码外层包装了一层处理逻辑来增强代码功能，比如对参数的类型判断、对返回值的排序过滤、对函数添加节流、防抖。目前它还属于实验性语法，你必须在命令行或 `tsconfig.json` 启用编译选项：</div>

  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令行</span></span><br><span class="line">tsc --target <span class="title class_">ES5</span> --experimentalDecorators</span><br><span class="line"></span><br><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>,   <span class="comment">// 方法修饰器时需配置为 es6</span></span><br><span class="line">    <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>使用形式为 <code>@expression</code>，expression 必须是一个函数。它的本质是代码编译时执行的函数，注意不是 TS 编译而是 JS 执行的编译阶段。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.ts：执行命令 tsc 编译、node helloword.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">helloWord</span>(<span class="params">target: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Word!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@helloWord</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWordClass</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个装饰器可以同时应用到一个声明时，可以在同行或多行</span></span><br><span class="line"><span class="meta">@f</span> <span class="meta">@g</span> x</span><br><span class="line"></span><br><span class="line"><span class="meta">@f</span></span><br><span class="line"><span class="meta">@g</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure>


<h2 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h2><blockquote>
<p>注意没有函数装饰器，不能使用在声明文件和任何外部上下文。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、类装饰器</span></span><br><span class="line"><span class="keyword">function</span> addPropsAndMethods&lt;T <span class="keyword">extends</span> &#123; <span class="title function_">new</span>(...<span class="attr">args</span>: <span class="built_in">any</span>[]): &#123;&#125; &#125;&gt;(<span class="attr">target</span>: T)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> target &#123;</span><br><span class="line">    word = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    printWord = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.word&#125;</span>!`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @addAge(18)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addAge</span>(<span class="params">args: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = args;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、属性装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writableProperty</span>(<span class="params">flag: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="comment">// target：对于静态成员是类的构造函数，对于实例成员是类的原型对象。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propName: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, propName, &#123;</span><br><span class="line">      <span class="attr">writable</span>: flag</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、方法装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">editableMethod</span>(<span class="params">flag: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">string</span> | <span class="built_in">symbol</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    descriptor.<span class="property">writable</span> = flag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、参数装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printArgs</span>(<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">string</span> | <span class="built_in">symbol</span>, paramIndex: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// paramIndex：参数在函数参数列表中的索引</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target, methodName, paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、存取器装饰器：TS 不允许为单个成员装饰 get、set 访问器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">configurable</span>(<span class="params">value: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propName: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    descriptor.<span class="property">configurable</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@addPropsAndMethods</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DummyClass</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的属性默认可以被写入</span></span><br><span class="line">    <span class="meta">@writableProperty</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">bornY</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">_domain</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>, bornY:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error:&#x27;</span>,e);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bornY</span> = bornY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printData</span>(<span class="params">prefix: <span class="built_in">string</span>, <span class="meta">@printArgs</span> printAll:<span class="built_in">boolean</span></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (printAll)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">bornY</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许修改该方法</span></span><br><span class="line">    <span class="meta">@editableMethod</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="title function_">dummyMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存取器装饰器</span></span><br><span class="line">    <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">data</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;@&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">bornY</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">domain</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_domain</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">domain</span>():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_domain</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="title class_">DummyClass</span>(<span class="string">&quot;Jack Ma&quot;</span>, <span class="number">1981</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类的装饰器：为类添加方法、属性和默认属性值&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&lt;<span class="built_in">any</span>&gt;d).<span class="title function_">helloWorld</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性的装饰器)&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;方法的装饰器：让方法不可被修改，下面的修改无效&#x27;</span>);</span><br><span class="line">d.<span class="title function_">dummyMethod</span>();</span><br><span class="line">d.<span class="property">dummyMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi there!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d.<span class="title function_">dummyMethod</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;存取器装饰器&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">d.<span class="property">domain</span> = <span class="string">&quot;coolwp.com&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">domain</span>);</span><br></pre></td></tr></table></figure>

<h2 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h2><ul>
<li>类装饰器总是最后执行。</li>
<li>方法和方法参数中参数装饰器先执行。</li>
<li>有多个参数装饰器时从最后一个依次向前执行。</li>
<li>方法和属性装饰器，谁在前面谁先执行。因为参数是方法一部分，所以参数会一直紧挨着方法执行。</li>
</ul>
<h1 id="六、JSX"><a href="#六、JSX" class="headerlink" title="六、JSX"></a>六、JSX</h1><blockquote>
<p>全称 <code>JavaScript XML</code>，React 发明的一种类似 XML 的 JS 扩展语法，主要用于创建虚拟 DOM 并可以编译为 JS 对象，编译的基本规则为：<code>&lt; 开头的代码以 HTML 语法解析、&#123; 开头的代码以 JS 语法解析</code>。TS 支持嵌入、类型检查和直接编译 JSX 为有效的 JS。</p>
</blockquote>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><ul>
<li><strong>使用前提</strong>：使用 tsx 文件、启用 jsx 选项。</li>
<li><strong>类型断言</strong>：tsx 文件中的类型断言必须使用 as 操作符，因为使用尖括号表示类型断言时结合 JSX 语法后将带来解析上的困难。</li>
<li><strong>编译模式</strong>：仅影响编译阶段，类型检查不受影响。可以通过在命令行使用 <code>--jsx</code> 标记或者在 <code>tscofnig.json</code> 文件中指定选项。<ul>
<li><strong>preserve</strong>：将保持 JSX 作为部分输出以用于 Babel 等变换时编译。输出 .jsx 文件。</li>
<li><strong>react</strong>：调用 <code>React.createElement</code> 而不需要经过 JSX 转换，输出 .js 文件。 </li>
<li><strong>react-native</strong>：相当于保留，因为它保留了所有 JSX。输出 .js 文件。</li>
</ul>
</li>
<li><strong>结果类型</strong>：默认是 any 类型，可以通过指定 <code>JSX.Element</code> 接口实现自定义类型，但是不能从接口里检索元素、属性或子元素的类型信息。</li>
</ul>
<h2 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h2><blockquote>
<p>假设有一个 JSX 表达式 <code>&lt;expr /&gt;</code>，expr 可能是固有元素(环境自带的东西，比如 DOM 环境的 div、span)，也可能是基于值的元素(自定义组件)。TS 使用与 React 相同的规范来区别它们：<code>固有元素总是以一个小写字母开头，基于值的元素总是以一个大写字母开头</code>。</p>
</blockquote>
<h3 id="固有元素"><a href="#固有元素" class="headerlink" title="固有元素"></a>固有元素</h3><blockquote>
<p>使用特殊接口 JSX.IntrinsicElements 来查找。如果这个接口没有指定，则不对固有元素进行类型检查而全部通过。如果接口存在，则固有元素的名字需要在接口的属性里查找。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有 JSX.IntrinsicElements 里指定的就会报错。</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX　&#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="built_in">any</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;foo /&gt;    <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bar</span> /&gt;</span></span>    <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定一个用来捕获所有字符串索引</span></span><br><span class="line">declate <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    [<span class="attr">elemName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="基于值的元素"><a href="#基于值的元素" class="headerlink" title="基于值的元素"></a>基于值的元素</h3><blockquote>
<p>在它所在的作用域里按照标识符查找。它有两种定义方式：<strong>无状态函数组件 SFC、类组件</strong>，由于它们在 JSX 表达式里无法区分，TS 解析时会先将表达式作为无状态函数组件，解析成功则完成操作，否则以类组件的形式进行解析，依旧失败则抛出错误。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyCom</span> <span class="keyword">from</span> <span class="string">&#x27;./myCom&#x27;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyCom</span> /&gt;</span></span>         <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">OtherCom</span> /&gt;</span></span>      <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无状态函数组件：返回值可以赋值给 JSX.Element</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FooProp</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">X</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">Y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">AnotherCom</span>(<span class="params">prop: &#123;name: <span class="built_in">string</span>&#125;</span>);  <span class="comment">// declare 声明文件或模块</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComFoo</span>(<span class="params">prop: FooProp</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AnotherCom</span> <span class="attr">name</span>=<span class="string">&#123;prop.name&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">prop: &#123;value: <span class="built_in">string</span>&#125;, context: &#123;color: <span class="built_in">string</span>&#125;</span>) =&gt; &lt;button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件：元素的实例类型必须赋值给 JSX.ElementClass，否则抛出错误。</span></span><br><span class="line"><span class="comment">// 元素类的类型：MyComponent、MyFactoryFn</span></span><br><span class="line"><span class="comment">// 元素实例的类型： &#123; render: () =&gt; void &#125;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ElementClass</span> &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="built_in">any</span>;  <span class="comment">// 如果没有 render 方法则会报错。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyFactoryFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">render</span>: <span class="function">() =&gt;</span> &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">MyComponent</span> /&gt;;    <span class="comment">// 正确</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyFactoryFn</span> /&gt;</span></span>;    <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>


<h3 id="属性类型检查"><a href="#属性类型检查" class="headerlink" title="属性类型检查"></a>属性类型检查</h3><ol>
<li>确定元素属性类型<br>* 固有元素：JSX.IntrinsicElements 接口中的属性类型。<br>* 基于值的元素：元素实例类型上的 JSX.ElementAttributesProperty 指定属性的类型，没有指定则使用类元素构造函数或 SFC 调用的第一个参数的类型。</li>
<li>JSX 里进行属性检查<br>* 支持可选属性、必选属性。<br>* 如果一个属性名不是个合法的 JS 标识符(比如 data-* 属性)，并且它没有出现在元素属性类型里时不会报错。<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 固有元素 foo：&#123;bar?: boolean&#125;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IntrinsicElements</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">      <span class="attr">required</span>: <span class="built_in">string</span>; </span><br><span class="line">      bar?: <span class="built_in">boolean</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;foo required=<span class="string">&quot;a&quot;</span> /&gt;;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">required</span>=<span class="string">&quot;a&quot;</span> <span class="attr">bar</span> /&gt;</span></span>;</span><br><span class="line"><span class="comment">// 正确：some-unknown 不是合法的标识符</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">required</span>=<span class="string">&quot;a&quot;</span> <span class="attr">some-unknown</span> /&gt;</span></span>;</span><br><span class="line"><span class="comment">// 报错：缺少必须属性、unknown 不存在</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> /&gt;</span></span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">required</span>=<span class="string">&quot;a&quot;</span> <span class="attr">unknown</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于值的元素 MyCom：&#123;foo?: string&#125;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> JSX &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ElementAttributesProperty</span> &#123;</span><br><span class="line">    props;     <span class="comment">// 指定属性名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCom</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;  <span class="comment">// 在元素实例类型上指定属性</span></span><br><span class="line">    foo?: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">MyCom</span> foo=<span class="string">&quot;bar&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="子孙类型检查"><a href="#子孙类型检查" class="headerlink" title="子孙类型检查"></a>子孙类型检查</h3>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PropsType</span> &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="variable constant_">JSX</span>.<span class="property">Element</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">PropsType</span>, &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&lt;<span class="title class_">Component</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Component</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：JSX.Element 不是数组类型</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="React-集成"><a href="#React-集成" class="headerlink" title="React 集成"></a>React 集成</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 React 类型定义</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;react.d.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>, &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.foo&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">&lt;<span class="title class_">MyCom</span> foo=<span class="string">&quot;bar&quot;</span> /&gt;; </span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">foo</span>=<span class="string">&#123;0&#125;</span> /&gt;</span></span>; </span><br></pre></td></tr></table></figure>


<h2 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h2><blockquote>
<p><code>jsx: react</code> 编译选项用的工厂函数是可以配置的。可以使用 <code>jsxFactory</code> 命令行选项，或者内联的 <code>@jsx</code> 注释指令在每个文件上设置。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 jsxFactory：调用 createElement(&quot;div&quot;) 而非 React.createElement(&quot;div&quot;)</span></span><br><span class="line"><span class="keyword">import</span> preact = <span class="built_in">require</span>(<span class="string">&quot;preact&quot;</span>);</span><br><span class="line"><span class="comment">/* @jsx preact.h */</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="keyword">const</span> preact = <span class="built_in">require</span>(<span class="string">&#x27;preact&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> x =  preact.<span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS 扩展</category>
      </categories>
      <tags>
        <tag>JS 扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 简介和数据类型</title>
    <url>/2019/11/03/11-1-typescript%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="一、入门简介"><a href="#一、入门简介" class="headerlink" title="一、入门简介"></a>一、入门简介</h1><div style="text-indent: 2em">TypeScript 是微软推出的一种静态强类型语言，设计初衷就是为了**帮助 JS 开发人员能够像 C#、Java 等高级语言那样编写代码**，比如使用高级语言的强类型、面向对象、语法检查、代码编译等特性。它是 JS 的超集(基于 JS 并拓展了其语法)，填充了 JS 作为动态弱类型语言的缺点，能够对代码中的错误及时反馈并可以将 TS 代码转为原生 JS，非常适用于团队合作的大型项目和封装库文件 (比较严谨)。</div>

<h2 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h2><ul>
<li><strong>动态类型语言</strong>：在运行期间检查数据类型的语言。永远不需要指定变量的数据类型，该语言会在变量被首次赋值时在内部记录数据类型。</li>
<li><strong>静态类型语言</strong>：在编译期间检查数据类型的语言。变量在使用前要声明数据类型，好处是把类型检查放在编译期，可以提前检查可能出现的类型错误。</li>
<li><strong>强类型语言</strong>：强制数据类型定义的语言。变量只要不经过强制转换就不会改变数据类型，不允许隐式的类型转换。</li>
<li><strong>弱类型语言</strong>：数据类型可以被忽略的语言。变量声明后可以改变数据类型，而且允许编译器进行隐式的类型转换。</li>
</ul>
<h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h2><ol>
<li><strong>JavaScript 发展迅速</strong></li>
<li><strong>我们需要强类型的 JavaScript</strong><br>* 强类型特性可以防止编写 JS 代码时因为数据类型的转换造成的意外错误。<br>* 比如函数的参数必须是数字类型，使用原生 JS 时会正常执行而并不会提示错误，这样会增加项目开发的潜在风险。</li>
<li><strong>按需输出 JavaScript 版本</strong><br>* JS 版本现在几乎每年都有更新，兼容性的脚本对于开发者是一个比较大的挑战。<br>* TypeScript 解决了版本问题，你可以按需输出 JS 脚本，比如 ES3、ES5 、ES6 。</li>
<li><strong>代码标准化利于团队开发</strong><br>* 由于 JS 本身语言的特点和其版本迭代太快的原因，团队成员使用 JS 时很容易随意发挥而不受规范约束。<br>* 团队当然可以针对不同版本的 JS 做出使用规范并引入 eslint 等质量检测插件，整理这些内容并推广使用比较浪费时间，还不如基于 TypeScript 并整理一套标准来应对 JS 版本不断的更新迭代。</li>
<li><strong>主流框架及最新特性的支持</strong><br>* Angular 等主流框架都已经集成 TypeScript 来解决版本兼容性和弱语言的特点。<br>* TypeScript 紧跟 JS 的发展，比如 ES7、ES8、ES9 的新特性都支持，比浏览器支持的速度更快。这就意味着你能用最新的语言特性，编写质量更高的 JS。</li>
</ol>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>JS 缺点<ul>
<li>开发工具不够智能。</li>
<li>弱类型，缺乏必要的类型检查。</li>
<li>代码不可分割，可维护性较差。</li>
<li>编程不够语义化，代码可阅读性差。</li>
</ul>
</li>
<li>TS 优势<ul>
<li>完全兼容 JS，并且集成简单。</li>
<li>强类型：编译期有静态类型检查。 </li>
<li>IDE 智能提示和重构：TS 可以轻松更改某个全局变量名。</li>
<li>语义化编程和面向对象：类型声明本身是最好查阅的文档，代码可读性高。</li>
</ul>
</li>
<li>TS 趋势<ul>
<li>替代 Javascript</li>
<li>更多的 IDE 支持</li>
<li>不断丰富的 Javascript 库支持</li>
</ul>
</li>
</ul>
<h2 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h2><ol>
<li><strong>安装工具</strong>：IDE 推荐使用 <code>VSCode + ESLint</code>、TS <code>npm install -g typescript</code></li>
<li><strong>编译方式</strong>：手动编译 <code>tsc test.ts</code>，自动编译则可以通过 vscode 配置直接编译或者 webpack&#x2F;gulp 配置打包时编译。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、vscode</span></span><br><span class="line">构建任务：ctrl + shift + b</span><br><span class="line">运行任务：build (编译一次)、watch (变动就编译)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、webpack.config.js：需要先安装 ts-loader</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;./dist/bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>配置编译选项</strong><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json：项目根目录执行 `tsc --init`</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 编译后生成的 JS 标准（es3、es5、es2015、ES2016)</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">    <span class="comment">// 代码模块加载器 (commonjs、AMD、es2015)</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="comment">// 编译 js 时删除注释</span></span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// false：编译器无法判断变量使用判断类型时使用 any 类型</span></span><br><span class="line">    <span class="comment">// true：进行强类型检查，编译器无法判断出变量类型时会报错</span></span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 生成的 js、js.map 的目录</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="comment">// 允许在 ts 文件中打断点</span></span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 允许编译 js 文件</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 需要排除编译的目录</span></span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>],</span><br><span class="line">  <span class="comment">// 需要编译的 ts 文件：* 表示文件匹配、** 表示忽略文件的深度问题</span></span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/*.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./src/**/*.ts&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>配置调试环境</strong><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vscode/launch.json：调试时会将 ts 编译成 js 执行、sourcemap 定位</span></span><br><span class="line"><span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/src/index.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;tsc: build - tsconfig.json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sourceMaps&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;outFiles&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;$&#123;workspaceFolder&#125;/**/*.js&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="二、基础数据"><a href="#二、基础数据" class="headerlink" title="二、基础数据"></a>二、基础数据</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><blockquote>
<p>类型只是一组值。JS 的所有类型都是动态的，你可以在运行时使用它们。TS 为 JS 额外带来了静态类型，可以在编译期间对值所具有的结构进行类型检查而无需运行代码。</p>
</blockquote>
<ul>
<li>JS 类型：Boolean、Number、String、Object、Symbol、null、undefined。</li>
<li>新增类型：Tuple (元组)、Enum (枚举)、Any (任意)、Void (空值)、Never (永不存在的值)、unknown (类型不确定的值)。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">num = <span class="string">&#x27;123&#x27;</span>;     <span class="comment">// 报错</span></span><br><span class="line">str = <span class="number">123</span>;       <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array：各元素的类型必须相同</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>:<span class="built_in">boolean</span>[] = [<span class="literal">true</span>, <span class="literal">false</span>];  <span class="comment">// 通过元素类型后面添加 []</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>];  <span class="comment">// 使用数组泛型：Array&lt;类型&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Tuple：一个有不同数据类型的数组，参数和类型一一对应 (不能缺少)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:[<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>];  <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>];  <span class="comment">// Error</span></span><br><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span>;     <span class="comment">// OK，访问越界元素时使用联合类型(str、num)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Enum：通过语义化的单词来代表某一状态，相比数值更加直观和易读</span></span><br><span class="line"><span class="comment">// 枚举值为 数字或字符串，默认从 0 开始递增，赋值后后面的值递增</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;success = <span class="number">1</span>, error = <span class="number">2</span>, cancel, wait&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>:<span class="title class_">Status</span> = <span class="title class_">Status</span>.<span class="property">success</span>;  <span class="comment">// 枚举值 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>[<span class="number">2</span>]);            <span class="comment">// 根据枚举值获取变量名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Any：相当于关闭类型检查，尽量不用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>:<span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>:<span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;free&quot;</span>];</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined：void 的一个子集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Void：只能用于返回空值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">warnUser</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">getValue</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;  <span class="comment">// 不关注返回值类型，number、string 等都可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null、undefined：默认是所有类型的子类型，可以赋值给任意类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">number</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Never：用于永远不会结束的函数，是所有类型的子类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;never&quot;</span>);     <span class="comment">// 无法运行到的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>): <span class="built_in">never</span> &#123; </span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span>; </span><br><span class="line">  <span class="keyword">while</span>(count)&#123; count++; &#125;  <span class="comment">// 一个肯定会报错或死循环的函数</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Object：表示非原始类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">object</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;Wang&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:&#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span> &#125; = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Wang&quot;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown：可以任意值赋值，但不可调用</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">foo.<span class="title function_">substr</span>(<span class="number">1</span>);     <span class="comment">// Error：静态检查不通过报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">input: <span class="built_in">unknown</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(input)) &#123;</span><br><span class="line">      <span class="keyword">return</span> input.<span class="property">length</span>;  <span class="comment">// Pass：input 已识别为 array</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="property">length</span>; <span class="comment">// Error: input 还是 unknown，入参 any 则放弃检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ! 非空判断：可用在变量名或函数名之后。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params">callback?: () =&gt; <span class="keyword">void</span></span>) &#123;</span><br><span class="line">    callback!();  <span class="comment">// 参数是可选入参，加 ! 之后则 TS 编译不报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>): <span class="variable constant_">JSX</span>.<span class="property">Elememt</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> divRef = useRef&lt;<span class="title class_">HTMLDivElement</span>&gt;();</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 组件 Mount 后才触发 useEffect，current 一定有值</span></span><br><span class="line">      divRef.<span class="property">current</span>!.<span class="title function_">scrollIntoView</span>();  </span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;divRef&#125;</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ? 可选：undefined 在非严格模式下会被重新赋值，void 0 会返回 undefined</span></span><br><span class="line">obj?.<span class="property">prop</span>  obj?.[index]  func?.(args)</span><br><span class="line">a?.<span class="property">b</span> 编译为 a === <span class="literal">null</span> || a === <span class="keyword">void</span> <span class="number">0</span> ? <span class="keyword">void</span> <span class="number">0</span> : a.<span class="property">b</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?? 空值合并：只对 null/undefined 生效，|| 对 false/&#x27;&#x27;/NaN/0 等空值也生效</span></span><br><span class="line"><span class="keyword">let</span> b = a ?? <span class="number">10</span>    编译为</span><br><span class="line"><span class="keyword">let</span> b = a !== <span class="literal">null</span> &amp;&amp; a !== <span class="keyword">void</span> <span class="number">0</span> ? a : <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _ 数字分隔符：为了便于数字的阅读，编译后的代码是没有下划线的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:number = <span class="number">1_2_345.6_78_9</span></span><br></pre></td></tr></table></figure>

<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// keyof：获取类型的所有键值，可用于限制访问对象的 key，因为 any 不可做索引</span></span><br><span class="line">type <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line">type <span class="title class_">PersonKey</span> = keyof <span class="title class_">Person</span>;  <span class="comment">// &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span> (<span class="attr">p</span>: <span class="title class_">Person</span>, <span class="attr">k</span>: keyof <span class="title class_">Person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p[k];  <span class="comment">// 如果 k 不如此定义，则无法以 p[k] 的代码格式通过编译</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof：获取一个对象/实例的类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">me</span>: <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">you</span>: <span class="keyword">typeof</span> me = &#123; <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">age</span>: <span class="number">69</span> &#125;</span><br><span class="line">type <span class="title class_">PersonKey</span> = keyof <span class="keyword">typeof</span> me;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in：只能用在类型的定义中，可以对枚举类型进行遍历</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">TypeToNumber</span>&lt;<span class="title class_">Person</span>&gt; = &#123; <span class="attr">name</span>: <span class="number">10</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">type <span class="title class_">TypeToNumber</span>&lt;T&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> keyof T]: number   <span class="comment">// 将键值转化为 number 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h1><blockquote>
<p>接口是一个对外的规范和约定，作用是为属性、函数等类型命名和(第三方)代码定义契约。</p>
</blockquote>
<h2 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h2><blockquote>
<p>描述实体：对对象属性进行约束。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 确定属性：变量的个数和类型必须和接口的完全匹配</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选属性：？表示可选</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意属性：确定属性和可选属性都必须是它的子属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 报错，可将 string 改为 any</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line">p1.<span class="property">x</span> = <span class="number">5</span>;     <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>


<h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><blockquote>
<p>对函数的传入参数和返回值进行约束，注意函数的参数名称不影响函数的匹配。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加密：参数和返回值都为字符串</span></span><br><span class="line"><span class="keyword">interface</span> encrypt&#123;</span><br><span class="line">  (<span class="attr">key</span>:<span class="built_in">string</span>, <span class="attr">value</span>:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="attr">md5</span>:encrypt = <span class="keyword">function</span>(<span class="params">key:<span class="built_in">string</span>, value:<span class="built_in">string</span></span>):<span class="built_in">string</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">sha1</span>:encrypt = <span class="keyword">function</span>(<span class="params">key:<span class="built_in">string</span>, value:<span class="built_in">string</span></span>):<span class="built_in">string</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + <span class="string">&#x27;---&#x27;</span> + value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">md5</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sha1</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;wanwu&#x27;</span>));</span><br></pre></td></tr></table></figure>


<h2 id="可索引类型"><a href="#可索引类型" class="headerlink" title="可索引类型"></a>可索引类型</h2><blockquote>
<p>描述那些能够通过索引得到的类型：对数组和对象的约束。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 约束数组</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserArr</span>&#123;</span><br><span class="line">  [<span class="attr">index</span>:<span class="built_in">number</span>]:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>:<span class="title class_">UserArr</span> = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>];   <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>:<span class="title class_">UserArr</span> = [<span class="number">2</span>, <span class="string">&#x27;bb&#x27;</span>];    <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读数组</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyArr</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">ReadonlyArr</span> = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">&quot;Mallory&quot;</span>;     <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束对象</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserObj</span>&#123;</span><br><span class="line">  [<span class="attr">index</span>:<span class="built_in">string</span>]:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>:<span class="title class_">UserObj</span> = &#123;<span class="attr">name</span>: <span class="string">&#x27;li&#x27;</span>&#125;;  <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>:<span class="title class_">UserObj</span> = &#123;<span class="attr">age</span>: <span class="number">20</span>&#125;;     <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>


<h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><blockquote>
<p>行为的抽象：一个类只能继承自另一个类，有时不同类之间存在一些共有的特性，这时就可以把特性提取成接口用来约束类必须存在的属性和方法。接口可以声明一个类的结构(包含属性和方法)，但它只是一个规范和约定，没有访问修饰符和具体方法，也不能被实例化。类是也是声明一个类的结构，但它包含属性和方法，有访问修饰符和具体方法，可以实例化。</p>
</blockquote>
<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><blockquote>
<p>接口约束类的属性或方法，类具体实现接口规范。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TS 只会检查类的公共属性和方法，不会检查私有部分</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animall</span> &#123;</span><br><span class="line">  <span class="attr">curTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span>     <span class="comment">// 注释后会报错</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">curTime</span> = d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS 只会检查类的实例部分，而不会检查静态部分(构造器)</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="comment">// 接口匹配不到任何类型，会报错</span></span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><blockquote>
<p>实现接口的分割和重用。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动物接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">eat</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫科接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Felidae</span> &#123;</span><br><span class="line">  <span class="attr">claw</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">run</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让猫类实现 Animal 和 Felidae 两个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>, <span class="title class_">Felidae</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">claw</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;I love eat Food!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">run</span>: () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;My speed is very fast!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">dog</span>: <span class="title class_">Dog</span> = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure>

<h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><blockquote>
<p>一个对象可以为函数和变量使用。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Counter 接口既服务于 getCounter 方法，也服务于 counter 对象</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">interval</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">reset</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;<span class="title class_">Counter</span>&gt;<span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) &#123; &#125;;</span><br><span class="line">  counter.<span class="property">interval</span> = <span class="number">123</span>;</span><br><span class="line">  counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>();</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>);</span><br><span class="line">c.<span class="title function_">reset</span>();</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><blockquote>
<p>接口可以继承类的成员但是不会去实现。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有子类才能去实现私有属性 state </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他类如果要实现 SelectableControl 接口，必须是 Control 的子类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：Image 类型缺少 state 属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Location</span> &#123; &#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、类"><a href="#四、类" class="headerlink" title="四、类"></a>四、类</h1><ul>
<li><strong>类 Class</strong>：由静态部分和实例部分组成，定义了一件事物的抽象特点，描述了它的属性和方法，比如猫类。</li>
<li><strong>对象 Object</strong>：继承了类所有属性和方法的实例对象，它是类通过 new 实例化之后生成的具体事物，比如加菲猫。</li>
<li><strong>封装 Encapsulation</strong>：将对数据的操作细节隐藏起来而只暴露对外的接口，外部只通过对外接口就能访问该对象，这样保证了对象内部的数据不会被外部任意更改。</li>
<li><strong>继承 Inheritance</strong>：子类(派生类) 通过 extends 继承 父类(基类)，子类可以拥有除了父类的私有成员和构造函数之外的所有特性，而且还有自身特性。注意 TS 不支持一次继承多个类，但支持多重继承（A 继承 B，B 继承 C）</li>
<li><strong>多态 Polymorphism</strong>：由继承而产生的不同子类，它们对同一个方法可以有不同的响应。</li>
<li><strong>修饰符 Modifiers</strong>：一些用于限定成员性质的关键字。</li>
<li><strong>存取器 getter、setter</strong>：用于改变属性的读取和赋值行为。</li>
<li><strong>抽象类 Abstract Class</strong>：提供其他类继承的的基类（父类）。不允许被实例化。抽象方法只能包含在抽象类中并且必须在子类中实现，非抽象方法可以直接使用而无需重复实现。</li>
<li><strong>接口 Interfaces</strong>：不同类之间公有的属性或方法可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口。</li>
</ul>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; </span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">val:<span class="built_in">string</span></span>)&#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类的方法</span></span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="attr">age</span>:<span class="built_in">number</span>=<span class="number">20</span>):<span class="built_in">string</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;: &quot;</span> + age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;龙梅子&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getInfo</span>());</span><br></pre></td></tr></table></figure>


<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用 constructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="params">age:<span class="built_in">number</span>=<span class="number">20</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;: &quot;</span> + age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">getInfo</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 constructor + super</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> superMsg = <span class="variable language_">super</span>.<span class="title function_">getInfo</span>();</span><br><span class="line">    <span class="keyword">return</span> superMsg + <span class="string">&quot;:&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">getInfo</span>());</span><br></pre></td></tr></table></figure>


<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><blockquote>
<p>TS 中不允许一个子类继承多个父类，只能通过 mixins 模拟实现。mixins 混入用于将一个对象的方法和属性直接拷贝到另一个对象，是面向对象继承的一种替代方案。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag&#x27;</span>, <span class="string">`Helo <span class="subst">$&#123; <span class="variable language_">this</span>.name &#125;</span>!`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="attr">grade</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27; I need Study!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个父类的属性和方法做占位，但只定义而不去实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartObject</span> <span class="keyword">implements</span> <span class="title class_">Person</span>, <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="comment">// Person</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;person&#x27;</span>;</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="comment">// Activatable</span></span><br><span class="line">  <span class="attr">grade</span>: <span class="built_in">number</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="attr">study</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混入实现：直接将需要继承的所有属性都拷贝过去</span></span><br><span class="line"><span class="title function_">applyMixins</span>(<span class="title class_">SmartObject</span>, [<span class="title class_">Person</span>, <span class="title class_">Student</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">applyMixins</span>(<span class="params">derivedCtor: <span class="built_in">any</span>, baseCtors: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">  baseCtors.<span class="title function_">forEach</span>(<span class="function"><span class="params">baseCtor</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(baseCtor.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      derivedCtor.<span class="property"><span class="keyword">prototype</span></span>[name] = baseCtor.<span class="property"><span class="keyword">prototype</span></span>[name];</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ol>
<li>访问<br>* <strong>private</strong>：私有，只能在当前类的内部访问。<br>* <strong>protected</strong>：受保护，只能在当前类内部及其子类可以访问。<br>* <strong>public</strong>：公有(默认)，在当前类内部、子类、类外部都可以访问。<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">sex</span>:<span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span>, sex:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span>=sex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>我<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span>, sex:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age, sex)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);   <span class="comment">// 报错</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">sex</span>);    <span class="comment">// 正确</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);    <span class="comment">// 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);     <span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">sex</span>);      <span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">age</span>);      <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure></li>
<li>只读 readonly<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置的只读属性必须在声明时或构造函数里被初始化，并且值不能被修改。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; </span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span>=<span class="number">23</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yzq&quot;</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&quot;Lisa&quot;</span>;   <span class="comment">// 报错</span></span><br><span class="line">p.<span class="property">age</span> = <span class="number">24</span>;        <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li>
<li>静态 static<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态属性和方法存在于类本身而非实例上，所以访问时需要直接通过类名。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">name</span>: <span class="title class_">String</span>; </span><br><span class="line">  <span class="keyword">static</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">String</span>, age: <span class="built_in">number</span></span>)&#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法不能访问类里面的非静态属性</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">printInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span> + <span class="string">&quot;: &quot;</span> + <span class="title class_">Person</span>.<span class="property">age</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">printInfo</span>()</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义存取数据之前的业务逻辑</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">inputAge: <span class="built_in">number</span>=<span class="number">20</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (inputAge &gt; <span class="number">0</span> &amp;&amp; inputAge &lt;&gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_age</span> = inputAge;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="property">age</span> = <span class="number">200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">age</span>)  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>


<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote>
<p>抽象类更多的是实现业务上的严谨性，而接口更多的是制定各种规范。需要注意的是，它们都无法实例化，但是有很大区别：<code>抽象类只能作为父类被继承而接口可以当做子类继承其他类、抽象类中非抽象方法可以包含具体实现但接口中不能包含具体实现、抽象类中的抽象方法在子类中必须实现但接口中的非可选项在接口被调用时必须实现</code>。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类：可以使用修饰符、部分实现方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽象方法：不包含具体实现，要求子类中必须实现此方法</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">eat</span>():<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非抽象方法：无需要求子类实现或重写</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;非抽象方法，不要子类实现、重写&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">  <span class="comment">// 子类中必须实现父类抽象方法，否则 ts 编译报错</span></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;吃肉&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">eat</span>());</span><br></pre></td></tr></table></figure>


<h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote>
<p>通过 typeof 获取 Greeter 类的类型，即构造函数的类型而不是实例的类型，这个类型包含了类的所有静态成员和构造函数。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> greeting = <span class="string">&#x27;Hello, there&#x27;</span></span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Greeter</span>.<span class="property">greeting</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Greeter</span></span><br><span class="line">g = <span class="keyword">new</span> <span class="title class_">Greeter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">greet</span>())  <span class="comment">// Hello, there</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeterMaker</span>: <span class="keyword">typeof</span> <span class="title class_">Greeter</span> = <span class="title class_">Greeter</span></span><br><span class="line">greeterMaker.<span class="property">greeting</span> = <span class="string">&#x27;Hey there&#x27;</span></span><br><span class="line"><span class="keyword">let</span> g2 = <span class="keyword">new</span> <span class="title function_">greeterMaker</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g2.<span class="title function_">greet</span>())     <span class="comment">// Hey there</span></span><br></pre></td></tr></table></figure>

<h3 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h3><blockquote>
<p>类定义会创建两个东西：类的实例类型和一个构造函数，类可以创建出类型而可以在允许使用接口的地方使用类。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// extends 使子类可以共享父类的属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3</span>d <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: <span class="title class_">Point3</span>d = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>


<h1 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>函数的类型由传入参数和返回值组成，它们都需要指定数据类型。参数类型只要匹配即可而不会验证参数名是否正确，没有返回值时必须指定类型为 void 而不能留空。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整函数类型: =&gt; 表示函数的定义，左右两侧分别是输入和输出类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sum</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过接口定义</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Search</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">Search</span>;</span><br><span class="line">s = <span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">search</span>(name) !== -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有参数没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run1</span>(<span class="params"></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run2</span>(<span class="params"></span>):<span class="built_in">string</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run3</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span></span>):<span class="built_in">string</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run4</span>(<span class="params">name:<span class="built_in">string</span>,</span>):<span class="built_in">void</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数永远不会返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;never reach&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选参数：必须放在最后面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(lastName)&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + lastName;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数：不用放到最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">name: <span class="built_in">string</span>, age:<span class="built_in">number</span>=<span class="number">20</span></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数：ES6 规定 rest 参数只能是最后一个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum2</span>(<span class="params">...list: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;list.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    sum += list[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><blockquote>
<p>允许一个函数接受不同数量或类型的参数，并作出不同的处理。TS 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面 (输入数字则输出数字)。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反转数字或字符串</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> | <span class="built_in">string</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h1><blockquote>
<p>一种动态调用时才指定具体类型的宽泛类型，常用于创建支持不定数据类型的可复用代码。</p>
</blockquote>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Dog</span>&lt;T&gt; = &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">type</span>: T &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">dog</span>: <span class="title class_">Dog</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>, <span class="attr">type</span>: <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinClass</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">list</span>:T[]=[];</span><br><span class="line">  <span class="title function_">add</span>(<span class="attr">num</span>:T):<span class="built_in">void</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">min</span>():T&#123;</span><br><span class="line">      <span class="keyword">var</span> minNum = <span class="variable language_">this</span>.<span class="property">list</span>[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">list</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (minNum &gt; <span class="variable language_">this</span>.<span class="property">list</span>[i]) &#123;</span><br><span class="line">              minNum = <span class="variable language_">this</span>.<span class="property">list</span>[i]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> minNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="title class_">MinClass</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">m.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">m.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">min</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">function</span> swipe&lt;T, U&gt;(<span class="attr">value</span>: [T, U]): [U, T] &#123;</span><br><span class="line">  <span class="keyword">return</span> [value[<span class="number">1</span>], value[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line">swipe&lt;<span class="title class_">Cat</span>&lt;<span class="built_in">number</span>&gt;, <span class="title class_">Dog</span>&lt;<span class="built_in">number</span>&gt;&gt;([cat, dog])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口定义一</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ConfigFn</span>&#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">value</span>:T):T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">getData</span>:<span class="title class_">ConfigFn</span> = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">value</span>:T):T&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">getData&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="comment">// 接口定义二</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ConfigFn</span>&lt;T&gt;&#123;</span><br><span class="line">  (<span class="attr">value</span>:T):T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> getData&lt;T&gt;(<span class="attr">value</span>:T):T&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="attr">myGetData</span>:<span class="title class_">ConfigFn</span>&lt;<span class="built_in">string</span>&gt; = getData;</span><br><span class="line"><span class="title function_">myGetData</span>(<span class="string">&#x27;20&#x27;</span>);   <span class="comment">// 20 则报错</span></span><br></pre></td></tr></table></figure>


<h2 id="泛型推导"><a href="#泛型推导" class="headerlink" title="泛型推导"></a>泛型推导</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TS 在函数调用时会根据变量定义时的类型自动推导</span></span><br><span class="line">type <span class="title class_">Dog</span>&lt;T&gt; = &#123; <span class="attr">name</span>: string, <span class="attr">type</span>: T &#125;</span><br><span class="line"><span class="keyword">function</span> adopt&lt;T&gt;(<span class="attr">dog</span>: <span class="title class_">Dog</span>&lt;T&gt;) &#123; <span class="keyword">return</span> dog &#125;;</span><br><span class="line"><span class="keyword">const</span> dog = &#123; <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;hsq&#x27;</span> &#125;;</span><br><span class="line"><span class="title function_">adopt</span>(dog);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若不适用函数泛型推导，定义变量时必须指定类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">dog</span>: <span class="title class_">Dog</span>&lt;string&gt; = &#123; <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;hsq&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不想指定则可以使用泛型默认值</span></span><br><span class="line">type <span class="title class_">Dog</span>&lt;T=any&gt; = &#123; <span class="attr">name</span>: string, <span class="attr">type</span>: T &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">dog</span>: <span class="title class_">Dog</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;hsq&#x27;</span> &#125;</span><br><span class="line">dog.<span class="property">type</span> = <span class="number">123</span>;    <span class="comment">// type 类型为 any，无法推导</span></span><br></pre></td></tr></table></figure>


<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2>  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、泛型继承接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接实现无法保证所有的参数都有 length 方法</span></span><br><span class="line"><span class="keyword">function</span> getLen&lt;T&gt;(<span class="attr">arg</span>:T):T&#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增加接口来约束泛型：没有 length 属性的参数在函数调用前编译无法通过</span></span><br><span class="line"><span class="keyword">interface</span> lengthRequire&#123;</span><br><span class="line">  <span class="attr">length</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> newGetLen&lt;T <span class="keyword">extends</span> lengthRequire&gt;(<span class="attr">arg</span>:T):T&#123;</span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、使用类型参数：改写 getProperty</span></span><br><span class="line"><span class="keyword">function</span> getProperty&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;a&quot;</span>);   <span class="comment">// 正常</span></span><br><span class="line"><span class="title function_">getProperty</span>(x, <span class="string">&quot;m&quot;</span>);   <span class="comment">// 异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、使用类类型</span></span><br><span class="line"><span class="keyword">function</span> create&lt;T&gt; (<span class="attr">c</span>: &#123;<span class="title function_">new</span>(): T;&#125;): T &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 4、泛型条件和推断</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 条件类型：泛型名A extends 类型B ? 类型C: 类型D</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 推断 infer：预定义整体结构后，运行时就会自动判断</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> &#123;<span class="type">t: infer Test</span>&#125;：可看作一个包含 t 属性的类型定义</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123;<span class="attr">t</span>: infer <span class="title class_">Test</span>&#125; ? <span class="title class_">Test</span>: <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">One</span> = <span class="title class_">Foo</span>&lt;<span class="built_in">number</span>&gt;                       <span class="comment">// string </span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Two</span> = <span class="title class_">Foo</span>&lt;&#123;<span class="attr">t</span>: <span class="built_in">boolean</span>&#125;&gt;                 <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Three</span> = <span class="title class_">Foo</span>&lt;&#123;<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">t</span>: <span class="function">()=&gt;</span><span class="built_in">void</span>&#125;&gt;   <span class="comment">// ()=&gt;void</span></span><br></pre></td></tr></table></figure>


<h2 id="泛型工具"><a href="#泛型工具" class="headerlink" title="泛型工具"></a>泛型工具</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Partical&lt;T&gt;：将泛型中全部属性变为可选的</span></span><br><span class="line">type <span class="title class_">Partial</span>&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]?: T[P] &#125;  <span class="comment">// 源码</span></span><br><span class="line">type <span class="title class_">Animal</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: string,</span><br><span class="line">  <span class="attr">age</span>: number,</span><br><span class="line">  <span class="attr">eat</span>: <span class="function">() =&gt;</span> number</span><br><span class="line">&#125;</span><br><span class="line">type <span class="title class_">PartOfAnimal</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Animal</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">ww</span>: <span class="title class_">PartOfAnimal</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Record&lt;K, T&gt;：将 K 所有属性值转为 T 类型，常用来申明一个普通对象</span></span><br><span class="line">type <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof any,T&gt; = &#123; [key <span class="keyword">in</span> K]: T &#125;   <span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">Record</span>&lt;string, string&gt; = &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bg&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;武德&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pick&lt;T, K&gt;：将 T 类型中的 K 键列表提取出来，生成新的子键值对类型</span></span><br><span class="line">type <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123; [P <span class="keyword">in</span> K]: T[P] &#125;     <span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">bird</span>: <span class="title class_">Pick</span>&lt;<span class="title class_">Animal</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt; = &#123; <span class="attr">name</span>: <span class="string">&#x27;bird&#x27;</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exclude&lt;T, U&gt;：T 类型中去除 T 类型和 U 类型的交集，返回剩余的部分</span></span><br><span class="line">type <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T     <span class="comment">// 源码</span></span><br><span class="line">type <span class="variable constant_">T1</span> = <span class="title class_">Exclude</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>&gt;;   <span class="comment">// &quot;c&quot;</span></span><br><span class="line">type <span class="variable constant_">T2</span> = <span class="title class_">Exclude</span>&lt;string | number | (<span class="function">()=&gt;</span><span class="keyword">void</span>), <span class="title class_">Function</span>&gt;;<span class="comment">// string/number</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Omit&lt;T, K&gt;：去除类型 T 包含 K 的键值对，适用于键值对对象的 Exclude</span></span><br><span class="line">type <span class="title class_">Omit</span> = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;         <span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OmitAnimal</span>:<span class="title class_">Omit</span>&lt;<span class="title class_">Animal</span>, <span class="string">&#x27;name&#x27;</span>|<span class="string">&#x27;age&#x27;</span>&gt; = &#123; </span><br><span class="line">  <span class="attr">category</span>: <span class="string">&#x27;lion&#x27;</span>, </span><br><span class="line">  <span class="attr">eat</span>: <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eat&#x27;</span>) &#125;  <span class="comment">// Omit、Pick 分别获取非结果、结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReturnType&lt;T&gt;：获取 T 类型(函数)对应的返回值类型，简化源码如下</span></span><br><span class="line">type <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> func&gt; = T <span class="keyword">extends</span> () =&gt; infer R ? <span class="attr">R</span>: any;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x: string | number</span>): string | number &#123;  &#125;</span><br><span class="line">type <span class="title class_">FooType</span> = <span class="title class_">ReturnType</span>&lt;foo&gt;;   <span class="comment">// string | number</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Required&lt;T&gt;：将类型 T 中所有的属性变为必选项</span></span><br><span class="line">type <span class="title class_">Required</span>&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]-?: T[P] &#125; <span class="comment">// 源码：-? 减去可选属性</span></span><br></pre></td></tr></table></figure>


<h1 id="七、枚举"><a href="#七、枚举" class="headerlink" title="七、枚举"></a>七、枚举</h1><blockquote>
<p>可以声明一组带名字的常量，用于取值被限定在一定范围内的场景，比如一周只能有七天、颜色限定为红绿蓝等。</p>
</blockquote>
<h2 id="根据枚举成员分类"><a href="#根据枚举成员分类" class="headerlink" title="根据枚举成员分类"></a>根据枚举成员分类</h2><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><blockquote>
<p>枚举成员是常量而非变量，所以不能对其进行赋值但可以初始化。它们经过编译后会生成反向映射表，即除了生成键值对的集合，还会生成值键对的集合。</p>
</blockquote>
<ul>
<li><strong>不带初始化器</strong>：枚举成员默认从 0 开始并依次递增<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123; <span class="title class_">Sun</span>, <span class="title class_">Mon</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">string</span> = <span class="title class_">Days</span>[<span class="number">0</span>];     <span class="comment">// Sun</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: <span class="built_in">number</span> = <span class="title class_">Days</span>.<span class="property">Sat</span>;    <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;Sun&quot;</span>, <span class="number">1</span>: <span class="string">&quot;Mon&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Tue&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wed&quot;</span>, <span class="number">4</span>: <span class="string">&quot;Thu&quot;</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">&quot;Fri&quot;</span>, <span class="number">6</span>: <span class="string">&quot;Sat&quot;</span>, <span class="title class_">Fri</span>: <span class="number">5</span>, <span class="title class_">Mon</span>: <span class="number">1</span>, <span class="title class_">Sat</span>: <span class="number">6</span>, <span class="title class_">Sun</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Thu</span>: <span class="number">4</span>, <span class="title class_">Tue</span>: <span class="number">2</span>, <span class="title class_">Wed</span>: <span class="number">3</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：不带初始化器的枚举需要被放在第一位置或初始化的枚举后面</span></span><br><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  A = <span class="title function_">getValue</span>(),</span><br><span class="line">  B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>使用初始化器</strong>：后面的枚举成员从初始值依次递增<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123; <span class="title class_">Sun</span>=<span class="number">7</span>, <span class="title class_">Mon</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>=<span class="number">1</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;Wed&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Thu&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Fri&quot;</span>, <span class="number">4</span>: <span class="string">&quot;Sat&quot;</span>, <span class="number">7</span>: <span class="string">&quot;Sun&quot;</span>, </span><br><span class="line">  <span class="number">8</span>: <span class="string">&quot;Mon&quot;</span>, <span class="number">9</span>: <span class="string">&quot;Tue&quot;</span>, <span class="title class_">Sun</span>: <span class="number">7</span>, <span class="title class_">Mon</span>: <span class="number">8</span>, <span class="title class_">Tue</span>: <span class="number">9</span>, <span class="title class_">Wed</span>: <span class="number">1</span>, </span><br><span class="line">  <span class="title class_">Thu</span>: <span class="number">2</span>, <span class="title class_">Fri</span>: <span class="number">3</span>, <span class="title class_">Sat</span>: <span class="number">4</span>, <span class="title class_">Sun</span>: <span class="number">7</span>, <span class="title class_">Mon</span>: <span class="number">8</span>, <span class="title class_">Tue</span>: <span class="number">9</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始值：常数、常量表达式，不能是变量、NaN、Infinity</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span>_1 &#123; one = <span class="number">2</span>, two &#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span>_2 &#123; one = <span class="title class_">Days</span>_1.<span class="property">Sun</span>, two = <span class="number">2</span> * one &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNum</span> (<span class="attr">x</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span>_3 &#123;</span><br><span class="line">  one = <span class="title function_">getNum</span>(<span class="number">10</span>) * <span class="title class_">Days</span>_2.<span class="property">one</span>,</span><br><span class="line">  two = (<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> first = <span class="number">10</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span>_4 &#123; one = first, two, three &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><blockquote>
<p>需要使用字符串字面量或者之前定义的字符串枚举成员来初始化，注意它不会生成反向映射表。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部使用字符串字面量来初始化</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">StrEnum1</span> &#123;</span><br><span class="line">  one = <span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">  two = <span class="string">&#x27;two&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部使用其他枚举成员的字面量初始化</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">StrEnum2</span> &#123;</span><br><span class="line">  one = <span class="title class_">StrEnum1</span>.<span class="property">one</span>,</span><br><span class="line">  two = <span class="title class_">StrEnum1</span>.<span class="property">two</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错：不能将这初始化方式混写</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">StrEnum3</span> &#123;</span><br><span class="line">  one = <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">  two = <span class="title class_">StrEnum1</span>.<span class="property">two</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><blockquote>
<p>混合字符串和数字成员，一般不推荐使用。</p>
</blockquote>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">BooleanLike</span> &#123;</span><br><span class="line">  <span class="title class_">No</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Yes</span> = <span class="string">&quot;YES&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="根据声明方式分类"><a href="#根据声明方式分类" class="headerlink" title="根据声明方式分类"></a>根据声明方式分类</h2><ul>
<li><strong>普通枚举</strong>：可以生成反向映射表。</li>
<li><strong>常量枚举</strong>：不会生成反向映射，节省了代码量但只能通过成员访问。</li>
<li><strong>外部枚举</strong>：不会生成反向映射，主要用于防止枚举的命名冲突和成员冲突。</li>
<li><strong>外部常量枚举</strong>：和常量枚举没有区别，只是会提示是否有枚举命名冲突和成员冲突。</li>
</ul>
  <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通枚举：关键词 + 枚举名称</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">NumEnum</span> &#123; a, b c &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量枚举：const + 关键词 + 枚举名称 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Color</span> &#123; <span class="title class_">Red</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span> &#125;</span><br><span class="line"><span class="title class_">Color</span>[<span class="string">&#x27;0&#x27;</span>]     <span class="comment">// 报错</span></span><br><span class="line"><span class="title class_">Color</span>.<span class="property">Green</span>    <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部枚举：declear + 关键词 + 枚举名称</span></span><br><span class="line">declear <span class="keyword">enum</span> <span class="title class_">Animal</span> &#123; cat, dog, tiger &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>)       <span class="comment">// 报错：不存在</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property">cat</span>)   <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部常量枚举：declear + const + 关键词 + 枚举名称</span></span><br><span class="line"><span class="comment">// 声明语 + 修饰符 + 关键词 + 枚举名称</span></span><br><span class="line">declear <span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Animal2</span> &#123; cat=<span class="number">1</span>, dog, tiger &#125;</span><br><span class="line"><span class="title class_">Animal2</span>.<span class="property">tiger</span>      <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>JS 扩展</category>
      </categories>
      <tags>
        <tag>JS 扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>React 工具库</title>
    <url>/2019/08/29/10-2-React%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<h1 id="一、组件复用方案"><a href="#一、组件复用方案" class="headerlink" title="一、组件复用方案"></a>一、组件复用方案</h1><blockquote>
<p>React 团队一直在探索：早期使用 <code>CreateClass + Mixins</code> (混入：将对象拷贝到另一个对象)，然后使用 Class Component 取代 CreateClass 之后设计了 <code>Render Props</code> (通过 props 接收一个返回新组件的渲染函数)、<code>Higher Order Component</code> (高阶组件：接收原组件为参数并返回一个新组件的函数)，直到再后来的 <code>Function Component + Hooks</code> (封装组件中状态相关逻辑的函数)。</p>
</blockquote>
<h2 id="混入-Mixin"><a href="#混入-Mixin" class="headerlink" title="混入 Mixin"></a>混入 Mixin</h2><blockquote>
<p>将公用逻辑封装为一个 Mixin 并通过通过侵入的方式修改了原组件，相同键值的对象与函数会导致命名冲突、代码覆盖、逻辑复杂等问题。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mixinPart = &#123;</span><br><span class="line">    <span class="title function_">mixinFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this mixin!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Contacts</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">    <span class="attr">mixins</span>: [mixinPart],</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.mixinFunc()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承 extends"></a>继承 extends</h2><blockquote>
<p>ES6 class 继承方式，但是注意父子类型应该一致，滥用继承可能产生混乱的类层次结构。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆形类继承一个点类的定义很不合理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: number;</span><br><span class="line">    <span class="attr">y</span>: number;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x: number, y: number</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">    <span class="attr">radius</span>: number;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x: number, y: number, radius: number</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(x, y);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="高阶组件-HOC"><a href="#高阶组件-HOC" class="headerlink" title="高阶组件 HOC"></a>高阶组件 HOC</h2><blockquote>
<p>一种类似于装饰器的设计模式，本质是一个接收原组件为参数并返回新组件的纯函数，主要用于组件扩展、组件复用、提升渲染性能等。</p>
</blockquote>
<ul>
<li>优势：不会导致父组件的修改和冲突而降低了<strong>耦合度</strong>、具有组件树层级结构而降低了<strong>复杂度</strong>。</li>
<li>缺陷：<strong>嵌套地狱</strong> (每次调用都会产生一个组件实例，过多嵌套会导致难以溯源和 props 覆盖问题)、<strong>静态构建</strong> (只是声明了新组件但不会马上渲染，只有在组件被渲染时才执行)。</li>
<li>功能：<strong>属性代理</strong> (原组件作为子组件更新 props)、<strong>反向继承</strong> (原组件作为父组件更新 state)。</li>
<li>解决问题：<strong>复用逻辑</strong> (对原组件进行扩展的纯函数)、<strong>强化props</strong> (劫持上层 props 并混入新 props，比如 react-router withRouter)、<strong>扩展组件</strong> (为包裹的业务组件扩展功能，比如 react-keepalive-router keepaliveLifeCycle)、<strong>控制渲染</strong> (劫持渲染时对原组件的模板进行修改和替换，比如登陆验证和 react-redux dynamic 组件懒加载)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">withSubscription</span>(<span class="params">WrappedCom, selectData</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(props);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">data</span>: <span class="title function_">selectData</span>(<span class="title class_">DataSource</span>, props) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 使用新数据渲染被包装的组件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedCom</span> <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性代理</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyContainer</span> = (<span class="params">WrappedComponent</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向继承</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ReverHOC</span> = <span class="title class_">WrapComponent</span> =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">WrapComponent</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(props)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">1000</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">nextProps, state</span>) &#123;</span><br><span class="line">            <span class="comment">// 存储数据等</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 反向继承后可以获取原组件数据</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;高阶组件&quot;</span>, <span class="variable language_">this</span>.<span class="property">props</span>, <span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">clickComponent</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="comment">// 反向继承时不能在子组件模板中使用父组件标签</span></span><br><span class="line">                <span class="comment">// 使用 super.render() 渲染父组件模板 </span></span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickComponent&#125;</span>&gt;</span>高阶组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;super.render()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="渲染属性-Render-Props"><a href="#渲染属性-Render-Props" class="headerlink" title="渲染属性 Render Props"></a>渲染属性 Render Props</h2><blockquote>
<p>通过 props 将复用的状态传递给原组件定义的渲染函数，注意可以是任意名称的 prop。</p>
</blockquote>
<ul>
<li>优势：动态构建、没有 props 命名冲突、可以溯源 (子组件 props 一定来自直接父组件)。</li>
<li>缺陷：函数回调的嵌套地狱、使用繁琐 (HOC 可以通过装饰器语法的一行代码实现复用)、没有组件的上下文 (HOC 可以直接获取子组件实例对象 this.props.children)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Router</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125; /&gt;</span></span><br><span class="line">&lt;/<span class="title class_">Router</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    handleMouseMove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">x</span>: e.<span class="property">clientX</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">        <span class="comment">// return this.props.children(this.state)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mouse</span>.<span class="property">prototypes</span> = &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>render 调用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span>=<span class="string">&#123;</span> <span class="attr">i</span> =&gt;</span> &#123;return (<span class="tag">&lt;<span class="name">div</span>&gt;</span>位置：&#123;i.x&#125;, &#123;i.y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125; &#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span>=<span class="string">&#123;</span> <span class="attr">i</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          return (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&#123;&#123;position:</span>&#x27;<span class="attr">absolute</span>&#x27;, <span class="attr">top:i.y</span>, <span class="attr">left:i.x</span>&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          )</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>children 调用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span>&gt;</span>&#123; (&#123;x, y&#125;) =&gt; &#123;return (<span class="tag">&lt;<span class="name">div</span>&gt;</span>位置：&#123;x&#125;, &#123;y&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)&#125; &#125;<span class="tag">&lt;/<span class="name">Mouse</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            (&#123;x, y&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              return (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&#123;&#123;position:</span>&#x27;<span class="attr">absolute</span>&#x27;, <span class="attr">top:y</span>, <span class="attr">left:x</span>&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Mouse</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><ul>
<li>优势<ul>
<li>解决了以上的嵌套问题，而且实现了视图和状态的分离，Hooks 还可以相互组合。</li>
<li>Hooks 为函数组件而生，从而解决了类组件的几大问题：this 指向容易错误、声明周期中的逻辑代码难以理解和维护、代码复用成本高等。</li>
</ul>
</li>
<li>缺陷<ul>
<li>用法限制：只能在最顶层使用 Hook，不能在循环、条件判断或嵌套函数中调用。只能在 React 函数组件中调用 Hook，不能在普通函数中调用。</li>
<li>在闭包场景可能会引用到旧的 state、props 值，React.memo 也不能完全替代 shouldComponentUpdate（因为拿不到 state change，只针对 props change）。</li>
</ul>
</li>
</ul>
<h1 id="二、react-hooks"><a href="#二、react-hooks" class="headerlink" title="二、react-hooks"></a>二、react-hooks</h1><blockquote>
<p>react16.8 新增的特性，是为纯函数组件提供能力的 React API。它并不能完全代替 class 声明的组件，对于业务比较复杂的组件还是首选 class 组件，但我们可以把 class 组件内部拆解成 funciton 组件并根据业务需求分为逻辑交互、动态渲染等，然后配合 usememo 等提升性能。使用规则主要如下：</p>
</blockquote>
<ul>
<li><strong>函数声明方式</strong>：不需要定义 constructor、render、class 就可以操作 state 等特性，不需要写各种生命周期。</li>
<li><strong>限制条件</strong>：只能在最顶层调用，不能在循环、条件判断或嵌套函数中调用。只能在 React 函数组件中调用，不能在普通函数中调用。</li>
<li><strong>性能提升</strong>：支持将大组件拆分为一个个独立的渲染空间而减少了渲染次数，支持抽离公共方法和组件而增加了代码的可复用性和逻辑性。</li>
</ul>
<h2 id="主要-API"><a href="#主要-API" class="headerlink" title="主要 API"></a>主要 API</h2><blockquote>
<p>usestate、useReducer 可以保存当前数据，但是它们的回调函数执行时会使整个组件重新执行渲染。如果我们想要更新数据但又不想触发组件更新，则可以选择 useRef。useMemo、useCallback 接收的参数一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 useMemo 返回函数运行的结果，useCallback 返回的是经过处理后的函数。</p>
</blockquote>
<ul>
<li><strong>useState</strong>：数据存储，派发更新。</li>
<li><strong>useEffect</strong>：组件更新的钩子，可重复多个。执行顺序为 组件更新挂载完成、浏览器 dom 绘制完成、执行 useEffect 回调。回调函数的代码在渲染视图过程中会造成画面闪动的效果。</li>
<li><strong>useLayoutEffect</strong>：渲染更新之前的 useEffect。执行顺序为 组件更新挂载完成、执行 useLayoutEffect 回调、浏览器 dom 绘制完成。回调函数的代码会阻塞浏览器绘制而引起画面卡顿等效果。</li>
<li><strong>useRef</strong>：获取元素，缓存数据。类似 class 组件的 ref 获取元素方法，第一个参数可以用来初始化保存数据并在 current 属性上获取和更新。</li>
<li><strong>useContext</strong>：获取父级组件传递的上下文 context，可以代替 context.Consumer 来获取 Provider value。</li>
<li><strong>useReducer</strong>：react-hooks 提供的能够在无状态组件中运行的类似 redux 的功能 api，但它并不能代替 redux，redux 中间件模式能够在复杂的逻辑中展现优势。</li>
<li><strong>useMemo</strong>：能够形成独立的渲染空间，让组件和变量按照约定好的规则更新，让无状态组件实现部分视图的更新而提高性能。memo、useMemo 可看作是结合了 pureComponent 纯组件、componentShouldUpdate 更新次数限制的功能。</li>
<li><strong>useCallback</strong>：用法同 useMemo 但返回回调函数。父组件向子组件传递函数时，由于无状态组件每一次都会重新生成新的 props 函数，这样就使每次传递的函数都发生了变化进而会触发子组件的更新，这些更新是没有必要的，此时我们就可以通过 useCallback 来处理此函数，然后作为 props 传递给子组件。注意它必须配合 react.memo pureComponent，否则不但不会提升性能，还有可能降低性能。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect, useRef, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params">&#123; a &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResize</span> =(<span class="params"></span>)=&gt;&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第一个参数可以用来初始化保存数据</span></span><br><span class="line">    <span class="keyword">const</span> div = <span class="title function_">useRef</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  参数一：初始状态值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  参数二：改变状态的函数，函数的参数即需要更新的值</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [userMessage, setUserMessage]:any= <span class="title function_">useState</span>(&#123;&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  参数一：function，默认每次渲染完成后执行的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  参数二：函数执行条件，[] 首次渲染时，[count] count更新时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desp</span>   useEffect 使用时如果不加限制 ，会是函数重复执行，陷入死循环</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="title function_">useEffect</span>(() = &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;number&#125;</span> times`</span>;</span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">getUserInfo</span>(a).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">setUserMessage</span>(res)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取和改变数据，默认 dom 元素</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">current</span>) </span><br><span class="line">        div.<span class="property">current</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订阅、计时器的设置和卸载</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">        <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setNumber</span>(<span class="function"><span class="params">number</span> =&gt;</span> number + <span class="number">1</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(timer) </span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[a, number])</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;div&#125;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;userMessage.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;userMessage.age&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> setNumber(number + 1)&#125;&gt;点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误写法</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getUserInfo</span>(payload)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> <span class="variable">useContext</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Context 两种获取方式：createContext 方式引入、父级传递</span></span><br><span class="line"><span class="comment"> *        </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoContext</span> = (<span class="params"></span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">value</span>:any = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">    <span class="comment">/* my name is alien */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> my name is &#123; value.name &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Context.Consumer 方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoContext1</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/*  my name is alien  */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123; (value)=&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span> my name is &#123; value.name &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Context.Consumer</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">name:</span>&#x27;<span class="attr">alien</span>&#x27; , <span class="attr">age:18</span> &#125;&#125; &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">DemoContext</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">DemoContext1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  参数一：函数 reducer，返回更新后的 state</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  参数二：state 初始值，返回一个数组包含 state 新值和 dispatch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>   触发组件重新渲染的派发更新函数函数：useState、dispatch</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseReducer</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">// number 为更新后的 state 值，dispatchNumbner 为当前的派发函数</span></span><br><span class="line">    <span class="keyword">const</span> [ number, dispatchNumbner ] = <span class="title function_">useReducer</span>(<span class="function">(<span class="params">state, action</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; payload, name  &#125; = action</span><br><span class="line">        <span class="comment">// return 的值为新 state</span></span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;sub&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> state - <span class="number">1</span> </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;reset&#x27;</span>:</span><br><span class="line">              <span class="keyword">return</span> payload       </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        当前值：&#123; number &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>dispatchNumbner(&#123; name:&#x27;add&#x27; &#125;)&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>dispatchNumbner(&#123; name:&#x27;sub&#x27; &#125;)&#125;&gt;减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>dispatchNumbner(&#123; name:&#x27;reset&#x27;, payload: 66 &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;赋值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; // 把 dispatch、state 传递给子组件 &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyChildren</span> <span class="attr">dispatch</span>=<span class="string">&#123;</span> <span class="attr">dispatchNumbner</span> &#125; <span class="attr">State</span>=<span class="string">&#123;&#123;</span> <span class="attr">number</span> &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 参数一：重新渲染的回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 参数二：deps 数组，数组参数变化时执行回调函数</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  1、listshow、selectList 改变时才更新，减少不必要的循环和渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  2、减少子组件的渲染次数：包裹的函数可以避免每次组件更新时重新声明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  3、让函数在某个依赖项改变时才运行，避免很多不必要的开销</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">width</span>=<span class="string">&#123;</span>&#x27;<span class="attr">70</span>%&#x27;&#125; <span class="attr">visible</span>=<span class="string">&#123;listshow&#125;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">PatentTable</span> <span class="attr">getList</span>=<span class="string">&#123;getList&#125;</span> <span class="attr">selectList</span>=<span class="string">&#123;selectList&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">), [listshow, selectList])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseMemo</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 打印值不是最新 number：因为 useMemo 包裹的上下文会形成一个独立闭包</span></span><br><span class="line">    <span class="keyword">const</span> newLog = <span class="title function_">useMemo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">log</span> =(<span class="params"></span>)=&gt;&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(number) &#125;</span><br><span class="line">        <span class="keyword">return</span> log</span><br><span class="line">    &#125;, [])</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>newLog()&#125; &gt;打印<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> setNumber(number+1)&#125;&gt;增加<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// react.memo </span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DemoChildren</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 只有初始化时打印了，子组件更新</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件更新&#x27;</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        props.<span class="title function_">getInfo</span>(<span class="string">&#x27;子组件&#x27;</span>)</span><br><span class="line">    &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseCallback</span>=(<span class="params">&#123; id &#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// usecallback 参数一经过处理赋值给 getInfo</span></span><br><span class="line">    <span class="keyword">const</span> getInfo = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">sonName</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sonName)</span><br><span class="line">    &#125;, [id])</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 点击按钮触发父组件更新 ，但是子组件没有更新 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setNumber(number+1)&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">DemoChildren</span> <span class="attr">getInfo</span>=<span class="string">&#123;getInfo&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><ul>
<li>单个组件内部数据传递：state</li>
<li>父组件向子组件传递：props</li>
<li>子组件向父组件传递：props</li>
<li>兄弟组件之间的通信：props</li>
<li>父组件向后代组件传递：props、Context API、Redux、发布-订阅模式、EventBus</li>
<li>非关系组件传递：Context API、Redux、发布-订阅模式、EventBus</li>
</ul>
]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>React 框架</title>
    <url>/2019/08/17/10-1-React%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、开发技术"><a href="#一、开发技术" class="headerlink" title="一、开发技术"></a>一、开发技术</h1><ul>
<li><strong>脚手架</strong>：<code>create-react-app</code> 官方推荐、<code>Vite</code> 构建工具、<code>Umi Ice</code> 蚂蚁和阿里的前端框架、<code>nwb</code> 构建应用和库的工具包、<code>Neutrino</code> 构建初始配置的应用、<code>NextJS</code> 构建基于 NodeJS 的服务端应用、<code>Razzle</code> 构建无配置的服务端应用、<code>Gatsby</code> 构建静态网站。</li>
<li><strong>底层框架</strong>：<code>Umi Ice</code> 前端应用框架、<code>NextJS Razzle</code> 服务端渲染(后者无需配置)、<code>Remix</code> 全栈开发、<code>Flutter ReactNative Ionic Taro</code> 跨平台开发、<code>Gatsby</code> 静态网站部署。</li>
<li><strong>UI 组件库</strong>：<code>Ant-design</code> 阿里、<code>Arco-design</code> 字节、<code>TDesign</code> 腾讯、<code>MaterialUI MUI</code> 谷歌、<code>Zarm</code> 众安、<code>NutUI</code> 京东、<code>WeUI</code> 微信、<code>Chakra</code> 响应式、<code>Blueprint</code> 桌面应用。</li>
<li><strong>单页面开发</strong>：<code>create-react-app umi</code> 初始化结构，<code>Component</code> 开发组件、<code>JSX</code> 扩展语法、<code>react-router</code> 管理路由、<code>storybook</code> 组件测试、<code>react-devtools</code> 项目调试。</li>
<li><strong>样式策略</strong>：<code>JSX</code> 内联、<code>CSS SCSS</code> 文件、<code>styled-components Jss Radium</code> 使用 JS。</li>
<li><strong>状态管理</strong>：<code>Redux Zustand</code> 手动更新的单向数据流、<code>Mobx Valtio</code> 响应式自动更新的双向绑定、<code>Jotai Recoil</code> 多组件数据共享的状态原子化、<code>Xsate</code> 管理复杂状态跳转的有限状态机、<code>Rxjs</code> 自定义数据流的异步编程库、<code>Dva</code> 基于 redux + react-router + redux-saga 进行二次封装的数据流方案、<code>React-Query + Context</code> 分别管理服务端和客户端的状态。</li>
<li><strong>技术展望</strong>：<code>pnpm</code> 更快更节省空间的包管理工具 (取代 npm)、<code>Vite</code> 按需编译的构建工具 (取代 webpack)、<code>Tailwindcss</code> 构建定制化样式的框架 (取代 CSS 及其预处理工具)，<code>React-Query</code> 服务端异步状态管理器 (取代异步请求时需要维护大量状态的 Redux&#x2F;MobX)。</li>
</ul>
<h2 id="React-简介"><a href="#React-简介" class="headerlink" title="React 简介"></a>React 简介</h2><blockquote>
<p>Facebook 开源的一个用于动态构建界面的视图框架。它采用声明范式来描述应用，构建虚拟 DOM，支持 JSX 语法，通过 React.Component 构建可复用组件，通过 props 实现简单的父子组件通信，它并不是复杂应用的完整解决方案，还需要集成 react-router、react-redux、redux-saga、Ant-design 等第三方库或者直接使用一个应用级框架。</p>
</blockquote>
<ol>
<li><strong>声明式设计</strong>：采用简洁易懂的声明范式，可以轻松描述应用。</li>
<li><strong>单向数据流</strong>：推崇一种单向的数据流动模式，减少了重复代码。</li>
<li><strong>高效渲染</strong>：通过组件构建 <code>Virtual DOM</code> (描述元素的对象)，更新时通过算法 <code>react-diff</code> 只将差异部分重新渲染到真实元素，相比每次遍历元素属性的传统方式而极大提升了性能。</li>
<li><strong>组件化开发</strong>：DOM 树上的节点称为<code>元素</code>，Virtual DOM 上的节点则称为<code>组件</code>。组件具有功能独立、高内聚、低耦合的特点，开发时不能用模板而推荐使用 <code>JSX</code>。</li>
<li><strong>支持客户端与服务器渲染</strong>：服务端渲染 (Node)、APP (ReactNative)。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟 DOM</span></span><br><span class="line"><span class="keyword">const</span> span = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;玫瑰&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> p = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">className</span>: <span class="string">&#x27;active&#x27;</span>&#125;, <span class="string">&#x27;花&#x27;</span>, span)</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(p, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>];</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="string">`&lt;ul&gt;&#123;list.map((item,index) =&gt; &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;)&#125;&lt;/ul&gt;`</span>, </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令式编程</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>.<span class="title function_">map</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;m&#x27;</span>), &#123;<span class="attr">center</span>: &#123;lat,lng&#125;&#125;)</span><br><span class="line"><span class="keyword">const</span> marker = <span class="keyword">new</span> <span class="title class_">Map</span>.<span class="title function_">marker</span>(&#123; <span class="attr">position</span>: &#123;lat, lng&#125;, <span class="attr">title</span>: <span class="string">&#x27;Marker&#x27;</span> &#125;)</span><br><span class="line">marker.<span class="title function_">setMap</span>(map)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式编程</span></span><br><span class="line">&lt;<span class="title class_">Map</span> zoom=&#123;<span class="number">4</span>&#125; center=&#123;lat, lng&#125;&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Marker</span> <span class="attr">position</span>=<span class="string">&#123;lat,</span> <span class="attr">lng</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>&#x27;<span class="attr">Hello</span> <span class="attr">Marker</span>&#x27;&#125;/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Map</span>&gt;</span><br></pre></td></tr></table></figure>


<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create-react-app：基于 webpack 大而全的打包层方案</span></span><br><span class="line">npx create-react-app react-app</span><br><span class="line">npm start        <span class="comment">// 开发模式运行</span></span><br><span class="line">npm run build    <span class="comment">// 生产模式打包</span></span><br><span class="line">npm test         <span class="comment">// 测试模式测试</span></span><br><span class="line">npm run eject    <span class="comment">// 显示配置文件 webpack.config.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vite：小而巧的打包层方案</span></span><br><span class="line">npm install vite -g</span><br><span class="line">npm init vite-app --template react</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Umi4：整合了 React 生态的应用框架，推荐高性能 npm 的 pnpm </span></span><br><span class="line">npm i pnpm -g</span><br><span class="line">pnpm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmmirror.com</span></span><br><span class="line">pnpm dlx create-umi@latest</span><br><span class="line">npx create-umi@latest</span><br><span class="line">pnpm run dev、npm start</span><br><span class="line"></span><br><span class="line"><span class="comment">// Umi3：注意不要混淆新版命令</span></span><br><span class="line">npx @umijs/create-umi-app</span><br><span class="line">npm create @umijs/umi-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>


<h2 id="样式策略"><a href="#样式策略" class="headerlink" title="样式策略"></a>样式策略</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内联样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> buttonGreen = &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&quot;1px solid white&quot;</span>,</span><br><span class="line">        <span class="attr">borderRadius</span>: <span class="string">&quot;2px&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;buttonGreen&#125;</span>&gt;</span>green<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TestChidren</span> <span class="keyword">from</span> <span class="string">&quot;./TestChidren&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/css/index.scss&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;link-name&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">TestChidren</span>&gt;</span>子组件样式<span class="tag">&lt;/<span class="name">TestChidren</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Test</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i react-jss -D：支持复用、局部、props 动态样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createUseStyles&#125; <span class="keyword">from</span> <span class="string">&#x27;react-jss&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useStyles = <span class="title function_">createUseStyles</span>(&#123;</span><br><span class="line">    <span class="attr">buttonGreen</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="function"><span class="params">backgroundColour</span> =&gt;</span> backgroundColour,</span><br><span class="line">        <span class="attr">border</span>: <span class="string">&quot;1px solid white&quot;</span>,</span><br><span class="line">        <span class="attr">borderRadius</span>: <span class="string">&quot;2px&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123;backgroundColour, children&#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;buttonStyles&#125; = <span class="title function_">useStyles</span>(backgroundColour)</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;buttonStyles&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i styled-components -D：支持 Sass、props 动态样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Btn</span> = styled.<span class="property">button</span><span class="string">`background: blue;`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CoolButton</span> = <span class="title function_">styled</span>(<span class="title class_">Btn</span>)<span class="string">`color: pink;`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    img &#123;</span></span><br><span class="line"><span class="string">        height: 100px;</span></span><br><span class="line"><span class="string">        width: 200px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    p &#123;</span></span><br><span class="line"><span class="string">        font-size: 20px;</span></span><br><span class="line"><span class="string">        color: <span class="subst">$&#123;props =&gt; props.color&#125;</span>;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">&#123;imgUrl, themeColor&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">color</span>=<span class="string">&#123;themeColor&#125;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgURl&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm i radium -D：扩展内联样式，支持变量、伪类、媒体查询、动画</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Radium</span> <span class="keyword">from</span> <span class="string">&#x27;radium&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> styles = &#123;</span><br><span class="line">    <span class="attr">base</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;:hover&#x27;</span>: &#123;</span><br><span class="line">            <span class="attr">background</span>: <span class="string">&#x27;#0074d9&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">primary</span>: &#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">&#x27;#0074D9&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">warning</span>: &#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">&#x27;#FF4136&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;[styles.base,</span> <span class="attr">styles.primary</span>]&#125;&gt;</span>P<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><blockquote>
<p>Facebook 提出的 <code>JS 扩展语法、React.Fragment 语法糖</code>，主要用于创建虚拟 DOM 并被 babel 编译为 React.createElement。主要优点有编写组件简单、渲染时输出虚拟 dom 提高性能、渲染前将传入值转为字符串而防止 XSS 跨站脚本攻击，实现原理和使用规则如下：</p>
</blockquote>
  <div align="center">
      <img src="/images/react/jsx.png" alt="JSX 原理" width="100%">
  </div>

<ul>
<li>表格标签必须添加 tbody。</li>
<li>最外层有且只有一个标签，但可以是空标签。</li>
<li>对大小写敏感，区分是组件还是 html 标签。</li>
<li>所有的标签必须闭合，单标签必须有末尾反斜杠。</li>
<li>标签内放 <code>&lt;</code> 会报错，因为他会按照 html 来解析。</li>
<li>在标签内部的注释需要写入 <code>&#123;&#125;</code>，在标签外的的注释则不需要。</li>
<li><code>&#123;&#125;</code> 不可插入：函数声明、对象、for 循环、if 语句、while 语句。</li>
<li><code>&#123;&#125;</code> 可插入：变量、简单运算、JS 内置函数、函数执行、三元运算符、自定义组件。</li>
<li>属性名：小驼峰命名，不能使用关键字：<code>class - classNmae、for - htmlFor</code>。</li>
<li>属性值：字符串加引号，变量加 <code>&#123;&#125;</code>。有换行符时设置样式 <code>whiteSpace: &#39;pre-wrap&#39;</code>。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析规则：&lt; 开头的标签使用 HTML 规则解析、&#123; 开头的使用 JS 规则解析</span></span><br><span class="line"><span class="comment">// 编译前：JSX 表达式</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;input-wrap&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">title</span>=<span class="string">&quot;请输入&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译过程：执行 React.createElement</span></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123;<span class="attr">className</span>: <span class="string">&#x27;input-wrap&#x27;</span>&#125;,</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">        <span class="string">&quot;input&quot;</span>,</span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">class</span>: <span class="string">&#x27;input&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;请输入&#x27;</span> &#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>, <span class="literal">null</span>, <span class="string">&quot;搜索&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果：虚拟 DOM</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">tagName</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">attribute</span>: &#123; <span class="attr">className</span>: <span class="string">&#x27;input-wrap&#x27;</span>&#125;,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">tagName</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">      <span class="attr">attribute</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>, <span class="attr">value</span>:<span class="string">&#x27;&#x27;</span>, <span class="attr">class</span>:<span class="string">&#x27;input&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;请输入&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">tagName</span>: <span class="string">&quot;button&quot;</span>, <span class="attr">attribute</span>: <span class="literal">null</span>, <span class="attr">children</span>: <span class="string">&#x27;搜索&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">============= 基础使用 =============</span><br><span class="line"><span class="comment">// 空标签：&lt;React.Fragment /&gt; 的语法糖</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Columns</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性值</span></span><br><span class="line">&lt;div tabIndex=<span class="string">&quot;0&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&#123;</span>`<span class="attr">images</span>/$&#123;<span class="attr">star</span>&#125;<span class="attr">.png</span>`&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">tab</span> $&#123;<span class="attr">index</span>==<span class="string">this.state.i</span> ? &#x27;<span class="attr">active</span>&#x27;<span class="attr">:</span>&#x27;&#x27;&#125;`&#125;&gt;</span>标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> props = &#123; <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">children</span>: [] &#125;</span><br><span class="line">&lt;span &#123;...props&#125;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行内样式：双大括号，标准 JSON，省略 px，名字性驼峰</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span> <span class="attr">200</span>, <span class="attr">height:</span> <span class="attr">200</span>, <span class="attr">backgroundColor</span> <span class="attr">:</span> &#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;display:</span> (<span class="attr">index</span>==<span class="string">this.state.i)</span> ? &#x27;<span class="attr">block</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">none</span>&#x27;&#125;&#125;&gt;</span>标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件渲染</span></span><br><span class="line"><span class="keyword">const</span> isBtn = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isBtn</span></span><br><span class="line">&lt;div&gt;&#123; isBtn &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span> /&gt;</span></span>&#125;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; isBtn ? <span class="tag">&lt;<span class="name">Button</span> /&gt;</span> : <span class="tag">&lt;<span class="name">span</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="keyword">if</span> (isBtn) &#123; <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">Button</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Render</span> (&#123; <span class="attr">if</span>: cond, children &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> cond ? children : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">Render</span> <span class="keyword">if</span>=&#123;status === <span class="string">&#x27;loading&#x27;</span>&#125; &gt;加载&lt;/<span class="title class_">Render</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;user.firstName&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;parseInt(Math.random() * 100)&#125;年<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;formatName(this.state.user)&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表</span></span><br><span class="line">&lt;ul&gt;&#123;arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span> &#123;item&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>)&#125;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line"><span class="keyword">import</span> cn <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">CustomIcon</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type, className, active=<span class="literal">false</span>, onClick &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> cls = <span class="title function_">cn</span>(<span class="string">&#x27;custom-icon&#x27;</span>, className, <span class="string">`custom-icon**<span class="subst">$&#123;type&#125;</span>`</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;custom-icon--active&#x27;</span>: active</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&#123;cls&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CustomIcon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@C/_common&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">DeletableBlock</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, children, index, onDelete &#125; = props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;cc-delete-block&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">CustomIcon</span> <span class="attr">type</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>handleDelete(index)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">          &#123;/* 注释：子组件 */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleDelete</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="title function_">onDelete</span>(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Vite-工具"><a href="#Vite-工具" class="headerlink" title="Vite 工具"></a>Vite 工具</h2><blockquote>
<p>一个基于浏览器原生 ES imports 的开发服务器。主要原理是服务器拦截浏览器发出的 ES imports 请求并做相应处理后返回，整个过程没有对文件进行打包编译，所以热更新的速度不会随着模块增多而变慢，但是 Vite 处理的是开发模式而在生产模式则可以通过 rollup 打包。主要优点有快速冷启动服务器、即时热模块更换 HMR、真正的按需编译。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vite 搭建项目</span></span><br><span class="line">npm install vite -g</span><br><span class="line">npm init vite-app --template react</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 实现原理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  1、模块引入路径按需修改：import &#123; createApp &#125; from &#x27;<span class="doctag">@modules</span>/vue.js&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  2、浏览器发起请求：GET localhost:3000/src/main.js、/<span class="doctag">@modules</span>/vue.js</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  3、Vite 劫持包含浏览器请求并通过服务器解析处理后返回，</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite/index.js：简单实现</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; parse &#125; = <span class="built_in">require</span>(<span class="string">&#x27;es-module-lexer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MagicString</span> = <span class="built_in">require</span>(<span class="string">&#x27;magic-string&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Readable</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line"><span class="comment">// 读取 body 方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readBody</span>(<span class="params">stream</span>) &#123;    </span><br><span class="line">    <span class="keyword">if</span> (stream <span class="keyword">instanceof</span> <span class="title class_">Readable</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            stream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">                res += chunk</span><br><span class="line">            &#125;)</span><br><span class="line">            stream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// koa 中间件</span></span><br><span class="line"><span class="keyword">const</span> resolvePlugin = [  </span><br><span class="line">    <span class="comment">// 1、模块引入路径前面加 /@modules/vue，重写后浏览器会再次发送请求</span></span><br><span class="line">    <span class="function">(<span class="params">&#123; app, root &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">rewriteImports</span>(<span class="params">source</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> imports = <span class="title function_">parse</span>(source)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> ms = <span class="keyword">new</span> <span class="title class_">MagicString</span>(source);</span><br><span class="line">            <span class="keyword">if</span> (imports.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imports.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> &#123; s, e &#125; = imports[i];</span><br><span class="line">                    <span class="comment">// 应用的标识 vue  ./App.vue</span></span><br><span class="line">                    <span class="keyword">let</span> id = source.<span class="title function_">slice</span>(s, e); </span><br><span class="line">                    <span class="comment">// 不是./ 或者 /</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/^[^\/\.]/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">                        id = <span class="string">`/@modules/<span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">                        ms.<span class="title function_">overwrite</span>(s, e, id)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ms.<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">next</span>();   <span class="comment">// 静态服务</span></span><br><span class="line">            <span class="comment">// 默认会先执行 静态服务中间件 会将结果放到 ctx.body</span></span><br><span class="line">            <span class="comment">// 需要将流转换成字符串，只需要处理 js 中的引用问题</span></span><br><span class="line">            <span class="keyword">if</span> (ctx.<span class="property">body</span> &amp;&amp; ctx.<span class="property">response</span>.<span class="title function_">is</span>(<span class="string">&#x27;js&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">let</span> r = <span class="keyword">await</span> <span class="title function_">readBody</span>(ctx.<span class="property">body</span>);    <span class="comment">// vue =&gt; /@modules</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="title function_">rewriteImports</span>(r);</span><br><span class="line">                ctx.<span class="property">body</span> = result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 2. 拦截包含 /@modules/vue 的请求，然后去 node_modules 引入对应模块并返回</span></span><br><span class="line">    <span class="function">(<span class="params">&#123; app, root &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="regexp">/^\/@modules\//</span></span><br><span class="line">        app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 如果没有匹配到 /@modules/vue 就往下执行</span></span><br><span class="line">            <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(ctx.<span class="property">path</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> id = ctx.<span class="property">path</span>.<span class="title function_">replace</span>(reg, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">let</span> mapping = &#123;</span><br><span class="line">                <span class="attr">vue</span>: path.<span class="title function_">resolve</span>(root, <span class="string">&#x27;node_modules&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;@vue/runtime-dom/dist/runtime-dom.esm-browser.js&#x27;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> content = <span class="keyword">await</span> fs.<span class="title function_">readFile</span>(mapping[id], <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">            ctx.<span class="property">type</span> = <span class="string">&#x27;js&#x27;</span>;      <span class="comment">// 返回的文件是 js</span></span><br><span class="line">            ctx.<span class="property">body</span> = content;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 3. 解析.vue文件</span></span><br><span class="line">    <span class="function">(<span class="params">&#123; app, root &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ctx.<span class="property">path</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;.vue&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(root, ctx.<span class="property">path</span>);</span><br><span class="line">            <span class="keyword">const</span> content = <span class="keyword">await</span> fs.<span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">            <span class="comment">// 引入 .vue 文件解析模板</span></span><br><span class="line">            <span class="keyword">const</span> &#123; compileTemplate, parse &#125; = <span class="built_in">require</span>(path.<span class="title function_">resolve</span>(root, </span><br><span class="line">            <span class="string">&#x27;node_modules&#x27;</span>, <span class="string">&#x27;@vue/compiler-sfc/dist/compiler-sfc.cjs&#x27;</span>))</span><br><span class="line">            <span class="keyword">let</span> &#123; descriptor &#125; = <span class="title function_">parse</span>(content);</span><br><span class="line">            <span class="keyword">if</span> (!ctx.<span class="property">query</span>.<span class="property">type</span>) &#123;</span><br><span class="line">                <span class="comment">// App.vue</span></span><br><span class="line">                <span class="keyword">let</span> code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> (descriptor.<span class="property">script</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> desp = descriptor.<span class="property">script</span>.<span class="property">content</span>;</span><br><span class="line">                    code += desp.<span class="title function_">replace</span>(<span class="regexp">/((?:^|\n|;)\s*)export default/</span>, </span><br><span class="line">                    <span class="string">&#x27;$1const __script=&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (descriptor.<span class="property">template</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> reqPath = ctx.<span class="property">path</span> + <span class="string">`?type=template`</span>;</span><br><span class="line">                    code += <span class="string">`\nimport &#123;render as __render&#125; from &quot;<span class="subst">$&#123;reqPath&#125;</span>&quot;`</span>;</span><br><span class="line">                    code += <span class="string">`\n__script.render = __render`</span></span><br><span class="line">                &#125;</span><br><span class="line">                code += <span class="string">`\nexport default __script`</span></span><br><span class="line">                ctx.<span class="property">type</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">                ctx.<span class="property">body</span> = code</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ctx.<span class="property">query</span>.<span class="property">type</span> == <span class="string">&#x27;template&#x27;</span>) &#123;</span><br><span class="line">                ctx.<span class="property">type</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">                <span class="keyword">let</span> desp = descriptor.<span class="property">template</span>.<span class="property">content</span></span><br><span class="line">                <span class="comment">// 将 app.vue 中的模板 转换成 render 函数</span></span><br><span class="line">                <span class="keyword">const</span> &#123; code &#125; = <span class="title function_">compileTemplate</span>(&#123; <span class="attr">source</span>: desp &#125;); </span><br><span class="line">                ctx.<span class="property">body</span> = code;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 4. 静态服务插件 实现可以返回文件的功能</span></span><br><span class="line">    <span class="function">(<span class="params">&#123; app, root &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        app.<span class="title function_">use</span>(<span class="title function_">static</span>(root))</span><br><span class="line">        app.<span class="title function_">use</span>(<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(root, <span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createServer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line">    <span class="comment">// 创建一个用来给不同插件共享功能的上下文对象</span></span><br><span class="line">    <span class="keyword">const</span> context = &#123;     </span><br><span class="line">        app,</span><br><span class="line">        <span class="attr">root</span>: process.<span class="title function_">cwd</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行中间件</span></span><br><span class="line">    resolvePlugin.<span class="title function_">forEach</span>(<span class="function"><span class="params">plugin</span> =&gt;</span> <span class="title function_">plugin</span>(context))</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createServer</span>().<span class="title function_">listen</span>(<span class="number">4000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Dev server running at:&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">` &gt; Local: <span class="subst">$&#123;chalk.cyan(<span class="string">&#x27;http://localhost:4000/&#x27;</span>)&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h1 id="三、组件开发"><a href="#三、组件开发" class="headerlink" title="三、组件开发"></a>三、组件开发</h1><blockquote>
<p>根据功能可分为展示组件和容器组件，根据定义方式可分为函数组件和类组件，根据状态可分为无状态组件和有状态组件。React 组件使用 state 来管理自身数据并通过 props 来接收外部数据，为了实现对数据变更做出响应而采用 Class 组件并提供了生命周期和一系列 API。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于 Class 设计组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyConponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 组件数据</span></span><br><span class="line">    state = &#123; <span class="attr">counts</span>: <span class="number">0</span> &#125;</span><br><span class="line">    <span class="comment">// 响应数据变更</span></span><br><span class="line">    clickHandle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">counts</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counts</span>++ &#125;);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">onClick</span>) <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onClick</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生命周期钩子</span></span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Will mouned!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收外部数据并显示</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>Input content: &#123;props.content&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>btn click counts: &#123;this.state.counts&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clickHandle&#125;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件创建"><a href="#组件创建" class="headerlink" title="组件创建"></a>组件创建</h2><blockquote>
<p>组件名的首字母必须大写，因为 JSX 转换时会调用 <code>React.createElement(type, config, children)</code>。type 声明了元素类型：首字母大写时会被 babel 看作一个组件而传入变量，小写时则看作一个 html 标签而传入字符串。</p>
</blockquote>
<ul>
<li><strong>函数式创建无状态组件</strong>：组件不会被实例化而整体渲染性能较好(推荐尽量使用)、组件不能操作 state 而且不能访问生命周期和 this。</li>
<li><strong>ES5 原生方式已废弃</strong>：每个成员函数的 this 都会由 React 自动绑定而导致不必要的性能开销、创建组件时可以添加 mixins 属性并将可供混合的所有类的数组形式赋给它。</li>
<li><strong>ES6 创建有状态组件</strong>：成员函数需要开发者手动绑定否则会让 this 不能获取当前组件的实例对象、state 是在 constructor 中实现初始化、props 属性和默认属性作为组件类的属性并不是组件实例的属性所以使用类的静态属性配置。</li>
<li><strong>其它方式</strong>：高阶组件(一个接收原组件为参数并返回新组件的纯函数)、Hooks。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数组件：写法简洁，应尽量使用，但是功能单一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyCom</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>mycomponent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 原生</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyCom</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">    <span class="title function_">getInitialState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;Hi&#x27;</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Log&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.log&#125;</span> /&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件：官方推荐，可以维护状态变量和实现复杂功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正常写法：有 constructor 则必须有 super</span></span><br><span class="line">    <span class="comment">// super 指父类构造函数 React.Component，传参后会初始化 props</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> =  &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 简写写法</span></span><br><span class="line">    state =  &#123; <span class="attr">name</span>: <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;William&quot;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>this.state.name<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> path = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; path &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>rendering at: &#123;this.state.path&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">App</span>)</span><br></pre></td></tr></table></figure>

<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><blockquote>
<p>将事件绑定到 this。</p>
</blockquote>
<ol>
<li><strong>constructor + bind</strong>：只需要在构造函数中预先绑定一次</li>
<li><strong>render + bind</strong>：每次渲染时都需要重新绑定，存在性能问题</li>
<li><strong>ES6 箭头函数</strong>：只能在 render 添加，存在性能问题并且不能移除监听事件。</li>
<li><strong>ES7 箭头函数</strong>：ES6 优化方案，可以在 Class 中直接赋值。需要安装 babel-preset-stage-2 并配置 <code>.babelrc：&quot;presets&quot;:[&quot;react&quot;,&quot;env&quot;,&quot;stage-2&quot;]</code>。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">logMsg</span> = <span class="variable language_">this</span>.<span class="property">logMsg</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)  <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">logMsg</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    _logMsg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.logMsg&#125;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.logMsg.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.logMsg()&#125;&gt;3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this._logMsg&#125;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2>  <div align="center">
      <img src="/images/react/life_cycle.png" alt="生命周期执行顺序" width="100%">
  </div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react-v16.3 之前版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、组件挂载：组件第一次渲染到 Dom 树</span></span><br><span class="line">  constructor</span><br><span class="line">  componentWillMount</span><br><span class="line">  render</span><br><span class="line">  componentDidMount</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、组件更新：组件 state、props 变化引发的重新渲染</span></span><br><span class="line">  componentWillReceiveProps</span><br><span class="line">  shouldComponentUpdate</span><br><span class="line">  componentWillUpdate</span><br><span class="line">  render</span><br><span class="line">  componentDidUpdate</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、组件卸载：组件从 Dom 树删除</span></span><br><span class="line">  componentWillUnmount</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// react-v16.3 版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新增</span></span><br><span class="line">  <span class="comment">// 组件实例化时或 props 变化时调用，返回新对象作为新 state，返回 null 则不更新</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">nextProps, prevState</span>)&#123;&#125;</span><br><span class="line">  <span class="comment">// DOM 更新完成前被调用，返回值是 componentDidUpdate 的第三个参数</span></span><br><span class="line">  <span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params">prevProps, prevState</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 废弃</span></span><br><span class="line">  componentWillMount   <span class="comment">// 预装载函数：不能进行修改 state 的操作</span></span><br><span class="line">  componentWillReceiveProps  <span class="comment">// props 变化时调用，常用于根据新旧数据设置组件状态</span></span><br><span class="line">  componentWillUpdate  <span class="comment">// 预更新函数：此时不能修改属性和状态</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、组件挂载</span></span><br><span class="line">  constructor   <span class="comment">// 实例化：初始化 state，本地化 props，给事件处理函数绑定 this</span></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromProps</span><br><span class="line">  render        <span class="comment">// 渲染函数：不能省略并且必须有返回值 (返回 null/false 表示不渲染)</span></span><br><span class="line">  componentDidMount  <span class="comment">// 挂载完成函数：axios、事件绑定、setState 数据、操作 dom</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、组件更新</span></span><br><span class="line">  <span class="keyword">static</span> getDeriverdStateFromProps  <span class="comment">// 从 props 中获取 state</span></span><br><span class="line">  shouldComponentUpdate    <span class="comment">// 返回 true/false 表示是否更新，常用于组件性能优化</span></span><br><span class="line">  render                   <span class="comment">// 渲染</span></span><br><span class="line">  getSnapshotBeforeUpdate  <span class="comment">// 获取快照</span></span><br><span class="line">  componentDidUpdate       <span class="comment">// 更新完成函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、组件卸载</span></span><br><span class="line">  componentWillUnmount     <span class="comment">// 预销毁函数：移除定时器、事件绑定等</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、错误处理</span></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromError <span class="comment">// 从错误中获取 state</span></span><br><span class="line">  componentDidCatch        <span class="comment">// 捕获错误并进行处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="组件-API"><a href="#组件-API" class="headerlink" title="组件 API"></a>组件 API</h2><blockquote>
<p>npm install react 时加载。组件接收 props 并返回描述渲染逻辑的 React 元素，React 通过传入参数即可渲染出对应页面，这是 React 被称为声明性 API 的原因。</p>
</blockquote>
<ul>
<li><code>render</code>：class 方式创建组件时用于实例化组件(转换格式并插入到指定节点)的渲染函数，props&#x2F;state 被改变时就会重新执行，shouldComponentUpdate 返回 false 时不会执行。</li>
<li><code>state</code>：用于存储组件内部数据，更新时通过 this.setState()、useState。setState 在钩子函数和基于原生事件封装的合成事件中无法获取最新值并且在合成事件中执行多次时只会执行一次，这是因为它们的调用顺序在更新之前而且 setState 源码本身是同步的。</li>
<li><code>props</code>：继承父组件属性和方法的对外接口，数据是只读的但可以限制其类型和默认值。</li>
<li><code>Context</code>：组件树从上至下逐层自动传递的上下文对象，避免了在每个层级都需要手动传递 props。实现原理为基于生产者消费者模式创建一个包含两个组件的上下文对象：Provider (生产者：定义数据的父组件)、Consumer (消费者：使用数据的子孙组件)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、render：组件渲染</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>rendering at: &#123;this.state.path&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>  路由渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> component: 属性值是一个组件，URL、Route 匹配时就会被渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> render: 属性值是一个返回 jsx 元素的函数，方便为组件传递额外属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> children: 同上，区别是返回组件一定会渲染，不匹配时 match: null</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/foo&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;FOO&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/foo&#x27;</span> <span class="attr">render</span>=<span class="string">&#123;props</span>=&gt;</span>(</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Foo</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">data</span>=<span class="string">&#123;extraProps&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/foo&#x27;</span> <span class="attr">children</span>=<span class="string">&#123;props</span>=&gt;</span>(</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;props.match</span> ? &#x27;<span class="attr">active</span>&#x27;<span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Foo</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">data</span>=<span class="string">&#123;extraProps&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)&#125; /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyCom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">    handle (option, value)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [option]: value &#125;, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 状态更新后的回调函数，重新渲染后执行</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> this.handle(&quot;name&quot;)&#125;&gt;点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、props：传递数据和事件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Block</span> ()&#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&quot;Mary&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleDelete</span> = (<span class="params"></span>) =&gt; &#123; &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Name</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">DeletableBlock</span> <span class="attr">onDelete</span>=<span class="string">&#123;handleDelete&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Name</span> (&#123;name&#125;)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">DeletableBlock</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, onDelete &#125; = props;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> onDelete()&#125;&gt;清空<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Name</span>.<span class="property">propTypes</span> = &#123; <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span> &#125;</span><br><span class="line"><span class="title class_">Name</span>.<span class="property">defaultProps</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、Context</span></span><br><span class="line"><span class="comment">// index.js：父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./son&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;<span class="title class_">Provider</span>, <span class="title class_">Consumer</span>&#125; = <span class="title class_">React</span>.<span class="title function_">createContext</span>(<span class="string">&quot;value默认值&quot;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">&quot;context 通信&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span>&gt;</span> <span class="tag">&lt;<span class="name">Son</span> /&gt;</span> <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// son.js：子组件、孙组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Consumer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span>&#123;name=&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件接收：&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;<span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="五、路由功能"><a href="#五、路由功能" class="headerlink" title="五、路由功能"></a>五、路由功能</h1><blockquote>
<p>react-router-4.0 (以下简称 RR4) 采用单代码仓库模型架构，包含了若干相互独立的包。注意：react-router-dom&#x2F;native 已经包含了 react-router 的依赖，使用时不需要安装和引用 react-router。</p>
</blockquote>
<ul>
<li><strong>react-router</strong>：核心公用组件和方法。具体有：MemoryRouter、Prompt、Redirect、Route、RouterStaticRouter、 Switch、matchPath、withRouter。</li>
<li><strong>react-router-dom</strong>：用于 web 环境开发，提供了 dom 操作控制路由的主要方法有 BrowserRouter、 HashRouter、 Link 、NavLink。</li>
<li><strong>react-router-native</strong>：用于给 native 相关应用提供路由支持，主要有 NativeRouter、 Link、 DeepLinkingAndroidBackButton。</li>
<li><strong>react-router-redux</strong>：React Router 和 Redux 的集成。</li>
<li><strong>react-router-config</strong>：集中配置静态路由，主要有 matchRoutes、renderRoutes。</li>
</ul>
<h2 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h2><blockquote>
<p>所有与路由有关的组件（Link、NavLink、Route、Switch）必须包裹在容器组件中，容器组件有且只能有一个子元素。</p>
</blockquote>
<ul>
<li>容器组件<ul>
<li><strong>BrowserRouter</strong>：浏览器的路由组件，利用 HTML5 的 history API (pushState、replaceState 和 popstate 事件) 来同步 URL、UI。需要添加服务器配置 (node&#x2F;nginx)，让前端请求映射到对应的 html。</li>
<li><strong>HashRouter</strong>：使用 URL hash (window.location.hash) 方式在前端完成路由切换。<code>#</code> 后面的内容不会发送到服务器端，路由地址对于后端始终不变。</li>
<li><strong>MemoryRouter</strong>：内存路由组件，在内存中管理 URL history，主要用于 ReactNative 这种非浏览器的环境。</li>
<li><strong>StaticRouter</strong>：地址不改变的静态路由组件，主要用于服务端渲染。</li>
<li><strong>NativeRouter</strong>：Native 的路由组件。</li>
</ul>
</li>
<li>相关组件<ul>
<li><strong>Link</strong>：react-router 提供，用于点击时链接到某路径。</li>
<li><strong>NavLink</strong>：Link 的加强版，可以自定义选中状态和钩子函数。</li>
<li><strong>Switch</strong>：用于嵌套 Route 组件，多个路径相同时只匹配第一个。</li>
<li><strong>Route</strong>：用于实现 RR4 动态路由的嵌套。</li>
<li><strong>Redirect</strong>：用于重定向到某路径。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">BrowserRouter</span> </span><br><span class="line">    basename=<span class="string">&quot;/admin&quot;</span>     <span class="comment">// 路由器的默认根路径</span></span><br><span class="line">    forceRefresh=&#123;<span class="literal">false</span>&#125;  <span class="comment">// 布尔类型，导航时是否刷新整个页面</span></span><br><span class="line">    keyLength=&#123;<span class="number">12</span>&#125;        <span class="comment">// location.key 的长度，默认 6</span></span><br><span class="line">    getUserConfirmation=&#123;getConfirmation&#125;  <span class="comment">// 导航需要确认时执行的函数</span></span><br><span class="line">&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span></span>   <span class="comment">// 渲染为 &lt;a href=&quot;/admin/home&quot;&gt;</span></span><br><span class="line">&lt;/<span class="title class_">BrowserRouter</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖当前路径</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;true&#125;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span> </span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">pathname:</span> &#x27;/<span class="attr">courses</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">search:</span> &#x27;?<span class="attr">sort</span>=<span class="string">name</span>&#x27;,  // <span class="attr">下个页面取值</span>：<span class="attr">props.location.state</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">hash:</span> &#x27;#<span class="attr">the-hash</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">state:</span> &#123; <span class="attr">fromDashboard:</span> <span class="attr">true</span> &#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125;&#125;/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 event id 为奇数的时候，激活链接</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">activeEvent</span> = (<span class="params">match, location</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!match) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> eventID = <span class="built_in">parseInt</span>(match.<span class="property">params</span>.<span class="property">eventID</span>)</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(eventID) &amp;&amp; eventID % <span class="number">2</span> === <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">NavLink</span></span><br><span class="line">    to=<span class="string">&quot;/home?ask&quot;</span> </span><br><span class="line">    exact  <span class="comment">// 是否严格匹配</span></span><br><span class="line">    activeClassName=<span class="string">&quot;selected&quot;</span> </span><br><span class="line">    activeStyle=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;green&#x27;</span>, <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span> &#125;&#125;</span><br><span class="line">    isActive=&#123;activeEvent&#125;  <span class="comment">// 判断链接是否激活的额外逻辑</span></span><br><span class="line">&gt;问答&lt;/<span class="title class_">NavLink</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">exact</span>                // <span class="attr">是否完全匹配</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">strict</span>               // <span class="attr">path</span> <span class="attr">有结尾斜线只能匹配有斜线的路径</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">path</span>=<span class="string">&quot;/peoples/&quot;</span>     // <span class="attr">路由匹配路径</span> (<span class="attr">不能匹配</span> /<span class="attr">peoples</span>)</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">component</span>=<span class="string">&#123;Peoples&#125;</span>  // <span class="attr">URL</span>、<span class="attr">Route</span> <span class="attr">匹配时渲染的组件</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span><span class="tag">&lt;<span class="name">Route</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* 进入客户管理页面，默认展示 List 区域内容，或者使用重定向 */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/custom&#x27;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/custom/list&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;List&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/custom/create&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Create&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/custom/Detail/:id&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/* <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">&#x27;/custom&#x27;</span> <span class="attr">to</span>=<span class="string">&#x27;/custom/list&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">Redirect</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathname:</span> &#x27;/<span class="attr">log</span>&#x27;, <span class="attr">search:</span> &#x27;?<span class="attr">name</span>=<span class="string">a</span>&#x27;, <span class="attr">state:</span>&#123;<span class="attr">id:</span> <span class="attr">1</span>&#125; &#125;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="路由对象"><a href="#路由对象" class="headerlink" title="路由对象"></a>路由对象</h2><blockquote>
<p>被 Route 绑定的渲染组件，总是被传入三个属性（对象）：history、location、match。在渲染组件中也会有很多其他组件，这些组件内部如果想要获取三个对象，需要 withRouter（通过装饰器或函数调用的形式都可以）。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// history：用于编程式导航</span></span><br><span class="line"><span class="keyword">let</span> &#123; history &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">history.<span class="title function_">push</span>()       <span class="comment">// 追加一条记录   </span></span><br><span class="line">history.<span class="title function_">replace</span>()    <span class="comment">// 不会追加记录   </span></span><br><span class="line">history.<span class="title function_">goback</span>()     <span class="comment">// 回退</span></span><br><span class="line">history.<span class="title function_">goforward</span>()  <span class="comment">// 前进</span></span><br><span class="line">history.<span class="title function_">go</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment">// loaction：指当前位置</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">location</span>: &#123; pathname, search, state&#125; &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;location&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NaviveLink</span> <span class="attr">to</span>=<span class="string">&#123;location&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;location</span> /&gt;</span></span></span><br><span class="line">history.<span class="title function_">push</span>(location)</span><br><span class="line">history.<span class="title function_">replace</span>(location)</span><br><span class="line"></span><br><span class="line"><span class="comment">// match：包含了路由匹配的信息</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">match</span>: &#123; params &#125; &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">id</span>)</span><br></pre></td></tr></table></figure>


<h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><blockquote>
<p>不推荐：localstroage、redux（页面刷新后会丢失数据）。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、params</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&#x27;/user/:id&#x27;</span> component=&#123;<span class="title class_">User</span>&#125; /&gt;  <span class="comment">// 路由设置</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/user/2&#x27;</span> /&gt;</span></span>                 <span class="comment">// 传值一</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&quot;/user/2&quot;</span>);   <span class="comment">// 传值2二</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>.<span class="property">id</span>     <span class="comment">// 获取值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、URL参数</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&#x27;/user&#x27;</span> component=&#123;<span class="title class_">User</span>&#125; /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/user?id=2&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、location 对象（哈希路由不支持）</span></span><br><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&#x27;/user&#x27;</span> component=&#123;<span class="title class_">User</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27; /<span class="attr">u</span>&#x27;, <span class="attr">state:</span> &#123;<span class="attr">id:1</span>&#125;, <span class="attr">search:</span>&#x27;?<span class="attr">sort</span>=<span class="string">a</span>&#x27;, <span class="attr">hash:</span>&#x27;#<span class="attr">h</span>&#x27;&#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure>


<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><ul>
<li><strong>静态路由</strong>：在应用渲染前的初始化阶段配置好路由信息，应用于 RR4 之前的版本。</li>
<li><strong>动态路由</strong>：随着应用渲染而起作用，无需事先配置路由。核心设计理念是一切都是组件，这更符合 React 组件化的思想。</li>
<li><strong>嵌套路由</strong>：Route 渲染的组件内部定义新的 Route，实现页面的局部变换，比如说标题栏不变，内容根据路由引入不同模块。</li>
<li><strong>响应式路由</strong>：手机端访问 &#x2F;admin，竖屏模式下只展示导航栏，横屏时展示导航栏和内容。PC 端根据屏幕大小展示不同内容。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm i react-router-dom -S</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态路由</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/detail/:id&quot;</span> <span class="attr">exact</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套路由</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params">&#123; match &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;match.url</span> + &#x27;/<span class="attr">other</span>&#x27;&#125; <span class="attr">component</span>=<span class="string">&#123;Other&#125;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 路由重定向</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">render</span>=<span class="string">&#123;()</span>=&gt;</span> ( <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span> /&gt;</span>) &#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span> </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式路由</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">AppLayout</span>&gt;</span> <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/admin&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Admin&#125;</span> /&gt;</span> <span class="tag">&lt;/<span class="name">AppLayout</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Admin</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Nav</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Media</span> <span class="attr">query</span>=<span class="string">&#123;PRETTY_SMALL&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;screenIsSmall =&gt; screenIsSmall</span></span><br><span class="line"><span class="language-xml">        ? <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/admin/dashboard&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Dashboard&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/admin/other&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Other&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        : <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/admin/dashboard&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Dashboard&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/admin/other&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Other&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">&quot;/admin&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/admin/dashboard&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Media</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h1 id="六、状态管理"><a href="#六、状态管理" class="headerlink" title="六、状态管理"></a>六、状态管理</h1><blockquote>
<p>将组件之间的共享数据抽取出来进行统一管理，通过约定规则更新而实现可预测的状态更新。</p>
</blockquote>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote>
<p>实现组件和子孙组件之间跨层级通信，React 原生支持的状态管理方案。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NotesContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [notes, setNotes] = <span class="title function_">useState</span>([])</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createNote</span>(<span class="params">note</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> notesArray = [...notes, note]</span><br><span class="line">        <span class="title function_">setNotes</span>(notesArray)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">NotesContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">notes</span>, <span class="attr">createNote</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">NotesContext.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;notes, createNote&#125; = <span class="title function_">useContext</span>(<span class="title class_">NotesContext</span>);</span><br><span class="line">    <span class="keyword">const</span> [input, setInput] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onCreateNote</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">createNote</span>(input)</span><br><span class="line">        <span class="title function_">setInput</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My notes app<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onCreateNote&#125;</span>&gt;</span>Create Note<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>setInput(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123; notes.map(note =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;note&#125;</span>&gt;</span>Note: &#123;note&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-Query"><a href="#React-Query" class="headerlink" title="React-Query"></a>React-Query</h2><blockquote>
<p>React 获取、缓存和更新服务器数据的 hooks，为轻交互重数据的业务场景提供了极大便利。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据请求</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 后端返回数据</span></span><br><span class="line">    <span class="keyword">const</span> [zen, setZen] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 加载状态</span></span><br><span class="line">    <span class="keyword">const</span> [isLoading, setIsLoading] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 是否申请胜利</span></span><br><span class="line">    <span class="keyword">const</span> [isError, setIsError] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 后端返回的错误信息</span></span><br><span class="line">    <span class="keyword">const</span> [errorMessage, setErrorMessage] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setIsLoading</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.github.com/zen&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="keyword">async</span> (res) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; message &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">text</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">text: string</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">            <span class="title function_">setIsError</span>(<span class="literal">false</span>);</span><br><span class="line">            <span class="title function_">setZen</span>(text);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">setIsLoading</span>(<span class="literal">false</span>);</span><br><span class="line">          <span class="title function_">setIsError</span>(<span class="literal">true</span>);</span><br><span class="line">          <span class="title function_">setErrorMessage</span>(error.<span class="property">message</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">fetchData</span>();   <span class="comment">// 初始化申请数据</span></span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Zen from Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;isLoading ? &#x27;加载中&#x27; : isError ? errorMessage : zen&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;!isLoading &amp;&amp; (<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;fetchData&#125;</span>&gt;</span>&#123;isError ? &#x27;重试&#x27; </span></span><br><span class="line"><span class="language-xml">            : &#x27;刷新&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react-query：简单接口</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.github.com/zen&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">async</span> (res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; message &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">text</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> <span class="variable">useQuery</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  queryKeys：查询的唯一标识，string/array/object (数组可加依赖项)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  queryFunc：异步查问函数，组件实例化第一次执行和依赖项更新时重新执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@prame</span>  options：内置功能的配置项，比如错误重试、缓存过期、网络恢复时查询等</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">const</span> zenQuery = <span class="title function_">useQuery</span>([<span class="string">&#x27;zen&#x27;</span>], fetchData);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Zen from Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;zenQuery.isLoading || zenQuery.isFetching</span></span><br><span class="line"><span class="language-xml">                  ? &#x27;加载中...&#x27;</span></span><br><span class="line"><span class="language-xml">                  : zenQuery.isError</span></span><br><span class="line"><span class="language-xml">                  ? zenQuery.error?.message</span></span><br><span class="line"><span class="language-xml">                  : data&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;!zenQuery.isLoading &amp;&amp; !zenQuery.isFetching &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; zenQuery.refetch() &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                  &#123;zenQuery.isError ? &#x27;重试&#x27; : &#x27;刷新&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// react-query：复杂接口</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params">&#123; queryKey &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [, owner, repo] = queryKey;</span><br><span class="line">    <span class="comment">// queryKey 指查询依赖项，每次修改时就会触发接口重新请求</span></span><br><span class="line">    <span class="comment">// https://api.github.com/repos/facebook/react/issues</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`https://api.github.com/repos/<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;repo&#125;</span>/issues`</span>, &#123;</span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="title class_">Authorization</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">async</span> (res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; message &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [inputOwner, setInputOwner] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;facebook&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> [inputRepo, setInputRepo] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="string">&#x27;react&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> [queryKey, setQueryKey]= <span class="title class_">React</span>.<span class="title function_">useState</span>([inputOwner, inputRepo])</span><br><span class="line">    <span class="keyword">const</span> issueQuery = <span class="title function_">useQuery</span>([<span class="string">&#x27;issues&#x27;</span>, ...queryKey], fetchData);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>仓库：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">owner</span>&#x27;&#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;inputOwner&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputOwner(e.target.value)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;<span class="attr">repo</span>&#x27;&#125; </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;inputRepo&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setInputRepo(e.target.value)&#125; </span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>&#123; setQueryKey([inputOwner, inputRepo]) &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                查看最新issue信息</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>仓库&#123;queryKey[0]&#125;/&#123;queryKey[1]&#125;最新issue信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;issueQuery.isLoading</span></span><br><span class="line"><span class="language-xml">                      ? &#x27;加载中...&#x27;</span></span><br><span class="line"><span class="language-xml">                      : issueQuery.isError</span></span><br><span class="line"><span class="language-xml">                      ? issueQuery.message</span></span><br><span class="line"><span class="language-xml">                      : JSON.stringify(issueQuery.data[0])&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><blockquote>
<p>基于 Flux 架构单向数据流思想和函数式编程模式而构建状态容器，主要特点为：<code>store 单一数据源</code> (状态存储在唯一的树状对象)、<code>state 只读</code> (纯函数返回新值并不会改变旧值)、<code>reducer 纯函数同步更新</code> (纯函数：输入输出相同类型，不改参数，不依赖外部变量和方法)。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 核心概念</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> store：存储状态和更新规则的唯一树状结构对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> action：描述用户行为的对象，type 属性表示执行的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> reducer：同步更新状态的纯函数</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createSageMiddleware <span class="keyword">from</span> <span class="string">&#x27;redux-saga&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mySaga <span class="keyword">from</span> <span class="string">&quot;./views/sagas/sagas.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123; </span><br><span class="line">    <span class="attr">INCREASE</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;INCREASE&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">DECREASE</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;DECREASE&quot;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">countReducer</span> = (<span class="params">state=&#123; count: <span class="number">0</span> &#125;, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> actions.<span class="property">INCREASE</span>.<span class="property">type</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="keyword">case</span> actions.<span class="property">DECREASE</span>.<span class="property">type</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">tabReducer</span> = (<span class="params">state=&#123; show: <span class="literal">false</span> &#125;, action</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> newState = &#123;...pre&#125;   </span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;yes&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;  </span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123; countReducer, tabReducer &#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logger</span> = store =&gt; <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123; <span class="comment">// 函数柯里化</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(action.<span class="property">type</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(action));</span><br><span class="line">    <span class="title function_">next</span>(action);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> saga = <span class="title function_">createSageMiddleware</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> <span class="variable">API</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> createStore：创建容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> getState：获取最新状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> dispatch：触发同步更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> subscribe：监听更新</span></span><br><span class="line"><span class="comment">**/</span> </span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer, applyMiddleware[logger, thunk, saga]);</span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>());</span><br><span class="line">&#125;);</span><br><span class="line">store.<span class="title function_">dispatch</span>(actions.<span class="property">INCREASE</span>);</span><br><span class="line"><span class="title function_">unsubscribe</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 中间件：dispatch 方法的封装和升级</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">redux</span>-thunk：返回函数时会替代 dispatch 实现异步</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">redux</span>-saga：统一管理所有异步操作，可代替 redux-thunk</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">increaseAsync</span> = (<span class="params"></span>) =&gt; <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(actions.<span class="property">INCREASE</span>), <span class="number">2000</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getHttpAction</span> = (<span class="params">url, func</span>) =&gt; <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> action = <span class="title function_">func</span>(res.<span class="property">data</span>)</span><br><span class="line">        <span class="title function_">dispatch</span>(action)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">saga.<span class="title function_">run</span>(mySaga);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// sagas.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; takeEvery &#125; <span class="keyword">from</span> <span class="string">&quot;redux-saga/effects&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>*()&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;increaseAsync&quot;</span>, <span class="keyword">function</span>*() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;redux-saga&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react-redux：针对 react 组件语法开发的 redux 简化版本</span></span><br><span class="line"><span class="comment">// index.js：通过 provider 为后代组件 store (此处为全局)</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span>, useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore, createReducer, combineReducers&#125; </span><br><span class="line"><span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> [input, setInput] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> notes = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">notes</span>)</span><br><span class="line">    <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onCreateNote</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;CREATE_NOTE&#x27;</span>, <span class="attr">note</span>: input &#125;)</span><br><span class="line">        <span class="title function_">setInput</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My notes app<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onCreateNote&#125;</span>&gt;</span>Create Note<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>setInput(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123; notes.map(note =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;note&#125;</span>&gt;</span>Note: &#123;note&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> notesReducer = <span class="title function_">createReducer</span>([], &#123;</span><br><span class="line">    <span class="string">&#x27;CREATE_NOTE&#x27;</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> [...state, action.<span class="property">note</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> reducers = <span class="title function_">combineReducers</span>(&#123; <span class="attr">notes</span>: notesReducer &#125;)</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123; <span class="attr">reducer</span>: reducers &#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Main</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ReduxPage.js：通过 connect 对象为组件提供状态和更新方法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReduxPage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; num, add, minus &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ReduxPage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;minus&#125;</span>&gt;</span>minus<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = state =&gt; &#123;  <span class="comment">// 状态映射</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">num</span>: state &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;     <span class="comment">// 派发事件映射</span></span><br><span class="line">    <span class="attr">add</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">minus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&quot;minus&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">ReduxPage</span>);</span><br></pre></td></tr></table></figure>


<h2 id="MobX"><a href="#MobX" class="headerlink" title="MobX"></a>MobX</h2><blockquote>
<p>基于 Flux 单向数据流思想填补了 Redux 对概念约束太强而失去灵活性的空缺，适合中小型项目。主要特点有 <code>state 可变</code>(直接操作而没有回退能力)、<code>多个数据源</code>(划分多个模块而不利于维护)、<code>面向对象编程</code>(将状态包装成可观察对象)、<code>响应式编程</code>(声明变化的联动关系)。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm install mobx mobx-react-lite</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react-lite&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; makeAutoObservable &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoteStore</span> &#123;</span><br><span class="line">    notes = []</span><br><span class="line">    <span class="title function_">createNote</span>(<span class="params">note</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">notes</span> = [...<span class="variable language_">this</span>.<span class="property">notes</span>, note]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">makeAutoObservable</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Notes</span> = <span class="keyword">new</span> <span class="title class_">NoteStore</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = <span class="title function_">observer</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [input, setInput] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123; notes &#125; = <span class="title class_">Notes</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onCreateNote</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Notes</span>.<span class="title function_">createNote</span>(input)</span><br><span class="line">        <span class="title function_">setInput</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onCreateNote&#125;</span>&gt;</span>Create Note<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>setInput(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123; notes.map(note =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;note&#125;</span>&gt;</span>Note: &#123;note&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>

<h2 id="XState"><a href="#XState" class="headerlink" title="XState"></a>XState</h2><blockquote>
<p>试图解决现代页面复杂性的问题，并且依赖于有限状态机的思想和实现。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm install xstate @xstate/react</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useService &#125; <span class="keyword">from</span> <span class="string">&#x27;@xstate/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Machine</span>, assign, interpret &#125; <span class="keyword">from</span> <span class="string">&#x27;xstate&#x27;</span></span><br><span class="line"><span class="keyword">const</span> notesMachine = <span class="title class_">Machine</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;notes&#x27;</span>,</span><br><span class="line">    <span class="attr">initial</span>: <span class="string">&#x27;ready&#x27;</span>,</span><br><span class="line">    <span class="attr">context</span>: &#123; <span class="attr">notes</span>: [], <span class="attr">note</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">states</span>: &#123; <span class="attr">ready</span>: &#123;&#125; &#125;,</span><br><span class="line">    <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="string">&quot;CHANGE&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">actions</span>: [</span><br><span class="line">                <span class="title function_">assign</span>(&#123; <span class="attr">note</span>: <span class="function">(<span class="params">_, event</span>) =&gt;</span> event.<span class="property">value</span> &#125;)</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;CREATE&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">actions</span>: [</span><br><span class="line">                <span class="title function_">assign</span>(&#123;</span><br><span class="line">                    <span class="attr">note</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="attr">notes</span>: <span class="function"><span class="params">context</span> =&gt;</span> [...context.<span class="property">notes</span>, context.<span class="property">note</span>]</span><br><span class="line">                &#125;)</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> service = <span class="title function_">interpret</span>(notesMachine).<span class="title function_">start</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, send] = <span class="title function_">useService</span>(service)</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">context</span>: &#123; note, notes&#125; &#125; = state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>send(&#123;type: &#x27;CREATE&#x27;&#125;)&#125;&gt;Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;note&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> send(&#123; type: &#x27;CHANGE&#x27;, </span></span><br><span class="line"><span class="language-xml">            value: e.target.value&#125;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123; notes.map(note =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;note&#125;</span>&gt;</span>Note: &#123;note&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Recoil"><a href="#Recoil" class="headerlink" title="Recoil"></a>Recoil</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm install recoil</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RecoilRoot</span>, atom, useRecoilState &#125; <span class="keyword">from</span> <span class="string">&#x27;recoil&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> notesState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;notesState&#x27;</span>,</span><br><span class="line">    <span class="attr">default</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">RecoilRoot</span>&gt;</span> <span class="tag">&lt;<span class="name">App</span> /&gt;</span> <span class="tag">&lt;/<span class="name">RecoilRoot</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [notes, setNotes] = <span class="title function_">useRecoilState</span>(notesState);</span><br><span class="line">    <span class="keyword">const</span> [input, setInput] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createNote</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> notesArray = [...notes, input]</span><br><span class="line">        <span class="title function_">setNotes</span>(notesArray)</span><br><span class="line">        <span class="title function_">setInput</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;createNote&#125;</span>&gt;</span>Create Note<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span>=&gt;</span>setInput(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            &#123; notes.map(note =&gt; <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;note&#125;</span>&gt;</span>Note: &#123;note&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Dva"><a href="#Dva" class="headerlink" title="Dva"></a>Dva</h2><blockquote>
<p>一个为了简化开发基于 redux、redux-saga 实现的数据流方案，可以看作是一个轻量级的应用框架：<code>dva = react-router + redux + redux-saga</code>。model 对象上定义了所有的应用逻辑并通过 namespace 区分，通过 state 存储数据，通过 subsciprtions 实现监听，通过 effect 发起异步操作，通过 reducer 执行同步操作，</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install dva-cli -g</span><br><span class="line">dva <span class="keyword">new</span> dva-quickstart</span><br><span class="line">cd dva-quickstart</span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">dva</span>();    <span class="comment">// Initialize</span></span><br><span class="line"><span class="comment">// app.use(&#123;&#125;);       // Plugins</span></span><br><span class="line"><span class="comment">// app.model(require(&#x27;./models/example&#x27;).default);  // Model</span></span><br><span class="line">app.<span class="title function_">router</span>(<span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>).<span class="property">default</span>);   <span class="comment">// Router</span></span><br><span class="line">app.<span class="title function_">start</span>(<span class="string">&#x27;#root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面连接 redux</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./IndexPage.css&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IndexPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.normal&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">IndexPage</span>.<span class="property">propTypes</span> = &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>()(<span class="title class_">IndexPage</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.model 对象定义了所有的应用逻辑</span></span><br><span class="line"><span class="keyword">import</span> &#123;routerRedux&#125; <span class="keyword">from</span> <span class="string">&#x27;dva/router&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespace</span>: <span class="string">&#x27;example&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">subscriptions</span>: &#123;</span><br><span class="line">        <span class="title function_">setup</span>(<span class="params">&#123; dispatch, history &#125;</span>) &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">effects</span>: &#123;</span><br><span class="line">        *<span class="title function_">fetch</span>(<span class="params">&#123; payload &#125;, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;save&#x27;</span> &#125;);</span><br><span class="line">            <span class="keyword">yield</span>.<span class="title function_">put</span>(routerRedux.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>: &#123;</span><br><span class="line">        <span class="title function_">save</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, ...action.<span class="property">payload</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序项目开发</title>
    <url>/2019/08/03/9-2-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、项目初始化"><a href="#一、项目初始化" class="headerlink" title="一、项目初始化"></a>一、项目初始化</h1><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><ol>
<li>注册账号：<a href="https://mp.weixin.qq.com/">微信公众平台</a></li>
<li>调试工具：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140">微信 web 开发者工具</a></li>
<li>创建项目<br>* 登录开发工具：选择小程序项目、选择路径、填入注册的小程序 AppID、点击创建。<br>* 编译预览：可以点击编译按钮在工具的左侧模拟器界面查看效果，也可以点击预览按钮在手机查看。</li>
<li>学习资料<br>* <a href="https://developers.weixin.qq.com/miniprogram/dev/">微信小程序官方文档</a><br>* <a href="https://www.w3cschool.cn/weixinapp/">W3CSchool 小程序</a><br>* <a href="https://www.cnblogs.com/softwyy/p/8948416.html">特殊效果合集</a></li>
</ol>
<h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><blockquote>
<p>以下为完善后的目录，注意 json 文件不能添加任何注释</p>
</blockquote>
<ul>
<li>通过 <code>JSON</code> 表现应用的配置信息<ul>
<li><code>app.json</code>：全局配置</li>
<li><code>page.json</code>：页面配置</li>
<li><code>project.config.json</code>：开发工具读取</li>
</ul>
</li>
<li>通过 <code>CSS、XML</code> 实现视图层的描述</li>
<li>通过 <code>JavaScript</code> 语言实现逻辑层结构</li>
<li>架构在视图层和逻辑层之间提供 <code>数据和事件传输功能</code></li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">testapp</span><br><span class="line">  ├─ constants    <span class="comment">// 项目中的常亮</span></span><br><span class="line">  ├─ services     <span class="comment">// 接口目录</span></span><br><span class="line">  ├─ image        <span class="comment">// 图片资源</span></span><br><span class="line">  ├─ utils        <span class="comment">// 工具函数目录：公共的 js 方法和库文件</span></span><br><span class="line">      └─ util.<span class="property">js</span></span><br><span class="line"></span><br><span class="line">  ├─ components   <span class="comment">// 组件目录：自定义封装的可复用组件</span></span><br><span class="line">    ├─ menu          </span><br><span class="line">    └─ collapse</span><br><span class="line"></span><br><span class="line">  ├─ pages        <span class="comment">// 页面目录：可以删除或自定义配置，新建文件需要在 app.json 声明</span></span><br><span class="line">      ├─ index            <span class="comment">// 首页</span></span><br><span class="line">          ├─ index.<span class="property">js</span>            <span class="comment">// 页面交互、跳转、数据渲染逻辑</span></span><br><span class="line">          ├─ index.<span class="property">json</span>          <span class="comment">// 首页自定义配置信息 (可选)</span></span><br><span class="line">          ├─ index.<span class="property">wxml</span>          <span class="comment">// 首页视图文件 </span></span><br><span class="line">          └─ index.<span class="property">wxss</span>          <span class="comment">// 首页样式文件</span></span><br><span class="line">      └─ logs            <span class="comment">// 日志页面</span></span><br><span class="line"></span><br><span class="line">  ├─ app.<span class="property">js</span>    <span class="comment">// 入口文件，生成小程序实例，通过 App() 定义全局变量、监听生命周期函数等 </span></span><br><span class="line">  ├─ app.<span class="property">wxss</span>  <span class="comment">// 公共样式代码，用于项目的字体、颜色等页面和标签的基础样式，类似 CSS </span></span><br><span class="line">  ├─ app.<span class="property">json</span>  <span class="comment">// 全局配置文件，包括项目的页面引入、导航条颜色和标题等具体的代码开发配置</span></span><br><span class="line">  └─ project.<span class="property">config</span>.<span class="property">json</span>  <span class="comment">// 项目配置文件，包括代码的打包、压缩等，类似 package.json</span></span><br></pre></td></tr></table></figure>


<h1 id="二、插件功能"><a href="#二、插件功能" class="headerlink" title="二、插件功能"></a>二、插件功能</h1><blockquote>
<p>插件是可以被添加到小程序内直接使用的功能组件，它不能独立运行和预览，只能嵌入到其他小程序中使用。开发者可以直接在小程序内使用插件，无需重复开发，为用户提供更丰富的服务。</p>
</blockquote>
<ul>
<li>目前插件开发的开放范围还是企业、媒体或其他组织，暂时不支持个人。</li>
<li>插件对标一个微服务，开发插件必须有 appid，所以一个小程序只能开发一个插件。</li>
<li>开通插件时的插件名称和图片确定后是不允许修改的。</li>
<li>目前没有插件可供搜索的地方，期待微信的插件商城的出现。</li>
<li>插件发布需要通过微信审核(较严格)，插件支持多个线上版本的同时存在。</li>
<li>插件的使用需要申请，插件开发者同意后，使用方可以接入使用插件。</li>
</ul>
<h2 id="区别-NPM-依赖"><a href="#区别-NPM-依赖" class="headerlink" title="区别 NPM 依赖"></a>区别 NPM 依赖</h2><blockquote>
<p>相同点是都不能独立运行</p>
</blockquote>
<ul>
<li>插件必须由腾讯审核通过才能使用（NPM 无需腾讯审核）。</li>
<li>使用第三方插件必须向第三方申请 （通过 NPM 使用第三方库无需向第三方申请）。</li>
<li>插件拥有独立的 API 接口和域名列表，不被小程序本身的域名列表限制。（NPM 依赖库不能进行第三方数据请求）。</li>
</ul>
<h2 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><blockquote>
<p>官网开通插件功能、开发者工具、新建项目、开发模式为插件</p>
</blockquote>
<ul>
<li>项目目录<ul>
<li>plugin：插件代码目录</li>
<li>miniprogram ：调试插件的小程序</li>
</ul>
</li>
</ul>
<h1 id="三、常用功能"><a href="#三、常用功能" class="headerlink" title="三、常用功能"></a>三、常用功能</h1><h2 id="登录授权"><a href="#登录授权" class="headerlink" title="登录授权"></a>登录授权</h2><h3 id="登录方式"><a href="#登录方式" class="headerlink" title="登录方式"></a>登录方式</h3><blockquote>
<p>目前前两种方式在 Web 应用中比较常见，在微信小程序中同样可以使用，但是需要注意的是：小程序中没有 Cookie 的机制，所以在使用这 2 种方式前，请确认你们或第三方的 API 是否需要依赖 Cookie。还有小程序中也不支持 HTML 页面，那些需要使用页面重定向来进行登录的第三方 API 就需要改造或不能用了。下面主要来讨论一下第三种方式，因为这种方式和微信平台结合最紧密，用户体验比较好。</p>
</blockquote>
<ul>
<li>自有的账号注册和登录</li>
<li>使用其他第三方平台账号登录</li>
<li>使用微信账号登录：即直接使用当前已登录的微信账号来作为小程序的用户进行登录</li>
</ul>
<h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><blockquote>
<p>只有首次登录时才会执行完整流程，小程序客户端并不需要知道 <code>session_key、openid</code>，它只需要保存 <code>3rd_session</code> 并在每次请求时在请求头携带即可。注意同一个用户在同一个微信开放平台下的相同主体的应用对应着 <code>相同的 userid、unionid 和不同的 openid</code>。</p>
</blockquote>
<ul>
<li>实现流程<ul>
<li>小程序客户端调用 wx.login() 获取当前登录微信用户的临时登录凭证 code </li>
<li>开发者服务器接收客户端发送的 code 并向微信服务器换取该微信用户的唯一标识 (openid) 和会话密钥 (session_key)</li>
<li>小程序客户端保存开发者服务器通过算法生成的 3rd_session (有超时时间)，并把它放到每次请求的请求头进行权限验证</li>
</ul>
</li>
<li>参数说明<ul>
<li><strong>code</strong>：只能使用一次的临时登录凭证，有过期时间</li>
<li><strong>3rd_session</strong>：通过操作系统的随机数算法生成的新 session</li>
<li><strong>openid</strong>：普通用户的标识。对于每个公众号，每个用户的 openid 都是唯一的</li>
<li><strong>unionid</strong>：用户在开放平台的唯一标识符。对于同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 unionid 是唯一的。</li>
<li><strong>userid</strong>：应用后台都有一个用户表，每个用户对应不同的 userid。用户登录时通过 unionid 去判断是不是同一个用户并去关联用户表，然后获取对应的 userid。</li>
</ul>
</li>
</ul>
  <div align="center">
      <img src="/images/webchat/applet_login.png" alt="小程序登录流程" width="100%">
  </div>


<h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><blockquote>
<p>执行顺序：<code>app.onLaunch、page.onLoad</code></p>
</blockquote>
<ul>
<li><code>wx.getUserInfo</code>：首次登录时调用，该接口需要用户授权</li>
<li><code>wx.login</code>：已关注过公众号或已经授权登录过小程序时调用</li>
</ul>
<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> code = res.<span class="property">code</span>;</span><br><span class="line">        <span class="comment">// 发送 res.code 到后台换取 openId、sessionKey、unionId</span></span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="comment">// url: API_URL,</span></span><br><span class="line">          <span class="attr">data</span>: &#123; <span class="attr">code</span>: code &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    wx.<span class="title function_">getSetting</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">authSetting</span>[<span class="string">&#x27;scope.userInfo&#x27;</span>]) &#123;</span><br><span class="line">          <span class="comment">// 已经授权，则可以直接调用 getUserInfo 获取头像昵称，不会弹框</span></span><br><span class="line">          wx.<span class="title function_">getUserInfo</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 可以将 res 发送给后台解码出 unionId</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">userInfo</span> = res.<span class="property">userInfo</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">               * userInfoReadyCallback</span></span><br><span class="line"><span class="comment">               *     index.js onload 中定义</span></span><br><span class="line"><span class="comment">               *     因为 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class="line"><span class="comment">               *     作用是保证页面的 userInfo 被正确赋值，无论用户信息在页面加载完成之前还是之后返回</span></span><br><span class="line"><span class="comment">              **/</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userInfoReadyCallback</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">userInfoReadyCallback</span>(res)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">globalData</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">bindgetuserinfo</span>=<span class="string">&quot;getUserInfo&quot;</span>&gt;</span> </span><br><span class="line">    获取头像昵称 </span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">userInfo</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">hasUserInfo</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 判断小程序的 API、回调、参数、组件等是否在当前版本可用</span></span><br><span class="line">    <span class="attr">canIUse</span>: wx.<span class="title function_">canIUse</span>(<span class="string">&#x27;button.open-type.getUserInfo&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (app.<span class="property">globalData</span>.<span class="property">userInfo</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">userInfo</span>: app.<span class="property">globalData</span>.<span class="property">userInfo</span>,</span><br><span class="line">        <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">canIUse</span>)&#123;</span><br><span class="line">      <span class="comment">// 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回</span></span><br><span class="line">      app.<span class="property">userInfoReadyCallback</span> = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">userInfo</span>: res.<span class="property">userInfo</span>,</span><br><span class="line">          <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在没有 open-type=getUserInfo 版本的兼容处理</span></span><br><span class="line">      wx.<span class="title function_">getUserInfo</span>(&#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          app.<span class="property">globalData</span>.<span class="property">userInfo</span> = res.<span class="property">userInfo</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">userInfo</span>: res.<span class="property">userInfo</span>,</span><br><span class="line">            <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getUserInfo</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    app.<span class="property">globalData</span>.<span class="property">userInfo</span> = e.<span class="property">detail</span>.<span class="property">userInfo</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">userInfo</span>: e.<span class="property">detail</span>.<span class="property">userInfo</span>,</span><br><span class="line">      <span class="attr">hasUserInfo</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="改变首页"><a href="#改变首页" class="headerlink" title="改变首页"></a>改变首页</h2><ol>
<li>app.json：pages 数组的第一个页面就是默认启动页面，改变页面顺序即可</li>
<li>配置编译参数：微信开发者工具、普通编译、添加编译模式、启动页面</li>
<li>提交正式版本时设置首页：配置功能页面</li>
</ol>
]]></content>
      <categories>
        <category>移动端开发</category>
      </categories>
      <tags>
        <tag>移动端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序入门</title>
    <url>/2019/07/07/9-1-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="一、简单入门"><a href="#一、简单入门" class="headerlink" title="一、简单入门"></a>一、简单入门</h1><blockquote>
<p>微信朋友圈提供了好友之间沟通信息的手段，订阅号提供了面向粉丝推送信息的手段，而小程序则是提供了用户通过自己的操作而与服务实现互动的手段。小程序融合了原生 App 和 web 端，通过微信 APP 实现了多线程而且可以调用丰富的功能接口，同时又跨平台。需要注意的是，小程序基于浏览器内核重构的内置解析器，所以不能使用 DOM、BOM 的相关 API。</p>
</blockquote>
<h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><ul>
<li>开发者不可以扩展新组件。</li>
<li>暂时不支持 ipad 打开小程序</li>
<li>小程序无法打开页面，无法拉起 APP。</li>
<li>需要独立开发，不能在非微信环境运行。</li>
<li>小程序使用 WebView 渲染，并非原生渲染。</li>
<li>WXSS 不支持级联选择器、less 等。</li>
<li>WXSS 中无法使用本地资源（图片、字体等）。</li>
<li>WXSS 转化成 js 而不是 css，是为了兼容 rpx。</li>
<li>微信小程序不支持 cookie<ul>
<li>可使用 Reids 存储 session</li>
<li>有些手机不支持 Object.assign 方法，使用报错时可以直接写一个合并对象的方法。</li>
</ul>
</li>
<li>小程序不能和公众号重名，于是小程序的名字就成了：自选股+、滴滴出行DiDi。</li>
<li>依赖浏览器环境的 js 库不能使用，因为是在 JSCore 运行的，没有 window、document 对象。</li>
</ul>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>前端组件化开发。</li>
<li>基于微信跨平台，即用即走。</li>
<li>全部使用 https，确保传输中安全。</li>
<li>使用 Virtual DOM，进行局部更新。</li>
<li>使用 rpx 单位，隔离设备尺寸，方便开发。</li>
<li>视图层和逻辑层分离，通过数据驱动，不直接操作 DOM。</li>
<li>拥有离线能力：页面返回时显示历史 View，退出小程序时不销毁 View 状态。</li>
<li>Native 预先新建 WebView，打开新页面时直接渲染默认数据然后进行局部更新。</li>
<li>去中心化：微信不会提供类似小程序商店的地方，需要小程序提供者自己通过二维码、群分享的手段来传播。</li>
</ul>
<h2 id="PWA-渐进式应用"><a href="#PWA-渐进式应用" class="headerlink" title="PWA 渐进式应用"></a>PWA 渐进式应用</h2><blockquote>
<p>全称是 Progressive Web Apps，它是结合了 web 和 原生应用中最好功能的一种体验。首次访问时，用户可以直接在浏览器中进行访问而不需要安装应用。随着时间的推移，当用户和应用逐渐建立了联系，它会变得越来越强大。它能够快速地加载，即使在弱网络环境下也能够推送相关消息，也可以像原生应用那样添加至主屏，能够有全屏浏览的体验。</p>
</blockquote>
<ul>
<li>主要特点<ul>
<li><strong>渐进增强</strong>：支持的新特性的浏览器获得更好的体验，不支持的保持原来的体验。</li>
<li><strong>离线访问</strong>：通过 service workers 可以在离线或者网速差的环境下工作。</li>
<li><strong>类原生应用</strong>：使用 app shell model 做到原生应用般的体验。</li>
<li><strong>可安装</strong>：允许用户保留对他们有用的应用在主屏幕上，不需要通过应用商店。</li>
<li><strong>容易分享</strong>：通过 URL 可以轻松分享应用。</li>
<li><strong>持续更新</strong>：受益于 service worker 的更新进程，应用能够始终保持更新。</li>
<li><strong>安全</strong>：通过 HTTPS 来提供服务来防止网络窥探，保证内容不被篡改。</li>
<li><strong>可搜索</strong>：得益于 W3C manifests 元数据和 service worker 的登记，让搜索引擎能够找到 web 应用。</li>
<li><strong>再次访问</strong>：通过消息推送等特性让用户再次访问变得容易。</li>
</ul>
</li>
<li>功能模块<ul>
<li><strong>Service Workers</strong>：增强 Web 能力，主要用于实现资源离线缓存和更新。</li>
<li><strong>Web App Manifest</strong>：使 Web 更像 Native，它以 JSON 的格式定义 Web 应用的相关配置（应用名称、图像链接、自定义特性、启动默认配置、全屏设置等）。</li>
<li><strong>App Shell</strong>：提升显示效率的应用外壳，它是应用的用户界面所需的最基本的 HTML、CSS、JS，首次加载后立刻被缓存下来，不需要每次使用时都被下载，而是只异步加载需要的数据，以实现 UI 保持本地化。</li>
</ul>
</li>
</ul>
<h2 id="区别-H5"><a href="#区别-H5" class="headerlink" title="区别 H5"></a>区别 H5</h2><ul>
<li><strong>系统权限</strong>：小程序可以获得更多的系统权限，如网络通信状态、数据缓存能力等。</li>
<li><strong>运行环境</strong>：小程序基于浏览器内核重构的内置解析器，而 H5 的宿主环境是浏览器。所以小程序中没有 DOM、BOM 的相关 API。</li>
<li><strong>渲染机制</strong>：小程序的逻辑层和渲染层分别在不同的线程中运行 (相互独立)，而 H5 页面的 UI 渲染、Js 脚本执行都在一个单线程 (互斥)。所以 H5 页面中长时间的脚本运行可能会导致页面失去响应。</li>
</ul>
<h2 id="程序限制"><a href="#程序限制" class="headerlink" title="程序限制"></a>程序限制</h2><h3 id="程序限制-1"><a href="#程序限制-1" class="headerlink" title="程序限制"></a>程序限制</h3><ul>
<li>样式表不支持级联选择器。</li>
<li>不支持 A 标签，无法打开普通网页。</li>
<li>脚本内不能使用 window、document 等对象。</li>
<li>background-image 不能加载本地资源，可以是 网络图片、base64、标签。</li>
</ul>
<h3 id="数量限制"><a href="#数量限制" class="headerlink" title="数量限制"></a>数量限制</h3><ul>
<li>一个应用同时只能打开 5 个页面。</li>
<li>wx.request 请求最开始最大并发数是 10 个。</li>
<li>底部或顶部可以添加的 tab 按钮区域 tabBar 是一个数组，只能配置 2 ～ 5 个 tab。</li>
</ul>
<h3 id="大小限制"><a href="#大小限制" class="headerlink" title="大小限制"></a>大小限制</h3><ul>
<li>setStorage 本地缓存最大为 10MB。</li>
<li>setData 页面传递数据单次设置的数据不能超过 1024kB。</li>
<li>tabBar 的按钮路径为 iconPath，icon 大小限制为 40kb。</li>
<li>为了提升体验流畅度，小程序源码编译后的代码包大小限制为 1MB。</li>
</ul>
<h2 id="使用-npm"><a href="#使用-npm" class="headerlink" title="使用 npm"></a>使用 npm</h2><blockquote>
<p>因为小程序使用的是不完整的浏览器对象，所以很多 js 包无法使用。npm 可用来引入 moment 等插件，但是要注意不能通过 npm 引入没有 js 文件的 UI 库 weui，它可以通过直接下载文件并放到根目录，然后在 app.wxss 文件的开头引入。 </p>
</blockquote>
<ol>
<li>微信开发者工具、详情、使用 npm 模块。</li>
<li>项目的根目录打开命令行：npm init、npm i。</li>
<li>微信开发者工具、工具、构建 npm。此时小程序会将 node_modules 文件编译打包并生成新目录 miniprogram_npm。</li>
<li>对应页面的 js 文件引入后直接使用即可：const moment&#x3D; require(‘moment’)。</li>
<li>新建忽略文件 .gitignore，添加不需要上传的文件如 node_modules 、 package_lock.json。</li>
</ol>
<h1 id="二、底层原理"><a href="#二、底层原理" class="headerlink" title="二、底层原理"></a>二、底层原理</h1><h2 id="双线程模型"><a href="#双线程模型" class="headerlink" title="双线程模型"></a>双线程模型</h2><blockquote>
<p>小程序框架由视图层和逻辑层两部分组成。两者分别在两个相互独立的线程中运行而实现了视图和逻辑的分离，它们通过 Native（系统层，即微信客户端）做中转实现通信，逻辑层发送网络请求也会经由 Native 转发，这种双线程通信方式是为了管控安全并避免操作 DOM，缺点是带来了无处不在的异步问题 (任何数据传递都是线程间的通信，数据需要转换为字符串并将数据内容拼接为 JS 脚本的形式，然后传递给两边的 evaluateJavascript 异步执行)。由于一个小程序存在多个界面，视图层存在多个 webview 线程。</p>
</blockquote>
<ul>
<li><strong>视图层</strong>：渲染页面，运行的线程为 WKWebView (IOS) &#x2F; XWeb (Android) &#x2F; Chromium 60 Webview (开发者工具)。</li>
<li><strong>逻辑层</strong>：运行 js 脚本，主要处理业务逻辑和数据，运行的线程为 JSCore (IOS) &#x2F; V8 (Android) &#x2F; NWJS (开发者工具)。</li>
<li><strong>系统层</strong>：通过 JSBridge 向上提供微信的原生功能，向下实现视图层和逻辑层的双向交互 (视图层触发事件、逻辑层通知页面更新数据)。</li>
</ul>
  <div align="center">
      <img src="/images/webchat/framework.png" alt="架构模型" width="100%">
  </div>


<h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><ol>
<li><strong>渲染方式</strong>：小程序使用第三种方式<br>* web 渲染<br>* Native 原生渲染<br>* Hybrid 渲染：混合 web、Native</li>
<li><strong>具体流程</strong>：模版数据更新时容易影响性能，小程序使用 React 提出的虚拟 DOM 机制。<br>1. 在视图层把 WXML 转化成对应的 JS 对象 (虚拟 DOM 树)。<br>2. 在逻辑层发生数据变更时，通过宿主环境提供的 setData 方法把数据从逻辑层传递到 Native，再转发到视图层。<br>3. 在视图层渲染出最新的虚拟 DOM，经过对比新旧两个 DOM 树获取差异，然后将差异应用在真实的 DOM 树从而更新界面。</li>
<li><strong>页面渲染</strong><br>* wxml 编译器：wcc，它将 wxml 文件转为 js 执行 wcc index.wxml。<br>* wxss 编译器：wcsc，它将 wxss 文件转为 js 执行 wcsc index.wxss。</li>
</ol>
  <div align="center">
      <img src="/images/webchat/wxml_render.png" alt="渲染机制" width="100%">
  </div>


<h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><ul>
<li><strong>热启动</strong>：假如用户已经打开过某小程序，然后在一定时间内再次打开，此时无需重新启动，只需将后台态的小程序切换到前台，这个过程就是热启动。</li>
<li><strong>冷启动</strong>：用户首次打开或小程序被微信主动销毁后再次打开的情况，此时小程序需要重新加载启动，即冷启动。</li>
<li><strong>销毁</strong>：只有当小程序进入后台一定时间，或者系统资源占用过高，才会被真正的销毁。</li>
</ul>
  <div align="center">
      <img src="/images/webchat/runing.png" alt="运行机制" width="100%">
  </div>


<h2 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h2><ul>
<li>开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也会在发布之后 24 小时之内下发新版本信息到用户。</li>
<li>小程序每次冷启动时都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时使用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。</li>
<li>如果想让用户使用最新版本的小程序，可以利用 wx.getUpdateManager 做个检查更新的功能：</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">checkNewVersion</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> updateManager = wx.<span class="title function_">getUpdateManager</span>();</span><br><span class="line">  updateManager.<span class="title function_">onCheckForUpdate</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hasUpdate&#x27;</span>, res.<span class="property">hasUpdate</span>);</span><br><span class="line">    <span class="comment">// 请求完新版本信息的回调</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">hasUpdate</span>) &#123;</span><br><span class="line">      updateManager.<span class="title function_">onUpdateReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">hasNewVersion</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="组件系统"><a href="#组件系统" class="headerlink" title="组件系统"></a>组件系统</h2><ul>
<li>基础组件<ul>
<li>基于 Exparser 框架实现组织管理的内置组件和自定义组件，包括视图容器、表单组件、导航组件等。</li>
<li>Exparser 内置在小程序基础库，为各种组件提供基础支持 (节点操作、自定义组件特性等)。</li>
<li>Exparser 基于 WebComponents 的 ShadowDOM 模型，但是不依赖其它库和浏览器的原生支持，而且可在纯 JS 环境中运行。</li>
</ul>
</li>
<li>原生组件<ul>
<li>由客户端原生实现的内置组件，包括 <code>camera、canvas、input(仅在focus时)、live-player\live-pusher、map、textarea、video</code>。</li>
<li>它们脱离于 WebView 渲染流程之外，使用时有如下限制：<ul>
<li>层级最高，总是覆盖普通组件，后插入的原生组件覆盖之前插入的。</li>
<li>不支持部分 CSS 样式：CSS 动画、position: fixed、overflow: hidden。</li>
<li>不支持 bind:eventname 的事件监听、catch 和 capture 的事件绑定。</li>
<li>遮挡 vConsole 弹出的调试面板，建议开发者在使用到原生组件时尽量在真机上调试。</li>
</ul>
</li>
<li>优点<ul>
<li>扩展 Web 的能力</li>
<li>体验更好，减轻 WebView 的渲染工作</li>
<li>绕过 setData、数据通信和重渲染流程，性能更好</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h2><blockquote>
<p>它由 JavaScript 编写，可以被注入到视图层和逻辑层运行。</p>
</blockquote>
<ul>
<li>功能<ul>
<li>在渲染层，提供各类组件来组件页面的元素。</li>
<li>在逻辑层，提供各种API来处理各种元素。</li>
<li>处理数据绑定、组件系统、事件系统、通信系统等一系列框架逻辑。</li>
</ul>
</li>
<li>特点<ul>
<li>小程序的渲染层和逻辑层由两个线程管理，两个线程各自注入了基础库。</li>
<li>基础库不会打包在小程序的代码中，它会被提前内置在微信客户端。这样做的优点是：可以降低业务小程序的代码包大小、可以单独修复基础库中的 Bug 而无需修改到业务小程序的代码包。</li>
</ul>
</li>
</ul>
<h1 id="四、View-视图层"><a href="#四、View-视图层" class="headerlink" title="四、View 视图层"></a>四、View 视图层</h1><blockquote>
<p>使用小程序组件来展示，包括 WXML、WXSS。将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。</p>
</blockquote>
<h2 id="WXML-模版"><a href="#WXML-模版" class="headerlink" title="WXML 模版"></a>WXML 模版</h2><ul>
<li>属于微信视图层的一套标签语言，类似 Vue 的模板语法。</li>
<li>支持数据绑定和逻辑运算、支持模板及其引用、支持事件绑定。</li>
<li>不支持 div、span 等标签，全部使用视图容器、基础内容等组件。</li>
</ul>
<h3 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h3>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;name&#125;&#125; + a <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;item-&#123;&#123;id&#125;&#125;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;status ? true : false&#125;&#125;&quot;</span>&gt;</span> Hidden <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 条件渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;num &gt; 5&#125;&#125;&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;num &gt; 2&#125;&#125;&quot;</span>&gt;</span> B <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span> C <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  列表渲染</span></span><br><span class="line"><span class="comment">    一维数组：默认索引 index、选项 item </span></span><br><span class="line"><span class="comment">    二/多维数组：等同于 &lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:for-item=&quot;x&quot;&gt;&lt;/view&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;arr&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&#x27;&#123;&#123;index&#125;&#125;&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;pList&#125;&#125;&quot;</span> &gt;</span>  </span><br><span class="line"> 　　&#123;&#123;item.id&#125;&#125; </span><br><span class="line">  <span class="comment">&lt;!-- wx:for 用于循环数组，wx:for-item 用于给列表赋别名 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;item.cList&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;items&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;items.name&#125;&#125;：&#123;&#123;item.account&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    name: &#x27;Mike&#x27;,</span><br><span class="line">    id: 0,</span><br><span class="line">    status: false,</span><br><span class="line">    arr: [1, 2, 3]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="模板使用"><a href="#模板使用" class="headerlink" title="模板使用"></a>模板使用</h3><ul>
<li>基础使用<ul>
<li>name：定义模版名称</li>
<li>is：用于引用指定模版</li>
<li>data：用于传入模版数据<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;msgItem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span> Time: &#123;&#123;time&#125;&#125; <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;msgItem&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;...item&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    item: &#123;</span><br><span class="line">      index: 0,</span><br><span class="line">      msg: &#x27;item msg&#x27;,</span><br><span class="line">      time: &#x27;2016-09-15&#x27;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;content-item&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;content.type == &#x27;TEXT&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:30rpx&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;content.type == &#x27;TEXT&#x27;&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;content.content&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;content.type == &#x27;IMAGE&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;media&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;content.content&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">bindtap</span>=<span class="string">&quot;enterPreviewMode&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">data-src</span>=<span class="string">&quot;&#123;&#123;content.content&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 10rpx&quot;</span>&gt;</span>&#123;&#123;content.description&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;diary.list&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;content-item&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;content&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>页面引用<ul>
<li><code>import</code> 引用模版内容，不能多重引用</li>
<li><code>include</code> 引用模版内容，就可以多重引用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- test.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;test.wxml&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;test&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;text&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;header.wxml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> body <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;footer.wxml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul>
<li>绑定：<code>bind/catch + 事件</code>，区别是 bind 不阻止冒泡而 catch 阻止</li>
<li>事件：<code>touchstart、touchmove、touchend、touchcancel、longtap、tap</code><ul>
<li>事件对象：event 包含 currentTarget、target 等事件触发的相关信息</li>
<li>传参方式：<code>data-hi、dataset</code>，类似 html 的自定义属性 data-xxx</li>
<li>点击事件：绑定时不能用 bindclick <code>&lt;view bindtap=&quot;doTap&quot;&gt;&lt;/view&gt;</code></li>
</ul>
</li>
<li>数据<ul>
<li>传递数据：<code>&lt;view data-prop&gt;&lt;/view&gt;</code></li>
<li>获取数据：<code>this.data[prop]</code></li>
<li>修改数据：<code>this.setData(&#123; &#125;)</code></li>
</ul>
</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&#x27;box&#x27;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">wx:for</span>=<span class="string">&#x27;&#123;&#123;list&#125;&#125;&#x27;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">wx:key</span>=<span class="string">&#x27;&#123;&#123;index&#125;&#125;&#x27;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">data-itemId</span>=<span class="string">&#x27;&#123;&#123;item.id&#125;&#125;&#x27;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">bindtap</span>=<span class="string">&#x27;clickMe&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&#x27;&#123;&#123;item.img&#125;&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  clickMe: function(e) &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">        url: &#x27;../../pages/test/test?id=$&#123;e.currentTarget.dataset.itemId&#125;‘</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h2><ul>
<li>支持大部分 CSS 特性</li>
<li>新增尺寸单位 rpx，可根据屏幕宽度自适应</li>
<li>使用 @import 语句可以导入外联样式表</li>
<li>支持 class、id、element、::before、::after  </li>
<li>不支持 less、sass 等写法，不支持级联选择器，不支持多层选择器：避免被组件内结构破坏</li>
</ul>
<h2 id="WXS-模块"><a href="#WXS-模块" class="headerlink" title="WXS 模块"></a>WXS 模块</h2><blockquote>
<p>Weixin Script 脚本的简称，用于增强 WXML 的功能而可以直接调用 JS 方法，使用时将 wxs 文件或标签作为一个模块。</p>
</blockquote>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul>
<li><strong>wxs 标签</strong>：wxml 文件中直接使用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">moudle</span>=<span class="string">&quot;tools&quot;</span>&gt;</span></span><br><span class="line">  var a = require(&quot;./tools.wxs&quot;)</span><br><span class="line"></span><br><span class="line">  function my_slice(str, a, b)&#123;</span><br><span class="line">    return str.slice(a, b)</span><br><span class="line">  &#125;</span><br><span class="line">  moudle.exports = &#123;</span><br><span class="line">    my_slice: my_slice,</span><br><span class="line">    msg: &quot;hello&quot;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;tools.my_slice(&quot;123456&quot;, 0, 5)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>wxs 文件</strong>：wxml 文件中引用<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&quot;../../utils/string.wxs&quot;</span> <span class="attr">module</span>=<span class="string">&quot;tools&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;tools.msg&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h3><blockquote>
<p>wxs 模块中可以通过 require 引用其它 wxs 文件，注意点如下</p>
</blockquote>
<ul>
<li>只能引用 wxs 文件，并且必须使用相对路径</li>
<li>wxs 模块如果在定义后一直没有被引用，则不会被解析运行</li>
<li>wxs 模块都是单例，多处、多次引用时使用的都是同一个模块对象</li>
</ul>
<h1 id="四、App-Service-逻辑层"><a href="#四、App-Service-逻辑层" class="headerlink" title="四、App Service 逻辑层"></a>四、App Service 逻辑层</h1><blockquote>
<p>将数据进行处理后发送给视图层，同时接受视图层的事件反馈。</p>
</blockquote>
<ul>
<li>每个页面都有独立的作用域，并提供模块化能力。</li>
<li>App() 是小程序的入口，Page() 是页面的入口。</li>
<li>小程序提供了丰富的 API，它们通过 JSBridge 和 Native 进行通信。</li>
</ul>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><ul>
<li>数据绑定使用 Mustache 语法（双大括号）将变量包起来，动态数据均来自对应 Page 的 data，可以通过 setData 方法修改数据。</li>
<li>事件绑定的写法为 <code>bind/catch + 事件类型 = &quot;事件名&quot;</code>，比如 bindtap, catchtouchstart，事件名需要在对应的 Page 中定义同名的函数。</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="App-应用"><a href="#App-应用" class="headerlink" title="App 应用"></a>App 应用</h3>  <div align="center">
      <img src="/images/webchat/app_life.png" alt="App 应用生命周期" width="100%">
  </div>


<h3 id="Page-页面"><a href="#Page-页面" class="headerlink" title="Page 页面"></a>Page 页面</h3>  <div align="center">
      <img src="/images/webchat/page_life.png" alt="Page 页面生命周期" width="100%">
  </div>

  
<h3 id="影响结果"><a href="#影响结果" class="headerlink" title="影响结果"></a>影响结果</h3>  <div align="center">
      <img src="/images/webchat/app_to_page.png" alt="Page 页面生命周期" width="100%">
  </div>


<h2 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h2><blockquote>
<p>必须是 https 请求，需要到小程序的后台设置合法域名。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目目录新建文件： utils/request.js</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, options = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;app.origin&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      ...options,</span><br><span class="line">      <span class="attr">data</span>: options.<span class="property">data</span>,</span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&quot;cookie&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">//重新授权登录</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">401</span>)&#123;</span><br><span class="line">          wx.<span class="title function_">redirectTo</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;/pages/login/index&#x27;</span>&#125;)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">statusCode</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;服务器忙，请稍后重试&#x27;</span>, <span class="attr">code</span>: <span class="number">500</span> &#125;);</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (url === <span class="string">&#x27;/api/cdz/user/weixin/login&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> cookie = res.<span class="property">header</span>[<span class="string">&quot;set-cookie&quot;</span>] || res.<span class="property">header</span>[<span class="string">&quot;Set-Cookie&quot;</span>];</span><br><span class="line">　　　　　　　　</span><br><span class="line">            <span class="keyword">if</span> (cookie) wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;cookie&quot;</span>, cookie);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url === <span class="string">&#x27;/api/cdz/user/weixin/login&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> cookie = res.<span class="property">header</span>[<span class="string">&quot;set-cookie&quot;</span>] || res.<span class="property">header</span>[<span class="string">&quot;Set-Cookie&quot;</span>];</span><br><span class="line">          <span class="keyword">if</span> (cookie) wx.<span class="title function_">setStorageSync</span>(<span class="string">&quot;cookie&quot;</span>, cookie);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">reject</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;网络错误&#x27;</span>, <span class="attr">code</span>: <span class="number">0</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 API</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;../utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">testPost</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">`/api/test/post`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">testGet</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(<span class="string">`/api/test/get`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="三、组件化开发"><a href="#三、组件化开发" class="headerlink" title="三、组件化开发"></a>三、组件化开发</h1><blockquote>
<p>开发者可以将页面内的功能模块抽象成自定义组件，具有高内聚、可复用的特点。</p>
</blockquote>
<h2 id="官方组件"><a href="#官方组件" class="headerlink" title="官方组件"></a>官方组件</h2><blockquote>
<p>小程序不支持 html 标签，全部使用视图容器、基础内容等组件渲染页面</p>
</blockquote>
  <div align="center">
      <img src="/images/webchat/com.png" alt="小程序组件" width="100%">
  </div>


<h2 id="block-标签"><a href="#block-标签" class="headerlink" title="block 标签"></a>block 标签</h2><blockquote>
<p>block 仅仅是一个包装元素而并不是一个组件，它只接受控制属性，不会在页面中做任何渲染</p>
</blockquote>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span> text <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><blockquote>
<p>开发者可以将页面内的功能模块抽象成自定义组件，具有高内聚、可复用的特点</p>
</blockquote>
<ul>
<li>优点<ul>
<li>可以在不同的页面中重复使用</li>
<li>可以将复杂的页面拆分成多个低耦合的模块有助于代码维护</li>
</ul>
</li>
<li>实现<ul>
<li>根目录新建文件夹 components </li>
<li>components 目录下新建 Item 文件夹</li>
<li>Item 右键点击新建 Component 并命名 item</li>
<li>编辑自动生成的组件组成文件：<code>json、wxml、wxss、js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  默认只能有一个 slot 插槽，需要使用多个时需要声明启用</span></span><br><span class="line"><span class="comment"> *  除继承样式外，全局样式、组件所在页面的的样式对自定义组件无效</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// item.json：配置文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;component&quot;</span>: <span class="literal">true</span>,      <span class="comment">// 声明这个是组件</span></span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;&#125;   <span class="comment">// 表示在该组件中可使用其它组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// item.js：逻辑交互文件，定义组件的属性、数据及方法</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [],  <span class="comment">// 类似 vue mixins、traits 的组件间代码复用机制</span></span><br><span class="line">  <span class="attr">relations</span>: &#123;&#125;,  <span class="comment">// 定义关联</span></span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span>    <span class="comment">// 启用多 slot 支持</span></span><br><span class="line">    <span class="attr">addGlobalClass</span>: <span class="literal">true</span>,  <span class="comment">// 使组件接受全局样式，尽量避免</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">properties</span>: &#123;    <span class="comment">// 对外定义的接收属性</span></span><br><span class="line">    <span class="attr">innerText</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,  <span class="comment">// String、Number、Boolean、Object、Array、null</span></span><br><span class="line">      <span class="attr">value</span>: <span class="string">&quot;&quot;</span>,     <span class="comment">// 默认值</span></span><br><span class="line">      <span class="title function_">observer</span>(<span class="params">newVal, oldVal, changedPath</span>)&#123; &#125;  <span class="comment">// 属性被改变时执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>    <span class="comment">// 简写方式</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;   <span class="comment">// 私有数据，组件的初始数据</span></span><br><span class="line">    <span class="attr">isShow</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showData</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">isShow</span>: !<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isShow</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 内部私有方法建议以下划线开头</span></span><br><span class="line">    <span class="comment">// triggerEvent 用于触发事件</span></span><br><span class="line">    <span class="title function_">_confirmEvent</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&quot;confirmEvent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">externalClasses</span>: [<span class="string">&#x27;tag-class&#x27;</span>],  <span class="comment">// 使用外部类名样式，尽量避免</span></span><br><span class="line">  <span class="attr">lifetimes</span>: &#123;        <span class="comment">// 生命周期函数</span></span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">attached</span>(<span class="params"></span>)&#123;&#125;,     <span class="comment">// vue beforeMount</span></span><br><span class="line">    <span class="title function_">ready</span>(<span class="params"></span>)&#123;&#125;,        <span class="comment">// vue mounted</span></span><br><span class="line">    <span class="title function_">moved</span>(<span class="params"></span>)&#123;&#125;,        <span class="comment">// 组件位置更新</span></span><br><span class="line">    <span class="title function_">detached</span>(<span class="params"></span>)&#123;&#125;      <span class="comment">// 组件卸载</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">pageLifetimes</span>: &#123;   <span class="comment">// 组件所在页面的生命周期函数</span></span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">    <span class="title function_">hide</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">    <span class="title function_">resize</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">definitionFilter</span>: &#123;&#125;     <span class="comment">// 组件扩展</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// item.wxss：样式文件，注意只能通过类名指定</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&quot;../../app.wxss&quot;</span>;  <span class="comment">// 引入公共样式</span></span><br><span class="line">.<span class="property">inner</span>&#123;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// item.wxml：模版文件</span></span><br><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">catchtap</span>=<span class="string">&#x27;_confirmEvent&#x27;</span>&gt;</span>&#123;&#123;innerText&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>单个插槽<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;before&quot;</span>&gt;</span>插槽 before<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>&#123;&#123;innerText&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;after&quot;</span>&gt;</span>插槽 after<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ol start="4">
<li>页面文件中使用<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;navigationBarTitleText&quot;</span>: <span class="string">&quot;index 页面&quot;</span>,</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;myItem&quot;</span>: <span class="string">&quot;/components/item/item&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.wxml</span></span><br><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">myItem</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">innerText</span>=<span class="string">&quot;确定&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">bind:confirmEvent</span>=<span class="string">&quot;_confirmEvent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>插入到卡槽<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">myItem</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;showData&quot;</span>&gt;</span> ClickMe <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;before&quot;</span>&gt;</span>插入到卡槽 before<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;after&quot;</span>&gt;</span>插入到卡槽 after<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>()</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span> = <span class="variable language_">this</span>.<span class="title function_">selectComponent</span>(<span class="string">&quot;#item&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">showData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span>.<span class="title function_">showData</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">_confirmEvent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span>.<span class="title function_">hideData</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父传子：数据绑定"><a href="#父传子：数据绑定" class="headerlink" title="父传子：数据绑定"></a>父传子：数据绑定</h3><ul>
<li>父组件 wxss 子组件标签添加属性：<code>	&lt;submit-bar id=&quot;&#123;&#123;id&#125;&#125;&quot;&gt;&lt;/submit-bar&gt;</code></li>
<li>子组件 js 通过 properties 接收：<code>properties: &#123; id: Number &#125;</code></li>
</ul>
<h3 id="子传父：事件触发"><a href="#子传父：事件触发" class="headerlink" title="子传父：事件触发"></a>子传父：事件触发</h3><ul>
<li>子组件触发事件<ul>
<li><code>this.triggerEvent(&#39;myevent&#39;, &#123; id: 1 &#125;, myEventOption)</code></li>
<li>自定义事件名、传递数据的 detail 对象、事件选项（是否冒泡等）</li>
</ul>
</li>
<li>父组件捕获事件<br>* 子组件标签绑定自定义事件：<code>	&lt;submit-bar bind:submit=&quot;submit&quot;&gt;&lt;/submit-bar&gt;</code><br>* 监听事件执行并接收数据：<code>submit(event)&#123; event.detail.id &#125;</code></li>
</ul>
<h3 id="父组件获取子组件实例"><a href="#父组件获取子组件实例" class="headerlink" title="父组件获取子组件实例"></a>父组件获取子组件实例</h3><ul>
<li><code>&lt;compontent id=&quot;modal&quot;&gt;&lt;/compontent&gt;</code></li>
<li><code>var modal = this.setlectComponet(&#39;#modal&#39;)</code></li>
</ul>
<h2 id="组件共享"><a href="#组件共享" class="headerlink" title="组件共享"></a>组件共享</h2><blockquote>
<p>behaviors 用于组件间代码共享一组属性、数据、生命周期函数和方法，类似 mixins</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建 my-behavior.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Behavior</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [],</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="attr">carModel</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">sale</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">behaviorData1</span>: <span class="string">&quot;eyes on me&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">attached</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">behaviorMethod</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// com.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [myBehavior],  <span class="comment">// 挂载 Behavior</span></span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">me</span>: <span class="string">&#x27;组件自身数据&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.wxml</span></span><br><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>组件 data：&#123;&#123;me&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>共有 data：&#123;&#123;behaviorData1&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>共有 property：&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;behaviorMethod&quot;</span>&gt;</span>共有方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>


<h1 id="五、路由功能"><a href="#五、路由功能" class="headerlink" title="五、路由功能"></a>五、路由功能</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><ul>
<li><strong>实现 API</strong><ul>
<li><code>wx.navigateTo</code>：保留当前页面，跳转到应用内的某个页面</li>
<li><code>wx.redirectTo</code>：关闭当前页面，跳转到应用内的某个页面</li>
<li><code>wx.navigateBack</code>：关闭当前页面，回退前一页面</li>
</ul>
</li>
<li><strong>接口说明</strong><ul>
<li>如果某页面设置为 tab 页，则只支持 wx.switchTab</li>
<li>wx.navigateTo 全局最多调用 5 次</li>
</ul>
</li>
<li><strong>接口使用</strong><ul>
<li>对于可逆操作，使用 wx.navigateTo，比如从首页跳转到二级页面，从二级页面返回是不需要重新渲染首页。</li>
<li>对于不可逆操作，使用 wx.redirectTo，比如用户登录成功后关闭登录页面，不能返回到登录界面。</li>
<li>对于一些介绍性等不常用页面，使用 wx.redirectTo、wx.navigatrBack</li>
<li>不要在首页使用 wx.redirectTo，这样会导致应用无法返回首页</li>
</ul>
</li>
<li><strong>应用场景</strong><ul>
<li>小程序启动，初始化第一个页面</li>
<li>打开新页面，调用 API wx.navigateTo 或使用 navigator 组件</li>
<li>页面重定向，调用 API wx.redirectTo 或使用 navigator 组件</li>
<li>页面返回，调用 API wx.navigateBack 或用户按左上角返回按钮</li>
<li>tarbar 切换</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// API</span></span><br><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;pages/logs/index&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123; &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">wx.<span class="title function_">redirectTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;pages/logs/index&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123; &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户点击左上角返回按钮，或调用 wx.navigateBack 返回上一页</span></span><br><span class="line"><span class="comment"> * delta 为 1 时表示返回上一页，为 2 时表示上上一页，以此类推</span></span><br><span class="line"><span class="comment"> * 如果 dalta 大于已打开的页面总数，则返回到首页。返回后元界面会销毁</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">wx.<span class="title function_">navigateBack</span>(&#123;</span><br><span class="line">    <span class="attr">delta</span>: <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件</span></span><br><span class="line"><span class="comment"> *     默认 redirect: false，等同于 wx.navigateTo 接口</span></span><br><span class="line"><span class="comment"> *     添加 redirect 属性时，等同于 wx.redirectTo 接口</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">&lt;navigator url=<span class="string">&quot;pages/logs/index&quot;</span> hover-<span class="keyword">class</span>=<span class="string">&quot;navigator-hover&quot;</span>&gt;跳转&lt;/navigator&gt;</span><br></pre></td></tr></table></figure>

<h2 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h2><ul>
<li>页面栈以栈（先进后出）的形式维护页面与页面之间的关系</li>
<li>小程序提供了 getCurrentPages() 函数获取页面栈，第一个元素为首页，最后一个元素为当前页面</li>
<li>页面跳转对页面栈大小的影响<ul>
<li><code>wx.redirectTo</code><ul>
<li>不会增加页面栈大小</li>
<li>从四级页面重定向到二级页面，此时会将关闭四级页面，并使用二级页面替换四级页面，但两个页面状态独立。此时的页面栈大小不变</li>
</ul>
</li>
<li><code>wx.navigateTo</code><ul>
<li>每新开一个页面，页面栈大小加 1 直到为 5 为止</li>
<li>从四级页面跳转到二级页面，此时会在页面栈顶添加一个二级页面的初始状态界面，但两个页面状态独立。页面栈大小加 1，如果是 5 则 wx.navigateTo 无效</li>
</ul>
</li>
<li><code>wx.navigateBack</code>：会减少页面栈大小，直到页面栈大小为 1</li>
</ul>
</li>
</ul>
  <div align="center">
      <img src="/images/webchat/page_stack.png" alt="页面跳转与页面栈" width="100%">
  </div>


<h2 id="页面传值"><a href="#页面传值" class="headerlink" title="页面传值"></a>页面传值</h2><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// view data-id=&#x27;&#123;&#123;id&#125;&#125;&#x27; data-list=&#x27;list&#x27; bindtap=&#x27;clickMe&#x27;</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">clickMe</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 字符串</span></span><br><span class="line">    <span class="keyword">let</span> id = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">id</span></span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">var</span> albumList = e.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">list</span>.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><blockquote>
<p>适用于传递少量数据，注意 wx.switchTab 中的 url 不能传参</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A 页面传递数据：wxml 标签、js</span></span><br><span class="line">&lt;navigator url=<span class="string">&quot;../detail/detail?name=&#123;&#123;name&#125;&#125;&amp;id=1&quot;</span>&gt;&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`/pages/detail/detail?id=<span class="subst">$&#123;e.currentTarget.dataset.id&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/pages/detail/detail?name=&#x27;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">name</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// B 页面接收数据：pages/detail/detail.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">option</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">detail_id</span>: options.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">detail_name</span>: options.<span class="property">name</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote>
<p>通过在 App.js 中设置 globalData </p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js：初始值</span></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">globalData</span>:&#123;</span><br><span class="line">    <span class="attr">appid</span>: <span class="string">&#x27;1wqas2342dasaqwe232342xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;e0dassdadef2424234209bwXXX&#x27;</span>,</span><br><span class="line">    <span class="attr">openid</span>: <span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">    <span class="attr">deviceInfo</span>: <span class="literal">null</span>,    <span class="comment">// 设备信息，主要用于获取屏幕尺寸而做适配</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取日记列表</span></span><br><span class="line">  <span class="title function_">getDiaryList</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">diaryList</span>) &#123;</span><br><span class="line">      <span class="keyword">typeof</span> cb == <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">diaryList</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟数据 diaries.js：module.exports = &#123; &#125;</span></span><br><span class="line">      <span class="keyword">const</span> diaries = <span class="built_in">require</span>(<span class="string">&#x27;demo/diaries&#x27;</span>)</span><br><span class="line">      list.<span class="title function_">push</span>(...diaries)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">diaryList</span> = list</span><br><span class="line">      <span class="keyword">typeof</span> cb == <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">globalData</span>.<span class="property">diaryList</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js：可修改</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">getApp</span>();</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">getDiary</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    app.<span class="property">globalData</span>.<span class="property">openid</span> = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">    app.<span class="title function_">getDiaryList</span>(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        diary = list[<span class="number">0</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        diary = list[id];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><blockquote>
<p>单个密钥允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 添加缓存</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 异步存储</span></span><br><span class="line">  wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">      <span class="attr">key</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: <span class="string">&#x27;cck&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;存储成功&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 同步存储</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;cck&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123; </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取缓存</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line">  wx.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    success (res) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 同步</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 移除缓存</span></span><br><span class="line"><span class="title function_">remove</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line">  wx.<span class="title function_">removeStorage</span>(&#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    success (res) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同步</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    wx.<span class="title function_">removeStorageSync</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="页面栈-1"><a href="#页面栈-1" class="headerlink" title="页面栈"></a>页面栈</h3><blockquote>
<p>首页 index 进入列表页 list，然后进入详情页 detail，此时如果需要从 detail 页一键返回到 index 页并且传值给 index 页，这里就可以用页面栈来实现</p>
</blockquote>
<ul>
<li>不要尝试修改页面栈，会导致路由以及页面状态错误</li>
<li>不要在 App.onLaunch 时调用 getCurrentPages()，此时 page 还没有生成</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 详情页：view bindtap=&#x27;backToIndex&#x27;&gt; 返回首页</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;土豆&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  backToIndex () &#123;</span><br><span class="line">    <span class="comment">// 获取当前的页面栈实例，pages 是一个根据栈的顺序存储了所有页面的数组</span></span><br><span class="line">    <span class="keyword">let</span> pages = <span class="title function_">getCurrentPages</span>()</span><br><span class="line">    </span><br><span class="line">    wx.<span class="title function_">navigateBack</span>(&#123;</span><br><span class="line">      <span class="attr">delta</span>: <span class="number">2</span>,</span><br><span class="line">      success () &#123;</span><br><span class="line">        pages[<span class="number">0</span>].<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">tag</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">tag</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页：&lt;view&gt; &#123;&#123;tag&#125;&#125;</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="input-搜索传值"><a href="#input-搜索传值" class="headerlink" title="input 搜索传值"></a>input 搜索传值</h3><ul>
<li><code>&lt;input auto-focus bindinput=&quot;bindKeyInput&quot; bindconfirm=&#39;goSearch&#39; /&gt;</code></li>
<li><strong>bindinput</strong>：键盘输入时触发，<code>event.detail = &#123;value, cursor, keyCode&#125;</code></li>
<li><strong>bindconfirm</strong>：点击完成按钮时触发，<code>event.detail = &#123;value: value&#125;</code></li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/search/search.js </span></span><br><span class="line"><span class="title class_">Page</span>(&#123; </span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line"></span><br><span class="line">  <span class="title function_">bindKeyInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">inputValue</span>: e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进入搜索结果页</span></span><br><span class="line">  <span class="title function_">goSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span></span><br><span class="line">    <span class="keyword">if</span> (!content) &#123; <span class="keyword">return</span> &#125; </span><br><span class="line"></span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/pages/list/list?content=<span class="subst">$&#123;content&#125;</span>`</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>移动端开发</category>
      </categories>
      <tags>
        <tag>移动端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端技术难点</title>
    <url>/2019/06/28/8-4-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9A%BE%E7%82%B9/</url>
    <content><![CDATA[<h1 id="一、Hybrid-App"><a href="#一、Hybrid-App" class="headerlink" title="一、Hybrid App"></a>一、Hybrid App</h1><blockquote>
<p>混合模式移动应用，指兼具 NativeApp 良好用户交互体验和 WebApp 跨平台开发优势的应用。由于 H5 页面是内嵌到原生应用的 WebView 组件 (手机浏览器内核)，JS 没有修改系统配置、读写文件等权限，所以通讯机制是混合应用的最关键部分。</p>
</blockquote>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><blockquote>
<p>区别在于 UI 渲染机制，但都是基于 JSBridge 完成的通讯层。第二三种方案可看作基于方案一并通过新技术提高了应用的混合程度。</p>
</blockquote>
<ul>
<li><strong>基于 WebView UI 的方案</strong>：在原生 App 中使用 WebView 作为容器直接承载 Web 页面而赋予 H5 一定的原生功能。WebView 是 android 用来显示 Web 网页并和 js 交互的控件，基于它的方式可扩展很多功能。</li>
<li><strong>基于 Native UI 的方案</strong>：比如 React-Native、Weex。通过 JSBridge 进一步将 js 解析为虚拟 DOM 并传递到 Native 使用原生渲染。</li>
<li><strong>小程序方案</strong>：定制化 JSBridge，WebView 双线程的模式隔离了 JS 逻辑和 UI 渲染。</li>
</ul>
<h2 id="H5-调用-Native"><a href="#H5-调用-Native" class="headerlink" title="H5 调用 Native"></a>H5 调用 Native</h2><ul>
<li><strong>API 注入</strong>：Android4.2+ 通过 addJavascriptInterface 注册方法并暴露到 window，IOS7+ 通过 JavaScriptCore 注册方法并暴露到 window。。</li>
<li><strong>拦截 URL Scheme</strong>：为了方便 app 直接互相调用而设计的类似 url 链接，比如微信 weixin:&#x2F;&#x2F;。前端页面触发 scheme，Android、IOS 分别通过 shouldOverrideUrlLoading、shouldStartLoadWithRequest 拦截请求获取 url 并通过约定的协议处理。</li>
<li><strong>拦截 prompt&#x2F;confirm&#x2F;alert</strong>：Native 通过 onJsPrompt&#x2F;onJsConfirm&#x2F;onJsAlert 实现。</li>
</ul>
<h3 id="API-注入"><a href="#API-注入" class="headerlink" title="API 注入"></a>API 注入</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@title</span> <span class="variable">Android</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@desp</span> H5 调用一：window.JSBridge.foo();         // foo</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desp</span> H5 调用二：window.JSBridge.foo2(&#x27;test&#x27;);  // foo2:test</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">webSettings = mWebView.<span class="title function_">getSettings</span>();  </span><br><span class="line">webSettings.<span class="title function_">setJavaScriptEnabled</span>(<span class="literal">true</span>);  <span class="comment">// Android 允许 JS 脚本</span></span><br><span class="line">mWebView.<span class="title function_">addJavascriptInterface</span>(<span class="title function_">getJSBridge</span>(), <span class="string">&quot;JSBridge&quot;</span>);</span><br><span class="line">private <span class="title class_">Object</span> <span class="title function_">getJSBridge</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="title class_">Object</span> insertObj = <span class="keyword">new</span> <span class="title class_">Object</span>()&#123;  </span><br><span class="line">        <span class="comment">// Android4.2 以上暴露的 api 必须加上 @JavascriptInterface</span></span><br><span class="line">        @<span class="title class_">JavascriptInterface</span></span><br><span class="line">        public <span class="title class_">String</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;foo&quot;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        @<span class="title class_">JavascriptInterface</span></span><br><span class="line">        public <span class="title class_">String</span> <span class="title function_">foo2</span>(<span class="params">final <span class="built_in">String</span> param</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;foo2:&quot;</span> + param;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> insertObj;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@title</span> <span class="variable">IOS</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@desp</span> H5 调用：window.top.foo(&#x27;test&#x27;); // &#x27;foo:test&#x27;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desp</span> top 确保调用到最顶级，iframe 需要用 top 才能拿到顶级</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desp</span> iOS7+ 原生无法被 JS 调用，需要引入库 JavaScriptCore</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">#<span class="keyword">import</span> &lt;<span class="title class_">JavaScriptCore</span>/<span class="title class_">JavaScriptCore</span>.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)<span class="attr">webViewDidFinishLoad</span>:(<span class="title class_">UIWebView</span> *)webView&#123;</span><br><span class="line">    [self hideProgress];</span><br><span class="line">    [self setJSInterface];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setJSInterface&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">JSContext</span> *context =[_wv <span class="attr">valueForKeyPath</span>:</span><br><span class="line">        @<span class="string">&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册名为foo的api方法</span></span><br><span class="line">    context[@<span class="string">&quot;foo&quot;</span>] = ^() &#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="title class_">NSArray</span> *args = [<span class="title class_">JSContext</span> currentArguments];</span><br><span class="line">        <span class="title class_">NSString</span> *title = [<span class="title class_">NSString</span> <span class="attr">stringWithFormat</span>:@<span class="string">&quot;%@&quot;</span>,</span><br><span class="line">            [args <span class="attr">objectAtIndex</span>:<span class="number">0</span>]];</span><br><span class="line">        <span class="comment">// 自定义逻辑：返回一个值 &#x27;foo:&#x27;+title</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="title class_">NSString</span> <span class="attr">stringWithFormat</span>:@<span class="string">&quot;foo:%@&quot;</span>, title];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="拦截-URL-Scheme"><a href="#拦截-URL-Scheme" class="headerlink" title="拦截 URL Scheme"></a>拦截 URL Scheme</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// H5 发送 URL Scheme 请求</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">callNative</span>(<span class="params"></span>) &#123;    </span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;js://getInfo&quot;</span>;   </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">nativeInfo</span>(<span class="params">info</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(info) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// h5 发起请求，通知 iOS 需要获取数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">callNative</span>();</span><br><span class="line">    <span class="comment">// 全局注册方法供安卓、Ios 调用，然后返回数据</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">nativeInfo</span> = <span class="variable language_">this</span>.<span class="property">nativeInfo</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android 拦截请求</span></span><br><span class="line">public boolean <span class="title function_">shouldOverrideUrlLoading</span>(<span class="params">WebView view, <span class="built_in">String</span> url</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断 url 拦截事件：解析出双方约定的协议参数</span></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">equals</span>(<span class="string">&quot;js://getInfo&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 自定义逻辑</span></span><br><span class="line">      view.<span class="title function_">loadUrl</span>(<span class="string">&quot;javascript:nativeInfo(&quot;</span> + json + <span class="string">&quot;);&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IOS 拦截 url scheme</span></span><br><span class="line">- (<span class="variable constant_">BOOL</span>)<span class="attr">webView</span>:(<span class="title class_">UIWebView</span> *)webView <span class="attr">shouldStartLoadWithRequest</span>:(<span class="title class_">NSURLRequest</span> *)</span><br><span class="line">request <span class="attr">navigationType</span>:(<span class="title class_">UIWebViewNavigationType</span>)navigationType &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable constant_">NSURL</span> *url = [request <span class="variable constant_">URL</span>];</span><br><span class="line">  <span class="title class_">NSString</span> *requestString = [[request <span class="variable constant_">URL</span>] absoluteString];</span><br><span class="line">  <span class="comment">// 获取 URL 并处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="拦截-prompt-x2F-confirm-x2F-alert"><a href="#拦截-prompt-x2F-confirm-x2F-alert" class="headerlink" title="拦截 prompt&#x2F;confirm&#x2F;alert"></a>拦截 prompt&#x2F;confirm&#x2F;alert</h3><blockquote>
<p>IOS 由于安全机制，WKWebView 对 alert、confirm、prompt 等方法做了拦截。如果通过此方式和 JS 交互，需要实现 WKWebView 的三个 WKUIDelegate 代理方法。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// let appBackData = window.prompt(&#x27;js://getInfo&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Android 重写 prompt</span></span><br><span class="line">public boolean <span class="title function_">onJsPrompt</span>(<span class="params"></span></span><br><span class="line"><span class="params">    WebView view, </span></span><br><span class="line"><span class="params">    <span class="built_in">String</span> url, </span></span><br><span class="line"><span class="params">    <span class="built_in">String</span> message,</span></span><br><span class="line"><span class="params">    <span class="built_in">String</span> defaultValue,</span></span><br><span class="line"><span class="params">    JsPromptResult result,</span></span><br><span class="line"><span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 自定义逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IOS 解决 prompt</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="attr">webView</span>:(<span class="title class_">WKWebView</span> *)webView <span class="attr">runJavaScriptTextInputPanelWithPrompt</span>:</span><br><span class="line">(<span class="title class_">NSString</span> *)prompt <span class="attr">defaultText</span>:(<span class="title class_">NSString</span> *)defaultText <span class="attr">initiatedByFrame</span>:</span><br><span class="line">(<span class="title class_">WKFrameInfo</span> *)frame <span class="attr">completionHandler</span>:(<span class="keyword">void</span> (^)(<span class="title class_">NSString</span> * _Nullable))completionHandler&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">UIAlertController</span> *alertController = [<span class="title class_">UIAlertController</span> <span class="attr">alertControllerWithTitle</span>:prompt <span class="attr">message</span>:@<span class="string">&quot;&quot;</span> <span class="attr">preferredStyle</span>:<span class="title class_">UIAlertControllerStyleAlert</span>];</span><br><span class="line"></span><br><span class="line">    [alertController <span class="attr">addTextFieldWithConfigurationHandler</span>:^(<span class="title class_">UITextField</span> * _Nonnull textField) &#123;</span><br><span class="line"></span><br><span class="line">        textField.<span class="property">text</span> = defaultText;</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    [alertController <span class="attr">addAction</span>:([<span class="title class_">UIAlertAction</span> <span class="attr">actionWithTitle</span>:@<span class="string">&quot;完成&quot;</span> <span class="attr">style</span>:<span class="title class_">UIAlertActionStyleDefault</span> <span class="attr">handler</span>:^(<span class="title class_">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">completionHandler</span>(alertController.<span class="property">textFields</span>[<span class="number">0</span>].<span class="property">text</span>?:@<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;])];</span><br><span class="line"></span><br><span class="line">    [self <span class="attr">presentViewController</span>:alertController <span class="attr">animated</span>:<span class="variable constant_">YES</span> <span class="attr">completion</span>:nil];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Native-调用-H5"><a href="#Native-调用-H5" class="headerlink" title="Native 调用 H5"></a>Native 调用 H5</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><blockquote>
<p>通过 loadUrl 调用，4.4+ 版本还可以通过 evaluateJavascript 调用。注意需要将 JS 方法暴露到 Window。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// H5</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">callAndroid</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;h5 数据&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android</span></span><br><span class="line"><span class="comment">// 4.4 版本之前：无法获取返回值，需要在 UI 线程运行</span></span><br><span class="line">webView = <span class="keyword">new</span> <span class="title class_">WebView</span>(<span class="variable language_">this</span>);       <span class="comment">// UI 控件      </span></span><br><span class="line">webView.<span class="title function_">loadUrl</span>(<span class="string">&quot;javascript: method(data)&quot;</span>); </span><br><span class="line"><span class="comment">// 4.4 及以后    </span></span><br><span class="line">webView.evaluateJavascript(<span class="string">&quot;javascript: method(data)&quot;</span>, </span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ValueCallback</span>&lt;<span class="title class_">String</span>&gt;() &#123;</span><br><span class="line">      @<span class="title class_">Override</span></span><br><span class="line">      public <span class="keyword">void</span> <span class="title function_">onReceiveValue</span>(<span class="params"><span class="built_in">String</span> value</span>) &#123;</span><br><span class="line">          <span class="comment">// value 即对应 JS 方法的返回值</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><blockquote>
<p>通过 stringByEvaluatingJavaScriptFromString、evaluateJavaScript 可以调用注册在 H5 window.top.foo 的全局方法。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UIWebview</span></span><br><span class="line">webview.<span class="title function_">stringByEvaluatingJavaScriptFromString</span>(<span class="string">&quot;method(data)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// WKWebview</span></span><br><span class="line">[jsContext <span class="attr">evaluateJavaScript</span>:@<span class="string">&quot;method(ev, data)&quot;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="JSBridge-通信"><a href="#JSBridge-通信" class="headerlink" title="JSBridge 通信"></a>JSBridge 通信</h2><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><ul>
<li><strong>JSBridge</strong>：<code>WebView JavaScript Bridge)</code>，用于构建 JS、Native 双向通信的交互方案，比如微信的 JS-SDK、wx 对象。主要为 JS 提供调用 Native 功能的接口，实现查看本地相册、打开摄像头、指纹支付等原生功能。</li>
<li><strong>实现原理</strong>：Android4.2 以下 addJavascriptInterface 方式有安全漏掉、iOS7 以下 JS 无法调用 Native。目前常用方案是兼容各个版本的 url scheme 方式，基本流程为 H5 触发一个 url scheme、Native 捕获并执行相应功能、Native 调用 h5 方法并将执行结果返回给 h5。</li>
<li><strong>引用方式</strong>：H5 引用可以通过 npm 安装封装上传的 jsBridge，这样需要做更多的兼容处理和维护成本。Native 注入的方式有利于保持 API、Native 的一致性，但是 JS 调用 Native 之前需要先判断 JSBridge 是否注入成功。</li>
</ul>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><blockquote>
<p>bridge.js 包含协议的拼接&#x2F;发送&#x2F;参数池&#x2F;回调池等基础功能、Native SDK 作为客户端 bridge 功能映射代码实现 URL 拦截与解析&#x2F;环境信息的注入&#x2F;通用功能映射等功能。注入时可将这两部分封装为一个 Native SDK 并由客户端统一引入。以下以 Android 为例：</p>
</blockquote>
  <div align="center">
      <img src="/images/mobile/bridge.png" alt="JSBridge 实现流程" width="100%">
  </div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callJSBridge</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">JSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;bridge&#x27;</span>, <span class="string">&#x27;showToast&#x27;</span>,</span><br><span class="line">        &#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;Hello JSBridge&#x27;</span>&#125;,</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res))</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsBridge.js</span></span><br><span class="line"><span class="attr">call</span>: <span class="keyword">function</span> (<span class="params">obj, method, params, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> port = <span class="title class_">Util</span>.<span class="title function_">getPort</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[port] = callback;</span><br><span class="line">    <span class="keyword">var</span> uri = <span class="title class_">Util</span>.<span class="title function_">getUri</span>(obj, method, params, port);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">prompt</span>(uri);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android</span></span><br><span class="line">@<span class="title class_">Override</span></span><br><span class="line">public boolean <span class="title function_">onJsPrompt</span>(<span class="params"></span></span><br><span class="line"><span class="params">    WebView view, </span></span><br><span class="line"><span class="params">    <span class="built_in">String</span> url, </span></span><br><span class="line"><span class="params">    <span class="built_in">String</span> message, </span></span><br><span class="line"><span class="params">    <span class="built_in">String</span> defaultValue, </span></span><br><span class="line"><span class="params">    JsPromptResult result</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    result.<span class="title function_">confirm</span>(<span class="title class_">JSBridge</span>.<span class="title function_">callJava</span>(view, message));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showToast</span>(<span class="params">  <span class="comment">// 管理暴露给前端使用的函数</span></span></span><br><span class="line"><span class="params">    WebView webView, </span></span><br><span class="line"><span class="params">    JSONObject param, </span></span><br><span class="line"><span class="params">    final JSBridge.Callback callback</span></span><br><span class="line"><span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">String</span> message = param.<span class="title function_">optString</span>(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">makeText</span>(webView.<span class="title function_">getContext</span>(),message,<span class="title class_">Toast</span>.<span class="property">LENGTH_LONG</span>).<span class="title function_">show</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">null</span> != callback)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">JSON</span><span class="built_in">Object</span> object = <span class="keyword">new</span> <span class="title class_">JSON</span><span class="built_in">Object</span>();</span><br><span class="line">            object.<span class="title function_">put</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">            object.<span class="title function_">put</span>(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;vaule1&quot;</span>);</span><br><span class="line">            callback.<span class="title function_">apply</span>(<span class="title function_">getJSONObject</span>(<span class="number">0</span>,<span class="string">&quot;ok&quot;</span>,object));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (<span class="title class_">Exception</span> e)&#123;</span><br><span class="line">            e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ================ jsBridge.js ===============</span></span><br><span class="line"><span class="comment">// app 加载完毕后修改 loadstatus</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">HQAppGetH5Header</span> = <span class="keyword">function</span> (<span class="params">n</span>) &#123; </span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">loadstatus</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 呼叫身份证扫描</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">idCardScan</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="title function_">clearTimer</span>()</span><br><span class="line">  <span class="keyword">const</span> idcard = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      options = options ? <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(options) : <span class="literal">undefined</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">HQAppJSInterface</span>.<span class="title function_">requestScanCertificateCard</span>(options)</span><br><span class="line">      <span class="variable language_">window</span>.**tid = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">status</span>) &#123;</span><br><span class="line">          <span class="title function_">clearTimer</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">SetCustomerRules</span>(<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">value</span>))</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// reject(&#x27;fail&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">30</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">checkload</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">idcard</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导入银行卡</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">getBank</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">clearTimer</span>()</span><br><span class="line">  <span class="keyword">const</span> bank = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">HQAppJSInterface</span>.<span class="title function_">requestScanBankCard</span>()</span><br><span class="line">      <span class="variable language_">window</span>.**tid = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// alert(&#x27;job=&#x27; + window.jsBridge.status.bank.status)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">status</span>) &#123;</span><br><span class="line">          <span class="title function_">clearTimer</span>()</span><br><span class="line">          <span class="comment">// alert(&#x27;job start=&#x27; + window.jsBridge.status.bank.status)</span></span><br><span class="line">          <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">value</span>)</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// reject(&#x27;fail&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">30</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">checkload</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">bank</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 呼叫 app 照相机</span></span><br><span class="line"><span class="keyword">let</span> timeid</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">callCamera</span> = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="title function_">clearTimer</span>()</span><br><span class="line">  <span class="keyword">let</span> camera = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">index</span> += <span class="number">1</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>[<span class="string">&#x27;camera&#x27;</span> + <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">index</span>] = &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">HQAppJSInterface</span>.<span class="title function_">takeUserImage</span>()</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">window</span>.**tid = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">status</span>) &#123;</span><br><span class="line">          <span class="title function_">clearTimer</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">value</span>, n)</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// reject(&#x27;fail&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">30</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">checkload</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">camera</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 呼叫app 照相机-裁剪</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">tailorCamera</span> = <span class="keyword">function</span> (<span class="params">n, bool, width, height</span>) &#123;</span><br><span class="line">  <span class="title function_">clearTimer</span>()</span><br><span class="line">  <span class="keyword">let</span> camera = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">index</span> += <span class="number">1</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>[<span class="string">&#x27;camera&#x27;</span> + <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">index</span>] = &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">HQAppJSInterface</span>.<span class="title function_">takeUserImage</span>(bool, width, height)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">window</span>.**tid = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">status</span>) &#123;</span><br><span class="line">          <span class="title function_">clearTimer</span>()</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">value</span>, n)</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">camera</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// reject(&#x27;fail&#x27;)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">30</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">checkload</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">camera</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ============ 组件调用 ============</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">idCardScan</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;scan&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getBank</span>().<span class="title function_">then</span>(<span class="title class_">JSON</span>.<span class="property">parse</span>).<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">onScan</span>).<span class="title function_">catch</span>(toast)</span><br></pre></td></tr></table></figure>


<h2 id="App-中接入-H5"><a href="#App-中接入-H5" class="headerlink" title="App 中接入 H5"></a>App 中接入 H5</h2><ul>
<li><strong>在线 H5</strong><ul>
<li>实现方式：将 H5 代码部署到服务器，通过 WebView 打开对应的 URL 即可嵌入。一般应用到帮助页、提示页等不需要复杂协议和离线使用的轻量级页面。</li>
<li>优点：独立性强而具有独立的开发&#x2F;调试&#x2F;更新&#x2F;上线能力、资源放在服务器上而完全不会影响客户端的包体积、完全的热更新机制而接入成本很低。</li>
<li>缺点：完全依赖网络，离线时无法打开页面，网络较慢时首屏加载也较慢。</li>
</ul>
</li>
<li><strong>内置包 H5</strong><ul>
<li>实现方式：本地化的嵌入方式，需要将代码进行打包后下发到客户端，并由客户端直接解压到本地储存中。一般应用在一些比较大和比较重要的模块。</li>
<li>优点：接近原生的用户体验、首屏加载速度快、可以不依赖网络而离线运行。</li>
<li>缺点：开发流程&#x2F;更新机制复杂、需要客户端和服务端的共同协作、增加包体积。</li>
</ul>
</li>
</ul>
<h2 id="H5-唤起应用程序"><a href="#H5-唤起应用程序" class="headerlink" title="H5 唤起应用程序"></a>H5 唤起应用程序</h2><blockquote>
<p>Window 系统注册表存储了系统和应用程序的设置信息，查看可通过 Windows + R 打开后输入 regedit。H5 通过注册表查找并通过 URL Scheme 协议打开应用程序，<code>&lt;a href=&quot;vscode://&quot;&gt;打开 vscode：// 后面为参数内容&lt;/a&gt;</code>。</p>
</blockquote>
  <div align="center">
      <img src="/images/mobile/regedit.png" alt="注册表" width="100%">
  </div>


<h1 id="二、跨平台框架"><a href="#二、跨平台框架" class="headerlink" title="二、跨平台框架"></a>二、跨平台框架</h1><blockquote>
<p><a href="https://www.zhihu.com/question/55714900">https://www.zhihu.com/question/55714900</a></p>
</blockquote>
<h2 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h2><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><h2 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h2><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><p><a href="https://uniapp.dcloud.net.cn/">https://uniapp.dcloud.net.cn/</a></p>
<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><p>跨平台技术<br><a href="https://juejin.cn/post/6922641090164195341#heading-10">https://juejin.cn/post/6922641090164195341#heading-10</a></p>
<p><a href="https://juejin.cn/post/6977171385349046286#heading-6">https://juejin.cn/post/6977171385349046286#heading-6</a><br><a href="https://juejin.cn/post/6854573218485927949">https://juejin.cn/post/6854573218485927949</a><br><a href="https://juejin.cn/post/7070504601107038244">https://juejin.cn/post/7070504601107038244</a></p>
<p><a href="http://www.apppark.cn/t-28064.html">http://www.apppark.cn/t-28064.html</a></p>
<h1 id="三、微信公众号"><a href="#三、微信公众号" class="headerlink" title="三、微信公众号"></a>三、微信公众号</h1><h2 id="基础介绍-1"><a href="#基础介绍-1" class="headerlink" title="基础介绍"></a>基础介绍</h2><h3 id="公众号类型"><a href="#公众号类型" class="headerlink" title="公众号类型"></a>公众号类型</h3><blockquote>
<p>订阅号存放在一个文件夹中且需要点开查看关注，服务号直接显示在聊天列表。个人只能申请订阅号，几乎没有可用的接口。</p>
</blockquote>
<ul>
<li><strong>订阅号</strong>：主要用于推送资讯而让用户阅读，每天只能群发一条消息。</li>
<li><strong>服务号</strong>：主要用于为企业、政府等提供对用户的服务，比如银行的服务号可以让用户查询账单等，每个月只可群发四条消息。</li>
<li><strong>企业号</strong>：主要用于公司内部通讯使用，旨在为用户提供移动办公，需要先有成员的通讯信息验证才可以关注成功企业微信。</li>
<li><strong>测试号</strong>：用于开发测试及功能体验，是专门为开发人员准备的一种仅用于测试的公众号，但不可使用微信支付等高级功能。</li>
</ul>
<h3 id="微信公众平台"><a href="#微信公众平台" class="headerlink" title="微信公众平台"></a>微信公众平台</h3><blockquote>
<p>用于管理注册过的公众号，比如自定义菜单、自动回复、推送文章等，主要有两种管理模式：<strong>编辑模式</strong>就是为所有人提供的，如果你的需求仅仅只是最常见的菜单、自动回复等，使用编辑模式已经满足。但是如果你需求的功能比较复杂，就需要使用到<strong>开发模式</strong>。</p>
</blockquote>
<ul>
<li><strong>编辑模式</strong>：主要针对非编程人员及信息发布类公众帐号使用，开启后可以直接通过界面配置自定义菜单、自动回复的消息。优点是可视化界面配置、操作简单快捷，但功能有限。</li>
<li><strong>开发模式</strong>：主要针对开发人员使用，开启后可以使用微信公众平台的开放接口，但编辑模式的自定义菜单等功能会失效。优点是可以实现更多的复杂功能，提供个性化服务。</li>
</ul>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul>
<li><strong>技术文档</strong>：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1445241432/">微信公众平台开发文档</a>、<a href="http://mp.weixin.qq.com/debug/">接口在线调试网址</a>。</li>
<li><strong>测试账号</strong>：拥有几乎所有的公众号接口但不支持微信支付，主要用于手机端开发测试。</li>
<li><strong>微信 API 在线调试</strong>：后端代码与微信服务器交互实现创建自定义菜单等功能，手机端可通过扫描测试号二维码查看最新效果。</li>
<li><strong>微信开发者工具</strong>：自带审查元素功能的微信浏览器，用于调试微信端页面。使用前需要绑定开发者微信号 (公众平台首页、开发者工具)。</li>
<li><strong>JS-SDK 工具包</strong>：基于微信内的网页开发工具包。开发者可用来借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，而且可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</li>
</ul>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="公众号配置"><a href="#公众号配置" class="headerlink" title="公众号配置"></a>公众号配置</h3><blockquote>
<p>手机端调试：扫码关注测试二维码。公众号域名可以是 http&#x2F;https，小程序必须是 https。</p>
</blockquote>
<ol>
<li>注册一个服务号并认证通过：只有服务号可以开通微信支付。</li>
<li>管理员为开发者添加服务号和商户平台的用户管理权限：微信公众平台的权限为运营者微信号、微信商户平台的权限为员工账号。</li>
<li><strong>开通微信支付功能</strong><br>* 公众号：拥有通过微信认证的公众帐号且为服务号、服务号和商户平台是一个账户主体。<br>* 商户平台：产品中心处开通公众号支付、扫码支付等所需要的支付方式，然后配置支付授权目录。注意小程序也属于公众号支付，不需要单独开通。</li>
<li><strong>配置公众号</strong><br>* 测试账号：JS 接口安全域名 (用于实现微信分享等功能，不需要加 http&#x2F;https)、授权回调页面域名 (用于用户登录和基本信息获取，只支持 80 端口，务必使服务器监听 80 端口)、接口配置信息 (URL、Token 由后端提供)。<br>* IP 白名单：在公众号后台设置服务器 IP 为白名单，否则无法获取 access_token。<br>* 自定义菜单：上线时配置 公众号网址 + 各个菜单对应的前端路由，比如公司简介 <code>https://wx.shanghailife.com.cn/aboutus</code>。</li>
</ol>
<h3 id="内网穿透环境"><a href="#内网穿透环境" class="headerlink" title="内网穿透环境"></a>内网穿透环境</h3><blockquote>
<p>公众号开发涉及到微信的回调，所以本地调试的内网服务器需要外网服务器能够连接通信。解决方案主要有两种：一是<strong>购买域名和云服务器并配置代理</strong>，将本地服务器网址映射到外网。二是使用<strong>内网穿透技术</strong>，让本地服务器直接穿透到外网。我们一般通过拥有免费通道的 natapp 实现内网穿透，但缺点是外网访问本地项目的地址经常会变化而不太稳定，具体配置如下：</p>
</blockquote>
<ol>
<li>登录并购买免费隧道：首次需要<a href="https://natapp.cn/register">注册</a>、点击购买并配置地址 <code>http://127.0.0.1:80</code>。</li>
<li>本机运行 web 服务：配置地址 <code>http://127.0.0.1:80</code>。</li>
<li>本机运行 natapp 服务：下载 <a href="https://natapp.cn/#download">natapp.exe</a>、获取 authtoken (我的隧道处)。<br>* 直接启动：<strong>natapp -authtoken&#x3D;9ab6b9040a624f40</strong><br>* 通过 config.ini：<a href="https://natapp.cn/article/config_ini">下载 config.ini</a> 并填入 authtoken 后双击启动。</li>
<li>测试 natapp 分配的网址：拔掉电脑网线后在浏览器地址栏打开即可。</li>
</ol>
<h3 id="接口参数"><a href="#接口参数" class="headerlink" title="接口参数"></a>接口参数</h3><ul>
<li><strong>appid</strong>：公众号唯一标识。</li>
<li><strong>secret</strong>：公众号开发密钥。</li>
<li><strong>openid</strong>：用户单平台的唯一标识，同一用户在公众号和小程序有不同的 openid。</li>
<li><strong>unionid</strong>：用户跨微信平台的唯一标识，同一用户在公众号和小程序有相同的 unionid。</li>
<li><strong>code</strong>：用户授权时用于获取 access_token，只能使用一次且 5分钟未被使用则自动过期。</li>
<li><strong>redirect_uri</strong>：完成授权后重定向的回调链接（其实是用户要访问的页面，注意转义）。</li>
<li><strong>response_type</strong> ：返回类型，固定为 code。</li>
<li><strong>state</strong>：重定向后被微信原样返回，可用于前后对比来防止别人的攻击。</li>
<li><strong>scope</strong>：授权方式。snsapi_base (不弹出授权页面而直接跳转，只能获取用户 openid)、snsapi_userinfo (弹出授权页面，可通过 openid 获取昵称、性别、所在地等信息)。</li>
<li><strong>#wechat_redirect</strong>：直接在微信打开链接的可选参数。实现页面 302 重定向时必须携带。</li>
</ul>
<h2 id="网页授权"><a href="#网页授权" class="headerlink" title="网页授权"></a>网页授权</h2><blockquote>
<p>用户通过扫码、点击按钮等方式进入公众号页面，没有用户信息时会跳转到微信授权页面，用户同意后则自动跳转到携带参数 code、state 的回调页面，然后通过 code 获取网页授权 access_token 后才能请求获取用户信息，详情可参考<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">官方文档</a>。注意区分 access_token：网页授权 access_token 不限制调用次数而且只要用户允许后就可以获取用户信息，普通 access_token 限制每日 2000 次而且必须关注公众号才能获取。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">后端接入：开源工具 weixin-java-tools  <span class="attr">https</span>:<span class="comment">//github.com/Wechat-Group/WxJava</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、pom.xml 引入 jar 包</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、application.yml 添加配置，没有则去申请测试账号</span></span><br><span class="line"><span class="attr">wechat</span>:</span><br><span class="line">  <span class="attr">mpAppId</span>: appid</span><br><span class="line">  <span class="attr">mpAppSecret</span>: appsecret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、新建读取配置文件 WechatMpProperties.java</span></span><br><span class="line">package com.<span class="property">hsc</span>.<span class="property">power</span>.<span class="property">dm</span>.<span class="property">wechat</span>.<span class="property">config</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.<span class="property">Data</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">boot</span>.<span class="property">context</span>.<span class="property">properties</span>.<span class="property">ConfigurationProperties</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">stereotype</span>.<span class="property">Component</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Data</span></span><br><span class="line">@<span class="title class_">Component</span></span><br><span class="line">@<span class="title class_">ConfigurationProperties</span>(prefix = <span class="string">&quot;wechat&quot;</span>)</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">WechatMpProperties</span> &#123;</span><br><span class="line">    private <span class="title class_">String</span> mpAppId;</span><br><span class="line">    private <span class="title class_">String</span> mpAppSecret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、新建自定义微信配置 WechatMpConfig.java</span></span><br><span class="line">package com.<span class="property">hsc</span>.<span class="property">power</span>.<span class="property">dm</span>.<span class="property">wechat</span>.<span class="property">config</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">api</span>.<span class="property">WxMpService</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">api</span>.<span class="property">impl</span>.<span class="property">WxMpServiceImpl</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">config</span>.<span class="property">WxMpConfigStorage</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">config</span>.<span class="property">impl</span>.<span class="property">WxMpDefaultConfigImpl</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">beans</span>.<span class="property">factory</span>.<span class="property">annotation</span>.<span class="property">Autowired</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">context</span>.<span class="property">annotation</span>.<span class="property">Bean</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">stereotype</span>.<span class="property">Component</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">WechatMpConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Autowired</span></span><br><span class="line">    private <span class="title class_">WechatMpProperties</span> wechatMpProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 WxMpService 所需信息</span></span><br><span class="line">    @<span class="title class_">Bean</span></span><br><span class="line">    public <span class="title class_">WxMpService</span> <span class="title function_">wxMpService</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">WxMpService</span> wxMpService = <span class="keyword">new</span> <span class="title class_">WxMpServiceImpl</span>();</span><br><span class="line">        <span class="comment">// 设置配置信息的存储位置</span></span><br><span class="line">        wxMpService.<span class="title function_">setWxMpConfigStorage</span>(<span class="title function_">wxMpConfigStorage</span>());</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 appId、appsecret</span></span><br><span class="line">    @<span class="title class_">Bean</span></span><br><span class="line">    public <span class="title class_">WxMpConfigStorage</span> <span class="title function_">wxMpConfigStorage</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">WxMpDefaultConfigImpl</span> wxMpDefaultConfig = <span class="keyword">new</span> <span class="title class_">WxMpDefaultConfigImpl</span>();</span><br><span class="line">        wxMpDefaultConfig.<span class="title function_">setAppId</span>(wechatMpProperties.<span class="title function_">getMpAppId</span>());</span><br><span class="line">        wxMpDefaultConfig.<span class="title function_">setSecret</span>(wechatMpProperties.<span class="title function_">getMpAppSecret</span>());</span><br><span class="line">        <span class="keyword">return</span> wxMpDefaultConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、新建微信用户 Bean</span></span><br><span class="line">package com.<span class="property">hsc</span>.<span class="property">power</span>.<span class="property">dm</span>.<span class="property">wechat</span>.<span class="property">vo</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.<span class="property">Data</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">bean</span>.<span class="property">result</span>.<span class="property">WxMpUser</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Data</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">WechatUser</span> &#123;</span><br><span class="line">    public <span class="title class_">WechatUser</span>(<span class="title class_">WxMpUser</span> wxMpUser, <span class="title class_">String</span> accessToken) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setAccessToken</span>(accessToken);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setOpenid</span>(wxMpUser.<span class="title function_">getOpenId</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setUnionId</span>(wxMpUser.<span class="title function_">getUnionId</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setNickname</span>(wxMpUser.<span class="title function_">getNickname</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setLanguage</span>(wxMpUser.<span class="title function_">getLanguage</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setCountry</span>(wxMpUser.<span class="title function_">getCountry</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setProvince</span>(wxMpUser.<span class="title function_">getCity</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setCity</span>(wxMpUser.<span class="title function_">getCity</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setSex</span>(wxMpUser.<span class="title function_">getSex</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setSexDesc</span>(wxMpUser.<span class="title function_">getSexDesc</span>());</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setHeadImgUrl</span>(wxMpUser.<span class="title function_">getHeadImgUrl</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title class_">String</span> openid;</span><br><span class="line">    private <span class="title class_">String</span> accessToken;</span><br><span class="line">    private <span class="title class_">String</span> unionId;</span><br><span class="line">    private <span class="title class_">String</span> nickname;</span><br><span class="line">    private <span class="title class_">String</span> language;</span><br><span class="line">    private <span class="title class_">String</span> country;</span><br><span class="line">    private <span class="title class_">String</span> province;</span><br><span class="line">    private <span class="title class_">String</span> city;</span><br><span class="line">    private <span class="title class_">Integer</span> sex;</span><br><span class="line">    private <span class="title class_">String</span> sexDesc;</span><br><span class="line">    private <span class="title class_">String</span> headImgUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 6、授权接口 WechatController.java</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  /auth：获取授权跳转地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  /auth/user/info：初次授权获取用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span>  /token/user/info：静默授权获取用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">package com.<span class="property">hsc</span>.<span class="property">power</span>.<span class="property">dm</span>.<span class="property">wechat</span>.<span class="property">web</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">baomidou</span>.<span class="property">mybatisplus</span>.<span class="property">core</span>.<span class="property">toolkit</span>.<span class="property">ExceptionUtils</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">hsc</span>.<span class="property">power</span>.<span class="property">core</span>.<span class="property">base</span>.<span class="property">ret</span>.<span class="property">Rb</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">hsc</span>.<span class="property">power</span>.<span class="property">dm</span>.<span class="property">wechat</span>.<span class="property">vo</span>.<span class="property">WechatUser</span>;</span><br><span class="line"><span class="keyword">import</span> lombok.<span class="property">extern</span>.<span class="property">slf4j</span>.<span class="property">Slf4j</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">common</span>.<span class="property">api</span>.<span class="property">WxConsts</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">common</span>.<span class="property">error</span>.<span class="property">WxErrorException</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">api</span>.<span class="property">WxMpService</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">bean</span>.<span class="property">result</span>.<span class="property">WxMpOAuth2AccessToken</span>;</span><br><span class="line"><span class="keyword">import</span> me.<span class="property">chanjar</span>.<span class="property">weixin</span>.<span class="property">mp</span>.<span class="property">bean</span>.<span class="property">result</span>.<span class="property">WxMpUser</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">beans</span>.<span class="property">factory</span>.<span class="property">annotation</span>.<span class="property">Autowired</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">GetMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RequestMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RequestParam</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RestController</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">net</span>.<span class="property">URLEncoder</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Slf4</span>j</span><br><span class="line">@<span class="title class_">RestController</span></span><br><span class="line">@<span class="title class_">RequestMapping</span>(<span class="string">&quot;/wechat&quot;</span>)</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">WechatController</span> &#123;</span><br><span class="line">    @<span class="title class_">Autowired</span></span><br><span class="line">    private <span class="title class_">WxMpService</span> wxMpService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 code 参数：returnUrl 需要跳转的重定向 url</span></span><br><span class="line">    @<span class="title class_">GetMapping</span>(<span class="string">&quot;/auth&quot;</span>)</span><br><span class="line">    public <span class="title class_">Rb</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">authorize</span>(<span class="params">@RequestParam <span class="built_in">String</span> authCallbackUrl, </span></span><br><span class="line"><span class="params">    @RequestParam <span class="built_in">String</span> returnUrl</span>) &#123;</span><br><span class="line">        <span class="comment">// 暂时将回调地址硬编码在这里，方便调试</span></span><br><span class="line">        <span class="title class_">String</span> redirectUrl = wxMpService.<span class="title function_">oauth2buildAuthorizationUrl</span>(</span><br><span class="line">            authCallbackUrl, </span><br><span class="line">            <span class="title class_">WxConsts</span>.<span class="property">OAuth2Scope</span>.<span class="property">SNSAPI_USERINFO</span>, </span><br><span class="line">            <span class="title class_">URLEncoder</span>.<span class="title function_">encode</span>(returnUrl)</span><br><span class="line">        );</span><br><span class="line">        log.<span class="title function_">info</span>(<span class="string">&quot;【微信网页授权】获取code，redirectUrl = &#123;&#125;&quot;</span>, redirectUrl);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Rb</span>.<span class="title function_">ok</span>(redirectUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初次授权获取用户信息</span></span><br><span class="line">    @<span class="title class_">GetMapping</span>(<span class="string">&quot;/auth/user/info&quot;</span>)</span><br><span class="line">    public <span class="title class_">Rb</span>&lt;<span class="title class_">WechatUser</span>&gt; <span class="title function_">userInfo</span>(<span class="params">@RequestParam(<span class="string">&quot;code&quot;</span>) <span class="built_in">String</span> code, </span></span><br><span class="line"><span class="params">    @RequestParam(<span class="string">&quot;state&quot;</span>) <span class="built_in">String</span> returnUrl</span>) &#123;</span><br><span class="line">        <span class="title class_">WxMpOAuth2AccessToken</span> wxMpOAuth2AccessToken;</span><br><span class="line">        <span class="title class_">WxMpUser</span> wxMpUser;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用 code 换取 access_token 信息</span></span><br><span class="line">            wxMpOAuth2AccessToken = wxMpService.<span class="title function_">oauth2getAccessToken</span>(code);</span><br><span class="line">            wxMpUser = wxMpService.<span class="title function_">oauth2getUserInfo</span>(wxMpOAuth2AccessToken, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">WxErrorException</span> e) &#123;</span><br><span class="line">            log.<span class="title function_">error</span>(<span class="string">&quot;【微信网页授权】异常，&#123;&#125;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">ExceptionUtils</span>.<span class="title function_">mpe</span>(e.<span class="title function_">getError</span>().<span class="title function_">getErrorMsg</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从 access_token 信息中获取到用户的 openid</span></span><br><span class="line">        <span class="title class_">String</span> openId = wxMpOAuth2AccessToken.<span class="title function_">getOpenId</span>();</span><br><span class="line">        log.<span class="title function_">info</span>(<span class="string">&quot;【微信网页授权】获取openId，openId = &#123;&#125;&quot;</span>, openId);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">WechatUser</span> wechatUser = <span class="keyword">new</span> <span class="title class_">WechatUser</span>(wxMpUser, wxMpOAuth2AccessToken.<span class="title function_">getAccessToken</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Rb</span>.<span class="title function_">ok</span>(wechatUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静默授权获取用户信息：openid、token</span></span><br><span class="line">    @<span class="title class_">GetMapping</span>(<span class="string">&quot;/token/user/info&quot;</span>)</span><br><span class="line">    public <span class="title class_">Rb</span>&lt;<span class="title class_">WechatUser</span>&gt; <span class="title function_">getUserInfo</span>(<span class="params">@RequestParam <span class="built_in">String</span> openid, </span></span><br><span class="line"><span class="params">    @RequestParam <span class="built_in">String</span> token</span>) &#123;</span><br><span class="line">        <span class="title class_">WxMpOAuth2AccessToken</span> wxMpOAuth2AccessToken = <span class="keyword">new</span> <span class="title class_">WxMpOAuth2AccessToken</span>();</span><br><span class="line">        wxMpOAuth2AccessToken.<span class="title function_">setOpenId</span>(openid);</span><br><span class="line">        wxMpOAuth2AccessToken.<span class="title function_">setAccessToken</span>(token);</span><br><span class="line">        <span class="comment">// 判断 accessToken是否失效，失效即刷新 accecssToken</span></span><br><span class="line">        boolean ret = wxMpService.<span class="title function_">oauth2validateAccessToken</span>(wxMpOAuth2AccessToken);</span><br><span class="line">        <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wxMpOAuth2AccessToken = wxMpService.<span class="title function_">oauth2refreshAccessToken</span>(wxMpOAuth2AccessToken.<span class="title function_">getRefreshToken</span>());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="title class_">WxErrorException</span> e) &#123;</span><br><span class="line">                log.<span class="title function_">error</span>(<span class="string">&quot;【微信网页授权】刷新token失败，&#123;&#125;&quot;</span>, e.<span class="title function_">getError</span>().<span class="title function_">getErrorMsg</span>());</span><br><span class="line">                <span class="keyword">throw</span> <span class="title class_">ExceptionUtils</span>.<span class="title function_">mpe</span>(e.<span class="title function_">getError</span>().<span class="title function_">getErrorMsg</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">WxMpUser</span> wxMpUser = wxMpService.<span class="title function_">oauth2getUserInfo</span>(wxMpOAuth2AccessToken, <span class="literal">null</span>);</span><br><span class="line">            <span class="title class_">WechatUser</span> wechatUser = <span class="keyword">new</span> <span class="title class_">WechatUser</span>(wxMpUser, wxMpOAuth2AccessToken.<span class="title function_">getAccessToken</span>());</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Rb</span>.<span class="title function_">ok</span>(wechatUser);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">WxErrorException</span> e) &#123;</span><br><span class="line">            log.<span class="title function_">error</span>(<span class="string">&quot;【微信网页授权】获取用户信息失败，&#123;&#125;&quot;</span>, e.<span class="title function_">getError</span>().<span class="title function_">getErrorMsg</span>());</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">ExceptionUtils</span>.<span class="title function_">mpe</span>(e.<span class="title function_">getError</span>().<span class="title function_">getErrorMsg</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">前端接入</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、环境配置 main.js</span></span><br><span class="line"><span class="keyword">let</span> appid = &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&#x27;wx0431d286df253cea&#x27;</span>,</span><br><span class="line">    <span class="attr">uat</span>: <span class="string">&#x27;wx58656f9344fbc048&#x27;</span>,</span><br><span class="line">    <span class="attr">prd</span>: <span class="string">&#x27;wx7899e3317bf82ab8&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> domain = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;development&quot;</span>:</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">appid</span> = appid.<span class="property">test</span></span><br><span class="line">        domain = <span class="string">&quot;10.52.200.2:9011&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;production&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> (location.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;test&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">appid</span> = appid.<span class="property">test</span></span><br><span class="line">          domain = <span class="string">&quot;shlife-test.zhongan.io&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (location.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;wxdat&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">appid</span> = appid.<span class="property">test</span></span><br><span class="line">          domain = <span class="string">&quot;wxdat.shanghailife.com.cn&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(location.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;wxpre&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">appid</span> = appid.<span class="property">uat</span></span><br><span class="line">          domain = <span class="string">&quot;wxpre.shanghailife.com.cn&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">appid</span> = appid.<span class="property">prd</span></span><br><span class="line">          domain = <span class="string">&quot;wx.shanghailife.com.cn&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = location.<span class="property">protocol</span> + <span class="string">&quot;//&quot;</span> + domain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、路由拦截 router.js</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!to.<span class="property">meta</span>.<span class="property">noAuth</span>) &#123;   <span class="comment">// 需要授权的页面</span></span><br><span class="line">        <span class="keyword">if</span> (_.<span class="title function_">isEmpty</span>(store.<span class="property">getters</span>.<span class="property">wechatUserInfo</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                !_.<span class="title function_">isEmpty</span>(store.<span class="property">getters</span>.<span class="property">openid</span>) &amp;&amp;</span><br><span class="line">                !_.<span class="title function_">isEmpty</span>(store.<span class="property">getters</span>.<span class="property">accessToken</span>)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// 存在 openid、accessToken 则已授权，判断是否过期，过期则刷新</span></span><br><span class="line">                store.<span class="title function_">dispatch</span>(<span class="string">&#x27;getUserInfo&#x27;</span>)</span><br><span class="line">                <span class="title function_">next</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 跳转到授权页面</span></span><br><span class="line">                <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentUrl&#x27;</span>, to.<span class="property">fullPath</span>)</span><br><span class="line">                <span class="title function_">next</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;auth&#x27;</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、授权页面</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/auth&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;auth&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123; <span class="built_in">require</span>([<span class="string">&#x27;@/views/auth/index.vue&#x27;</span>], resolve) &#125;,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">noAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//open.weixin.qq.com/connect/oauth2/authorize?appid=$&#123;appid&#125;&amp;redirect_uri</span></span><br><span class="line">=$&#123;<span class="variable constant_">URI</span>&#125;&amp;response_type=code&amp;scope=$&#123;<span class="variable constant_">SCOPE</span>&#125;&amp;state=<span class="variable constant_">STATE</span>#wechat_redirect</span><br><span class="line"></span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;@/config&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> <span class="title class_">WechatService</span> <span class="keyword">from</span> <span class="string">&#x27;@/api/wechat&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">WechatService</span>.<span class="title function_">auth</span>(config.<span class="property">WechatAuthCallbackUrl</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (res.<span class="title function_">ok</span>()) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = res.<span class="property">data</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、授权 store：在vuex中进行授权和存储用户信息</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">WechatService</span> <span class="keyword">from</span> <span class="string">&#x27;@/api/wechat&#x27;</span></span><br><span class="line"><span class="keyword">import</span> localStorageUtil <span class="keyword">from</span> <span class="string">&#x27;@/utils/LocalStorageUtil&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">unionId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">openid</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">accessToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">wechatUserInfo</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">unionId</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">unionId</span> || localStorageUtil.<span class="title function_">get</span>(<span class="string">&#x27;unionId&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">openid</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">openid</span> || localStorageUtil.<span class="title function_">get</span>(<span class="string">&#x27;openid&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">accessToken</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">accessToken</span> || localStorageUtil.<span class="title function_">get</span>(<span class="string">&#x27;accessToken&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">wechatUserInfo</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">wechatUserInfo</span> || localStorageUtil.<span class="title function_">get</span>(<span class="string">&#x27;wechatUserInfo&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 保存 userInfo，设置有效时间，默认30天</span></span><br><span class="line">    <span class="attr">saveWechatUserInfo</span>: <span class="function">(<span class="params">state, res</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">wechatUserInfo</span> = res</span><br><span class="line">        state.<span class="property">unionId</span> = res.<span class="property">unionId</span></span><br><span class="line">        state.<span class="property">openid</span> = res.<span class="property">openid</span></span><br><span class="line">        state.<span class="property">accessToken</span> = res.<span class="property">accessToken</span></span><br><span class="line">        localStorageUtil.<span class="title function_">set</span>(<span class="string">&#x27;unionId&#x27;</span>, res.<span class="property">unionId</span>)</span><br><span class="line">        localStorageUtil.<span class="title function_">set</span>(<span class="string">&#x27;openid&#x27;</span>, res.<span class="property">openid</span>)</span><br><span class="line">        localStorageUtil.<span class="title function_">set</span>(<span class="string">&#x27;accessToken&#x27;</span>, res.<span class="property">accessToken</span>)</span><br><span class="line">        localStorageUtil.<span class="title function_">set</span>(<span class="string">&#x27;wechatUserInfo&#x27;</span>, res, <span class="number">30</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 静默授权获取用户信息</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getUserInfo</span>(<span class="params">&#123; commit, getters &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> openid = getters.<span class="property">openid</span></span><br><span class="line">        <span class="keyword">const</span> token = getters.<span class="property">accessToken</span></span><br><span class="line">        <span class="keyword">if</span> (!_.<span class="title function_">isEmpty</span>(openid) &amp;&amp; !_.<span class="title function_">isEmpty</span>(token)) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">WechatService</span>.<span class="title function_">getUserInfo</span>(openid, token)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="title function_">ok</span>()) &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;saveWechatUserInfo&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初次授权获取用户信息</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getAuthUserInfo</span>(<span class="params">&#123; commit &#125;, &#123; code, state &#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_.<span class="title function_">isEmpty</span>(code) &amp;&amp; !_.<span class="title function_">isEmpty</span>(state)) &#123;</span><br><span class="line">            <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">WechatService</span>.<span class="title function_">getAuthUserInfo</span>(code, state)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="title function_">ok</span>()) &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;saveWechatUserInfo&#x27;</span>, res.<span class="property">data</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、自定义存储工具 localStorageUtil.js：用于设置保存有效期</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key, defaultValue</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">parse</span>(key, defaultValue)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, obj, expires</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (expires) &#123;</span><br><span class="line">          <span class="keyword">const</span> tmpTime = <span class="title function_">moment</span>().<span class="title function_">add</span>(expires, <span class="string">&#x27;days&#x27;</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>)</span><br><span class="line">          <span class="keyword">const</span> handleObj = &#123; <span class="attr">expires</span>: tmpTime, <span class="attr">value</span>: obj &#125;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(handleObj))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (_.<span class="title function_">isObject</span>(obj)) &#123;</span><br><span class="line">              <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, obj)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">parse</span>(<span class="params">key, defaultValue</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">      <span class="keyword">if</span> (_.<span class="title function_">isObject</span>(value)) &#123;</span><br><span class="line">          <span class="keyword">const</span> valueObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(value)</span><br><span class="line">          <span class="comment">// 有过期时间，判断是否过期：在现在时间之前，过期</span></span><br><span class="line">          <span class="keyword">if</span> (valueObj.<span class="property">expires</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="title function_">moment</span>(valueObj.<span class="property">expires</span>).<span class="title function_">isBefore</span>(<span class="title function_">moment</span>(), <span class="string">&#x27;day&#x27;</span>)) &#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="title function_">remove</span>(key)</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> valueObj.<span class="property">value</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 没有过期时间直接返回对象</span></span><br><span class="line">          <span class="keyword">return</span> valueObj</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 不是对象则返回值</span></span><br><span class="line">      <span class="keyword">return</span> value || defaultValue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="分享-x2F-支付"><a href="#分享-x2F-支付" class="headerlink" title="分享&#x2F;支付"></a>分享&#x2F;支付</h2><blockquote>
<p>公众号的内嵌 H5 页面实现微信分享、支付等功能需要引入 <strong>JS-SDK</strong>，而且必须先注入配置信息让微信验证是否支持。vue 项目注意：1、路由必须使用 history 模式，因为各个页面需要不同的签名信息，而且安卓设备的微信会自动截取 # 后面的内容而无法分享，2、iOS 需要使用第一次进入页面的 URL 获取签名，安卓每次路由切换都重新配置签名，具体如下：</p>
</blockquote>
  <div align="center">
      <img src="/images/webchat/mode-skip.png" alt="页面跳转" width="100%">
  </div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install axios weixin-js-sdk -S</span><br><span class="line"></span><br><span class="line"><span class="comment">// wxSetting.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> wx <span class="keyword">from</span> <span class="string">&#x27;weixin-js-sdk&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  wxConfig (callback) &#123;</span><br><span class="line">    <span class="comment">// 微信签名等配置数据需要从服务器获取 (url 参数需要编码)</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="built_in">encodeURIComponent</span>(location.<span class="property">href</span>.<span class="title function_">split</span>(<span class="string">&quot;#/&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">`/api/getShareSign?url=<span class="subst">$&#123;url&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 微信验证</span></span><br><span class="line">      <span class="keyword">const</span> &#123;appId, timestamp, nonceStr, signature&#125; = res.<span class="property">data</span></span><br><span class="line">      wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">          <span class="attr">debug</span>: <span class="literal">true</span>,  <span class="comment">// 开启调试模式</span></span><br><span class="line">          appId,        <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">          timestamp,    <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">          nonceStr,     <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">          signature,    <span class="comment">// 必填，签名 </span></span><br><span class="line">          <span class="attr">jsApiList</span>: [  <span class="comment">// 必填，需要使用的接口列表</span></span><br><span class="line">              <span class="string">&#x27;updateAppMessageShareData&#x27;</span>, </span><br><span class="line">              <span class="string">&#x27;updateTimelineShareData&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;scanQRCode&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;chooseImage&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;uploadImage&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 验证成功：执行微信功能函数 share、scan</span></span><br><span class="line">      wx.<span class="title function_">ready</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          callback &amp;&amp; <span class="title function_">callback</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 验证失败</span></span><br><span class="line">      wx.<span class="title function_">error</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(err.<span class="property">errMsg</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 自定义分享</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; data 分享内容</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; fullPath 分享路径，传入 this.$route.fullPath</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">share</span>(<span class="params">data, fullPath</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;title, imgUrl, desc&#125; = data</span><br><span class="line">      <span class="keyword">let</span> link = location.<span class="property">protocol</span> + <span class="string">&#x27;//&#x27;</span> + location.<span class="property">host</span> + fullPath</span><br><span class="line">      <span class="comment">// 分享到朋友圈：link 不需要编码但必须加 http://</span></span><br><span class="line">      wx.<span class="title function_">updateTimelineShareData</span>(&#123;</span><br><span class="line">          title,   <span class="comment">// 分享标题</span></span><br><span class="line">          imgUrl,  <span class="comment">// 分享图标</span></span><br><span class="line">          link,    <span class="comment">// 分享链接，域名必须与当前页面对应的公众号安全域名一致</span></span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title class_">Toast</span>(<span class="string">&#x27;分享成功&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 分享给朋友</span></span><br><span class="line">      wx.<span class="title function_">updateAppMessageShareData</span>(&#123;</span><br><span class="line">          title,</span><br><span class="line">          desc,</span><br><span class="line">          link,</span><br><span class="line">          imgUrl,</span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              <span class="title class_">Toast</span>(<span class="string">&#x27;分享成功&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 禁止微信分享</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desption</span> share(&#123; hideMenuItems: true &#125;, $route.fullPath)、hideOptionMenu()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="title function_">hideOptionMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onBridgeReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>.<span class="title function_">call</span>(<span class="string">&quot;hideOptionMenu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WeixinJSBridge</span> === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, onBridgeReady, <span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;WeixinJSBridgeReady&quot;</span>, onBridgeReady);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;onWeixinJSBridgeReady&quot;</span>, onBridgeReady);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">onBridgeReady</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 调用微信扫一扫接口</span></span><br><span class="line">  <span class="title function_">scan</span>(<span class="params"></span>)&#123;</span><br><span class="line">    wx.<span class="title function_">scanQRCode</span>(&#123;</span><br><span class="line">      <span class="attr">needResult</span>: <span class="number">0</span>,      <span class="comment">// 默认为 0，扫描结果由微信处理，1则直接返回扫描结果</span></span><br><span class="line">      <span class="attr">scanType</span>: [<span class="string">&quot;qrCode&quot;</span>,<span class="string">&quot;barCode&quot;</span>], <span class="comment">// 指定扫二维码还是一维码，默认二者都有</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = res.<span class="property">resultStr</span>;  <span class="comment">// needResult 为 1 时，扫码返回的结果</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 图片上传</span></span><br><span class="line">  <span class="title function_">openCamera</span>(<span class="params"></span>)&#123;</span><br><span class="line">    wx.<span class="title function_">chooseImage</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">1</span>,              <span class="comment">// 默认9</span></span><br><span class="line">      <span class="attr">sizeType</span>: [<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;compressed&#x27;</span>], <span class="comment">// 指定是原图还是压缩图，默认都有</span></span><br><span class="line">      <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>],      <span class="comment">// 指定来源是相册还是相机，默认都有</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> localIds = res.<span class="property">localIds</span>;</span><br><span class="line">          wx.<span class="title function_">uploadImage</span>(&#123;</span><br><span class="line">              <span class="attr">localId</span>: localIds.<span class="title function_">toString</span>(),  <span class="comment">// 图片 ID</span></span><br><span class="line">              <span class="attr">isShowProgressTips</span>: <span class="number">1</span>,         <span class="comment">// 进度提示</span></span><br><span class="line">              <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123; &#125;,</span><br><span class="line">              <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123; &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 微信支付：本质是对微信浏览器内置方法 weixinjsbridge.invoke() 的再次封装</span></span><br><span class="line">  <span class="title function_">wxPay</span>(<span class="params">options</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;appId, timeStamp, nonceStr, package, signType, paySign&#125; = options</span><br><span class="line">    wx.<span class="title function_">chooseWXPay</span>(&#123;</span><br><span class="line">        appId,</span><br><span class="line">        <span class="attr">timestamp</span>: timeStamp,  <span class="comment">// 支付签名时间戳，但新版支付后台返回 timeStamp</span></span><br><span class="line">        nonceStr,   <span class="comment">// 支付签名随机串</span></span><br><span class="line">        package,    <span class="comment">// 统一支付接口返回的参数值，提交格式如：prepay_id=\*\*\*</span></span><br><span class="line">        signType,   <span class="comment">// 签名方式，默认为&#x27;SHA1&#x27;，使用新版支付需传入&#x27;MD5&#x27;</span></span><br><span class="line">        paySign,    <span class="comment">// 支付签名</span></span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; success &amp;&amp; <span class="title function_">success</span>() &#125;,</span><br><span class="line">        <span class="attr">cancel</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; cancel &amp;&amp; <span class="title function_">cancel</span>(res) &#125;,  </span><br><span class="line">        <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; error &amp;&amp; <span class="title function_">error</span>(res) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、移动端支付"><a href="#四、移动端支付" class="headerlink" title="四、移动端支付"></a>四、移动端支付</h1><blockquote>
<p>通过宿主环境主要可分为 APP 支付、微信支付、小程序支付、浏览器 H5 支付等，常见支付方式及其场景如下：</p>
</blockquote>
  <div align="center">
      <img src="/images/mobile/payment.png" alt="支付方式" width="100%">
  </div>

<h2 id="APP-支付"><a href="#APP-支付" class="headerlink" title="APP 支付"></a>APP 支付</h2><ul>
<li><strong>前端工作</strong>：调用业务创建订单接口并获取订单 id、调用业务发起支付接口并获取支付信息、调用第三方支付提供的 SDK jsbridge 将支付信息传给第三方支付平台、成功调用 jsbridge 后就通过服务端轮询或 websocket 获取用户支付状态并然后更新页面。</li>
<li><strong>IAP 支付</strong>：In-App Purchase，即用户在 APP 内就能完成购买。IOS 强制使用有交易抽成的 AppStore，Android 需要开发 GooglePlay 等应用商店才能支持而但各个厂商不统一。</li>
<li><strong>第三方支付</strong>：跳转到支付宝等第三方 APP 才能完成支付行为，Android 大多数采用的方式。</li>
</ul>
  <div align="center">
      <img src="/images/mobile/IAP.png" alt="IAP" width="100%">
  </div>

  <div align="center">
      <img src="/images/mobile/otherpay.png" alt="第三方支付" width="100%">
  </div>


<h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><blockquote>
<p><a href="https://pay.weixin.qq.com/wiki/doc/api/index.html">微信支付平台开发文档</a>：付款码支付、JSAPI 支付、Native 支付、APP 支付、H5 支付、小程序支付、刷脸支付。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// H5 支付流程：配置支付目录、获取用户标示 openid、用户支付并获取预支付信息、调用微信 jsapi</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wxpay</span> (params, callback)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WeixinJSBridge</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// _onBridge: onBridgeReady(params, callback)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">addEventListener</span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, _onBridge, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">attachEvent</span>)&#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, _onBridge); </span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onWeixinJSBridgeReady&#x27;</span>, _onBridge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">onBridgeReady</span>(params, callback);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onBridgeReady</span> (payParam, callback) &#123;   <span class="comment">// 预支付信息、支付回调函数</span></span><br><span class="line">    payParam = &#123;     </span><br><span class="line">        <span class="attr">appId</span>: <span class="string">&quot;wx2421b1c4370ec43b&quot;</span>,      <span class="comment">// 公众号 id，由商户传入 </span></span><br><span class="line">        <span class="attr">timeStamp</span>: <span class="string">&quot;1395712654&quot;</span>,          <span class="comment">// 时间戳，自1970年以来的秒数   </span></span><br><span class="line">        <span class="attr">nonceStr</span>: <span class="string">&quot;e61463f8efa94090&quot;</span>,     <span class="comment">// 随机字符串  </span></span><br><span class="line">        <span class="attr">package</span>: <span class="string">&quot;prepay_id=u802345jgf&quot;</span>,  <span class="comment">// 订单详情扩展字符串</span></span><br><span class="line">        <span class="attr">signType</span>: <span class="string">&quot;MD5&quot;</span>,                  <span class="comment">// 微信签名方式</span></span><br><span class="line">        <span class="attr">paySign</span>: <span class="string">&quot;70EA570631E4BB79&quot;</span>       <span class="comment">// 微信签名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(<span class="string">&#x27;getBrandWCPayRequest&#x27;</span>, payParam, <span class="keyword">function</span>(<span class="params">res</span>)&#123;  </span><br><span class="line">        <span class="title function_">callback</span>(res)</span><br><span class="line">        <span class="keyword">switch</span> (res.<span class="property">err_msg</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;get_brand_wcpay_request:ok&quot;</span>:</span><br><span class="line">                <span class="comment">// 支付成功</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;get_brand_wcpay_request:fail&quot;</span>:</span><br><span class="line">                <span class="comment">// 支付失败</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;get_brand_wcpay_request:cancel&quot;</span>:</span><br><span class="line">                <span class="comment">// 取消支付</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小程序支付流程：获取 openid、用户发起支付并获取预支付信息、小程序调用 wx.requestPayment</span></span><br><span class="line">wx.<span class="title function_">requestPayment</span>(&#123; </span><br><span class="line">    ...payParam, </span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;&#125;, </span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;&#125;, </span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="H5-支付"><a href="#H5-支付" class="headerlink" title="H5 支付"></a>H5 支付</h2><blockquote>
<p>从手机浏览器直接唤起微信或支付宝进行支付，也通过生成二维码让用户扫描支付。注意嵌入到小程序的 h5 页面不支持 h5 原生支付，但可以通过 window.wx.miniProgram.navigateTo 跳转到小程序页面支付。以下为拉起微信支付的流程图：</p>
</blockquote>
  <div align="center">
      <img src="/images/mobile/h5pay.png" alt="H5 支付" width="100%">
  </div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 中间页</span></span><br><span class="line"><span class="comment"> * https://wx.tenpay.com/cgi-bin/mmpayweb-bin/checkmweb?</span></span><br><span class="line"><span class="comment"> prepay_id=wx162128390473563d952e4f371ca7d70000&amp;package=2985141145&amp;</span></span><br><span class="line"><span class="comment"> redirect_url=https%3A%2F%2Fwww.ggl.cn%2Feggl%2Fh5%2Fsale%2Fpay%2Fresult</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> prepay_id、package：支付相关参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> redirect_url：支付成功、取消、超时返回浏览器要打开的页面地址</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> deeplink:</span></span><br><span class="line"><span class="comment"> * weixin://wap/pay?prepayid%3Dwx162128390473563d952e4f371ca7d70000</span></span><br><span class="line"><span class="comment"> &amp;package=2985141145&amp;noncestr=1623850119&amp;sign=bfc799bb3c643e44c0a334b53</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goWechatPayH5</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> cur_url = <span class="built_in">encodeURI</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> + <span class="string">&#x27;?openLayer=1&#x27;</span>)</span><br><span class="line">    <span class="title function_">axios</span>(&#123; </span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(prames)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> mweb_url = res.<span class="property">data</span>.<span class="property">mweb_url</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = mweb_url + <span class="string">&#x27;&amp;redirect_url=&#x27;</span> + cur_url;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">400</span>) &#123;</span><br><span class="line">            _this.$toast(res.<span class="property">error</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>移动端开发</category>
      </categories>
      <tags>
        <tag>移动端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端开发</title>
    <url>/2019/06/24/8-1-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="一、混合开发"><a href="#一、混合开发" class="headerlink" title="一、混合开发"></a>一、混合开发</h1><blockquote>
<p>即跨平台应用开发：利用单个共享代码库和用户界面为 Android、iOS 开发移动应用程序，为 Windows、macOS 开发桌面应用程序。</p>
</blockquote>
<h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><ul>
<li>应用开发模式<ul>
<li><strong>Native App</strong>：传统的原生 APP 开发模式。Android 基于 Java 语言并在底层调用 Google API，IOS 基于 objective-c&#x2F;swift 语言并在底层调用 App API。支持离线运行、支持设备所有功能、用户体验最好，但是开发成本高、更新版本时需要用户重新下载安装。</li>
<li><strong>Web App</strong>：网页开发模式，即将 SPA 模式等开发出的 Html5 页面部署在服务器并让用户使用手机浏览器访问。开发成本较低、跨平台开发、用户可直接访问最新版本，但是用户体验最差、不能调用相机等系统功能。</li>
<li><strong>Hybrid App</strong>：混合开发模式，即使用原生语言编写功能性的应用外壳，然后在 webview 内嵌展示性的 H5 页面，实现时由 Native 通过 JSBridge 等方法提供统一 API 并通过 Html5、JS 实现具体逻辑。兼具 Native 原生体验和 H5 跨平台开发和快速迭代的优势，但是对网络要求较高。</li>
</ul>
</li>
<li>混合开发方案<ul>
<li><strong>Capacitor&#x2F;Cordova&#x2F;Phonegap</strong>：第一代技术，主要通过 webview 内嵌 H5 页面。</li>
<li><strong>Ionic&#x2F;ReactNative&#x2F;Weex&#x2F;NativeScript</strong>：第二代技术，通过一种语言触发原生平台的渲染引擎而实现原生体验，比如 ReactNative 结合 JS 和原生语法实现跨平台。</li>
<li><strong>Flutter</strong>：未来趋势，通过绘图引擎和 Dart 语言实现了高性能，但没有大规模应用。</li>
</ul>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mac 下打开目录</span></span><br><span class="line"><span class="title class_">Finder</span>、command + shift + G、输入回车</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境变量配置</span></span><br><span class="line">vim ~/.<span class="property">bash_profile</span>          </span><br><span class="line">i、编辑内容、esc 退出、:wq 保存</span><br><span class="line">source ~/.<span class="property">bash_profile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、安装 node 版本的切换工具</span></span><br><span class="line">cd ~/</span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/nvm-sh/nvm.git</span></span><br><span class="line">cd nvm</span><br><span class="line">./install.<span class="property">sh</span>  <span class="comment">// 等待执行成功：不成功时可以则执行几次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ~/.bash_profile</span></span><br><span class="line"># nvm</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NVM_DIR</span>=<span class="string">&quot;$HOME/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;$NVM_DIR/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;$NVM_DIR/nvm.sh&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;$NVM_DIR/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;$NVM_DIR/bash_completion&quot;</span></span><br><span class="line"># node</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NVM_NODEJS_ORG_MIRROR</span>=<span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/node/</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">NVM_IOJS_ORG_MIRROR</span>=<span class="attr">https</span>:<span class="comment">//npmmirror.com/mirrors/iojs/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ~/.zshrc</span></span><br><span class="line">source ~/.<span class="property">bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用命令</span></span><br><span class="line">nvm ls-remote               <span class="comment">// 查看 node 可用版本  </span></span><br><span class="line">nvm install <span class="number">14.19</span><span class="number">.3</span>         <span class="comment">// 安装 node 指定版本</span></span><br><span class="line">nvm install --lts           <span class="comment">// 安装 node 最新稳定版本</span></span><br><span class="line">nvm uninstall <span class="number">11.15</span><span class="number">.0</span>       <span class="comment">// 卸载 node 指定版本</span></span><br><span class="line">nvm alias <span class="keyword">default</span> <span class="number">11.15</span><span class="number">.0</span>   <span class="comment">// 设置 node 默认版本</span></span><br><span class="line">nvm use <span class="number">11.15</span><span class="number">.0</span>             <span class="comment">// 使用 node 指定版本</span></span><br><span class="line">nvm list                    <span class="comment">// 查看 node 已安装版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node 版本安装对应 cnpm</span></span><br><span class="line">npm install cnpm@<span class="number">7.1</span><span class="number">.0</span> -g --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">npm i cnpm -g --registry=<span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 2、项目搭建工具安装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span> ionic5、ionic6 版本安装分别通过 ionic、<span class="doctag">@ionic</span>/cli</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span> npm：旧版本镜像已经弃用 http://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">npm i cnpm -g --registry=<span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/</span></span><br><span class="line">cnpm i -g @angular/cli @ionic/cli cordova typescript</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 3、android 环境配置</span></span><br><span class="line"><span class="comment"> * Java 工具包 JDK：jdk-8u281-macosx-x64.dmg </span></span><br><span class="line"><span class="comment"> * 安装：android 工具包 android-sdk、构建工具 gradle</span></span><br><span class="line"><span class="comment"> * gradle 手动安装：gradle.zip 解压缩后拖至 /user/local/Caskroom</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> android studio：Android 集成开发工具</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> jdk：Java 开发工具包</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> <span class="variable">android</span>-sdk：Android 开发工具包</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> gradle：项目构建工具</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">brew install android-sdk gradle</span><br><span class="line">brew list android-sdk</span><br><span class="line"></span><br><span class="line"><span class="comment">// .bash_profile</span></span><br><span class="line"># sdk</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">ANDROID_HOME</span>=<span class="regexp">/usr/</span>local/<span class="title class_">Caskroom</span>/android-sdk</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$ANDROID_HOME/tools</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$ANDROID_HOME/platform-tools</span><br><span class="line"># gradle</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">GRADLE_HOME</span>=<span class="regexp">/usr/</span>local/<span class="title class_">Caskroom</span>/gradle-<span class="number">6.7</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$GRADLE_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验</span></span><br><span class="line">java -version</span><br><span class="line">adb version</span><br><span class="line">gradle -version</span><br></pre></td></tr></table></figure>


<h2 id="Ionic-Capacitor-Angular"><a href="#Ionic-Capacitor-Angular" class="headerlink" title="Ionic + Capacitor + Angular"></a>Ionic + Capacitor + Angular</h2><blockquote>
<p>Ionic&#x2F;Angular 负责实现 H5 页面，Capacitor 则负责将 H5 应用编译打包为原生应用 (Android apk、iOS ipa)。</p>
</blockquote>
<ul>
<li><strong>Ionic</strong>：用于开发移动应用的开源 H5 框架，提供了移动端常用的组件库。ionic6 新增了 capacitor 调用原生功能的方式，虽然使用方便但是官方接口不多，之前版本只能集成 cordova。</li>
<li><strong>Capacitor&#x2F;Cordova&#x2F;Phonegap</strong>：不仅支持将 H5 代码打包为原生应用，还提供了 JS 调用原生设备功能的接口。Capacitor 是一个由 Ionic 团队开发维护的跨平台的应用程序容器，它对之前的 Cordova&#x2F;Phonegap 作出了优化并兼容了 Cordova 插件，现在已经成为 ionic4+ 项目默认的打包工具。</li>
<li><strong>Vue&#x2F;React&#x2F;Angular</strong>：前端 JS 框架，类似于 JQuery、BootStrap、Three.js 等。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Ionic Angular 项目构建：ng v 查看版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> blank/tabs/sidemenu：空项目、带选项卡、带侧边栏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 手机浏览器调试：</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">ionic start ionic-angular tabs/blank/sidemenu</span><br><span class="line">ionic serve    <span class="comment">// 电脑运行：电脑端 localhost 访问</span></span><br><span class="line">ionic build    <span class="comment">// 编译打包：生成文件夹 www</span></span><br><span class="line">ionic serve --external --host=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>   <span class="comment">// 手机浏览器调试</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Capacitor 构建应用</span></span><br><span class="line">ionic capacitor add android     <span class="comment">// 添加安卓平台</span></span><br><span class="line">ionic capacitor copy android    <span class="comment">// 项目更新同步到安卓</span></span><br><span class="line">ionic capacitor run android</span><br><span class="line">ionic capacitor build android</span><br><span class="line">npm i @capacitor/core -D        <span class="comment">// 项目创建时已集成 capacitor 则不安装 </span></span><br><span class="line"><span class="comment">// Capacitor 添加原生插件：页面 ts 文件引用如下</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Camera</span>, <span class="title class_">CameraResultType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@capacitor/camera&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">takePhoto</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> photo = <span class="keyword">await</span> <span class="title class_">Camera</span>.<span class="title function_">getPicture</span>(&#123;</span><br><span class="line">        <span class="attr">quality</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="attr">allowEditing</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">resultType</span>: <span class="title class_">CameraResultType</span>.<span class="property">Uri</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">imgSrc</span> = photo.<span class="property">webPath</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// cordova 构建应用</span></span><br><span class="line">ionic integrations disable capacitor  <span class="comment">// 禁用 capacitor</span></span><br><span class="line">ionic cordova platform add android    <span class="comment">// 先删除 android 文件夹</span></span><br><span class="line">ionic cordova plugin add cordova-plugin-camera</span><br><span class="line">ionic cordova run/build android</span><br><span class="line">npm i @awesome-cordova-plugins/camera   <span class="comment">// 相机插件</span></span><br><span class="line">npm i @awesome-cordova-plugins/core     <span class="comment">// 打包时需要的依赖</span></span><br><span class="line"><span class="comment">// app.module.ts：全局引入服务</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Camera</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@awesome-cordova-plugins/camera/ngx&#x27;</span>;</span><br><span class="line">@<span class="title class_">NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [..., <span class="title class_">Camera</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// home.ts：页面引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">takePhoto</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> photo = <span class="keyword">await</span> <span class="title class_">Camera</span>.<span class="title function_">getPicture</span>(&#123;</span><br><span class="line">        <span class="attr">quality</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">mediaType</span>: <span class="title class_">Camera</span>.<span class="property">MediaType</span>.<span class="property">PICTURE</span>,</span><br><span class="line">        <span class="attr">encodingType</span>: <span class="title class_">Camera</span>.<span class="property">EncodingType</span>.<span class="property">JPEG</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>  目录解析</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  android：ionic capacitor add android</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span>  www：ionic build</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">├── e2e            <span class="comment">// ionic 端对端测试文件</span></span><br><span class="line">├── platforms      <span class="comment">// android/ios/pwa/...</span></span><br><span class="line">├── plugins        <span class="comment">// capacitor/cordova 插件文件夹</span></span><br><span class="line">├── www            <span class="comment">// ionic 打包生成目录</span></span><br><span class="line">├── src            <span class="comment">// ionic 开发工作目录</span></span><br><span class="line">│   ├── app           <span class="comment">// 应用根目录（组件、页面、服务、模块等）</span></span><br><span class="line">│   ├── assets        <span class="comment">// 资源目录（图片、js 框架等静态文件）</span></span><br><span class="line">│   ├── theme         <span class="comment">// 主题文件（设置主题信息的 scss 文件）</span></span><br><span class="line">│   ├── environments  <span class="comment">// 针对不同环境的构建配置选项 </span></span><br><span class="line">│   ├── index.<span class="property">html</span>    <span class="comment">// 主页面</span></span><br><span class="line">│   ├── main.<span class="property">ts</span>       <span class="comment">// 入口文件</span></span><br><span class="line">│   ├── polyfills.<span class="property">ts</span>  <span class="comment">// 兼容不同浏览器的原生 API</span></span><br><span class="line">│   └── karma.<span class="property">conf</span>.<span class="property">js</span>、test.<span class="property">js</span>   <span class="comment">// 测试相关配置</span></span><br><span class="line">│</span><br><span class="line">├── config.<span class="property">xml</span>     <span class="comment">// 打包成 app 的配置文件</span></span><br><span class="line">├── package.<span class="property">json</span>   <span class="comment">// 管理项目的元数据和依赖</span></span><br><span class="line">├── angular.<span class="property">json</span>   <span class="comment">// angular 配置文件</span></span><br><span class="line">├── tsconfig.<span class="property">json</span>  <span class="comment">// typescript 配置文件</span></span><br><span class="line">├── tslint.<span class="property">json</span>    <span class="comment">// 格式化和校验文件</span></span><br><span class="line">└── ionic.<span class="property">config</span>.<span class="property">json</span>、ionic.<span class="property">starter</span>.<span class="property">json</span> <span class="comment">// ionic 配置文件</span></span><br></pre></td></tr></table></figure>

<h2 id="Ionic-Vue"><a href="#Ionic-Vue" class="headerlink" title="Ionic + Vue"></a>Ionic + Vue</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create ionic-vue</span><br><span class="line">cd ionic-vue</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">npm install @ionic/core @ionic/vue vue-router</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IonicVue</span> <span class="keyword">from</span> <span class="string">&#x27;@ionic/vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@ionic/core/css/core.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@ionic/core/css/ionic.bundle.css&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;       <span class="comment">// 阻止 vue 启动时生成生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">ignoredElements</span> = [<span class="regexp">/^ion-/</span>]  <span class="comment">// 忽略 vue 之外的自定义元素</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">IonicVue</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// HelloWorld.vue：通过 ionic UI 组件重写</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ion-app</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ion-toolbar</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>Hello, Ionic!<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ion-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ion-card-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ion-card-subtitle</span>&gt;</span>Isn&#x27;t it great?<span class="tag">&lt;/<span class="name">ion-card-subtitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ion-card-title</span>&gt;</span>Look at this view!<span class="tag">&lt;/<span class="name">ion-card-title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ion-card-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ion-card-content</span>&gt;</span>it does look fairly cold.<span class="tag">&lt;/<span class="name">ion-card-content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ion-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ion-app</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Ionic-React"><a href="#Ionic-React" class="headerlink" title="Ionic + React"></a>Ionic + React</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app ionic-react</span><br><span class="line">cd ionic-react</span><br><span class="line">npm start</span><br><span class="line">npm install @ionic/react react-router react-router-dom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@ionic/core/css/core.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@ionic/core/css/ionic.bundle.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// App.js </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">IonApp</span>,</span><br><span class="line">  <span class="title class_">IonHeader</span>,</span><br><span class="line">  <span class="title class_">IonToolbar</span>,</span><br><span class="line">  <span class="title class_">IonContent</span>,</span><br><span class="line">  <span class="title class_">IonTitle</span>,</span><br><span class="line">  <span class="title class_">IonCard</span>,</span><br><span class="line">  <span class="title class_">IonCardHeader</span>,</span><br><span class="line">  <span class="title class_">IonCardTitle</span>,</span><br><span class="line">  <span class="title class_">IonCardSubtitle</span>,</span><br><span class="line">  <span class="title class_">IonCardContent</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@ionic/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">IonApp</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">IonHeader</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">IonToolbar</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">IonTitle</span>&gt;</span>Hello, Ionic!<span class="tag">&lt;/<span class="name">IonTitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">IonToolbar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">IonHeader</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">IonContent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">IonCard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">IonCardHeader</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">IonCardSubtitle</span>&gt;</span>Isn&#x27;t it great?<span class="tag">&lt;/<span class="name">IonCardSubtitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">IonCardTitle</span>&gt;</span>Look at this view!<span class="tag">&lt;/<span class="name">IonCardTitle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">IonCardHeader</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">IonCardContent</span>&gt;</span>it does look fairly cold.<span class="tag">&lt;/<span class="name">IonCardContent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">IonCard</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">IonContent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">IonApp</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>


<h1 id="二、适配方案"><a href="#二、适配方案" class="headerlink" title="二、适配方案"></a>二、适配方案</h1><blockquote>
<p>让页面能在不同尺寸和分辨率的移动设备上尽可能的实现合理展示，设计图都是 2 倍的，这是因为页面中除了字体是矢量图而大部分都是位图。如果 1px 宽高的盒子里放入 1px 宽高的图片则图片会失真，因为在移动端渲染时是用 4px 渲染。</p>
</blockquote>
<ul>
<li><strong>设备像素</strong>：物理像素，通常指设备的分辨率。单位 dp，是设备能控制显示的最小单位。主要特点是：同一个设备的 1dp 长度是固定不变的、DPR 设备像素比取决于是否高清等屏幕特性和缩放比例。页面放大时内容减少是因为 1px 等于更多的设备像素。</li>
<li><strong>CSS 像素</strong>：逻辑像素，主要用于精确度量浏览器的 Web 页面。单位 px，是独立于设备而用于开发的抽象单位。主要特点是：改变大小的场景有缩放屏幕、更换设备。同样代码在不同分辨率的设备中显示一致是因为移动设备根据各自像素比转换成了设备像素。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设备判断：微信、支付宝、移动端、Ios、Android</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">isWechat</span>: navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;micromessenger&quot;</span>) &gt; -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">isAlipay</span>: navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;alipay&quot;</span>) &gt; -<span class="number">1</span>,  </span><br><span class="line">  isMobile = <span class="regexp">/Android|webOS|iPhone|iPod|BlackBerry/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>),</span><br><span class="line">  <span class="attr">isIOS</span>: <span class="regexp">/iPhone|iPad|iPod/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>),</span><br><span class="line">  <span class="attr">isAndroid</span>: <span class="regexp">/Android/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用360浏览器的极速模式 (webkit)  </span></span><br><span class="line">&lt;meta name=<span class="string">&quot;renderer&quot;</span> content=<span class="string">&quot;webkit&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 优先使用 IE 最新版本和 Chrome  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=EDGE, chrome=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 页面窗口自动调整到设备宽度，并禁止用户缩放页面 (scale) </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, height=device-height, </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 使用全屏模式运行，仅针对 ios safari  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 设置顶端状态栏背景为灰色半透明，仅针对 ios safari  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// windows phone 点击无高光 </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-tap-highlight&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="comment">// 关闭电话号码和邮箱的自动识别  </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no, email=no&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="Viewport-缩放"><a href="#Viewport-缩放" class="headerlink" title="Viewport 缩放"></a>Viewport 缩放</h2><ul>
<li><strong>Viewport</strong>：浏览器上用来显示网页的部分区域，是手机浏览器的实际宽度。注意移动设备默认的是布局视口，但是移动端开发时需要的是理想视口，视口控制通过只对移动端有效的 meta 实现：设备宽度 &#x3D; 页面宽度 &#x3D; 浏览器视口宽度。</li>
<li><strong>浏览器宽度</strong>：PC 端网站都是以浏览器窗口(设备屏幕) 作为视口进行布局，但是手机浏览器的实际宽度默认比手机屏幕宽，手机浏览器内部的宽度始终是本身 viewport 而无论手机宽度是 320px&#x2F;640px。手机浏览器的设计页面为了让浏览桌面端网页时显示正常一般基于 960px，但这样会使手机浏览器出现横向滚动条，所以移动端浏览器会自动将视口缩放到移动端窗口的大小，网页内容看起来被压扁而不容易观看。可简单理解为：<strong>当浏览器宽度小于 980 时，viewport 宽度为980，大于 980 时则和 viewport 宽度一致</strong>。</li>
<li>分类：<strong>布局视口</strong> (手机浏览器的实际区域，用于计算 CSS 页面布局)、<strong>视觉视口</strong> (用户当前看到的区域，放大页面时内容减少但并不会受影响)、<strong>理想视口</strong> (移动设备的屏幕区域，它以 CSS 单位计算并与设备的物理宽高无关)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 针对不同屏幕分辨率的手机设置等比例缩放。简单方便，但是 PC 端可能会界面变形、像素失真。</span></span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, height=device-height, </span></span><br><span class="line"><span class="string">  initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>


<h2 id="Responsive-响应式"><a href="#Responsive-响应式" class="headerlink" title="Responsive 响应式"></a>Responsive 响应式</h2><blockquote>
<p>设计理念通过媒体查询根据不同的屏幕分辨率来进行适配，从而在不同设备不同分辨率下都有良好的用户体验，一般通过媒体查询设置移动端宽度。缺点是 无法覆盖全部分辨率、代码量大且维护性难、安卓机型问题较多，一般只适合简单的资讯类页面。</p>
</blockquote>
  <div align="center">
      <img src="/images/mobile/Responsive.png" alt="flex 布局" width="100%">
  </div>

  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 法一 */</span> </span><br><span class="line">link media=&quot;(<span class="attribute">max-width</span>:<span class="number">480px</span>)<span class="string">&quot; href=&quot;</span>mobile.css<span class="string">&quot;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">/* 法二 */ </span></span><br><span class="line"><span class="string">@media all and (orientation :landscape) &#123;  /* 横屏 */  &#125; </span></span><br><span class="line"><span class="string">@media all and (orientation :portrait) &#123;  /* 竖屏 */  &#125;</span></span><br><span class="line"><span class="string">@media screen and (max-width: 500px) &#123;  </span></span><br><span class="line"><span class="string">   body &#123; background: black &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="Adaptive-自适应"><a href="#Adaptive-自适应" class="headerlink" title="Adaptive 自适应"></a>Adaptive 自适应</h2><blockquote>
<p>使容器子元素的宽高能够最合理的方式填充空间。</p>
</blockquote>
<ul>
<li><strong>百分比布局</strong>：宽度自适应而实现在不同的分辨率下都能达到适配，但缺点是需要根据确定父级元素计算。width、height 等大多相对于直接父元素。border-radius、translate、background-size 等相对于自身。</li>
<li><strong>vw、vh 布局</strong>：指定相对视口的宽高实现宽高自适应，单位转换方便。但是缺点是单位换算时可能出现小数、一些低版本手机不支持。</li>
<li><strong>rem 布局</strong>：通过字体自适应解决移动端适配屏幕尺寸问题，只适用于固定尺寸，但是不能兼容所有终端，而且字号在不同屏幕上的绝对尺寸不一致而不符合用户习惯。实现原理是通过媒体查询设置根元素的 font-size、通过 js 读取屏幕宽度计算并设置根元素的 font-size。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过媒体查询实现移动端字体的自适应</span></span><br><span class="line">@media screen and (min-<span class="attr">width</span>: 375px)&#123;</span><br><span class="line">  html &#123; font-<span class="attr">size</span>: <span class="number">14.</span>0625px; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (min-<span class="attr">width</span>: 360px)&#123;</span><br><span class="line">  html &#123; font-<span class="attr">size</span>: <span class="number">13.</span>5px;  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media screen and (min-<span class="attr">width</span>: 320px)&#123;</span><br><span class="line">  html &#123; font-<span class="attr">size</span>: 12px; &#125;</span><br><span class="line">&#125;</span><br><span class="line">html &#123;</span><br><span class="line">  font-<span class="attr">size</span>: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Js 动态设置 rem：根据设计图 640 分辨率封装 rem.js，网上优化版 flexible.js</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">doc, win</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> docEl = doc.<span class="property">documentElement</span>,</span><br><span class="line">    reEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> ? <span class="string">&#x27;orientationchange&#x27;</span>:<span class="string">&#x27;resize&#x27;</span>,</span><br><span class="line">    recalc = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取屏幕宽度</span></span><br><span class="line">        <span class="keyword">var</span> clientWidth = docEl.<span class="property">clientWidth</span>;</span><br><span class="line">        <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (clientWidth &gt;= <span class="number">640</span>) &#123;</span><br><span class="line">            docEl.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 设置 html 的字体大小：clientWidth/(640/100)</span></span><br><span class="line">            docEl.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="number">100</span> * (clientWidth / <span class="number">640</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">if</span> (!doc.<span class="property">addEventListener</span>) <span class="keyword">return</span>;</span><br><span class="line">win.<span class="title function_">addEventListener</span>(reEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="variable language_">document</span>, <span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure>
<h2 id="vue-方案"><a href="#vue-方案" class="headerlink" title="vue 方案"></a>vue 方案</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue-cli3 项目通过 vw 实现移动端适配，安装插件 npm i postcss-px-to-viewport -D</span></span><br><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;autoprefixer&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123; </span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>,    <span class="comment">// 视窗宽度，对应设计稿的宽度，一般是 750 </span></span><br><span class="line">      <span class="attr">viewportHeight</span>: <span class="number">1334</span>,  <span class="comment">// 视窗高度，根据 750 设备的宽度来指定，一般指定 1334</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">3</span>,      <span class="comment">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除） </span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>,    <span class="comment">// 指定需要转换成的视窗单位，建议使用 vw </span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">1</span>,      <span class="comment">// 小于或等于`1px`不转换为视窗单位</span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span>      <span class="comment">// 允许在媒体查询中转换`px` </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、Flex-布局"><a href="#三、Flex-布局" class="headerlink" title="三、Flex 布局"></a>三、Flex 布局</h1><blockquote>
<p>如果想让一个盒子变成弹性盒子可以用 <code>display: flex</code>，弹性盒子中有主轴(横轴row) 和副轴(纵轴column)，可以根据需要设置盒子的容器(父元素)和项目(子元素)。</p>
</blockquote>
<h2 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 容器属性</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 元素排列方向(左右和上下)，切换主副轴</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否换行：reverse 往上一行换行</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复合属性，无顺序关系</span></span><br><span class="line">  <span class="attribute">flex-flow</span>: flex-direction flex-wrap; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 副轴上(即子项垂直) 的对齐方式</span></span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主轴上(即子项水平) 的对齐方式</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 多行垂直(副轴) 对齐方式, 默认 stretch</span></span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目属性</span></span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="comment">// 定义排列顺序, 数字越大越靠后(可为负值)</span></span><br><span class="line">  <span class="attribute">order</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义放大比例 (单行有多余空间时)</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义缩小比例 (单行空间不足时)    </span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: number;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置主轴上项目宽度(建议代替宽度)   </span></span><br><span class="line">  <span class="attribute">flex-basis</span>: %/px/rem;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 前三者复合属性，默认0 1 auto; </span></span><br><span class="line">  <span class="attribute">flex</span>: grow [shrink] [basis];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义项目自己的对齐方式，可覆盖 align-items</span></span><br><span class="line">  <span class="attribute">align-self</span>: stretch | flex-start | flex-end | center | baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="布局实例"><a href="#布局实例" class="headerlink" title="布局实例"></a>布局实例</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// div.box、span.item</span></span><br><span class="line"><span class="selector-class">.box-1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-3</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-4</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row-reverse wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// div.box、div.column 分别两个 span.item</span></span><br><span class="line"><span class="selector-class">.box-5</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.column</span>&#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-6</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-7</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: column wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// div.column 分别包含 2、1、3 个子元素</span></span><br><span class="line"><span class="selector-class">.box-8</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.column</span>&#123;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.column</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <div align="center">
      <img src="/images/mobile/flex.png" alt="flex 布局" width="100%">
  </div>


<h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><blockquote>
<p>平均分布，即在容器里面平均分配空间</p>
</blockquote>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 几个子元素就平分几份</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="comment">// flex: 1 1 0%;</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-class">.fixed</span>&#123;</span><br><span class="line">      <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">header</span>, <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.main</span>&#123;</span><br><span class="line">      <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</span><br><span class="line">      <span class="comment">// 两个边栏的宽度设为 12em</span></span><br><span class="line">      <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.left</span>&#123;</span><br><span class="line">      <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小屏幕时内容区三栏自动变为垂直叠加</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.left</span>, <span class="selector-class">.main</span>, <span class="selector-class">.right</span> &#123;</span><br><span class="line">      <span class="attribute">flex</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <div align="center">
      <img src="/images/mobile/grail.png" alt="圣杯布局" width="100%">
  </div>


<h2 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h2><blockquote>
<p>每行的项目数固定，会自动分行</p>
</blockquote>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="固定底栏"><a href="#固定底栏" class="headerlink" title="固定底栏"></a>固定底栏</h2><blockquote>
<p>页面内容太少时底栏会抬高到页面的中间，移动端 fixed 定位会导致输入内容的虚拟键盘会导致定位元素错位等问题</p>
</blockquote>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// header、footer、div.content</span></span><br><span class="line">  <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏滚动条</span></span><br><span class="line">::-webkit-scrollbar&#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// absolute 方式</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="样式布局"><a href="#样式布局" class="headerlink" title="样式布局"></a>样式布局</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入框的前方添加提示，后方添加按钮</span></span><br><span class="line"><span class="selector-class">.input-item</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主栏的左侧或右侧添加一个图片栏 (类似头像)</span></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">  <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两端对齐，列不满时左对齐</span></span><br><span class="line"><span class="comment">// 法一：如果每行有 n 项，则在最后添加 n-2 个空项</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f8ff</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span><span class="selector-class">.empty</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 法二；利用 after/before，适用于每行 3/4 项</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、事件类型"><a href="#四、事件类型" class="headerlink" title="四、事件类型"></a>四、事件类型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li><strong>click</strong>：单击事件。移动端中连续 click 的触发有 200~300ms 的延迟，延迟来自判断双击和长按，因为只有默认等待时间结束以确定没有后续动作发生时才会触发 click 事件。所以触摸事件反应更快，体验更好，也可以通过 fastclick 库解决延迟问题。</li>
<li><strong>touch</strong>：触摸类事件，分为四种触发方式：touchstart (触屏开始)、touchmove (拖拽)、touchend (触屏完成)、touchcancel (触屏取消)。触屏时如果有更高级别的事件发生，比如电话接入或弹出信息等，则触发 ontouchcancel 事件。</li>
<li><strong>gesture</strong>：手势类事件，可分为三种：gesturestart (两&#x2F;多根手指按下时)、gesturechange (两&#x2F;多根手指按下且移动时)、gestureend (倒数第二根手指移开时)。手势的专有属性有：rotation (手指变化引起的旋转角度)、scale (手指之间的距离)。</li>
<li><strong>tap</strong>：触碰类事件，一般用于代替 click 事件，分为四种：tap (手指触碰屏幕)、longTap (手指长按屏幕)、singleTap (手指单击屏幕)、doubleTap(手指双击屏幕)。</li>
<li><strong>swipe</strong>：滑动事件，分为五种：swipe (滑动手指)、swipeLeft (左滑)、swipeRight (右滑)、swipeUp (上滑)、swipeDown (下滑)。</li>
</ul>
<h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发顺序：ontouchstart、ontouchmove、ontouchend、onclick</span></span><br><span class="line"><span class="title function_">addEvent</span>(dom, <span class="string">&#x27;tap click touchstart touchmove&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEvent</span>(<span class="params">dom, type, showAll</span>) &#123;</span><br><span class="line">    type = type.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    type.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        dom.<span class="title function_">addEventListener</span>(item, <span class="keyword">function</span>(<span class="params">v</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(showAll ? v : v.<span class="property">type</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul>
<li>获取：box.addEventListener(“touchstart”, function(event){ },true)。</li>
<li>属性<ul>
<li>touches：当前跟踪的触摸操作的 touch 对象的数组。</li>
<li>targetTouches：特定于事件目标的 touch 对象数组 (事件冒泡指出目标对象)。</li>
<li>changedTouches：表示自上次触摸以来发生了什么改变的 touch 对象的数组。</li>
</ul>
</li>
<li>特点<ul>
<li>touchend 事件时 touches、targetTouches 信息会被删除，changedTouches 保存最后一次的信息，最好用于计算手指信息。</li>
<li>通过 jquery 不能获取以上三个属性，而通过 zepto.js (精简版的 jquery，现在用的不多) 可以正常获取。</li>
</ul>
</li>
</ul>
<h2 id="问题方案"><a href="#问题方案" class="headerlink" title="问题方案"></a>问题方案</h2><h3 id="click-延迟"><a href="#click-延迟" class="headerlink" title="click 延迟"></a>click 延迟</h3><blockquote>
<p>原因：移动端浏览器会优先判断用户是否要触发双击缩放、双击滚动等默认行为，用户碰触页面后需要等待 300ms 左右来判断是不是双击动作而不是立即响应。</p>
</blockquote>
<ul>
<li>设置 device-width：<meta name="viewport" content="width=device-width">&#96;。</li>
<li>禁用缩放：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot;&gt;</code>。</li>
<li>FastClick：<code>import fastclick from &#39;fastclick&#39;、fastclick.attach(document.body)</code>。</li>
<li>CSS touch-action：<code>touch-action: none</code>，表示在该元素上的操作不会触发用户代理的任何默认行为。</li>
</ul>
<h3 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h3><blockquote>
<p>原生 touch 事件、框架的自定义 tap 事件都存在该问题，因为 touch 系列事件发生大约 300ms 后才会触发 click 事件。</p>
</blockquote>
<ul>
<li>出现问题<ul>
<li>点击蒙层上的关闭按钮，蒙层消失后发现触发了按钮下面元素的 click 事件，如果有 a 标签则会触发页面跳转。</li>
<li>直接点击页面内按钮跳转至新页面，然后发现新页面中对应位置元素的 click 事件被触发。</li>
</ul>
</li>
<li>解决方案<ul>
<li>不要混用 touch、click：只用一种事件就不会存在点击穿透问题。</li>
<li>fastclick：引入库之后把页面内所有 touch 事件都换为 click。</li>
<li>pointer-events： 不建议使用 mask 隐藏后，给按钮下面元素添加 <code>pointer-events: none;</code>。</li>
<li>阻止默认：<code>&lt;div class=&quot;mask&quot; @touchmove.prevent&gt;&lt;/div&gt;、&lt;div ontouchend = &quot;e.preventDefault()&quot;&gt;&lt;/div&gt;</code>。</li>
</ul>
</li>
</ul>
<h3 id="touch、mouse"><a href="#touch、mouse" class="headerlink" title="touch、mouse"></a>touch、mouse</h3>  <div style="text-indent: 2em">移动端中只有触屏事件完成后再次触发时，才会触发上一个事件的 mouseout 事件。即系统会在手指提起的瞬间判断接收到事件的元素是否被改变，若没有改变则会按照 mousedown、mouseup、click 的顺序依次触发，反之不会触发。</div>
 

<h3 id="点击状态处理"><a href="#点击状态处理" class="headerlink" title="点击状态处理"></a>点击状态处理</h3><ul>
<li>hover 样式：移动端不可用。</li>
<li>touch 事件：动态增删 class 或绑定动画。</li>
<li>激活状态：常用于 a、button 等元素的伪类 :active<ul>
<li>js：<code>document.body.addEventListener(&#39;touchstart&#39;, fn)</code></li>
<li>html：<code>body ontouchstart</code></li>
</ul>
</li>
<li>点击高亮：<code>a &#123; tap-highlight-color: transparent; &#125;</code></li>
</ul>
<h3 id="touch、gesture"><a href="#touch、gesture" class="headerlink" title="touch、gesture"></a>touch、gesture</h3><ul>
<li>当一个手指放在屏幕上时会触发 touchstart 事件，如果另一个手指又放到了屏幕上则会触发 gesturestart 事件，然后触发基于该手指的 touchstart 事件。</li>
<li>如果两个手指在屏幕上滑动将会触发 gesturechange 事件，但只要有一个手指移开则会触发 gestureend 事件，然后又触发 touchend 事件。</li>
</ul>
]]></content>
      <categories>
        <category>移动端开发</category>
      </categories>
      <tags>
        <tag>移动端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 常用框架</title>
    <url>/2019/06/20/7-2-Node%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="一、Express"><a href="#一、Express" class="headerlink" title="一、Express"></a>一、Express</h1><blockquote>
<p>基于 ES5 语法实现而只能通过回调实现异步代码，框架本身缺少约束而写法较多，只适合开发小型项目并作为新手入门级框架。</p>
</blockquote>
<h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><ul>
<li>设置中间件来响应 HTTP 请求。</li>
<li>定义路由表用于执行不同的 HTTP 请求。</li>
<li>通过向模板传递参数来动态渲染 HTML。</li>
</ul>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 views 的文件夹和模板</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;views&quot;</span>, **dirname + <span class="string">&quot;/views&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(**dirname + <span class="string">&#x27;/public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态渲染</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>


<h2 id="搭建应用"><a href="#搭建应用" class="headerlink" title="搭建应用"></a>搭建应用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认 localhost:3000</span></span><br><span class="line">npm install express express-generator -g </span><br><span class="line"></span><br><span class="line">express -e myApp  <span class="comment">// 使用 ejs 模板</span></span><br><span class="line">cd myApp</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm start </span><br></pre></td></tr></table></figure>



<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><blockquote>
<p>本质是处理 HTTP 请求的函数。每个中间件都可以接收到请求对象 req、响应对象 res 和回调函数 next 这三个参数，经过处理后可以通过调用 next() 传递给下一个中间件。</p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><strong>应用级中间件</strong>：使用 app.use&#x2F;method 绑定到 app 对象。</li>
<li><strong>路由级中间件</strong>：使用 router.use&#x2F;method 绑定到 express.Router() 对象。</li>
<li><strong>错误处理中间件</strong>：接收四个参数，用于处理应用中的错误。</li>
<li><strong>第三方中间件</strong>：安装后 require 到文件中使用，用来扩展功能。</li>
<li><strong>内置中间件</strong>：express.static 托管静态资源、express.json 解析请求。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用级</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>) =&gt;</span> &#123;   </span><br><span class="line">    <span class="title function_">next</span>()   </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级</span></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">params</span>.<span class="property">id</span>==<span class="number">0</span>) <span class="title function_">next</span>(<span class="string">&#x27;route&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;,<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something broke&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内置中间件 </span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(**dirname + <span class="string">&#x27;/public&#x27;</span>))</span><br></pre></td></tr></table></figure>


<h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><ul>
<li><strong>app.use</strong>：对客户端请求路径及其所有扩展结果进行匹配。</li>
<li><strong>app.method</strong>：对客户端请求路径进行精确匹配，但会忽略锚点和 get 参数数据。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路径默认 &#x27;/&#x27;，匹配所有路径(都可以看作是 &#x27;/&#x27; 的扩展)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径默认 &#x27;/&#x27; ，只匹配根路径</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure>


<h3 id="响应方法"><a href="#响应方法" class="headerlink" title="响应方法"></a>响应方法</h3><ul>
<li><strong>res.end</strong>：结束响应进程但不返回数据。</li>
<li><strong>res.send</strong>：发送各种类型的响应。</li>
<li><strong>res.json</strong>：发送 JSON 响应。</li>
<li><strong>res.jsonp</strong>：在 JSONP 的支持下发送 JSON 响应。</li>
<li><strong>res.render</strong>：呈现视图模板。</li>
<li><strong>res.redirect</strong>：重定向请求。</li>
<li><strong>res.sendFile</strong>：以八位元流形式发送文件。</li>
<li><strong>res.download</strong>：提示将要下载文件。</li>
<li><strong>res.sendStatus</strong>：设置响应状态码并发送其字符串表示。</li>
</ul>
<h2 id="路由管理"><a href="#路由管理" class="headerlink" title="路由管理"></a>路由管理</h2><h3 id="路径规则"><a href="#路径规则" class="headerlink" title="路径规则"></a>路径规则</h3><ul>
<li>url 字符串不区分字母的大小写。</li>
<li>url 传递的数据通过冒号语法提取。</li>
<li>所有 get 方式提交的 url 参数及锚点均会被忽略。</li>
<li>所有路由中间件的书写顺序至关重要，只会执行首次匹配到的中间件。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// localhost:3000/tom/24：tom, 24</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:name/:age&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>.<span class="property">name</span>, req.<span class="property">params</span>.<span class="property">age</span>)</span><br><span class="line">  res.<span class="title function_">send</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// localhost:3000/a#?name=tom </span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// localhost:3000/admin/login：只执行第一个</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:username/:method&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  res.<span class="title function_">end</span>()  <span class="comment">// 此处如果执行 next() 则会第二个</span></span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  res.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配根路径的请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /about 路径的请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /random.text 路径的请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/random.text&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;random.text&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h4 id="字符串模式"><a href="#字符串模式" class="headerlink" title="字符串模式"></a>字符串模式</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配 /user、/user/5，去掉 ? 则只匹配 /user/5</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id?&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;/users/:id?&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 acd 和 abcd</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab?cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab?cd&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 /abe 和 /abcde</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab(cd)?e&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab(cd)?e&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 abcd、abbcd、abbbcd等</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab+cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab+cd&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ab*cd&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;ab*cd&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配任何路径中含有 a 的路径：</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/a/</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;/a/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="regexp">/.*fly$/</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;/.*fly$/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配 /abcd、/xyza、/lmnand、/pqr</span></span><br><span class="line">app.<span class="title function_">use</span>([<span class="string">&#x27;/abcd&#x27;</span>, <span class="string">&#x27;/xyza&#x27;</span>, <span class="regexp">/\/lmn|\/pqr/</span>], <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="路由句柄"><a href="#路由句柄" class="headerlink" title="路由句柄"></a>路由句柄</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个回调函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/a&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from A&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 多个回调函数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/b&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数数组</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123; <span class="title function_">next</span>() &#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123; <span class="title function_">next</span>() &#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">function</span> (<span class="params">req, res</span>) &#123; res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from C&#x27;</span>) &#125;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/c&#x27;</span>, [a, b, c])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合使用</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/example/d&#x27;</span>, [a, b], <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello from D&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ul>
<li><strong>req.param</strong>：已被弃用。</li>
<li><strong>req.query</strong>：解析 GET 请求中的查询字符串。</li>
<li><strong>req.body</strong>：解析 POST 请求中的数据（需引用body-parser）。</li>
<li><strong>req.params</strong>：解析 GET&#x2F;POST 请求中的占位符数据（如&#x2F;:name）。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user/10</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;user/:id&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>[<span class="string">&quot;id&quot;</span>])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// user/?id=10</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/user&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">query</span>[<span class="string">&quot;id&quot;</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 body-parser 模块获取 post 请求数据</span></span><br><span class="line"><span class="keyword">let</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">body</span>.<span class="property">name</span>, req.<span class="property">body</span>.<span class="property">password</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="特殊路由"><a href="#特殊路由" class="headerlink" title="特殊路由"></a>特殊路由</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证或处理 路径参数</span></span><br><span class="line">router.<span class="title function_">param</span>(<span class="string">&#x27;id&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next, id</span>) &#123;</span><br><span class="line">  req.<span class="property">name</span> = name</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;hello &#x27;</span> + req.<span class="property">name</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式路由：一个路径处理多种请求</span></span><br><span class="line">app.<span class="title function_">route</span>(<span class="string">&#x27;/book&#x27;</span>)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&#x27;Get a random book&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">post</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">send</span>(<span class="string">&#x27;Add a book&#x27;</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>


<h3 id="next-方法"><a href="#next-方法" class="headerlink" title="next 方法"></a>next 方法</h3><ul>
<li>**next()**：从下一个处理函数开始往下执行</li>
<li>**next(‘router’)**：直接执行下一个相同路由</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">next</span>()           </span><br><span class="line">  <span class="comment">// 结果：1234，替换为next(&#x27;route&#x27;)则结果：1234</span></span><br><span class="line">  </span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">next</span>(<span class="string">&#x27;route&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h1 id="二、Koa"><a href="#二、Koa" class="headerlink" title="二、Koa"></a>二、Koa</h1><blockquote>
<p>Express 团队打造的进阶框架，基于 ES7 语法使用 Promise 实现异步而极大简化了异步代码。但是开发项目时缺少约束，多人开发时代码合并困难而不适合团队协作开发项目。</p>
</blockquote>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li><strong>洋葱中间件模式</strong>：next函数决定是否执行下一个中间件。</li>
<li><strong>Context 对象</strong>：内部封装了 HTTP 请求对象和响应对象。</li>
<li><strong>异步处理</strong>：使用 Promise 并配合 async await 实现异步。</li>
</ul>
<h2 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm install koa koa-route</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">&#x27;koa-route&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态资源服务器：npm install koa-static</span></span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">join</span>(**dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态渲染页面：npm install koa-views ejs</span></span><br><span class="line"><span class="keyword">let</span> views = <span class="built_in">require</span>(<span class="string">&#x27;koa-views&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">views</span>(**dirname,&#123;</span><br><span class="line">  <span class="attr">extension</span>:<span class="string">&#x27;ejs&#x27;</span> <span class="comment">//指定用ejs模板</span></span><br><span class="line">&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 渲染 index.ejs</span></span><br><span class="line">  <span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;<span class="attr">name</span>:<span class="string">&#x27;cgp&#x27;</span>, <span class="attr">age</span>:<span class="number">9</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>


<h2 id="搭建应用-1"><a href="#搭建应用-1" class="headerlink" title="搭建应用"></a>搭建应用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认 localhost:3000</span></span><br><span class="line">npm install koa koa-generator -g </span><br><span class="line"></span><br><span class="line">koa2 project </span><br><span class="line">cd project</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>


<h2 id="路由管理-1"><a href="#路由管理-1" class="headerlink" title="路由管理"></a>路由管理</h2><h3 id="原生路由"><a href="#原生路由" class="headerlink" title="原生路由"></a>原生路由</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 ctx.request.path 获取用户请求的路径</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ctx.<span class="property">request</span>.<span class="property">path</span> == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// ctx.response.body的简写 </span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;&lt;p&gt;Hello World&lt;/p&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><blockquote>
<p>安装：npm install koa koa-router</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础用法：常用 get、post、all</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx, next)=&gt;&#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello people&#x27;</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="keyword">async</span> (ctx, next)=&gt;&#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;list&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递参数</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/home?id=1 传递参数：&#x27;</span>, ctx.<span class="property">query</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/:name&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/user/tom 传递参数：&#x27;</span>, ctx.<span class="property">params</span>.<span class="property">name</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/register&#x27;</span>,<span class="title function_">async</span>(ctx, next)=&gt;&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">request</span>.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.<span class="title function_">redirect</span>(<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套路由</span></span><br><span class="line"><span class="keyword">let</span> home = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line">home.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="title function_">async</span>(ctx)=&gt;&#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;Home list&quot;</span>;</span><br><span class="line">&#125;).<span class="title function_">get</span>(<span class="string">&#x27;/todo&#x27;</span>, <span class="title function_">async</span>(ctx)=&gt;&#123;</span><br><span class="line">    ctx.<span class="property">body</span> =<span class="string">&#x27;Home ToDo&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line">user.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="title function_">async</span>(ctx)=&gt;&#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&quot;User list&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装载所有子路由</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line">router.<span class="title function_">use</span>(<span class="string">&#x27;/home&#x27;</span>, home.<span class="title function_">routes</span>(), home.<span class="title function_">allowedMethods</span>());</span><br><span class="line">router.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>, user.<span class="title function_">routes</span>(), user.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载路由：当请求数据的方法与设置的方法不一致时会报错</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()).<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>


<h2 id="中间件-1"><a href="#中间件-1" class="headerlink" title="中间件"></a>中间件</h2>  <div style="text-indent: 2em">每个中间件默认接受 `Context 对象、next 函数` 两个参数。`Context 对象内部封装了原生 NodeJS 包含的 request、response 对象，分别为 ctx.req、ctx.res。next函数被调用时，会暂停该中间件的运行并将控制传递给下一个中间件。</div>


<h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第三方中间件：引入koa-router并对其实例化</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;服务器异常&#x27;</span>,</span><br><span class="line">    <span class="attr">desc</span>: error.<span class="property">message</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用级中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="keyword">if</span>(ctx.<span class="property">status</span> === <span class="number">404</span>)&#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&quot;404页面&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级中间件</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;hello koa&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()).<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>())</span><br></pre></td></tr></table></figure>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ul>
<li>多个中间件会形成堆栈结构，按先进后出顺序执行。</li>
<li>任何路由都会先经过应用级中间件，当执行完成next后再去匹配相应路由。</li>
<li>路由在匹配成功并执行完相应操作后还会再次进入应用级中间件执行 next 之后的逻辑。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello Koa&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><ul>
<li><strong>kao-views</strong>：模板渲染</li>
<li><strong>koa-router</strong>：路由处理</li>
<li><strong>koa-static</strong>：静态文件读取</li>
<li><strong>koa-bodyparse</strong>：处理post请求的数据</li>
</ul>
<h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><blockquote>
<p>框架自带属性，不需要引入中间件</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置中文时报错解决</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 new Buffer().toString(&#x27;base64&#x27;) 转换</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;test&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Buffer</span>(<span class="string">&#x27;你好&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title class_">Buffer</span>(ctx.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;test&#x27;</span>), <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 encodeURIComponent() 转换</span></span><br><span class="line">  ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;李&#x27;</span>))</span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">decodeURIComponent</span>(ctx.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparse&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>()); </span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/add&#x27;</span>, <span class="keyword">async</span> (ctx)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 获取表单提交的数据</span></span><br><span class="line">  <span class="keyword">const</span> body = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">  ctx.<span class="property">body</span> = &#123; <span class="attr">name</span>: body.<span class="property">name</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/file_upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入：npm install koa-body --save</span></span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">&#x27;koa-body&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">koaBody</span>(&#123;</span><br><span class="line">  <span class="attr">multipart</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">formidable</span>: &#123;</span><br><span class="line">    <span class="attr">maxFileSize</span>: <span class="number">200</span>*<span class="number">1024</span>*<span class="number">1024</span>  <span class="comment">// 设置文件最大限制，默认 2M</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传图片</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/file_upload&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取上传图片</span></span><br><span class="line">  <span class="keyword">const</span> data = ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">files</span>.<span class="property">data</span>;</span><br><span class="line">  <span class="comment">// 创建可读流</span></span><br><span class="line">  <span class="keyword">const</span> savePath = path.<span class="title function_">join</span>(<span class="string">`./files`</span>, data.<span class="property">name</span>)</span><br><span class="line">  <span class="keyword">const</span> reader = fs.<span class="title function_">createReadStream</span>(data.<span class="property">path</span>)</span><br><span class="line">  <span class="comment">// 创建可写流</span></span><br><span class="line">  <span class="keyword">const</span> writer = fs.<span class="title function_">createWriteStream</span>(savePath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 可读流通过管道写入可写流</span></span><br><span class="line">    <span class="keyword">var</span> stream = reader.<span class="title function_">pipe</span>(writer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图片上传成功后返回服务器地址，实时显示服务器图片</span></span><br><span class="line">    stream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">`http://当前服务器地址<span class="subst">$&#123;data.name&#125;</span>`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">body</span> =  <span class="keyword">await</span> pro</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传单个文件</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/uploadfile&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取上传文件</span></span><br><span class="line">  <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>.<span class="property">file</span>; </span><br><span class="line">  <span class="comment">// 创建可读流</span></span><br><span class="line">  <span class="keyword">const</span> reader = fs.<span class="title function_">createReadStream</span>(file.<span class="property">path</span>);</span><br><span class="line">  <span class="keyword">let</span> filePath = path.<span class="title function_">join</span>(**dirname, <span class="string">&#x27;public/upload/&#x27;</span>) + <span class="string">`/<span class="subst">$&#123;file.name&#125;</span>`</span>;</span><br><span class="line">  <span class="comment">// 创建可写流</span></span><br><span class="line">  <span class="keyword">const</span> upStream = fs.<span class="title function_">createWriteStream</span>(filePath);</span><br><span class="line">  <span class="comment">// 可读流通过管道写入可写流</span></span><br><span class="line">  reader.<span class="title function_">pipe</span>(upStream);</span><br><span class="line">  <span class="keyword">return</span> ctx.<span class="property">body</span> = <span class="string">&quot;上传成功！&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传多个文件</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/uploadfiles&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取上传文件，旧版本通过 ctx.request.body.files</span></span><br><span class="line">  <span class="keyword">const</span> files = ctx.<span class="property">request</span>.<span class="property">files</span>.<span class="property">file</span>; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">    <span class="comment">// 创建可读流</span></span><br><span class="line">    <span class="keyword">const</span> reader = fs.<span class="title function_">createReadStream</span>(file.<span class="property">path</span>);</span><br><span class="line">    <span class="comment">// 获取上传文件扩展名</span></span><br><span class="line">    <span class="keyword">let</span> filePath = path.<span class="title function_">join</span>(**dirname, <span class="string">&#x27;public/upload/&#x27;</span>) + <span class="string">`/<span class="subst">$&#123;file.name&#125;</span>`</span>;</span><br><span class="line">    <span class="comment">// 创建可写流</span></span><br><span class="line">    <span class="keyword">const</span> upStream = fs.<span class="title function_">createWriteStream</span>(filePath);</span><br><span class="line">    <span class="comment">// 可读流通过管道写入可写流</span></span><br><span class="line">    reader.<span class="title function_">pipe</span>(upStream);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ctx.<span class="property">body</span> = <span class="string">&quot;上传成功！&quot;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="合并中间件"><a href="#合并中间件" class="headerlink" title="合并中间件"></a>合并中间件</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa-compose：将多个中间件合成为一个</span></span><br><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">&#x27;koa-compose&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> first = asycn (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">second</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middle = <span class="title function_">compose</span>([first, second])</span><br><span class="line">app.<span class="title function_">use</span>(middle)</span><br></pre></td></tr></table></figure>


<h1 id="三、Egg"><a href="#三、Egg" class="headerlink" title="三、Egg"></a>三、Egg</h1><blockquote>
<p>基于 koa2 的企业级框架，是由阿里 NodeJS 团队封装的企业级 Web 应用解决方案。</p>
</blockquote>
  <div style="text-indent: 2em">官方定位是 为企业级框架和应用而生和孕育出更多上层框架，奉行 `约定优于配置`，帮助开发团队和开发人员降低开发和维护成本。async 的特性避免了回调地狱，洋葱式的中间件架构更容易后置逻辑，内置的多进程管理会更好的利用服务器性能，以及更方便的单元测试和更加约束的目录架构。</div>


<h2 id="框架体系"><a href="#框架体系" class="headerlink" title="框架体系"></a>框架体系</h2><ul>
<li>核心体系：egg-core 模块。以 Koa.js 为基类并利用它的 中间件机制 和 HTTP服务机制 作为框架基础，以 Loader 机制作为 Egg.js 各分层机制的约定基础。</li>
<li>辅助体系：egg-script、egg-bin 等模块：支持 开发模式、生产模式、多线程模式。</li>
<li>生态体系：中间件、插件、框架。</li>
</ul>
<h2 id="主要特点-1"><a href="#主要特点-1" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>渐进式开发</li>
<li>内置多进程管理</li>
<li>高度可扩展的插件机制</li>
<li>框架稳定，测试覆盖率高</li>
<li>基于 Koa 开发，性能优异</li>
<li>提供基于 Egg 定制上层框架的能力</li>
</ul>
<h2 id="搭建应用-2"><a href="#搭建应用-2" class="headerlink" title="搭建应用"></a>搭建应用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i egg-init -g</span><br><span class="line">egg-init test --type=simple  </span><br><span class="line"></span><br><span class="line">cd test</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev </span><br></pre></td></tr></table></figure>


<h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><ul>
<li>绿色虚线框中的所有组件组成了一个实际执行代码逻辑的进程。</li>
<li>request 进入后先穿过中间件，自定义中间件放在 app&#x2F;middleware 并在 config 启用。</li>
<li>静态资源（project&#x2F;app&#x2F;public）经过内置的 egg-static 中间件时会直接响应给客户端，其它资源则会穿越所有中间件并到达路由文件 router.js。</li>
<li>路由文件一般没有任何逻辑而只起到目录和索引的作用，它会直接指向一个处理请求的 controller（app&#x2F;controller）。</li>
<li>Controller 负责调用并组合 Service（app&#x2F;service），最后将响应提交给客户端。Service 负责调用 Model 处理具体的业务逻辑。</li>
<li>除此之外，Worker 中还有定时任务（app&#x2F;schedule）。</li>
</ul>
  <div align="center">
      <img src="/images/nodejs/egg-run.png" alt="Egg Run" width="100%">
  </div>


<h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><blockquote>
<p>要分析框架的实现原理，直接从所有源码开始分析比较难。但是可以先将其精简到最小功能系统，然后针对各个功能进行分析和叠加。</p>
</blockquote>
<h3 id="模块架构"><a href="#模块架构" class="headerlink" title="模块架构"></a>模块架构</h3>  <div align="center">
      <img src="/images/nodejs/egg-framework.png" alt="Egg Framework" width="100%">
  </div>


<h3 id="最简目录"><a href="#最简目录" class="headerlink" title="最简目录"></a>最简目录</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├── index.<span class="property">js</span>          <span class="comment">// 启动文件：初始化 应用实例 和 HTTP 服务器</span></span><br><span class="line">├── app               <span class="comment">// 业务模块：路由文件</span></span><br><span class="line">│     └── router.<span class="property">js</span>   </span><br><span class="line">├── lib               <span class="comment">// 应用模块：提供加载器和底层的中间件、插件、路由等机制</span></span><br><span class="line">|     ├── egg-core </span><br><span class="line">│     └── egg.<span class="property">js</span>                    </span><br><span class="line">└── package.<span class="property">json</span></span><br></pre></td></tr></table></figure>


<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><ol>
<li>应用初始化：加载所有 loader、加载所有中间件和插件等内容、路由注册。</li>
<li>服务启动：提供 http 服务、执行路由处理。</li>
</ol>
<h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><ol>
<li>EggApplication：继承 EggCore，按照顺序加载所有中间件、插件、路由等内容。</li>
<li>EggCore<br>* 继承 Koa，实现功能：服务器的底层逻辑、工程项目文件的加载器、提供底层的中间件、插件、路由等机制。<br>* 构建 AppWorkerLoader：初始化加载器(继承 EggLoader)、路由(继承 Koa-router)。</li>
<li>EggLoader：注入各种加载器方法。</li>
</ol>
<h3 id="路由优化"><a href="#路由优化" class="headerlink" title="路由优化"></a>路由优化</h3><ul>
<li>路由大小写敏感</li>
<li>RESTFul 实现</li>
<li>Controller 句柄使用</li>
<li>Generator Function 兼容</li>
</ul>
<h3 id="RESTFul"><a href="#RESTFul" class="headerlink" title="RESTFul"></a>RESTFul</h3><blockquote>
<p>测试时需要先安装接口测试工具：chrome postman，然后在 chrome 地址栏使用</p>
</blockquote>
<ul>
<li>约定路由路径和对应的控制器。</li>
<li>统一处理封装 router 参数。</li>
<li>统一封装 controller：根据请求类型和路径注册对应的控制器。<ul>
<li>Async Function</li>
<li>Generator Function</li>
<li>controller 句柄读取 this.app.controller</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由文件添加</span></span><br><span class="line">router.<span class="title function_">resources</span>(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;/v1/users&#x27;</span>, <span class="string">&#x27;users&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建文件 app/controller/users.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Controller</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UsersController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;创建&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;删除&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;修改&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;查询&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;列表&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">new</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;创建页面&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">edit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="string">&#x27;修改页面&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UsersController</span>;</span><br></pre></td></tr></table></figure>


<h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3>  <div style="text-indent: 2em">实际项目中的业务代码除了路由文件，还有 controller、service 等其他分层的源码文件。Egg.js 是通过加载器 EggLoader 将这些分层的项目业务代码、中间件和插件代码的大部分功能注入到 this、this.app、this.ctx 对象。</div>



 




]]></content>
      <categories>
        <category>JS 扩展</category>
      </categories>
      <tags>
        <tag>JS 扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 主要内容</title>
    <url>/2019/06/16/7-1-Node%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一、NodeJS"><a href="#一、NodeJS" class="headerlink" title="一、NodeJS"></a>一、NodeJS</h1><blockquote>
<p>一个独立运行的 JS 代码解析器(即运行环境)，用于开发和运行视频流网站、单页应用或在线聊天应用等<code>io密集型网络应用</code>。它封装了 V8 引擎并引入 CommonJS 规范而解决了 JS 比较慢和乱的问题，通过单线程和异步事件驱动机制实现了较强的并发处理能力，适用于<code>高并发、I/O 密集、少量业务逻辑</code>的场景。但是不适合处理<code>密集计算和复杂逻辑</code>，因为那可能会阻塞应用中运行的单线程。</p>
</blockquote>
<h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><ul>
<li><strong>优点</strong>：轻量高效、事件驱动模型、异步非阻塞 I&#x2F;O 模型、单进程单线程应用程序。</li>
<li><strong>不足</strong>：不适合处理复杂逻辑、不适合计算密集型应用、不适合单用户多任务的程序、代码某个环节报错则整个系统崩溃、只支持单核 CPU 而不能充分利用多核 CPU 服务器。</li>
<li><strong>前端应用</strong>：<code>模块捆绑器</code>(类似 Webpack&#x2F;Vite 将代码片段捆绑为一个文件而方便运行)、<code>代码润色器</code>(类似 ESLint 检测和修改代码)、<code>npm 包</code>(帮助编程)、<code>样式设计</code>(编写组件库)。</li>
<li><strong>后端应用</strong>：<code>数据库集成</code>(支持 JS 进行数据库操作)、<code>实时应用</code>(事件驱动机制和非阻塞I&#x2F;O模型实现密集通信)、<code>网络和API调用</code>(在线论坛等支持处理请求的同时继续其它工作)。</li>
<li><strong>应用案例</strong>：<code>Uber</code>(快速处理大量数据和修正故障)、<code>Netflix</code>(视频流媒体服务)、<code>LinkedIn</code>(提升性能和资源利用率)、<code>贝宝</code>(允许通过 JS 开发浏览器和服务器应用程序)。</li>
</ul>
<h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><blockquote>
<p>同步异步指操作任务是否按顺序依次执行，阻塞非阻塞指 IO 操作是否影响主进城执行其它代码。</p>
</blockquote>
<ul>
<li><strong>单线程</strong>：通过一个主线程处理所有的请求，注意异步操作是通过线程池来完成的。</li>
<li><strong>异步非阻塞</strong>：主线程接收到操作请求后就作为一个事件放入任务队列，然后继续接收其他请求，如果有耗时操作则交给不同的工作线程去执行，所以主线程速度快而且不会阻塞。</li>
<li><strong>事件驱动</strong>：主线程按顺序将所有操作都注册为一个事件并等待触发的方式。主线程首先执行完同步操作，然后通过事件循环机制查看任务队列中的事件并将异步事件交给工作线程。</li>
</ul>
<h2 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h2>  <div align="center">
      <img src="/images/nodejs/node-framework.png" alt="Node Framework" width="100%">
  </div>
            
<ul>
<li><strong>顶部</strong>：Js 编写的应用程序和模块。</li>
<li><strong>中间</strong>：通过代码包装和暴露接口而实现 js 可以调用 c++ 代码。<ul>
<li><strong>Bindings</strong>：绑定核心库的依赖。</li>
<li><strong>Addons</strong>：绑定第三方或自定义 C&#x2F;C++。</li>
</ul>
</li>
<li><strong>底部</strong>：C&#x2F;C++ 编写的内部组件，提供了系统底层操作方法。<ul>
<li><strong>V8</strong>：Google 开源 js 引擎，用于将 Js 代码编译为机器码执行以便快速编译。</li>
<li><strong>libuv</strong>：跨平台的底层封装，实现事件循环、文件操作等异步功能。</li>
</ul>
</li>
</ul>
<h1 id="二、window-安装"><a href="#二、window-安装" class="headerlink" title="二、window 安装"></a>二、window 安装</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>本质是把 NodeJS 执行程序复制到一个目录，然后保证这个目录在系统 PATH 环境变量下，以便终端下可以使用 node 命令。</p>
</blockquote>
<ul>
<li>版本：Windows Installer(.msi) 64位</li>
<li>地址：建议不要安装在 C 盘而修改默认地址为 “D:\nodejs&quot;</li>
<li>命令：查看版本 <code>node -v</code>、交互模式 <code>node</code>、执行文件 <code>node hello.js</code></li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="包文件"><a href="#包文件" class="headerlink" title="包文件"></a>包文件</h3><blockquote>
<p>统一管理通过 npm 全局安装的第三方包及其缓存。</p>
</blockquote>
<ol>
<li>新建文件夹：<code>node_global、node_cache</code></li>
<li>执行命令<br>* <code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code><br>* <code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></li>
<li>修改文件：node_modules\npm\npmrc<br>* <code>prefix = D:\nodejs\node_global</code><br>* <code>cache = D:\nodejs\node_global</code></li>
</ol>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><blockquote>
<p>全局使用 npm、cnpm 等命令。</p>
</blockquote>
  <div style="text-indent: 2em;">path 指系统默认指定到某一路径，运行命令时会先从这些路径中开始找。另一种方法是在系统变量中设置 NODE_PATH = 安装的根目录，NodeJS 允许通过变量 NODE_PATH 指定额外的模块搜索路径。所以配置方法如下：</div>

<ul>
<li>用户变量 PATH 末尾添加 <code>&quot;;D:\nodejs\node_global&quot;</code></li>
<li>系统变量新增 <code>NODE_PATH: &quot;D:\nodejs\node_global\node_modules&quot;</code></li>
</ul>
<h2 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h2><blockquote>
<p>npm 服务器在国外而安装速度慢，所以大多都使用淘宝对 npm 的镜像服务器 cnpm，它和 npm 命令相同。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install cnpm -g --registry=<span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装失败的解决方案</span></span><br><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-nodemon"><a href="#安装-nodemon" class="headerlink" title="安装 nodemon"></a>安装 nodemon</h2><blockquote>
<p>编写调试 Node 项目时，每次修改代码后都需要重新启动，比较麻烦。nodemon 工具可以监听代码文件的变化，并自动重启 Node 服务器和数据库服务器。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">cnpm install -g  nodemon</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello node&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">nodemon app</span><br></pre></td></tr></table></figure>


<h1 id="三、模块管理"><a href="#三、模块管理" class="headerlink" title="三、模块管理"></a>三、模块管理</h1><h2 id="模块机制"><a href="#模块机制" class="headerlink" title="模块机制"></a>模块机制</h2><ul>
<li>根据模块(文件) 划分功能、组织和复用代码。</li>
<li>通过 npm 工具和网站进行开源社区代码共享。</li>
<li>通过包规范管理应用和可复用组件。</li>
</ul>
<h2 id="模块模型"><a href="#模块模型" class="headerlink" title="模块模型"></a>模块模型</h2><ul>
<li><strong>核心模块</strong>：NodeJS 提供，会被编译到二进制执行文件（加载速度快）。<ul>
<li><strong>C&#x2F;C++ 内建模块</strong>：存放 src 目录下的最底层模块，会提供 js 调用的 API。</li>
<li><strong>Js 核心模块</strong>：存放在 lib 目录下，为 C&#x2F;C++ 内建模块提供封装和桥接。</li>
</ul>
</li>
<li><strong>文件模块</strong>：用户编写，动态加载（加载速度较慢）。<ul>
<li><strong>C++ 扩展模块</strong>：用于提高运行效率等自定义编写的底层模块。</li>
<li><strong>Js 文件模块</strong>：由第三方或用户自行编写的模块。</li>
</ul>
</li>
</ul>
<h2 id="模块缓存"><a href="#模块缓存" class="headerlink" title="模块缓存"></a>模块缓存</h2><ul>
<li>模块会在第一次 require 后被缓存，<code>多次 require 不会导致模块的代码被执行多次</code>。</li>
<li>Node 模块的缓存不同于浏览器的 js 缓存，浏览器只缓存文件，<code>Node 模块缓存的是编译和执行之后的对象</code>。</li>
<li>require.cache 对象代表 Node 模块缓存区，缓存模块以属性方式加入该对象，可以通过 <code>require.cache[&#39;模块标识符&#39;]</code> 访问具体的缓存模块，可以 delete 该缓存。</li>
</ul>
<h2 id="模块变量"><a href="#模块变量" class="headerlink" title="模块变量"></a>模块变量</h2><h3 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h3><ul>
<li><strong>global</strong>：表示 Node 所在的全局环境，类似于浏览器中的 window 对象。</li>
<li><strong>process</strong>：指向 Node 内置的 process 模块，允许开发者与当前进程互动。</li>
<li><strong>console</strong>：指向 Node 内置的 console 模块，提供命令行环境的标准输入、输出功能。</li>
</ul>
<h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul>
<li><strong>模块加载函数</strong>：require</li>
<li><strong>定时器函数</strong>：setTimeout、setInterval、clearTimeout、clearInterval</li>
</ul>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul>
<li><strong>_filename</strong>：指向当前运行脚本的文件名。</li>
<li><strong>_dirname</strong>：指向当前运行脚本所在的目录。</li>
</ul>
<h3 id="模块变量-1"><a href="#模块变量-1" class="headerlink" title="模块变量"></a>模块变量</h3><ul>
<li><strong>module</strong>：表示当前模块的对象。</li>
<li><strong>module.exports</strong>：模块的导出对象。</li>
<li><strong>module.filename</strong>：模块解析后的文件名。</li>
<li><strong>exports</strong>：指向 module.exports 对象的变量。</li>
</ul>
<h2 id="模块包规范"><a href="#模块包规范" class="headerlink" title="模块包规范"></a>模块包规范</h2><blockquote>
<p>NodeJS 采用包来对一组具有相互依赖关系的模块进行统一管理，封装为独立的复用组件或单个应用。Node的包通常为一个目录，主要包括如下内容：</p>
</blockquote>
<ul>
<li><strong>package.json</strong>：包的描述文件。</li>
<li><strong>bin</strong>：可执行文件、二进制文件。</li>
<li><strong>lib</strong>：待加载的 js 文件。</li>
<li><strong>doc</strong>：使用包的说明文档。</li>
<li><strong>test</strong>：单元测试用例代码文件。</li>
<li><strong>node_modules</strong>：本地安装包。</li>
</ul>
<h1 id="四、核心模块"><a href="#四、核心模块" class="headerlink" title="四、核心模块"></a>四、核心模块</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><blockquote>
<p>处理客户端的网络请求。</p>
</blockquote>
<h3 id="作为客户端"><a href="#作为客户端" class="headerlink" title="作为客户端"></a>作为客户端</h3><ul>
<li><strong>client</strong>：连接服务器<ul>
<li>发起请求：<code>http.request(options, fn)</code></li>
<li>简化版，不用 end：<code>http.get(options, fn)</code></li>
</ul>
</li>
<li><strong>ClientRequest</strong>：处理要发送的请求信息<ul>
<li>收到请求：<code>req.on(&quot;response&quot;, fn)</code></li>
<li>收到错误：<code>req.on(&quot;error&quot;, fn)</code></li>
<li>写入数据：<code>req.write</code></li>
<li>完成发送：<code>req.end</code></li>
</ul>
</li>
<li><strong>ClientResponse</strong>：获取服务端返回信息<ul>
<li>传输数据：<code>res.on(&quot;data&quot;, fn)</code></li>
<li>传输结束：<code>res.on(&quot;end&quot;, fn)</code></li>
<li>请求关闭：<code>res.on(&quot;close&quot;, fn)</code></li>
<li>设置存储：<code>res.setEncoding</code></li>
<li>暂停请求：<code>res.pause</code></li>
<li>恢复请求：<code>res.resume</code></li>
<li>状态码：<code>res.statusCode</code></li>
<li>请求头：<code>res.headers</code></li>
</ul>
</li>
</ul>
<h3 id="作为服务端"><a href="#作为服务端" class="headerlink" title="作为服务端"></a>作为服务端</h3><ul>
<li><strong>Server</strong>：创建服务器<ul>
<li>生成实例：<code>Server()</code><ul>
<li>接收请求：<code>on(&quot;request&quot;, fn)</code></li>
<li>关闭请求：<code>on(&quot;close&quot;, fn)</code></li>
<li>监听服务：<code>listen(port, fn)</code></li>
<li>新建 TCP 流：<code>on(&quot;connection&quot;, fn)</code></li>
</ul>
</li>
<li>直接创建：<code>createServer(fn).listen(port)</code></li>
</ul>
</li>
<li><strong>IncomingMessage</strong>：获取客户端请求信息<ul>
<li>传输数据：<code>on(&quot;data&quot;, fn)</code></li>
<li>传输结束：<code>on(&quot;end&quot;, fn)</code></li>
<li>请求关闭：<code>on(&quot;close&quot;, fn)</code></li>
<li>请求方法：<code>method</code></li>
<li>请求地址：<code>url</code></li>
</ul>
</li>
<li><strong>ServerResponse</strong>：处理返回给客户端的信息res<ul>
<li>设置头信息：<code>setHead</code></li>
<li>合并头信息：<code>writeHead</code></li>
<li>写入数据：<code>write</code></li>
<li>结束传输：<code>end</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 将传过来的URL转变为对象</span></span><br><span class="line">    <span class="keyword">var</span> params = url.<span class="title function_">parse</span>(req.<span class="property">url</span>,<span class="literal">true</span>)</span><br><span class="line">    res.<span class="title function_">write</span>(params.<span class="property">query</span>.<span class="property">name</span>)</span><br><span class="line">    res.<span class="title function_">end</span>()</span><br><span class="line">    <span class="comment">// res.end(params.query.name);</span></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端请求</span></span><br><span class="line"><span class="keyword">var</span> request = http.<span class="title function_">get</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/user?name=tom&amp;age=22&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span>&#125;,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res_date：&#x27;</span>+data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><blockquote>
<p>处理客户端请求过来的 URL。</p>
</blockquote>
<ul>
<li><strong>parse</strong>：将 url 字符串地址转为一个对象。</li>
<li><strong>format</strong>：将 url 对象转为一个 url 字符串。</li>
<li><strong>resolve</strong>：对传入的两个参数用 <code>/</code> 拼接。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"></span><br><span class="line">url.<span class="title function_">parse</span>(<span class="string">&quot;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&quot;</span>)</span><br><span class="line">url.<span class="title function_">parse</span>(<span class="string">&quot;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">url.<span class="title function_">format</span>(&#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&quot;http:&quot;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;182.163.0:60&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;60&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">url.<span class="title function_">resolve</span>(<span class="string">&quot;http://whitemu.com&quot;</span>, <span class="string">&quot;gulu&quot;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Querystring"><a href="#Querystring" class="headerlink" title="Querystring"></a>Querystring</h2><blockquote>
<p>处理客户端 get&#x2F;post 请求传递的参数。</p>
</blockquote>
<ul>
<li><strong>parse</strong>：将一个字符串反序列化为一个对象。</li>
<li><strong>stringify</strong>：将一个对象序列化成一个字符串。</li>
<li><strong>escape</strong>：使传入的字符串进行编码。</li>
<li><strong>unescape</strong>：对使用了 escape 编码的字符进行解码。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line">querystring.<span class="title function_">parse</span>(<span class="string">&quot;name=tom&amp;sex=man&amp;sex=women&quot;</span>)</span><br><span class="line">querystring.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">sex</span>: [<span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;women&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">querystring.<span class="built_in">escape</span>(<span class="string">&quot;name=慕白&quot;</span>)</span><br><span class="line">querystring.<span class="built_in">unescape</span>(<span class="string">&#x27;name%3D%E6%85%95%E7%99%BD&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><blockquote>
<p>操作文件路径</p>
</blockquote>
<ul>
<li>获取路径信息<ul>
<li><strong>dirname</strong>：路径</li>
<li><strong>extname</strong>：扩展名</li>
<li><strong>basename</strong>：文件名</li>
</ul>
</li>
<li>路径拼接<ul>
<li><strong>join</strong>：使用当前系统的路径分隔符拼接路径。</li>
<li><strong>resolve</strong>：将相对路径拼接出绝对路径。</li>
<li><strong>relative</strong>：解析出两个路径之间的相对路径。</li>
</ul>
</li>
<li>路径处理<ul>
<li><strong>parse</strong>：路径分解而返回对象。</li>
<li><strong>format</strong>：路径组合而返回字符串。</li>
<li><strong>normalize</strong>：路径标准化。</li>
<li><strong>isAbsolute</strong>：判断路径是否为绝对路径。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">path.<span class="title function_">dirname</span>(<span class="string">&#x27;/foo/bar/baz/asdf/a.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz/asdf&#x27;</span>, <span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;js/upload&#x27;</span>, <span class="string">&#x27;../mod.js&#x27;</span>)</span><br><span class="line">path.<span class="title function_">relative</span>(<span class="string">&#x27;C:/test/aaa&#x27;</span>, <span class="string">&#x27;C:/bbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">path.<span class="title function_">parse</span>(<span class="string">&#x27;/home/user/dir/file.txt&#x27;</span>)</span><br><span class="line">path.<span class="title function_">format</span>(&#123;</span><br><span class="line">    <span class="attr">dir</span>: <span class="string">&#x27;/tmp&#x27;</span>, </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">ext</span>: <span class="string">&#x27;.js&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">path.<span class="title function_">normalize</span>(<span class="string">&#x27;a/../user/bin&#x27;</span>)</span><br><span class="line">path.<span class="title function_">isAbsolute</span>(<span class="string">&#x27;/foo/bar&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><blockquote>
<p>事件处理模块。</p>
</blockquote>
  <div style="text-indent: 2em;">回调函数模式让 NodeJS 可以处理异步操作，但对于无法处理多状态的异步操作则需要进行拆分而分阶段执行。为了解决这个问题，NodeJS 提供了 Event Emitter 接口，通过事件解决多状态异步操作的响应问题。events 模块对外暴露一个 EventEmitter 类，可以用来生成事件发生器的实例 emitter，然后通过实例方法处理事件，比如 on/once 监听事件、emit 触发事件、removeListener 删除事件等。</div>
        
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块调用</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">&quot;events&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;linked Success&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件触发</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&quot;connection&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="FS"><a href="#FS" class="headerlink" title="FS"></a>FS</h2><blockquote>
<p>在服务端来操作文件。默认异步操作，同步 API 则只需添加 Sync，比如 readFileSync。</p>
</blockquote>
<ul>
<li>操作文件<ul>
<li><strong>readFile</strong>：文件读取</li>
<li><strong>writeFile</strong>：文件写入</li>
<li><strong>appendFile</strong>：追加写入</li>
<li><strong>rename</strong>：文件重命名</li>
<li><strong>unlink</strong>：文件删除</li>
</ul>
</li>
<li>操作目录<ul>
<li><strong>mkdir</strong>：创建</li>
<li><strong>readdir</strong>：读取</li>
<li><strong>rmdir</strong>：删除空目录</li>
<li><strong>chmod</strong>：修改权限</li>
</ul>
</li>
<li>其它<ul>
<li><strong>stat</strong>：详细信息</li>
<li><strong>exists</strong>：判断存在</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, stats</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大括号中只有一句语句时可以省略</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err) </span><br><span class="line"></span><br><span class="line">    stats.<span class="title function_">isFile</span>()        <span class="comment">// 是否为文件</span></span><br><span class="line">    stats.<span class="title function_">isDirectory</span>()   <span class="comment">// 是否为目录</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步写入</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="string">&#x27;写入文件的内容&#x27;</span>,  <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err) </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步读取</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err) </span><br><span class="line">        <span class="keyword">var</span> data_str = data.<span class="title function_">toString</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><blockquote>
<p>本质是对 buffer 对象的高级封装，它操作的底层是 buffer 对象。</p>
</blockquote>
<h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3>  <div style="text-indent: 2em;">操作系统采用数据块（chunk）的方式读取数据，每收到一次数据就存入缓存。NodeJS 应用程序有两种缓存的处理方式：第一种是先将数据全部读入内存，然后一次性从缓存中读取，这种方式对于视频等二进制大文件很容易使内存"爆仓"。第二种是采用 数据流（stream）的方式，边读取边存入。</div>

  <div style="text-indent: 2em; margin-top: 15px;">流表示一组有序的、有起止点的字节数据的序列，但是流的数据不能一次性读取或写入。NodeJs 将关于流的操作封装到了 Stream 模块并提供了 Stream API 通过事件来实现基于流的IO操作，比如处理普通文件、网络文件 (http、net)、设备文件 (stdin、stdout)。</div>
            
            
<h3 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h3><ul>
<li><strong>流读取</strong>：NodeJS 不断将文件一小块内容读入缓冲区，再从缓冲区中读取内容。</li>
<li><strong>流写入</strong>：NodeJS 不断将流数据写入内在缓冲区，待缓冲区 满后再将缓冲区写入到文件中，重复操作直到完成。</li>
<li><strong>直接操作</strong>：readFile&#x2F;read、writeFile&#x2F;write 一次性读取内容或写入内存。</li>
</ul>
<h3 id="流事件"><a href="#流事件" class="headerlink" title="流事件"></a>流事件</h3><blockquote>
<p>所有 Stream 对象 都是 EventEmitter 类的实例，读写流的不同状态时就会触发相应事件。</p>
</blockquote>
<ul>
<li><strong>data</strong>：当有数据可读时触发。</li>
<li><strong>end</strong>：数据已经全部读取完毕时触发。</li>
<li><strong>error</strong>：读取或写入的过程中发生错误时触发。</li>
<li><strong>finish</strong>：所有数据都已经被写入到底层系统时触发。</li>
</ul>
<h3 id="流类型"><a href="#流类型" class="headerlink" title="流类型"></a>流类型</h3><ul>
<li><strong>Readable</strong>：从流中读取数据的 API，用于对外提供数据。</li>
<li><strong>Writable</strong>：往流中写入数据的 API，用于写入数据。</li>
<li><strong>Duplex</strong>：在流中可读写数据的 API，用于读取和写入数据。</li>
<li><strong>Transform</strong>：在读写过程中可以修改和变换数据的 Duplex 流。</li>
</ul>
<h3 id="流模式"><a href="#流模式" class="headerlink" title="流模式"></a>流模式</h3><blockquote>
<p>根据流中传递数据的类型来区分，一般需要在创建流时指定其模式而且不再修改，但是可以通过拼接转换流来进行模式转换并得到一个新的流。</p>
</blockquote>
<ul>
<li><strong>Object Mode</strong>：对象模式，即流中传递的是任意类型的 Js 对象（null 除外）。</li>
<li><strong>Buffering Mode</strong>：Buffer 模式，即流中传递的是 Buffer 对象。</li>
</ul>
<h3 id="null-对象"><a href="#null-对象" class="headerlink" title="null 对象"></a>null 对象</h3><blockquote>
<p>在流中的作用如下：</p>
</blockquote>
<ul>
<li>向 Writable 流中写入 null，表示数据源的数据已经写入完成，继续写入数据则会报错。</li>
<li>从 Readable 流中读取到 null，表示所有数据已经读取完毕，流中不会再有可读取的数据。</li>
</ul>
<h3 id="流的拼接"><a href="#流的拼接" class="headerlink" title="流的拼接"></a>流的拼接</h3>  <div style="text-indent: 2em;">就像可以把两个水管串成一个更长的水管一样，一个 Readable 流和一个 Writable 流串起来后，所有的数据自动从 Readable 流进入 Writable 流。Readable API 提供了 pipe 方法用于流的拼接，但注意位于中间的流必须是 Duplex 流。</div>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取数据流</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 创建可读流，即将文件内容读取为流数据</span></span><br><span class="line"><span class="keyword">var</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>) </span><br><span class="line">readStream.<span class="title function_">setEncoding</span>(<span class="string">&#x27;UTF8&#x27;</span>)  </span><br><span class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">    data += chunk</span><br><span class="line">&#125;)</span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入流</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;要写入的内容&#x27;</span></span><br><span class="line"><span class="comment">// 创建可写流并写入到文件中</span></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>)</span><br><span class="line">writeStream.<span class="title function_">write</span>(data, <span class="string">&#x27;UTF8&#x27;</span>)</span><br><span class="line">writeStream.<span class="title function_">write</span>(<span class="keyword">new</span> <span class="title class_">Buffer</span>(<span class="string">&#x27;使用Stream写入二进制数据...\n&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>));</span><br><span class="line">writeStream.<span class="title function_">end</span>()   <span class="comment">// 标记文件末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入完成。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">stack</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道流</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">encoding</span>:<span class="string">&#x27;utf8&#x27;</span>,  <span class="comment">// 不传默认buffer，显示为字符串</span></span><br><span class="line">        <span class="attr">start</span>:<span class="number">3</span>,          <span class="comment">// 从索引为3的位置开始读</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>);</span><br><span class="line"><span class="comment">// 管道读写操作：读取 input.txt 内容并将内容写入到 output.txt</span></span><br><span class="line">readeStream.<span class="title function_">pipe</span>(writeStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式流：链式是通过连接输出流到另外一个流并创建多个对个流操作链的机制</span></span><br><span class="line"><span class="comment">// 链式流一般用于管道操作。以下是用管道和链式来压缩和解压文件</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&#x27;test dfddgfdgfdgfdgfd jkwu&#x27;</span></span><br><span class="line"><span class="comment">// 压缩 input.txt 文件为 input.txt.gz</span></span><br><span class="line">fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGzip</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>))</span><br><span class="line"><span class="comment">// 解压 input.txt.gz 文件为 input.txt</span></span><br><span class="line">fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt.gz&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGunzip</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;input.txt&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line"><span class="comment">// HTTP 对象使用 Stream 接口，实现网络数据的读写</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    req.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">        body += chunk</span><br><span class="line">    &#125;);</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(body);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (er) &#123;</span><br><span class="line">            res.<span class="property">statusCode</span> = <span class="number">400</span>;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;error: &#x27;</span> + er.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">write</span>(<span class="keyword">typeof</span> data);</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;filename.txt&#x27;</span>)</span><br><span class="line">    stream</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, onerror)</span><br><span class="line">    .<span class="title function_">pipe</span>(zlib.<span class="title function_">createGzip</span>())</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, onerror)</span><br><span class="line">    .<span class="title function_">pipe</span>(res)</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">onFinished</span>(res, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      stream.<span class="title function_">destroy</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="util"><a href="#util" class="headerlink" title="util"></a>util</h2><blockquote>
<p>提供一系列实用方法，注意需要安装 npm install util。</p>
</blockquote>
<ul>
<li>格式化字符串：<code>format</code></li>
<li>数据类型验证：<code>isDate、isArray、isError、isRegExp</code></li>
<li>其它：<code>inherits (继承)、inspect (对象转化为字符串)</code></li>
</ul>
<h1 id="五、Web-开发"><a href="#五、Web-开发" class="headerlink" title="五、Web 开发"></a>五、Web 开发</h1><h2 id="搭建-web-服务器"><a href="#搭建-web-服务器" class="headerlink" title="搭建 web 服务器"></a>搭建 web 服务器</h2><h3 id="通过插件"><a href="#通过插件" class="headerlink" title="通过插件"></a>通过插件</h3><blockquote>
<p>http-server、live-server</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install http-server -g</span><br><span class="line">cd progect      <span class="comment">// 进入项目目录</span></span><br><span class="line">http-server     <span class="comment">// 开启服务</span></span><br></pre></td></tr></table></figure>


<h3 id="通过-NodeJs"><a href="#通过-NodeJs" class="headerlink" title="通过 NodeJs"></a>通过 NodeJs</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行第三个参数，用来接收目录，可为空，相对当前server.js的目录名称</span></span><br><span class="line"><span class="comment">// 比如 node server debug，则 debug 文件夹与 server.js 文件同级并以 debug 启动服务</span></span><br><span class="line"><span class="keyword">var</span> dir, arg = process.<span class="property">argv</span>[<span class="number">2</span>] || <span class="string">&#x27;&#x27;</span>; </span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = **dirname + url.<span class="title function_">parse</span>(req.<span class="property">url</span>).<span class="property">pathname</span>;</span><br><span class="line">    <span class="comment">// 保存 dir (目录)</span></span><br><span class="line">    dir = dir ? dir : pathname; </span><br><span class="line">    <span class="comment">// 替换文件静态路径</span></span><br><span class="line">    pathname = dir ? pathname.<span class="title function_">replace</span>(dir, dir + arg + <span class="string">&#x27;/&#x27;</span>) : pathname; </span><br><span class="line">    <span class="keyword">if</span> (path.<span class="title function_">extname</span>(pathname) == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        pathname += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pathname.<span class="title function_">charAt</span>(pathname.<span class="property">length</span> - <span class="number">1</span>) == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 入口文件，此处默认index.html</span></span><br><span class="line">        pathname += <span class="string">&quot;index.html&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">exists</span>(pathname, <span class="keyword">function</span> (<span class="params">exists</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (path.<span class="title function_">extname</span>(pathname)) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;.html&quot;</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;.js&quot;</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/javascript&quot;</span>&#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;.css&quot;</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/css&quot;</span>&#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;.gif&quot;</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;image/gif&quot;</span>&#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;.jpg&quot;</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;image/png&quot;</span>&#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">&quot;.png&quot;</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;image/png&quot;</span>&#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="attr">default</span>:</span><br><span class="line">                  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/octet-stream&quot;</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// res 可以自己添加信息来简单交互 比如可以修改 header 信息、修改返回数据</span></span><br><span class="line">            fs.<span class="title function_">readFile</span>(pathname, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">                res.<span class="title function_">end</span>(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span>&#125;);</span><br><span class="line">            res.<span class="title function_">end</span>(<span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">9090</span>, <span class="string">&quot;127.0.0.1&quot;</span>); <span class="comment">// 服务器端口</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server running at http://127.0.0.1:9090/&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="连接-mysql"><a href="#连接-mysql" class="headerlink" title="连接 mysql"></a>连接 mysql</h2><blockquote>
<p>安装 mysql 及其驱动：npm install mysql node-mysql -g     </p>
</blockquote>
<h3 id="直接连接"><a href="#直接连接" class="headerlink" title="直接连接"></a>直接连接</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>,      <span class="comment">// 主机</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,           <span class="comment">// 用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;xxxxx&quot;</span>,      <span class="comment">// 用户密码</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3306&quot;</span>,           <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;mysql&quot;</span>       <span class="comment">// 数据库名</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">connection.<span class="title function_">connect</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`mysql connect fail: <span class="subst">$&#123;err&#125;</span>!`</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mysql connect success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sqlQuery = <span class="string">&quot;select * from students&quot;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sqlQuery, <span class="keyword">function</span>(<span class="params">err, result</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SQL error: <span class="subst">$&#123;err&#125;</span>!`</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回数据</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at localhost:3000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭connection  </span></span><br><span class="line">connection.<span class="title function_">end</span>(<span class="keyword">function</span>(<span class="params">err</span>)&#123;  </span><br><span class="line">    <span class="keyword">if</span>(err)&#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="title function_">toString</span>());</span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[connection end] succeed!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="通过连接池"><a href="#通过连接池" class="headerlink" title="通过连接池"></a>通过连接池</h3><blockquote>
<p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接而不是再重新建立一个，用于对数据库操作的性能。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>,      <span class="comment">// 主机</span></span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,           <span class="comment">// 用户名</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;xxxxx&quot;</span>,      <span class="comment">// 用户密码</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3306&quot;</span>,           <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">&quot;mysql&quot;</span>       <span class="comment">// 数据库名</span></span><br><span class="line">&#125;)</span><br><span class="line">pool.<span class="title function_">getConnection</span>(<span class="keyword">function</span>(<span class="params">err, connection</span>) &#123;</span><br><span class="line">    connection.<span class="title function_">query</span>(<span class="string">&#x27;select * from students&#x27;</span>, [], <span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error: &quot;</span> + err.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        connection.<span class="title function_">release</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/file_upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> multer  = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// dest 定义上传目录，array 限制上传类型（即 input name）　</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: <span class="string">&#x27;./uploads&#x27;</span>&#125;).<span class="title function_">array</span>(<span class="string">&#x27;image&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>( **dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;index.html&quot;</span> );</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/file_upload&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">files</span>[<span class="number">0</span>]);  <span class="comment">// 上传的文件信息</span></span><br><span class="line">    <span class="keyword">var</span> des_file = **dirname + <span class="string">&quot;/&quot;</span> + req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">originalname</span>;</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">readFile</span>( req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">path</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">writeFile</span>(des_file, data, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response = &#123;</span><br><span class="line">                    <span class="attr">message</span>: <span class="string">&#x27;File uploaded successfully&#x27;</span>, </span><br><span class="line">                    <span class="attr">filename</span>: req.<span class="property">files</span>[<span class="number">0</span>].<span class="property">originalname</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( response );</span><br><span class="line">            res.<span class="title function_">end</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>( response ) );</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;localhost:3000&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行命令</span></span><br><span class="line">npm install multer body-parser -S</span><br><span class="line">node server.<span class="property">js</span></span><br></pre></td></tr></table></figure>


<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="通过-ws-模块"><a href="#通过-ws-模块" class="headerlink" title="通过 ws 模块"></a>通过 ws 模块</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">cnpm i ws -S</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端js</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">WebSocket</span> != <span class="literal">undefined</span>) &#123;  </span><br><span class="line">    <span class="comment">//创建一个WebSocket，监听端口6060端口，这里必须是：ws，不能是http</span></span><br><span class="line">    <span class="keyword">var</span> connection = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:6060&#x27;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// readyState : 0：正在连接、1：连接成功、2：正在关闭、3：连接关闭</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(connection.<span class="property">readyState</span>); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 握手协议成功以后，readyState就从0变为1，并触发open事件  </span></span><br><span class="line">    connection.<span class="property">onopen</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">        <span class="comment">//连接建立后，客户端通过send方法向服务器端发送数据。   </span></span><br><span class="line">        connection.<span class="title function_">send</span>(<span class="string">&#x27;client message&#x27;</span>); </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听  </span></span><br><span class="line">    connection.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭WebSocket连接，会触发close事件。  </span></span><br><span class="line">    connection.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Closed&quot;</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//出现错误  </span></span><br><span class="line">    connection.<span class="property">onerror</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;   </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error: &quot;</span> + event.<span class="property">data</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器 server.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 WebSocket 服务器</span></span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title function_">createServer</span>() , </span><br><span class="line">    <span class="title class_">WebSocketServer</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>).<span class="property">Server</span> , </span><br><span class="line">    wss = <span class="keyword">new</span> <span class="title class_">WebSocketServer</span>(&#123; <span class="attr">server</span>: server &#125;) , </span><br><span class="line">    app = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)() , </span><br><span class="line">    port = <span class="number">6060</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 express 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123; </span><br><span class="line">    <span class="comment">//send用来向客户端发送信息，on用来接收/监听客户端发来的信息</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123; <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听事件  %s 字符串、%d 整数、%f 浮点数</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> <span class="title function_">connection</span>(<span class="params">ws</span>) &#123; </span><br><span class="line">    <span class="comment">//监听 </span></span><br><span class="line">    ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">incoming</span>(<span class="params">message</span>) &#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;received: %s&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//发送 </span></span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&#x27;something&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, app);</span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://localhost:&#x27;</span> + server.<span class="title function_">address</span>().<span class="property">port</span>) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="通过-socket-io"><a href="#通过-socket-io" class="headerlink" title="通过 socket.io"></a>通过 socket.io</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">cnpm i socket.<span class="property">io</span> -S</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端 js (需要引入 socket.io.js)</span></span><br><span class="line"><span class="keyword">var</span> socket = io.<span class="title function_">connect</span>(<span class="string">&#x27;http://localhost:8080&#x27;</span>)  </span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;news&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;   </span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&#x27;event&#x27;</span>, &#123; <span class="attr">my</span>: <span class="string">&#x27;data&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器 server.js</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title function_">createServer</span>(handler), </span><br><span class="line">    io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>).<span class="title function_">listen</span>(app), </span><br><span class="line">    fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line">io.<span class="title function_">set</span>(<span class="string">&#x27;log level&#x27;</span>, <span class="number">1</span>)  <span class="comment">// 关闭 debug 信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span> (req, res) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(**dirname + <span class="string">&#x27;/index.html&#x27;</span>,<span class="keyword">function</span> (<span class="params">err, data</span>) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;Error loading index.html&#x27;</span>);</span><br><span class="line">      &#125;    </span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>&#125;);    </span><br><span class="line">      res.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io.<span class="property">sockets</span>.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="keyword">function</span> (<span class="params">socket</span>) &#123;</span><br><span class="line">    socket.<span class="title function_">emit</span>(<span class="string">&#x27;news&#x27;</span>, &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;);</span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;my other event&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install cors --save</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js 加入代码</span></span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123;</span><br><span class="line">    <span class="attr">origin</span>:[<span class="string">&#x27;http://localhost:8080&#x27;</span>],  <span class="comment">//指定接收的地址</span></span><br><span class="line">    <span class="attr">methods</span>:[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],            <span class="comment">// 指定接收的请求类型</span></span><br><span class="line">    <span class="attr">alloweHeaders</span>:[<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;Authorization&#x27;</span>]  <span class="comment">// 指定 header</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JS 扩展</category>
      </categories>
      <tags>
        <tag>JS 扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 常见场景的解决方案</title>
    <url>/2019/06/10/5-2-vue%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h1 id="一、路由控制"><a href="#一、路由控制" class="headerlink" title="一、路由控制"></a>一、路由控制</h1><blockquote>
<p>Token 是包含用户名、有效期和某些专有信息并通过共享密钥加密的信息字符串。</p>
</blockquote>
<h2 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h2><ol>
<li>客户端发送用户名和密码请求登录，服务端收到进行验证。</li>
<li>服务端验证成功后生成唯一的 Token 存储在数据库并返回给客户端。</li>
<li>客户端收到 Token 后通过 Cookie、Vuex 等方式存储。</li>
<li>客户端每次向服务端请求资源时都携带 Token。</li>
<li>服务端收到请求后去验证 Token，验证成功则返回数据。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端路由验证</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="built_in">require</span>(<span class="string">&#x27;./views/Home&#x27;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span>  &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requireAuth</span>) &#123;    </span><br><span class="line">      <span class="keyword">if</span> (store.<span class="property">state</span>.<span class="property">token</span>) &#123;  </span><br><span class="line">          <span class="title function_">next</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 记录目标路由，用于登录成功后直接跳转</span></span><br><span class="line">          <span class="title function_">next</span>(&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">query</span>: &#123;<span class="attr">redirect</span>: to.<span class="property">fullPath</span>&#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端验证</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">state</span>.<span class="property">token</span>) &#123;  </span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&#x27;Token&#x27;</span>] = store.<span class="property">state</span>.<span class="property">token</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;)</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">res</span>.<span class="property">status</span> == <span class="number">401</span>) &#123;</span><br><span class="line">        <span class="comment">// 清除 token 信息并跳转到登录页面</span></span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&quot;token_clear&quot;</span>);</span><br><span class="line">        router.<span class="title function_">replace</span>(&#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">          <span class="attr">query</span>: &#123;<span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span>&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>.<span class="property">data</span>)   </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>


<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><blockquote>
<p>路由表一般由 Vuex 管理。</p>
</blockquote>
<ol>
<li>初始化路由时挂载登录、注册等公共组件。</li>
<li>用户登录后，客户端获取服务器返回的路由数据。</li>
<li>客户端触发 vuex 相关方法生成用户可访问的路由表。</li>
<li>动态挂载路由方法 router.addRoutes。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端初始化路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@//components/login&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;404&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;@//components/404&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端返回的路由数据 addRouter</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;home&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/userinfo&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;userInfo&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex 添加路由表</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [<span class="variable constant_">ADD_ROUTES</span>](state, addrouter) &#123;</span><br><span class="line">    <span class="keyword">let</span> routes = []</span><br><span class="line">    <span class="title function_">generaRouter</span>(routes, addRouter)</span><br><span class="line">    router.<span class="title function_">addRoutes</span>(routes)  </span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">add_Routes</span>(<span class="params">&#123;commit&#125;, addrouter</span>) &#123;</span><br><span class="line">    <span class="title function_">commit</span>(<span class="variable constant_">ADD_ROUTES</span>, addrouter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generaRouter</span>(<span class="params">routers, data</span>)&#123;</span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> menu = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, item)</span><br><span class="line">    menu.<span class="property">component</span> = <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">`@/components/<span class="subst">$&#123;menu.component&#125;</span>.vue`</span>)</span><br><span class="line">    <span class="keyword">if</span>(item.<span class="property">children</span>)&#123;</span><br><span class="line">        menu.<span class="property">children</span> = []</span><br><span class="line">        <span class="title function_">generaRouter</span>(menu.<span class="property">children</span>,item.<span class="property">children</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    routers.<span class="title function_">push</span>(menu)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js 用户手动刷新页面时重新新增路由</span></span><br><span class="line"><span class="keyword">if</span> (sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> routes = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;routes&#x27;</span>))</span><br><span class="line">    store.<span class="title function_">dispatch</span>(<span class="string">&quot;add_Routes&quot;</span>, routes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二、数据加密"><a href="#二、数据加密" class="headerlink" title="二、数据加密"></a>二、数据加密</h1><h2 id="安全需求"><a href="#安全需求" class="headerlink" title="安全需求"></a>安全需求</h2><blockquote>
<p>前后端的传输通过 HTTP 进行传输，也带来了一些安全问题，如果抓包、模拟请求、洪水攻击、参数劫持、网络爬虫等都能够获取请求的数据包。所以项目可能需要在 http 请求中添加安全级别，常用方式如下：</p>
</blockquote>
<ul>
<li>采用 HTTPS 协议。<ul>
<li>普通的 HTTP 协议是以明文形式进行传输，不提供任何方式的数据加密，很容易解读传输报文。</li>
<li>HTTPS 协议在 HTTP 基础上加入了 SSL 层，而 SSL 层通过证书来验证服务器身份，并为浏览器和服务器之间的通信加密，保护了传输过程中的数据安全。</li>
</ul>
</li>
<li>对请求参数进行合法性校验。</li>
<li>对请求参数进行签名认证，防止参数被篡改。</li>
<li>请求隐私接口，利用 token 机制校验其合法性。</li>
<li>密钥存储到服务端而非客户端，客户端应从服务端动态获取密钥。</li>
<li>对输入输出参数进行加密，客户端加密输入参数，服务端加密输出参数。</li>
</ul>
<h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><ul>
<li><strong>对称加密算法</strong>：加密与解密密钥相同，主要可分为序列算法（对明文的一个单位运算）、分组算法（对明文的一组运算）。<ul>
<li><code>DES</code>：一种分组密码，以 64 位为分组对数据加密，密钥长度是 56 位。</li>
<li><code>3DES</code>：基于 DES 的对称算法，对一块数据用三个不同密钥加密三次，强度更高。</li>
<li><code>AES</code>：密码学中的高级加密标准，它采用对称分组密码体制，密钥长度的最少支持为 128、192、256 ，分组长度 128 位，算法应易于各种硬件和软件实现。</li>
</ul>
</li>
<li><strong>非对称算法</strong>：加密密钥与解密密钥不同。<ul>
<li><code>RSA</code>：目前最有影响力的公钥加密算法，可用于签名和加密。</li>
<li><code>DSA</code>：基于整数有限域离散对数难题，主要特点是两个素数公开，只用于签名。</li>
</ul>
</li>
<li><strong>散列算法</strong><ul>
<li><code>MD5</code>：单向加密的消息摘要算法(不可解密)，常用于密码认证、登陆认证。</li>
<li><code>SHA1</code>：一种比 MD5 安全性强的消息摘要算法，主要用于标准的数字签名算法。</li>
</ul>
</li>
<li><strong>其它</strong>：不需要密钥。<ul>
<li><code>Base64</code>：并非真正的加密算法，是一种用于传输 8bit 字节代码的数据编码方式，可用于 http 传递较长的标识信息。</li>
</ul>
</li>
</ul>
<h2 id="AES-加密"><a href="#AES-加密" class="headerlink" title="AES 加密"></a>AES 加密</h2><blockquote>
<p>密钥是用来加密明文的密码，不可以直接在网络上传输。加密参数和实现流程主要如下：</p>
</blockquote>
<ul>
<li><code>key length</code>：密钥位数、密码长度。</li>
<li><code>key</code>：密钥、密码。</li>
<li><code>IV</code>：初始向量（密钥偏移量），加密和解密需要相同值。</li>
<li><code>mode</code>：加密模式，分为 ECB、CBC、CFB 等，只有 ECB 没有 IV 会不太安全。</li>
<li><code>padding</code>：填充方式，分为 PKCS5、PKCS7、NOPADDING，加解密需要相同模式。</li>
</ul>
  <div align="center">
      <img src="/images/vue/crypto.png" alt="AES 加密" width="100%">
  </div>


<h2 id="vue-加密"><a href="#vue-加密" class="headerlink" title="vue 加密"></a>vue 加密</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tool.js：封装加密算法，注意安装插件 npm i crypto-js -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机整数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">random</span>(<span class="params">min, max</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(max == <span class="literal">null</span>)&#123;</span><br><span class="line">        max = min;  </span><br><span class="line">        min = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> min + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min+<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** randomWord 产生任意长度随机字母数字组合</span></span><br><span class="line"><span class="comment">** randomFlag-是否任意长度 min-任意长度最小位[固定位数] max-任意长度最大位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomWord</span>(<span class="params">randomFlag, min, max</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    range = min,</span><br><span class="line">    arr = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>];</span><br><span class="line">    <span class="comment">// 随机产生</span></span><br><span class="line">    <span class="keyword">if</span>(randomFlag)&#123;</span><br><span class="line">        range = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max-min)) + min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; range; i++)&#123;</span><br><span class="line">        pos = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (arr.<span class="property">length</span>-<span class="number">1</span>));</span><br><span class="line">        str += arr[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* crypto-js</span></span><br><span class="line"><span class="comment">* word：待加密或者解密的字符串</span></span><br><span class="line"><span class="comment">* keyStr：AES 加密需要用到的16位字符串的key</span></span><br><span class="line"><span class="comment">* @author: shichuang</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">data, key, iv</span>)&#123;</span><br><span class="line">    key  = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key);</span><br><span class="line">    <span class="comment">// iv = CryptoJS.enc.Utf8.parse(iv);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, key, &#123;</span><br><span class="line">          <span class="comment">// iv, mode: CryptoJS.mode.CBC</span></span><br><span class="line">          <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>, </span><br><span class="line">          <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">data, key, iv</span>)&#123;</span><br><span class="line">    key  = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> decrypt = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(data, key, &#123;</span><br><span class="line">          <span class="comment">// iv, mode: CryptoJS.mode.CBC</span></span><br><span class="line">          <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span><br><span class="line">          <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(decrypt).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES 对称秘钥加密</span></span><br><span class="line"><span class="keyword">const</span> aes = &#123;</span><br><span class="line">    <span class="attr">en</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">getAesString</span>(data, <span class="variable constant_">KP</span>.<span class="property">key</span>),</span><br><span class="line">    <span class="attr">de</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">getDAesString</span>(data, <span class="variable constant_">KP</span>.<span class="property">key</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// BASE64</span></span><br><span class="line"><span class="keyword">const</span> base64 = &#123;</span><br><span class="line">    <span class="attr">en</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">stringify</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(data)),</span><br><span class="line">    <span class="attr">de</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">parse</span>(data).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// SHA256</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sha256</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="title class_">SHA256</span>(data).<span class="title function_">toString</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// MD5</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">md5</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="title class_">MD5</span>(data).<span class="title function_">toString</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 签名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> token 身份令牌：store.state.token</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> timestamp 签名时间戳：new Date().getTime()</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> data 签名数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sign</span> = (<span class="params">token, timestamp, data</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 签名格式： timestamp + token + data (字典升序)</span></span><br><span class="line">    <span class="keyword">let</span> ret = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        <span class="keyword">let</span> val = data[it];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span> &amp;&amp; (!(val <span class="keyword">instanceof</span> <span class="title class_">Array</span>) || </span><br><span class="line">        (val.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">typeof</span> val[<span class="number">0</span>] === <span class="string">&#x27;object&#x27;</span>)))) &#123;</span><br><span class="line">            val = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="title function_">push</span>(it + val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 字典升序</span></span><br><span class="line">    ret.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">let</span> signsrc = timestamp + token + ret.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">md5</span>(signsrc);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    aes,</span><br><span class="line">    md5,</span><br><span class="line">    sha256,</span><br><span class="line">    base64,</span><br><span class="line">    sign</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios.js：数据加解密</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;random, randomWord, aes&#125; <span class="keyword">from</span> <span class="string">&quot;./tool.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ajax = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_URL</span>,   <span class="comment">// url 前缀</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span>,                     <span class="comment">// 超时毫秒数</span></span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>               <span class="comment">// 携带认证信息 cookie</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">KP</span> = &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="title function_">randomWord</span>(<span class="literal">true</span>, <span class="number">16</span>, <span class="number">20</span>),  <span class="comment">// 秘钥</span></span><br><span class="line">            <span class="attr">iv</span>: <span class="title function_">randomWord</span>(<span class="literal">true</span>, <span class="number">16</span>, <span class="number">20</span>)    <span class="comment">// 偏移量</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        config.<span class="property">data</span> = aes.<span class="title function_">en</span>(config.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置表头  &#x27;application/json&#x27;</span></span><br><span class="line">        config.<span class="property">headers</span> = &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>: config.<span class="property">url</span>,</span><br><span class="line">            <span class="attr">method</span>: config.<span class="property">method</span>,</span><br><span class="line">            <span class="attr">shareKey</span>: <span class="variable constant_">KP</span>.<span class="property">key</span>,</span><br><span class="line">            <span class="attr">shareIv</span>: <span class="variable constant_">KP</span>.<span class="property">iv</span>,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),  <span class="comment">// 时间戳</span></span><br><span class="line">            <span class="attr">token</span>: store.<span class="property">state</span>.<span class="property">token</span>,</span><br><span class="line">            <span class="attr">requestStr</span>: <span class="title function_">random</span>(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> url 请求 url</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> method get、post</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> params 参数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> level 0：无加密，1：参数加密，2：签名+时间戳，默认0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_request</span> (url, methods, data = <span class="literal">undefined</span>, params = &#123;&#125;, level = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">service</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>: methods,</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="attr">params</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(params),</span><br><span class="line">            <span class="attr">headers</span>: &#123; level &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">resolve</span>(response.<span class="property">data</span>)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="三、数据更新"><a href="#三、数据更新" class="headerlink" title="三、数据更新"></a>三、数据更新</h1><h2 id="重置组件数据"><a href="#重置组件数据" class="headerlink" title="重置组件数据"></a>重置组件数据</h2><blockquote>
<p>this.$data 当前状态下的数据、this.$options.data() 该组件初始状态下的数据。</p>
</blockquote>
<ul>
<li>表单：<code>this.form = this.$options.data().form</code></li>
<li>组件：<code>Object.assign(this.$data, this.$options.data())</code></li>
</ul>
<h2 id="更新路由数据"><a href="#更新路由数据" class="headerlink" title="更新路由数据"></a>更新路由数据</h2><blockquote>
<p>路由变化后页面数据并未更新，原因是跳转前后使用同一个组件，vue-router 默认复用组件而没有执行 created 等生命周期钩子。</p>
</blockquote>
<ul>
<li>普通方案：监听 $route 变化来初始化数据 <code>watch: &#123; &#39;$route&#39;: &#123;handler: &#39;resetData&#39;,immediate: true&#125; &#125;</code>。</li>
<li>简单方案：监听路由地址变化来重新创建组件 <code>&lt;router-view :key=&quot;$route.fullPath&quot;&gt;&lt;/router-view&gt;</code>。</li>
</ul>
<h2 id="页面刷新方法"><a href="#页面刷新方法" class="headerlink" title="页面刷新方法"></a>页面刷新方法</h2><ul>
<li><code>router.go(0)</code>：兼容性不好</li>
<li><code>window.location.reload()</code>：会清空 vuex 数据</li>
<li><code>provice + inject</code>：推荐使用</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根组件定义：router-view v-if=&quot;isRouterAlive&quot;\</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    provide ()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">reload</span>: <span class="variable language_">this</span>.<span class="property">reload</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">isRouterAlive</span>: <span class="literal">true</span>  &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        reload () &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isRouterAlive</span> = <span class="literal">false</span></span><br><span class="line">            <span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isRouterAlive</span> = <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件引用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">inject</span>: [<span class="string">&#x27;reload&#x27;</span>],</span><br><span class="line">    <span class="attr">method</span>: &#123;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="params"></span>)&#123; <span class="variable language_">this</span>.<span class="title function_">reload</span>() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="数据更新问题"><a href="#数据更新问题" class="headerlink" title="数据更新问题"></a>数据更新问题</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新网页后 vuex 数据丢失的解决方案  </span></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;store&quot;</span>) ) &#123;</span><br><span class="line">        <span class="keyword">let</span> storeData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;store&quot;</span>))</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">replaceState</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>, storeData))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;store&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新对象或数组后对应的视图值却不刷新</span></span><br><span class="line">更新对象：<span class="variable language_">this</span>.$set(obj, key, value)</span><br><span class="line">更新数组：<span class="variable language_">this</span>.$set(arr, index, value)</span><br></pre></td></tr></table></figure>


<h1 id="四、页面缓存"><a href="#四、页面缓存" class="headerlink" title="四、页面缓存"></a>四、页面缓存</h1><h2 id="组件缓存"><a href="#组件缓存" class="headerlink" title="组件缓存"></a>组件缓存</h2><blockquote>
<p>缓存组件只会在首次进入时执行一次生命周期钩子，再次进入则从缓存中获取数据等。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">全部缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">部分缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a, b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-view</span>/&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;a, b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line">export default new Router([</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        name: &#x27;home&#x27;,</span><br><span class="line">        component: Home,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            keepAlive: true   // 需要被缓存</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="旧版本缓存"><a href="#旧版本缓存" class="headerlink" title="旧版本缓存"></a>旧版本缓存</h2><blockquote>
<p>浏览器缓存会导致 vue 打包的文件偶尔会出现不能更新最新的打包代码，因此在打包的文件名中添加一个版本号以便浏览器能区分。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js：解决 js 缓存问题</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Timestamp</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;    <span class="comment">// webpack 配置</span></span><br><span class="line">    <span class="attr">output</span>: &#123;            <span class="comment">// 输出重构，打包编译后的文件名称：模块名称.版本号.时间戳</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">`[name]-<span class="subst">$&#123;process.env.VUE_APP_Version&#125;</span>-<span class="subst">$&#123;Timestamp&#125;</span>.js`</span>,</span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">`[name]-<span class="subst">$&#123;process.env.VUE_APP_Version&#125;</span>-<span class="subst">$&#123;Timestamp&#125;</span>.js`</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他写法</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(config, &#123;</span><br><span class="line">      <span class="comment">// 开发生产共同配置</span></span><br><span class="line">      <span class="attr">output</span>: &#123;            <span class="comment">// 输出重构，打包编译后的文件名称：模块名称.版本号.时间戳</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">`[name]-<span class="subst">$&#123;process.env.VUE_APP_Version&#125;</span>-<span class="subst">$&#123;Timestamp&#125;</span>.js`</span>,</span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">`[name]-<span class="subst">$&#123;process.env.VUE_APP_Version&#125;</span>-<span class="subst">$&#123;Timestamp&#125;</span>.js`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 别名配置</span></span><br><span class="line">      <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;@c&#x27;</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&#x27;./src/components&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;@p&#x27;</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&#x27;./src/pages&#x27;</span>)</span><br><span class="line">        &#125; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span> nginx 配置：不缓存 index.html </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desp</span> <span class="variable">no</span>-cache、no-store 可以只设置一个 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * no-cache：浏览器会缓存，但刷新页面或者重新打开时会请求服务器</span></span><br><span class="line"><span class="comment"> * no-store：浏览器不缓存，刷新页面需要重新下载页面</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">location = /index.<span class="property">html</span> &#123;</span><br><span class="line">  add_header <span class="title class_">Cache</span>-<span class="title class_">Control</span> <span class="string">&quot;no-cache, no-store&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="五、组件库优化"><a href="#五、组件库优化" class="headerlink" title="五、组件库优化"></a>五、组件库优化</h1><blockquote>
<p>elementui、antd 等组件库的组件经常满足不了项目的个性化需求，Vue Demo Collection 项目收集了一些通用的 Vue 组件，有需要时可查看。</p>
</blockquote>
<h2 id="组件样式"><a href="#组件样式" class="headerlink" title="组件样式"></a>组件样式</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局修改：代码覆盖、根据官网自定义主题的教程修改</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./assets/css/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改单个文件的样式时，可以使用 /deep/、&gt;&gt;&gt; 来深度选择。</span></span><br><span class="line"><span class="selector-class">.dialog-wrapper</span> &#123;</span><br><span class="line">    /deep/<span class="selector-class">.el-dialog</span>**<span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件参数和方法"><a href="#组件参数和方法" class="headerlink" title="组件参数和方法"></a>组件参数和方法</h2>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">我想要在 el-cascader 选中一个搜索选项后不关闭看板，通过源码发现 toggleDropDownVisible</span><br><span class="line">方法是控制看板展开的，所以通过 ref 获取组件并调用其方法。</span><br><span class="line"><span class="tag">&lt;<span class="name">el-cascader</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;cascader&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;试试搜索：指南&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:props</span>=<span class="string">&quot;&#123; multiple: true &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">filterable</span>&gt;</span>&lt;/el-cascader</span><br><span class="line">    @visible-change=&quot;$refs.cascader.toggleDropDownVisible(true)&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-cascader</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件功能扩展"><a href="#组件功能扩展" class="headerlink" title="组件功能扩展"></a>组件功能扩展</h2><blockquote>
<p>element-ui 多选可搜索级联组件有一个问题：当用户选中全部子节点时不会合并为显示父节点，于是可进行以下优化：</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认看到级联看板展开，不会收起</span></span><br><span class="line">@visible-change=<span class="string">&quot;blurCascader(true)&quot;</span> <span class="comment">// 可触发展开</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">blurCascader</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失焦后触发展开级联看板（默认失焦后关闭看板）</span></span><br><span class="line">blurCascader () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 调用组件内部未暴露的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">cascader</span>.<span class="title function_">toggleDropDownVisible</span>(<span class="literal">true</span>) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索选中后展示级联看板，并勾选搜索选中的节点</span></span><br><span class="line"><span class="comment">// 响应选中的节点，选中节点后关闭选择看板，展示级联看板</span></span><br><span class="line">changecascader (e) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">cascader</span>.<span class="title function_">handleDropdownLeave</span>()</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当子级节点全部选中后，tag只展示一个父级节点，而不是全部子节点。</span></span><br><span class="line"><span class="title function_">getPresetTags</span>(<span class="params"></span>) &#123;   <span class="comment">// 获取所有勾选的节点</span></span><br><span class="line">    <span class="keyword">const</span> tree = <span class="variable language_">this</span>.<span class="property">panel</span>.<span class="property">menus</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="title function_">loop</span>(tree)</span><br><span class="line">    <span class="comment">// 递归查找选中的节点</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">tree = []</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tree.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> child = tree[i]</span><br><span class="line">            <span class="comment">// checked 状态表示选中、indeterminate 状态表示待定，是半选</span></span><br><span class="line">            <span class="keyword">if</span> (child.<span class="property">checked</span>) &#123;                </span><br><span class="line">                result.<span class="title function_">push</span>(&#123; ...child, <span class="attr">closable</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.<span class="property">indeterminate</span>) &#123;</span><br><span class="line">                child.<span class="property">children</span> &amp;&amp; <span class="title function_">loop</span>(child.<span class="property">children</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">presentFormatTags</span> = result <span class="comment">// 得到可显示的 tag</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点：由于修改了 tag 展示，所以它的 deleteTag 事件也要重写。</span></span><br><span class="line"><span class="title function_">deleteTag</span>(<span class="params">index, tag</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _ = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span> (tag &amp;&amp; tag.<span class="property">hasChildren</span>) &#123;</span><br><span class="line">        <span class="comment">// 当删除的节点是父节点时</span></span><br><span class="line">        <span class="title function_">loop</span>(tag.<span class="property">children</span>)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">list</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[i].<span class="property">hasChildren</span>) &#123;</span><br><span class="line">                    <span class="title function_">loop</span>(list[i].<span class="property">children</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> path = list[i].<span class="property">path</span></span><br><span class="line">                    _.<span class="property">checkedValue</span> = _.<span class="property">checkedValue</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n !== path)</span><br><span class="line">                    _.$emit(<span class="string">&#x27;remove-tag&#x27;</span>, tag)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag) &#123;   <span class="comment">// 当删除的是子节点时</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">checkedValue</span> = <span class="variable language_">this</span>.<span class="property">checkedValue</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> n !== tag.<span class="property">path</span>)</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;remove-tag&#x27;</span>, tag)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 当以回车键删除时</span></span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="property">presentFormatTags</span>[<span class="variable language_">this</span>.<span class="property">presentFormatTags</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">        temp &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">deleteTag</span>(<span class="literal">null</span>, temp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原本这个方法的代码如下</span></span><br><span class="line">    <span class="comment">// const &#123; checkedValue &#125; = this</span></span><br><span class="line">    <span class="comment">// const val = checkedValue[index]</span></span><br><span class="line">    <span class="comment">// this.checkedValue = checkedValue.filter((n, i) =&gt; i !== index)</span></span><br><span class="line">    <span class="comment">// this.$emit(&#x27;remove-tag&#x27;, val)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多个组件联动"><a href="#多个组件联动" class="headerlink" title="多个组件联动"></a>多个组件联动</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 table、pagination 放到一个组件</span></span><br><span class="line">&lt;template lang=<span class="string">&quot;pug&quot;</span>&gt;</span><br><span class="line">div</span><br><span class="line">  .<span class="property">el</span>-table</span><br><span class="line">    <span class="title function_">template</span>(v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in columns&quot;</span>)</span><br><span class="line">      el-table-<span class="title function_">column</span>(</span><br><span class="line">        :prop=<span class="string">&quot;item.prop&quot;</span></span><br><span class="line">        :key=<span class="string">&quot;index&quot;</span></span><br><span class="line">        :label=<span class="string">&quot;item.label&quot;</span>)</span><br><span class="line"></span><br><span class="line">  el-pagination.<span class="property">pg</span>-<span class="title function_">wrapper</span>(</span><br><span class="line">    layout=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span><br><span class="line">    @size-change=<span class="string">&quot;handleSizeChange&quot;</span></span><br><span class="line">    @current-change=<span class="string">&quot;handleCurrentChange&quot;</span></span><br><span class="line">    :current-page=<span class="string">&quot;currentPage&quot;</span></span><br><span class="line">    :page-sizes=<span class="string">&quot;[10, 20, 50, 100]&quot;</span></span><br><span class="line">    :page-size=<span class="string">&quot;pagesize&quot;</span></span><br><span class="line">    :total=<span class="string">&quot;total&quot;</span>)</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入参数</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 列信息</span></span><br><span class="line">    <span class="attr">columns</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">default</span>: [],</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单页数据量</span></span><br><span class="line">    <span class="attr">pagesize</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="attr">currentPage</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表格数据</span></span><br><span class="line">    <span class="attr">tableData</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">default</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数据总数</span></span><br><span class="line">    <span class="attr">total</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取数据的接口</span></span><br><span class="line">    <span class="attr">fetch</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="keyword">function</span>,</span><br><span class="line">      <span class="attr">default</span>:<span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表单查询的参数</span></span><br><span class="line">    <span class="attr">query</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 改变当前页码 currentPage 时触发</span></span><br><span class="line">    <span class="attr">handleCurrentChange</span>: <span class="keyword">function</span> (<span class="params">currentPage</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleChange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">pagesize</span>, currentPage)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">query</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 改变当前页 pageSize 时触发</span></span><br><span class="line">    <span class="attr">handleSizeChange</span>: <span class="keyword">function</span> (<span class="params">pageSize</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleChange&#x27;</span>, pageSize, <span class="variable language_">this</span>.<span class="property">currentPage</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">fetch</span>(<span class="variable language_">this</span>.<span class="property">query</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 项目构建</title>
    <url>/2019/06/05/5-1-vue%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="一、Vue-框架"><a href="#一、Vue-框架" class="headerlink" title="一、Vue 框架"></a>一、Vue 框架</h1><ul>
<li><strong>核心思想</strong>：数据驱动的组件系统、轻量高效的前端组件化方案。</li>
<li><strong>开发理念</strong>：渐进式开发 (先构建基础界面后根据需求添加功能)、聚焦视图层的框架、数据驱动的组件化开发、响应式 (页面根据分辨率改变大小，适应式则根据分辨率选择不同页面)。</li>
<li><strong>MVVM 模式</strong>：响应式、双向绑定、数据驱动、视图与数据分离、专注开发页面和业务。</li>
<li><strong>PC UI</strong>：<code>Element、iView、vue-element-admin、iview-admin、vue2-manage</code>。</li>
<li><strong>移动 UI</strong>：<code>Vux、Vant、mint-ui、Muse-UI、vonic、vue-material、cube-ui</code>。</li>
</ul>
<h2 id="全家桶"><a href="#全家桶" class="headerlink" title="全家桶"></a>全家桶</h2><blockquote>
<p>vue 项目的核心构成。</p>
</blockquote>
<ul>
<li><strong>vue-cli</strong>：快速搭建大型单页应用的脚手架。可以自动生成 Vue 项目的目录和文件，通过热加载方式快速启动项目，利用本地 node 服务器实现页面的实时刷新效果。</li>
<li><strong>vue-router</strong>：路由控制。用于配置路径和组件的映射关系，通过路径切换来实现页面切换。</li>
<li><strong>vuex</strong>：状态管理。用于组件间数据的通信和管理，是统一存储所有状态和更新方法的容器。</li>
<li><strong>axios</strong>：异步通信。基于 Promise HTTP 请求客户端，可以同时在浏览器和 nodejs 中使用。</li>
</ul>
<h2 id="双向绑定流程"><a href="#双向绑定流程" class="headerlink" title="双向绑定流程"></a>双向绑定流程</h2><ol>
<li><strong>解析模板为 render 函数。</strong><br>* 模板本质是一串包含指令等逻辑的字符串，最终必须转换成 JS 代码，原因是：必须使用 JS 来处理模板中的逻辑、必须使用 JS 将模板渲染到页面上。<br>* render 函数包含所有的模板信息并返回一个虚拟 DOM，模板用到的 data 属性和 vue 指令都分别变成了 JS 变量和 JS 逻辑，核心是设置对象属性和方法时可以简化代码的 with。</li>
<li><strong>响应式开始监听。</strong><br>* Object.defineProperty 监听：将一个普通 Js 对象传给 Vue 实例的 data 选项时，vue 将遍历此对象属性并通过 Object.defineProperty 将属性全部转为 getter&#x2F;setter。<br>* 将 data 的属性代理到 vm：render 函数中 with(this){} this 指的是 vm (vm.title、vm.list)，其中 title、list 变量都是 data 的属性。</li>
<li><strong>首次渲染显示页面，且绑定依赖。</strong><br>* 初次渲染，执行 updateComponent() 函数，执行 vm._render() 函数。<br>* 执行 render 函数，会访问到 vm.title、vm.list。<br>* 访问 vm.title vm.list 就会被响应式的 get 方法监听到。<br>* 执行 updateComponent()函数，会走到 vdom 的 patch 方法。<br>* patch 将 vnode 渲染成 DOM，初次渲染完成。</li>
<li><strong>data 属性变化，触发 rerender 函数。</strong><br>* 修改属性，被响应式的 set 监听到。<br>* set 中执行 updateComponent。<br>* updateComponent 重新执行 vm._render()。<br>* 生成的 vnode、prevVnode，通过 patch 进行对比。<br>* 局部渲染 html。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、解析模板为 render 函数：核心 with 的参数 this 表示 vm。</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="title function_">with</span>(<span class="params"><span class="variable language_">this</span></span>)&#123;</span><br><span class="line">    <span class="comment">// _c、_v、_l 函数分别用来创建一个 html 元素、文本节点、数组。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_c</span>(</span><br><span class="line">        <span class="string">&#x27;div&#x27;</span>, </span><br><span class="line">        &#123; <span class="attr">attrs</span>: &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;app&quot;</span>&#125; &#125;, </span><br><span class="line">        [ <span class="title function_">_c</span>(<span class="string">&#x27;p&#x27;</span>, [<span class="title function_">_v</span>(<span class="title function_">_s</span>(price))]) ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@title</span> 2、响应式监听</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> 闭包：保证 key 的独立作用域。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> getter/setter 在属性被访问和修改时通知而让 vue 追踪依赖，对用户不可见。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@prame</span> 对象传给 Vue 实例的 data 时要遍历它的所有属性并设置 getter/setter。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> key, value;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>, key);</span><br><span class="line">                <span class="keyword">return</span> data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>, newVal);</span><br><span class="line">                data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、vue 模板被渲染为 html</span></span><br><span class="line">vm.<span class="title function_">_update</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevVnode = vm.<span class="property">_vnode</span>;</span><br><span class="line">    vm.<span class="property">_vnode</span> = vnode;</span><br><span class="line">    <span class="keyword">if</span> (!prevVnode) &#123;    <span class="comment">// 第一次没有值</span></span><br><span class="line">        vm.<span class="property">$el</span> = vm.<span class="title function_">_patch_</span>(vm.<span class="property">$el</span>, vnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vm.<span class="property">$el</span> = vm.<span class="title function_">_patch_</span>(prevVnode, vnode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    vm.<span class="title function_">_update</span>(vm.<span class="title function_">_render</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二、项目构建"><a href="#二、项目构建" class="headerlink" title="二、项目构建"></a>二、项目构建</h1><h2 id="浏览器渲染-SPA"><a href="#浏览器渲染-SPA" class="headerlink" title="浏览器渲染 SPA"></a>浏览器渲染 SPA</h2><blockquote>
<p>浏览器中直接渲染组件的单页面应用程序。整个项目只有一个完整页面 index.html、一个根组件 App.vue。具体流程为：各个组件通过路由拼接到 App.vue router-view，然后将拼接结果转换为代码片段并添加到 index.html 标签中展示出来。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化目录</span></span><br><span class="line">cnpm install vue @vue/cli webpack -g</span><br><span class="line">vue -V、vue create test</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义配置</span></span><br><span class="line">按钮：A -- 全选、空格键 -- 选择与取消、上下 -- 移动</span><br><span class="line">选项：<span class="title class_">Babel</span>、<span class="title class_">Router</span>、<span class="title class_">Vuex</span>、<span class="variable constant_">CSS</span> <span class="title class_">Pre</span>-processors、<span class="title class_">Linter</span> / <span class="title class_">Formatter</span></span><br><span class="line">校验：<span class="title class_">ESLint</span> + <span class="title class_">Prettier</span>、<span class="title class_">Lint</span> on save</span><br><span class="line">保存：<span class="title class_">In</span> dedicated config files、自定义文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动打包</span></span><br><span class="line">npm start、npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.config.js：根目录新建，webpack 自动识别的自定义配置文件。</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">join</span>(**dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>,    <span class="comment">// 根路径</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,   <span class="comment">// 输出文件目录</span></span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,   <span class="comment">// 取消eslint验证</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(config, &#123;</span><br><span class="line">      <span class="comment">// 输出配置打包文件名：模块名称.版本号.时间戳</span></span><br><span class="line">      <span class="attr">output</span>: &#123;    <span class="comment">// </span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">`[name]-<span class="subst">$&#123;process.env.VUE_APP_Version&#125;</span>-<span class="subst">$&#123;Timestamp&#125;</span>.js`</span>,</span><br><span class="line">        <span class="attr">chunkFilename</span>: <span class="string">`[name]-<span class="subst">$&#123;process.env.VUE_APP_Version&#125;</span>-<span class="subst">$&#123;Timestamp&#125;</span>.js`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 配置目录别名：引用路径时减少复杂度</span></span><br><span class="line">      <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;views&#x27;</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&#x27;./src/views&#x27;</span>),</span><br><span class="line">          <span class="string">&#x27;assets&#x27;</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&#x27;./src/assets&#x27;</span>)</span><br><span class="line">        &#125; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置目录别名</span></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&#x27;assets&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src/assets&#x27;</span>))</span><br><span class="line">      .<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src/views&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">hotOnly</span>: <span class="literal">true</span>,   <span class="comment">// 热更新</span></span><br><span class="line">    <span class="comment">// 配置跨域请求</span></span><br><span class="line">    <span class="comment">// proxy: &#x27;http://localhost:8000&#x27;   // 只有一个代理</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;                            <span class="comment">// 配置多个代理</span></span><br><span class="line">      <span class="string">&quot;/rest/*&quot;</span>: &#123;  <span class="comment">// 请求地址</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://172.16.1.12:7071&quot;</span>,  <span class="comment">// 实际映射到的目标地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,  <span class="comment">// 是否跨域</span></span><br><span class="line">        <span class="comment">// ws: true,//websocket支持</span></span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,  <span class="comment">// https 接口需要配置</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api/a&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://hongqiao-zatech-channel.test.za-tech.net&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;/&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 模拟本地数据</span></span><br><span class="line">    <span class="title function_">before</span>(<span class="params">app</span>) &#123;  </span><br><span class="line">      app.<span class="title function_">get</span>(<span class="string">&#x27;/api/seller&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">          res.<span class="title function_">json</span>(&#123; <span class="attr">errno</span>: <span class="number">0</span>, <span class="attr">data</span>: <span class="title function_">requare</span>(<span class="string">&#x27;./data/seller.json&#x27;</span>) &#125;) </span><br><span class="line">      &#125;),</span><br><span class="line">      app.<span class="title function_">post</span>(<span class="string">&#x27;/api/foods&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; </span><br><span class="line">          res.<span class="title function_">json</span>(&#123; <span class="attr">errno</span>: <span class="number">0</span>, <span class="attr">data</span>: foods &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="服务器端渲染-SSR"><a href="#服务器端渲染-SSR" class="headerlink" title="服务器端渲染 SSR"></a>服务器端渲染 SSR</h2><ul>
<li>两种模式：后端首次渲染的单页面应用模式、后端模板渲染模式，区别在于使用后端路由的程度。前者是后端模板渲染和单页面的组合，首次加载时 vue 服务器将当前页面的数据和组件模板生成 html 字符串返回给浏览器，js 资源加载完成后运行单页面应用。</li>
<li>优点：更好的 SEO 而方便搜索引擎爬虫、更快的首屏渲染而无需等待 Js 加载完成。</li>
<li>缺点：更多的服务器负载 (CPU 和内存资源)、更复杂的开发部署 (兼容 Node 环境)。</li>
<li>实现<ul>
<li>选择单页面框架 react&#x2F;vue。</li>
<li>选择 node 服务端框架 express&#x2F;koa2。</li>
<li>实现核心逻辑：node 根据路由渲染单页面组件。</li>
<li>优化开发和发布环境自动化构建工具 webpack。</li>
</ul>
</li>
</ul>
<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、资源引用</span></span><br><span class="line"><span class="comment">// 适配移动端的库：postcss.config.js</span></span><br><span class="line">cnpm install postcss-px-to-viewport -D</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;autoprefixer&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123; </span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">// 视窗的宽度，对应的是我们设计稿的宽度，一般是750 </span></span><br><span class="line">      <span class="attr">viewportHeight</span>: <span class="number">1334</span>, <span class="comment">// 视窗的高度，根据750设备的宽度来指定，一般指定 1334，也可不配置 </span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">3</span>, <span class="comment">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除） </span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定需要转换成的视窗单位，建议使用vw </span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], </span><br><span class="line">      <span class="comment">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值 </span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span> <span class="comment">// 允许在媒体查询中转换`px`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Ace 代码编辑器插件</span></span><br><span class="line">cnpm install ace-builds -S</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//blog.csdn.net/YoshinoNanjo/article/details/82978668</span></span><br><span class="line"><span class="comment">// 静态资源</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./reset.css&#x27;</span>;</span><br><span class="line">绝对路径 &lt;img src=<span class="string">&#x27;/images/logo.png&#x27;</span>&gt;;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;@/components/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getUserInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;./tool.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、环境接口配置</span></span><br><span class="line"><span class="comment">// package.json：开发 development、生产 production、测试 test</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve --mode dev&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build --mode prod&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;vue-cli-service build --mode test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .env.dev</span></span><br><span class="line"><span class="variable constant_">NODE_ENV</span> = <span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="variable constant_">VUE_APP_URL</span> = <span class="string">&quot;/apigateway&quot;</span></span><br><span class="line"><span class="comment">// .env.test</span></span><br><span class="line"><span class="variable constant_">NODE_ENV</span> = <span class="string">&quot;production&quot;</span></span><br><span class="line"><span class="variable constant_">VUE_APP_URL</span> = <span class="string">&quot;http://116.228.196.136:10003/apigateway&quot;</span></span><br><span class="line"><span class="comment">// .env.prod</span></span><br><span class="line"><span class="variable constant_">NODE_ENV</span> = <span class="string">&quot;prod&quot;</span></span><br><span class="line"><span class="variable constant_">VUE_APP_URL</span> = <span class="string">&quot;https://api.yongcheng.com:19090/apigateway&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、静态服务：可配置命令 &quot;script&quot;:&#123; &quot;server&quot;:&quot;live-server ./dist --port=8080&quot; &#125;</span></span><br><span class="line">npm install -g live-server / http-server</span><br><span class="line">live-server / http-server</span><br></pre></td></tr></table></figure>

<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li>开发过程<ul>
<li><strong>优先使用 v-if</strong>，减少 v-show。</li>
<li><strong>v-for、v-if 不要一起使用</strong>，可通过计算属性先过滤数据。</li>
<li><strong>v-for key</strong> 避免使用 index 作为标识，可采用唯一值来减少新增数据时的开销。</li>
<li><strong>组件和组件库</strong>：事件监听、计时器等需要及时销毁来释放组件资源，组件库引用时尽量通过按需加载的方式。</li>
<li><strong>路由懒加载</strong>：<code>component: () =&gt; import(&quot;views/Login.vue&quot;)</code>。</li>
<li><strong>长列表懒加载</strong>；v-for 生成的列表数据过多时可能造成页面卡顿，可通过 vue-virtual-scroller 等实现懒加载。</li>
<li><strong>图片加载优化</strong>：小图标使用字体图标或 SVG、小型图片通过 base64、webp 的方式、大图放到云服务器通过 CDN 加载、使用框架懒加载的图片。</li>
<li><strong>首屏加载</strong>：页面内容加载完成前使用 loading、进度条、骨架屏(使用一些空白内容的图形来展示未加载内容) 等方式来提升用户体验。</li>
</ul>
</li>
<li>项目过程<ul>
<li><strong>最小化 JS 文件</strong>：webpack4 打包处理，配置 config.optimization.minimize(true)。</li>
<li><strong>图片资源压缩</strong>：打包图片通过 image-webpack-loader 压缩，或者在线无损压缩。</li>
<li><strong>删除沉淀代码</strong>：可通过 Tree-Shaking 插件清理掉无用的沉淀代码。</li>
<li><strong>依赖库 CDN 加速</strong>：可通过 <a href="https://www.bootcdn.cn/">BootCDN</a> 引用公共库，vue 通过 script 引入后配置 <code>configureWebpack: &#123; externals: &#123; echarts: &#39;echarts&#39;&#125; &#125;</code>。</li>
<li><strong>开启 gzip 压缩</strong>：可通过 webpack 或后端进行配置。</li>
</ul>
</li>
</ul>
<h1 id="三、路由控制-Router"><a href="#三、路由控制-Router" class="headerlink" title="三、路由控制 Router"></a>三、路由控制 Router</h1><blockquote>
<p>路由根据不同地址展示不同的页面或数据。前端路由多用于 SPA，通过 hash &#x2F; HTML5 historyApi 实现而不涉及到服务器。</p>
</blockquote>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><blockquote>
<p>将组件映射到路由，然后通过 vue-router 渲染。</p>
</blockquote>
<ol>
<li>定义组件：<code>user.vue</code></li>
<li>定义路由配置：<code>var routes = []</code></li>
<li>生成路由对象：<code>var router = new VueRouter(&#123; routes: routes &#125;)</code></li>
<li>注入到实例对象：<code>var app = new Vue(&#123; el: &#39;#app&#39;, router, &#125;)</code></li>
<li>组件中定义渲染标签：<code>router-link、router-view</code></li>
</ol>
<h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><ul>
<li>命名路由：<code>name: &#39;home&#39;</code></li>
<li>嵌套路由：<code>children: [&#123; &#125;]</code></li>
<li>动态路由：<code>path: &#39;/user/:id&#39;</code></li>
<li>命名视图：<code>components: &#123; &#125;</code></li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;@/components/User&#x27;</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;@/components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">home</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&quot;views/extension/Home.vue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;    </span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,            <span class="comment">// 路径模式 </span></span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>  <span class="comment">// 基路径(默认&#x27;/&#x27;)           </span></span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span>,  <span class="comment">// 链接激活时的class</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// history 模式下滚动行为，路由切换时页面滚动到指定位置</span></span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123; </span><br><span class="line">    <span class="keyword">if</span>(savedPosition)&#123;  </span><br><span class="line">        <span class="keyword">return</span> savedPosition  <span class="comment">// 原位置</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>,<span class="attr">y</span>: <span class="number">0</span>&#125;;   <span class="comment">// 顶部</span></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">hash</span>)&#123;             <span class="comment">// 锚点定位</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">selector</span>: to.<span class="property">hash</span>&#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="attr">routes</span>: [     <span class="comment">// 路由配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;登录页&#x27;</span>,</span><br><span class="line">      <span class="attr">alias</span>: <span class="string">&#x27;/b&#x27;</span>,       <span class="comment">// 路径别名</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="comment">// 重定向(解决首次进入页面时不显示内容的问题)</span></span><br><span class="line">      <span class="attr">component</span>: home</span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,     <span class="comment">// 静态路由</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: home,</span><br><span class="line">      <span class="attr">children</span>: [&#123;       <span class="comment">// 嵌套路由(须先进 home) </span></span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/phone&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;phone&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: phone</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;,                  </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,    </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,  <span class="comment">// 动态路由(指定参数形式)   </span></span><br><span class="line">      <span class="attr">component</span>: user,    </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/name&#x27;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123;      <span class="comment">// 命名视图(同时渲染多个组件)</span></span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Foo</span>,</span><br><span class="line">        <span class="attr">a</span>: <span class="title class_">Bar</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="title class_">Baz</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>


<h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><h3 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h3><blockquote>
<p>应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础上提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前URL，但浏览器不会立即向后端发送请求。</p>
</blockquote>
<ul>
<li><strong>hash</strong>：默认模式，浏览器地址中的 # 及其后面的字符串称为 hash，可以通过 window.location.hash 读取，它用来模拟一个完整 URL 但不会被包括在 HTTP 请求中，改变时不会重新加载页面。</li>
<li><strong>history</strong>：利用了 HTML5 新增方法，pushState()、replaceState() 用来对浏览器历史记录栈进行修改，popState 事件用来监听到状态变化。</li>
</ul>
<p>	</p>
<h3 id="404-错误"><a href="#404-错误" class="headerlink" title="404 错误"></a>404 错误</h3><ul>
<li><strong>hash 模式</strong>：只有 # 前面的内容会被包含在请求中。因此对于后端来说，即使没有做到对路由的全覆盖也不会返回 404 错误。</li>
<li><strong>history 模式</strong>：前端 url 必须和实际向后端发起请求的 url 一致，比如 &#x2F;book&#x2F;id ，如果后端缺少对该路由的处理则返回 404 错误。</li>
</ul>
<h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3>  <div style="text-indent: 2em">app 开发时一般需要分享页面到第三方 app，但部分 url 不允许带 #。去除 # 需要使用 history 模式，但是有一个问题：在访问二级页面时，刷新操作则会出现 404 错误，那么就需要和后端一起配置 apache 或是 nginx url 重定向，重定向到你的首页路由上即可。</div>
            

<h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="组件标签"><a href="#组件标签" class="headerlink" title="组件标签"></a>组件标签</h3><ul>
<li><strong>跳转标签</strong><ul>
<li>样式：<code>&lt;router-link tag=&quot;li&quot;、active-class=&quot;active&quot; replace&gt;&lt;/router-link&gt;</code>。</li>
<li>导航：普通路由 <code>to= &quot;/path&quot;</code>、动态路由：<code>to=&quot;/user/12&quot;、:to=&quot;&#123; name: &#39;user&#39;, params/query: &#123; id: 1 &#125; &#125;&quot;</code>。</li>
</ul>
</li>
<li><strong>渲染视图</strong><ul>
<li>标签：<code>&lt;router-view name=&quot;user&quot;&gt;&lt;/router-view&gt;</code>。</li>
<li>包裹：缓存 <code>keep-alive</code>、过渡样式 <code>transition</code>。</li>
</ul>
</li>
</ul>
<h3 id="JS-编程式导航"><a href="#JS-编程式导航" class="headerlink" title="JS 编程式导航"></a>JS 编程式导航</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">to_home</span>(<span class="params"></span>)&#123;   <span class="comment">// 字符串 和 对象</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;home&quot;</span>)      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login?url=&#x27;</span> + <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span> &#125;)  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">to_user</span>(<span class="params"></span>)&#123;  <span class="comment">// 命名路由 和 查询参数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;&#125;)  </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;&#125;)   </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">to_other</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(n)         <span class="comment">// 前进</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>()        <span class="comment">// 后退</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>()     <span class="comment">// 替换掉当前的history记录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">get_obj</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>)   <span class="comment">// 路由对象(包括 path、params 等)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="动态路由传参"><a href="#动态路由传参" class="headerlink" title="动态路由传参"></a>动态路由传参</h2><ul>
<li>方式<ul>
<li><strong>path</strong>：<code>to=&quot;/user/12&quot;</code></li>
<li><strong>params</strong>：<code>:to=&quot;&#123; name: &#39;user&#39;, params: &#123; id: 1 &#125; &#125;&quot;</code></li>
<li><strong>query</strong>：<code>:to=&quot;&#123; name: &#39;user&#39;, query: &#123; id: 1 &#125; &#125;&quot;</code></li>
</ul>
</li>
<li>注意<ul>
<li>通过 path&#x2F;params 传参时，需要在路由配置中指定参数形式 <code>path: &#39;/user/:id&#39;</code>。</li>
<li>通过 params&#x2F;query 传参时，参数必须是对象格式并绑定 to 属性 <code>v-bind:</code>。</li>
<li>跳转后的组件中获取参数 <code>this.$route.params/query.id</code>。</li>
</ul>
</li>
</ul>
<h2 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h2><blockquote>
<p>用于路由跳转时执行任务或不满足条件时取消跳转。</p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><strong>全局钩子</strong>：beforeEach，常用于登录权限等验证。</li>
<li><strong>路由钩子</strong>：beforeLeave &#x2F; beforeEnter。</li>
<li><strong>组件钩子</strong>：beforeRouteLeave 用于清除计时器、提示保存内容、存储信息等，beforeRouteEnter 用于在跳转完成前获取数据。</li>
</ul>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><strong>to</strong>：目标路由对象。</li>
<li><strong>from</strong>：当前路由对象。</li>
<li><strong>next</strong>：必须调用的函数，否则就是死循环。<ul>
<li><code>next()</code>：执行下一个钩子，如果钩子全部执行完成则导航状态为 confirmed。</li>
<li><code>next(false)</code>：中断当前导航，即重置到 from 路由对应的地址。</li>
<li><code>next(&#39;/&#39;)、next(&#123;path: &#39;/&#39;&#125;)</code>：中断掉当前导航并跳转到新地址。</li>
<li><code>next(error)</code>：如果传入一个 Error 实例，则导航被终止并会将错误传递给 router.onError() 注册的回调。</li>
</ul>
</li>
</ul>
<h1 id="四、异步通信-Axios"><a href="#四、异步通信-Axios" class="headerlink" title="四、异步通信 Axios"></a>四、异步通信 Axios</h1><h2 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;/user?id=12&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>( <span class="function"><span class="params">res</span> =&gt;</span> &#123; &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>( <span class="function"><span class="params">err</span> =&gt;</span> &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prames = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">form_data</span>)</span><br><span class="line"><span class="variable language_">this</span>.$axios(&#123; </span><br><span class="line">  <span class="attr">url</span>: url,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">$qs</span>.<span class="title function_">stringify</span>(prames)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// formData 形式上传数据</span></span><br><span class="line">　<span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);    </span><br><span class="line">　axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, formData, &#123;</span><br><span class="line">　　<span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span> &#125;</span><br><span class="line">　&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="请求-API"><a href="#请求-API" class="headerlink" title="请求 API"></a>请求 API</h2><ul>
<li>请求：<code>axios(config)、axios(url, [config])</code></li>
<li>并发：<code>axios.all(arr)、axios.spread(callback)</code></li>
<li>别名：<code>axios.get(url, [config])、axios.post(url, [data], [config])</code></li>
</ul>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="封装-axios"><a href="#封装-axios" class="headerlink" title="封装 axios"></a>封装 axios</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; crypto, random, randomWord &#125; <span class="keyword">from</span> <span class="string">&#x27;./assets/js/tool.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_URL</span>,</span><br><span class="line">  <span class="comment">// timeout: 10000,            // 请求超时时间</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1：加密数据</span></span><br><span class="line">    <span class="keyword">if</span>(config.<span class="property">headers</span>.<span class="property">level</span> == <span class="number">1</span>)&#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">KP</span> = &#123;</span><br><span class="line">          <span class="attr">key</span>: <span class="title function_">randomWord</span>(<span class="literal">true</span>, <span class="number">16</span>, <span class="number">16</span>),  <span class="comment">// 秘钥</span></span><br><span class="line">          <span class="attr">iv</span>: <span class="title function_">randomWord</span>(<span class="literal">true</span>, <span class="number">16</span>, <span class="number">16</span>)    <span class="comment">// 偏移量</span></span><br><span class="line">        &#125;;</span><br><span class="line">        config.<span class="property">data</span> = crypto.<span class="title class_">AESEnc</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(config.<span class="property">data</span>), <span class="variable constant_">KP</span>.<span class="property">key</span>)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(config.<span class="property">headers</span>, &#123;</span><br><span class="line">          <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class="line">          <span class="attr">dataFormat</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">          <span class="attr">authMethod</span>: <span class="string">&quot;no&quot;</span>,</span><br><span class="line">          <span class="attr">signAlgo</span>: <span class="string">&quot;NO&quot;</span>,</span><br><span class="line">          <span class="attr">transAlgo</span>: <span class="string">&quot;AES&quot;</span>,</span><br><span class="line">          <span class="attr">shareKey</span>: <span class="variable constant_">KP</span>.<span class="property">key</span>,</span><br><span class="line">          <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span><br><span class="line">          <span class="attr">nonce</span>: <span class="title class_">String</span>(<span class="title function_">random</span>(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 让每个请求携带 token</span></span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">        config.<span class="property">data</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123; <span class="attr">token</span>: store.<span class="property">getters</span>.<span class="property">token</span> &#125;, config.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置表头  &#x27;application/json&#x27;</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步请求的取消操作</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;  </span><br><span class="line">    <span class="keyword">let</span> cancel</span><br><span class="line">    config.<span class="property">cancelToken</span> = <span class="keyword">new</span> <span class="title class_">CancelToken</span>( <span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">        cancel = c;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">cancel</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态更新</span></span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;showLoad&#x27;</span>, &#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;showLoad&#x27;</span>, &#123; <span class="attr">status</span>: <span class="number">2</span>, <span class="attr">msg</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 解密返回数据</span></span><br><span class="line">    response.<span class="property">data</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(crypto.<span class="title class_">AESDec</span>(response.<span class="property">data</span>, response.<span class="property">config</span>.<span class="property">headers</span>.<span class="property">shareKey</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">data</span>.<span class="property">CResultCde</span> == <span class="string">&quot;0000&quot;</span>)&#123;</span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;hideLoad&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;showLoad&#x27;</span>, &#123; <span class="attr">status</span>: <span class="number">2</span>, <span class="attr">msg</span>: response.<span class="property">data</span>.<span class="property">CResultMsg</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;showLoad&#x27;</span>, &#123; <span class="attr">status</span>: <span class="number">2</span>, <span class="attr">msg</span>: <span class="string">&quot;&quot;</span> &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 导出对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">indexQRCode</span>(<span class="params">data</span>)&#123;  <span class="comment">// 不加密</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_request</span>(<span class="string">&#x27;/getHomePageQRcode&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, data, &#123; <span class="attr">level</span>: <span class="number">2</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getProduct</span>(<span class="params">data</span>)&#123;   <span class="comment">// 加密</span></span><br><span class="line">  <span class="keyword">const</span> headers = &#123; </span><br><span class="line">    <span class="attr">level</span>: <span class="number">1</span>,     </span><br><span class="line">    <span class="attr">module</span>: <span class="string">&quot;prodAction&quot;</span>, </span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;getProductInfoList&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_request</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;post&#x27;</span>, data, headers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资料上传</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">batchFileUpload</span>(<span class="params">data, progressfn</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">form_upload</span>(<span class="string">&#x27;/UploadController&#x27;</span>, data, progressfn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件数据上传</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">form_upload</span>(<span class="params">url, data, progressfn</span>)&#123;</span><br><span class="line">  <span class="comment">// formData 需要纯净的 axios 请求</span></span><br><span class="line">  <span class="keyword">const</span> formAxios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_URL</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="comment">// timeout: 10000,</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">formAxios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: data,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onUploadProgress</span>(<span class="params">progressEvent</span>) &#123; <span class="comment">// 原生获取上传进度的事件</span></span><br><span class="line">      <span class="comment">// lengthComputable 主要表明总工作量和已完成工作是否可以被测量</span></span><br><span class="line">      progressEvent.<span class="property">lengthComputable</span> &amp;&amp; <span class="title function_">progressfn</span>(progressEvent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单数据上传</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_request</span> (url, methods, data, headers = &#123; <span class="attr">level</span>: <span class="number">1</span> &#125;, params = &#123;&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: methods,</span><br><span class="line">    <span class="attr">url</span>: headers.<span class="property">level</span> == <span class="number">1</span> ? <span class="string">&quot;/api&quot;</span> : url,</span><br><span class="line">    <span class="attr">data</span>: data,</span><br><span class="line">    <span class="attr">params</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(params),</span><br><span class="line">    <span class="attr">headers</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(headers),</span><br><span class="line">    <span class="attr">responseType</span>: headers.<span class="property">level</span> == <span class="number">1</span> ? <span class="string">&quot;text&quot;</span> : <span class="string">&quot;json&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js 全局引用</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;./axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; indexQRCode &#125; <span class="keyword">from</span> <span class="string">&#x27;@/axios&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tool.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机整数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">random</span>(<span class="params">min, max</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(max == <span class="literal">null</span>)&#123;</span><br><span class="line">    max = min;  </span><br><span class="line">    min = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> min + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min+<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** randomWord 产生任意长度随机字母数字组合</span></span><br><span class="line"><span class="comment">** randomFlag-是否任意长度 min-任意长度最小位[固定位数] max-任意长度最大位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">randomWord</span>(<span class="params">randomFlag, min, max</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  pos = <span class="string">&quot;&quot;</span>,</span><br><span class="line">  range = min,</span><br><span class="line">  arr = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>];</span><br><span class="line">  <span class="comment">// 随机产生</span></span><br><span class="line">  <span class="keyword">if</span>(randomFlag)&#123;</span><br><span class="line">      range = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max-min)) + min;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; range; i++)&#123;</span><br><span class="line">      pos = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (arr.<span class="property">length</span>-<span class="number">1</span>));</span><br><span class="line">      str += arr[pos];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** crypto-js </span></span><br><span class="line"><span class="comment">** word：待加密或者解密的字符串</span></span><br><span class="line"><span class="comment">** keyStr：AES 加密需要用到的16位字符串的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CryptoJS</span> <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> crypto = &#123;</span><br><span class="line">  <span class="attr">aesKey</span>: <span class="string">&#x27;com.iescp.gate&#x27;</span>,</span><br><span class="line">  <span class="title class_">AESEnc</span> (content, key) &#123;</span><br><span class="line">    key = key || <span class="variable language_">this</span>.<span class="property">aesKey</span>;</span><br><span class="line">    key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key) <span class="comment">// 加密密钥</span></span><br><span class="line">    <span class="keyword">var</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(content)</span><br><span class="line">    <span class="keyword">var</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(srcs, key, &#123; </span><br><span class="line">      <span class="attr">iv</span>: key, </span><br><span class="line">      <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">AESDec</span>: <span class="keyword">function</span> (<span class="params">content, key</span>) &#123;</span><br><span class="line">    key = key || <span class="variable language_">this</span>.<span class="property">aesKey</span>;</span><br><span class="line">    key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key) <span class="comment">// 解密密钥</span></span><br><span class="line">    <span class="keyword">let</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(content, key, &#123; </span><br><span class="line">      <span class="attr">iv</span>: key, </span><br><span class="line">      <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span> </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> decryptedStr = decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>)</span><br><span class="line">    <span class="keyword">return</span> decryptedStr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h1 id="五、状态管理-Vuex"><a href="#五、状态管理-Vuex" class="headerlink" title="五、状态管理 Vuex"></a>五、状态管理 Vuex</h1><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote>
<p>本质是一个挂载到 vue 实例的全局变量对象 store，它的属性和方法负责管理所有组件的状态及其更新。</p>
</blockquote>
<ul>
<li><strong>state</strong>：包含所有应用级别状态的对象 (组件用到的数据)。</li>
<li><strong>getters</strong>：派生出 state 所需数据 (计算属性)。</li>
<li><strong>mutators</strong>：更新 state 的唯一方式 (同步更新)。</li>
<li><strong>actions</strong>：异步提交 mutaions 更新状态 (异步更新)。</li>
<li><strong>module</strong>：划分为不同模块管理 (方便维护大型项目)。</li>
</ul>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>只能应用于 Vue，通过响应式机制更新视图。</li>
<li>单一数据源：全局只有一个 Store 实例。</li>
<li>单向数据流：<code>View、Action、Mutation、State</code>。</li>
</ul>
  <div align="center">
      <img src="/images/vue/vuex_base.png" alt="Vuex 单向数据流" width="100%">
  </div>
          
      
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><blockquote>
<p>如果 store 文件太大则需要分割到单独文件。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store</span><br><span class="line">  ├── index.<span class="property">js</span>         <span class="comment">// 组装模块并导出store </span></span><br><span class="line">  ├── actions.<span class="property">js</span>       <span class="comment">// 根级别的 action</span></span><br><span class="line">  ├── mutations.<span class="property">js</span>     <span class="comment">// 根级别的 mutation</span></span><br><span class="line">  └── modules          <span class="comment">// 大型应用时分割到模块</span></span><br><span class="line">      ├── cart.<span class="property">js</span>      <span class="comment">// 购物车模块</span></span><br><span class="line">      └── products.<span class="property">js</span>  <span class="comment">// 产品模块</span></span><br></pre></td></tr></table></figure>


<h2 id="自定义配置-1"><a href="#自定义配置-1" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="单个文件"><a href="#单个文件" class="headerlink" title="单个文件"></a>单个文件</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vuex/store.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// state 状态变量</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">VIEWID</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">LOADING</span>: &#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// state 的计算属性：派生所需状态</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title class_">IDNew</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;  </span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">ID</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 同步更新 state：store.commit(&#x27;showLoad&#x27;, &#123; status: 1, msg: &quot;&quot; &#125;)</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">viewEntrance</span>(<span class="params">state, id</span>)&#123;</span><br><span class="line">      state.<span class="property">VIEWID</span> = id</span><br><span class="line">    &#125;,</span><br><span class="line">    showLoad (state, obj)&#123;</span><br><span class="line">      state.<span class="property">LOADING</span> = obj</span><br><span class="line">    &#125;,</span><br><span class="line">    hideLoad (state)&#123;</span><br><span class="line">      state.<span class="property">LOADING</span> = &#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 异步更新 state：this.$store.dispatch(&#x27;viewEntrance&#x27;, id)</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 简写写法</span></span><br><span class="line">    <span class="attr">viewEntrance</span>: <span class="function">(<span class="params">&#123; commit &#125;, id</span>) =&gt;</span> <span class="title function_">commit</span>(<span class="string">&#x27;viewEntrance&#x27;</span>, id),</span><br><span class="line">    <span class="comment">// 完整写法</span></span><br><span class="line">    <span class="attr">viewEntrance</span>: <span class="function">(<span class="params"> context, id</span>) =&gt;</span> &#123; context.<span class="title function_">commit</span>(<span class="string">&#x27;viewEntrance&#x27;</span>, id) &#125;,</span><br><span class="line">    <span class="comment">// 异步操作</span></span><br><span class="line">    <span class="attr">entryAsync</span>: <span class="function">(<span class="params">&#123; commit &#125;, id</span>) =&gt;</span> &#123;  </span><br><span class="line">      <span class="built_in">setTimeout</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;viewEntrance&#x27;</span>, id)</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 分割成不同模块以方便管理：使用时不再导出以上变量</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">      <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">b</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./vuex&#x27;</span>  </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">          <span class="attr">localState</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 普通写法</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;     </span><br><span class="line">      count () &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">isShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">isShow</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 简洁写法：使用辅助函数返回对象并映射到组件实例</span></span><br><span class="line">  <span class="attr">computed</span>: <span class="title function_">mapState</span>(&#123;  </span><br><span class="line">      <span class="attr">count</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span>, </span><br><span class="line">      <span class="attr">countAlias</span>: <span class="string">&#x27;count&#x27;</span>,      <span class="comment">// 改变名称</span></span><br><span class="line">      <span class="title function_">countPlus</span>(<span class="params">state</span>)&#123;         <span class="comment">// 使this指向组件对象</span></span><br><span class="line">          <span class="keyword">return</span> state.<span class="property">count</span> + <span class="variable language_">this</span>.<span class="property">localState</span>; </span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;isShow&#x27;</span>]),  <span class="comment">// 名称相同</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">local</span>(<span class="params"></span>)&#123;         <span class="comment">// 组件数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">localState</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将数据混入 computed 对象</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([    <span class="comment">// 映射 State</span></span><br><span class="line">      <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;isShow&#x27;</span></span><br><span class="line">    ]),</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([  <span class="comment">// 映射 Getters </span></span><br><span class="line">      <span class="string">&#x27;countNew&#x27;</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">methods</span>: &#123;   </span><br><span class="line">    <span class="title function_">reduce</span>(<span class="params"></span>)&#123;     <span class="comment">// 有参数时需单独定义</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>)           <span class="comment">// 同步</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;reduce&#x27;</span>, <span class="number">2</span>)   <span class="comment">// 异步</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...<span class="title function_">mapActions</span>([  <span class="comment">// 映射 Mutations</span></span><br><span class="line">      <span class="string">&#x27;add&#x27;</span>,  </span><br><span class="line">      <span class="string">&#x27;tog&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;addAsync&#x27;</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapActions</span>([<span class="string">&#x27;add&#x27;</span>])</span><br><span class="line">  <span class="attr">methods</span>: <span class="title function_">mapMutations</span>([<span class="string">&#x27;add&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">LOADING</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setState</span>(<span class="params">state, newState</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(state, newState)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">showLoading</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setState&#x27;</span>, &#123; <span class="attr">LOADING</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">hideLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setState&#x27;</span>, &#123; <span class="attr">LOADING</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">showLoading</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">hideLoading</span>()</span><br></pre></td></tr></table></figure>


<h1 id="六、组件化开发"><a href="#六、组件化开发" class="headerlink" title="六、组件化开发"></a>六、组件化开发</h1><h2 id="组件实例化"><a href="#组件实例化" class="headerlink" title="组件实例化"></a>组件实例化</h2><blockquote>
<p>组件只有挂载到某个 Vue 实例下才会生效，挂载的本质就是创建一个包含数据、方法和组件的 vue 实例对象。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、直接创建</span></span><br><span class="line"><span class="keyword">var</span> app1 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app1&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、首先创建无挂载点的实例</span></span><br><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;    </span><br><span class="line">  <span class="attr">data</span>: &#123;          <span class="comment">// 对象</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;app2&quot;</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app2.$mount(<span class="string">&#x27;#app2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、使用基础 Vue 构造器创建子类</span></span><br><span class="line"><span class="keyword">var</span> app3 = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">// 函数</span></span><br><span class="line">    <span class="keyword">return</span>&#123; </span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&quot;app3&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)    </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">app3</span>().$mount(<span class="string">&#x27;#app3&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="组件定义"><a href="#组件定义" class="headerlink" title="组件定义"></a>组件定义</h2><blockquote>
<p>三种书写方式：<strong>单文件组件</strong>、<strong>template 标签</strong>、<strong>script 标签</strong>。组件必须注册才能生效。组件和指令命名时注意：不能使用标签和关键字、尽量不使用驼峰命名 (因为 webpack 编译后会统一变为小写)，如果有大写字母则使用时必须都改为小写并添加 <code>-、v-</code>。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单文件组件配置选项：扩展名为 vue</span></span><br><span class="line"><span class="keyword">var</span> myMixin = </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">mixins</span>: [        <span class="comment">// 混入：扩展组件功能，可看作继承。</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">msg</span>:<span class="string">&#x27;mixins:msg&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;mixins:name&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mixin:hello&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">hello</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">directive</span>: &#123;</span><br><span class="line">    <span class="comment">// 注册一个局部的自定义指令 v-auto-focus</span></span><br><span class="line">    <span class="attr">autoFocus</span>: &#123;</span><br><span class="line">      <span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>)&#123; </span><br><span class="line">        <span class="comment">// 创建：指令第一次绑定到元素时调用，比如添加事件监听器等</span></span><br><span class="line">      &#125;,      </span><br><span class="line">      <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;    </span><br><span class="line">        el.<span class="title function_">focus</span>()</span><br><span class="line">        <span class="comment">// 插入：当元素被插入到 DOM</span></span><br><span class="line">      &#125;,      </span><br><span class="line">      <span class="title function_">update</span>(<span class="params">el, binding, vnode, oldVnode</span>)&#123; </span><br><span class="line">        <span class="comment">// 更新：当元素所在模板更新时</span></span><br><span class="line">      &#125;,     </span><br><span class="line">      <span class="title function_">componentUpdate</span>(<span class="params">el, binding, vnode, oldVnode</span>)&#123; </span><br><span class="line">        <span class="comment">// 当元素所在模板完成一次更新周期时</span></span><br><span class="line">      &#125;,   </span><br><span class="line">      <span class="title function_">unbind</span>(<span class="params">el, binding, vnode</span>)&#123;          </span><br><span class="line">        <span class="comment">// 解除绑定时只调用一次，比如移除 bind 时绑定的事件监听器</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;          <span class="comment">// 过滤器：&#123;&#123;user.age | sum&#125;&#125; </span></span><br><span class="line">    sum (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> value == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="comment">// 组件注册：使用时 &lt;my-com&gt;</span></span><br><span class="line">    <span class="title class_">MyCom</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;      <span class="comment">// 组件数据：组件内必须使用箭头函数，否则 this 不指向当前组件</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span></span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123; &#125;,   <span class="comment">// 计算属性：派生所需数据</span></span><br><span class="line">  <span class="attr">methods</span>: &#123; &#125;,    <span class="comment">// 事件绑定：事件名不区分大小写)</span></span><br><span class="line">  <span class="attr">watch</span>:&#123;          <span class="comment">// 监听数据</span></span><br><span class="line">    <span class="attr">user</span>: &#123;        <span class="comment">// 深度监听(可监听到对象内部属性变化)</span></span><br><span class="line">      <span class="attr">handler</span>: <span class="string">&#x27;getList&#x27;</span>,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">val, oldval</span>)&#123; &#125;,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="string">&quot;user.name&quot;</span>: <span class="keyword">function</span>(<span class="params">val, oldval</span>)&#123; <span class="comment">// 必须加引号  </span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val)  </span><br><span class="line">    &#125;,</span><br><span class="line">    $route(to, <span class="keyword">from</span>)&#123;            <span class="comment">// 监听子组件路由变化</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;    <span class="comment">// 生命周期</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">eventHub</span>.$on(<span class="string">&#x27;updateDash&#x27;</span>, <span class="variable language_">this</span>.<span class="property">getList</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleScroll</span>)</span><br><span class="line">    <span class="comment">// 推迟回调到下次 DOM 更新循环之后执行</span></span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">eventHub</span>.$off(<span class="string">&#x27;updateDash&#x27;</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleScroll</span>)</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;myCom&#x27;</span>, &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  showLoading () &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setState&#x27;</span>, &#123; <span class="attr">LOADING</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">hideLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;setState&#x27;</span>, &#123; <span class="attr">LOADING</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;autoFocus &quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el</span>)&#123;  el.<span class="title function_">focus</span>() &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;formatDate&#x27;</span>, <span class="keyword">function</span> (<span class="params">value, fmt</span>)&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>()</span><br></pre></td></tr></table></figure>


<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote>
<p>Vue 实例由创建到销毁的完整运行一次的过程中会触发的函数。</p>
</blockquote>
<ul>
<li><strong>beforeCreate</strong>：初始化非响应式变量，比如添加 Loading。</li>
<li><strong>created</strong>：页面初始化，比如关闭 Loading 和 Ajax 请求。</li>
<li><strong>mounted</strong>：获取和操作 Dom 元素和 Ajax 请求。</li>
<li><strong>updated</strong>：统一处理数据，但可能陷入死循环。</li>
<li><strong>beforeDestroy</strong>：销毁定时器、解绑全局事件、销毁插件对象等操作。</li>
</ul>
  <div align="center">
      <img src="/images/vue/vue_life.png" alt="Vue 生命周期" width="100%">
  </div>


<h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><ul>
<li>数据渲染：<code>双层 &#123; &#125;、v-text、v-html</code></li>
<li>条件渲染：<code>v-if、v-else</code></li>
<li>循环渲染：<ul>
<li>数组：<code>v-for=&quot;(item, index) in arr&quot; :key=&quot;index&quot;</code></li>
<li>对象：<code>v-for=&quot;(item, key, index) of obj&quot; :key=&quot;index&quot;</code></li>
</ul>
</li>
<li>事件绑定：<code>v-on:</code> 可缩写为 <code>@</code>。<ul>
<li>绑定：<code>v-on:click = &quot;todo&quot;、@click = &quot;todo&quot;</code></li>
<li>修饰符：<code>@click.stop.self、@keyup.stop.enter</code>。阻止冒泡 stop、阻止默认 prevent、执行一次 once。</li>
</ul>
</li>
<li>动态绑定：<code>v-bind:</code>，注意可以省略 v-bind <ul>
<li>class：<code>:class=&quot; [&#39;a&#39;, &#39;b&#39;]、[ true ? &#39;a&#39;: &#39;b&#39;]、&#123; &#39;active&#39;: isActive(id) &#125; &quot;</code>。</li>
<li>style：<code>:style=&quot;&#123;color: &#39;red&#39;&#125;、[&#123;color: &#39;red&#39;&#125;, &#123;fontSize: &#39;16px&#39;&#125;]&quot;</code>。</li>
</ul>
</li>
<li>双向绑定<ul>
<li>绑定：<code>v-model、v-model.trim</code></li>
<li>修饰符：trim 首尾空格过滤、lazy 监听change事件、number 字符串转为数字。</li>
</ul>
</li>
<li>性能优化<ul>
<li>只渲染一次：<code>v-once</code></li>
<li>防止页面闪烁：<code>v-cloak</code></li>
<li>不输出 data：<code>v-pre</code></li>
</ul>
</li>
</ul>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h3><ul>
<li>子传父：父组件监听 <code>&lt;child @updateList = &quot;updateList&quot;&gt;&lt;/child&gt;</code>，子组件触发自定义事件 <code>this.$emit(&quot;updateList&quot;, data)</code>。</li>
<li>父传子：在子组件中通过 props 定义父组件传递的属性如下：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件：&lt;child name=&quot;Tom&quot; :songs=&quot;songs&quot; :age=&quot;age&quot;&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 简洁写法</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;songs&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通写法</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;  <span class="comment">// 静态数据</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">songs</span>:&#123;  <span class="comment">// 动态数据</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;     <span class="comment">// 动态数据验证</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,   </span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// default: 1000,</span></span><br><span class="line">      <span class="title function_">default</span>(<span class="params"></span>)&#123;     <span class="comment">// 默认值, 可直接1000 </span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">time</span>: <span class="number">1000</span> &#125; </span><br><span class="line">      &#125;,  </span><br><span class="line">      <span class="title function_">validator</span>(<span class="params">val</span>)&#123;  <span class="comment">// 自定义验证</span></span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><blockquote>
<p>同步父子组件数据，注意不要在子组件中修改 props 接收的数据。</p>
</blockquote>
<ul>
<li>普通写法<ul>
<li>父组件监听自定义事件：<code>&lt;com @ut=&quot;val =&gt; pm = val&quot; :m=&quot;pm&quot;&gt;&lt;/com&gt;</code>。</li>
<li>子组件触发事件：<code>props: &#123; m: String &#125;、this.$emit(&#39;ut&#39;, newVal)</code>。</li>
</ul>
</li>
<li>使用 sync<ul>
<li>父组件：<code>&lt;child :s.sync=&quot;startDate&quot;&gt;&lt;/child&gt;</code>。</li>
<li>子组件：<code>props: &#123; s: String &#125;、this.$emit(&quot;update:s&quot;, val)</code>。</li>
</ul>
</li>
</ul>
<h3 id="祖孙组件"><a href="#祖孙组件" class="headerlink" title="祖孙组件"></a>祖孙组件</h3><blockquote>
<p><strong>$attrs</strong> 传递不被 prop 识别的属性 (class、style除外)、**$listeners**：传递组件的事件 (.native除外)。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.vue</span></span><br><span class="line">&lt;child sex=<span class="string">&quot;男&quot;</span> width=<span class="string">&quot;80&quot;</span> height=<span class="string">&quot;80&quot;</span> @change=<span class="string">&quot;change&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">grand</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">grand</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// grand.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;sex&#x27;</span>],</span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,  <span class="comment">// 去掉默认行为</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// &#123; width: &quot;80&quot;, height: &quot;80&quot; &#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$attrs</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change 事件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$listeners</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="provide、inject"><a href="#provide、inject" class="headerlink" title="provide、inject"></a>provide、inject</h3><blockquote>
<p>允许一个祖先组件向其所有子孙后代注入一个依赖，但是绑定并不是可响应的。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="attr">provide</span>: &#123;      <span class="comment">// 一个对象</span></span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">fooMethod</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fooMethod 被调用&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子孙组件</span></span><br><span class="line"><span class="attr">inject</span>: [<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;fooMethod&#x27;</span>], <span class="comment">// 数组或对象，注入到子组件</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fooMethod</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="template-标签"><a href="#template-标签" class="headerlink" title="template 标签"></a>template 标签</h2><blockquote>
<p>可看作一个不可见的包裹元素，主要用于分组的条件判断和列表渲染。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件渲染：通过 key 实现切换时清空内容。</span></span><br><span class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 列表渲染</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><ul>
<li><strong>transition</strong>：单个元素&#x2F;组件的过渡效果</li>
<li><strong>transition-group</strong>：多个元素&#x2F;组件的过渡效果</li>
<li><strong>component</strong>：支持两个属性 is、inline-template</li>
<li><strong>keep-alive</strong>：保留组件状态或避免重新渲染</li>
<li><strong>slot</strong>：替换 slot 元素实现内容嵌套</li>
</ul>
<h2 id="特殊特性"><a href="#特殊特性" class="headerlink" title="特殊特性"></a>特殊特性</h2><ul>
<li><strong>key</strong>  <ul>
<li>管理可复用的元素：<code>&lt;router-view :key=&quot;$route.fullPath&quot;&gt;</code></li>
<li>减少运算来提高循环性能：<code>v-for=&quot;item in items&quot; :key=&quot;item.id&quot;</code></li>
</ul>
</li>
<li><strong>is</strong><ul>
<li>使用 v-bind:is 实现动态组件的切换效果<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- change: this.index = (++this.ndex)%3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">change</span>=<span class="string">&quot;change&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;views[index]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;move&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- include：字符串/正则，只有匹配的组件被缓存 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- exclude：字符串/正则，任何匹配的组件都不会被缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;tagList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>用于在 ul 等受限制的 html 元素中绑定组件：<code>&lt;li is=&quot;com1&quot;&gt;&lt;/li&gt;</code></li>
</ul>
</li>
<li><strong>slot</strong> <ul>
<li>配合 slot 内置组件实现嵌套内容的相应显示。</li>
<li>没有 slot 时不显示嵌套内容，多个 slot 时需使用具名插槽 (添加 name 属性)。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">is</span>=<span class="string">&quot;lis_slot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;first&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;print&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;second&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lis_slot.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;first&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>ref</strong>  <ul>
<li>获取当前 DOM 元素：<code>&lt;li ref=&quot;cur&quot;、this.$refs.cur&gt;&lt;/li&gt;</code></li>
<li>获取子组件实例对象：<code>&lt;my-com ref=&quot;com&quot;&gt;&lt;/my-com&gt;、this.$refs.com</code></li>
</ul>
</li>
</ul>
<h1 id="七、插件开发"><a href="#七、插件开发" class="headerlink" title="七、插件开发"></a>七、插件开发</h1><blockquote>
<p>本质是一个必须提供一个公开接口的对象或函数，用来扩展 vue 功能而实现组件无法实现的很多需求。插件可以封装组件，组件可以暴露数据给插件。</p>
</blockquote>
<h2 id="常规写法"><a href="#常规写法" class="headerlink" title="常规写法"></a>常规写法</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toast.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Toast</span> = &#123;&#125;;        </span><br><span class="line"><span class="title class_">Toast</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123; </span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$msg</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Toast</span>;      </span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js：Vue.use() 会自动调用 install() 并阻止相同插件注册多次</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&#x27;./toast.js&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Toast</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$msg</span>);   <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure>


<h2 id="模板写法"><a href="#模板写法" class="headerlink" title="模板写法"></a>模板写法</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123; <span class="comment">//options一般是对象</span></span><br><span class="line">    <span class="comment">// 添加全局方法和属性</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">myProperty</span> = <span class="string">&#x27;Hello Vue&#x27;</span>,    </span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;, </span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 添加全局资源：指令、过滤器、过渡等</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="keyword">function</span>(<span class="params">el, binding, vnode, oldVnode</span>)&#123; &#125;)  </span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;formatTime&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>)&#123; &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加组件选项：混入 Vue 实例本身没有的方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;        </span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>)&#123; &#125;,</span><br><span class="line">      <span class="attr">methods</span>: &#123; &#125;</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加实例方法：调用时使用 this.$get()</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$get</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS 框架</category>
      </categories>
      <tags>
        <tag>JS 框架</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 编程范式</title>
    <url>/2019/06/01/4-6-js%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="一、编程范式"><a href="#一、编程范式" class="headerlink" title="一、编程范式"></a>一、编程范式</h1><blockquote>
<p>即编程语言典型的编程风格&#x2F;方式，每种编程语言都适用于多种范式，它是程序员看待程序的观点，比如面向对象编程中的程序是一系列相互作用的对象、函数式编程中则是一个无状态的函数组合序列。</p>
</blockquote>
<ul>
<li><strong>命令式编程</strong>：注重执行过程的面向过程编程（解答题），根据步骤依次执行代码来解决问题。优点是性能高、不需要实例化等操作，缺点是依赖和影响外部变量、代码可读性低。</li>
<li><strong>声明式编程</strong>：注重执行结果的正则表达式、函数式编程（选择题），通过固定的函数或规则处理声明的变量来得到结果。优点是不依赖和影响外部变量、代码方便维护，缺点是占用资源较多、性能较差。</li>
<li><strong>面向对象编程</strong>：根据功能将问题分解并封装为包含属性和方法的各个对象。优点是复用性和可扩展性高、代码方便维护，缺点是代码可能冗余、性能较低。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令式</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> doubled = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> newNumber = numbers[i] * <span class="number">2</span></span><br><span class="line">  doubled.<span class="title function_">push</span>(newNumber)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 声明式</span></span><br><span class="line"><span class="comment">*   map 接受的是一个纯函数；它不具有任何副作用 (不会改变外部状态)</span></span><br><span class="line"><span class="comment">*   map 函数所做的事情是将直接遍历整个数组的过程归纳抽离出来，让我们专注于描述想要的是什么</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> doubled = numbers.<span class="property">map</span> (<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled)   <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向对象</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Task</span> = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nums</span> = nums;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Task</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">square</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> squares = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">nums</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        squares.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">nums</span>[i]*<span class="variable language_">this</span>.<span class="property">nums</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> squares;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">Task</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        res += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">Task</span>([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="title function_">sum</span>(t.<span class="title function_">square</span>()));  <span class="comment">// 56</span></span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>


<h1 id="二、常用编程模式"><a href="#二、常用编程模式" class="headerlink" title="二、常用编程模式"></a>二、常用编程模式</h1><blockquote>
<p>模块化编程和异步编程内容较多，下面详述。</p>
</blockquote>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><blockquote>
<p>注重结果而不在乎过程，过程交给别人处理，提倡函数封装性思想。实现方式是将实现逻辑封装为 API 并相互调用。优点是避免状态共享、可变数据及副作用的产生。</p>
</blockquote>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><strong>函数</strong>：指数学中的函数而不是指命令式编程中的函数。自变量的映射，一个函数的值仅决定于函数参数的值而不依赖其他状态。</li>
<li><strong>纯函数</strong>：相同输入永远会得到相同输出的函数。没有任何副作用，不依赖、不改变外部状态。比如 slice 不会改变原数组而是纯函数，splice 会改变原数组而不符合条件。</li>
<li><strong>变量和表达式</strong>：变量指值的名称而非命令式编程中的变量 (存储状态的内存单元)，变量值不可变。表达式指一个有返回值的运算过程，函数式编程要求只使用表达式而不使用语句。语句则是执行操作但没有返回值，比如命令式编程的条件语句、循环语句等控制语句。</li>
<li><strong>状态</strong>：程序是拥有状态的。程序执行到断点时就停留在了某个状态，它包括了当前定义的全部变量和一些当前系统的状态，比如打开的文件、网络的连接、申请的内存等。具体保存的信息和语言有关系。程序通过状态不断推进直至目标。函数式编程强调无状态并不是不保存状态，而是强调将状态锁定在函数的内部，不依赖于外部的任何状态。准确点说，它是通过函数创建新的参数或返回值来将保存程序的状态全部完全保存到栈上。</li>
<li><strong>函数柯里化</strong>：将一个低阶函数转换为高阶函数的过程。</li>
<li><strong>函数组合</strong>：不使用所要处理的值，只合成运算过程。为了解决嵌套过深的函数如洋葱代码 h(g(f(x)))，我们需要通过函数组合一起来用柯里化来优化，让多个函数像拼积木一样。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柯里化之前</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y &#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化之后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addX</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123; <span class="keyword">return</span> x + y &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addX</span>(<span class="number">2</span>)(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; (<span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x)))</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">first</span> = arr =&gt; arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> reverse = arr = arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="keyword">var</span> last = <span class="title function_">compose</span>(first, reverse)</span><br><span class="line"><span class="title function_">last</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])      <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li><strong>高阶函数</strong>：参数为函数或返回值为函数的函数。它提供了一种函数级别上的依赖注入（或反转控制）机制，可以将复用的粒度降低到函数级别。</li>
<li><strong>闭包</strong>：在形式上就是一个函数内部定义另一个函数，函数的堆栈在在函数返回后并不释放，可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。</li>
<li><strong>访问权限控制</strong>：JS 中的作用域</li>
<li><strong>延长变量生命周期</strong>：面向对象语言里，函数内的变量是在栈上分配并在调用完成后销毁，变量的生命周期结束。而对象是在堆分配的，会常驻内存，除非被手动或自动回收掉。</li>
<li><strong>函子 Functor</strong>：遵守一些特定规则的容器类型，任何具有 map 方法的数据结构都可看作它的实现。它是一个对于函数调用的抽象，我们赋予容器自己去调用函数的能力。把东西装进一个容器，只留出一个接口 map 给容器外的函数，map 一个函数时，我们让容器自己来运行这个函数，这样容器就可以自由地选择何时何地如何操作这个函数。</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote>
<p>由于命令式编程语言也可以通过类似函数指针的方式来实现高阶函数，函数式的最主要的好处主要是不变性带来的。</p>
</blockquote>
<ul>
<li><strong>引用透明</strong>：指函数的运行不依赖于外部变量或状态。没有可变的状态而只依赖于输入的参数，只要参数相同则引用函数所得到的返回值都是相同的。其它语言的函数返回值一般与系统状态有关。这样很不利于观察和理解程序的行为。</li>
<li><strong>没有副作用</strong>：副作用指函数内部与外部互动而产生运算以外的其他结果。</li>
<li><strong>无锁并发</strong>：没有副作用使得函数式编程各个独立的部分的执行顺序可以随意打乱。（多个线程之间）不共享状态，不会造成资源争用，则不需要用锁来保护可变状态，也就不会出现死锁，这样可以更好地进行无锁的并发操作。</li>
<li><strong>惰性求值</strong>：在将表达式赋值给变量（或称作绑定）时并不计算表达式的值，而在变量第一次被使用时才进行计算。这样就可以通过避免不必要的求值提升性能。</li>
</ul>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><blockquote>
<p>将具体问题分解并抽象为一个个具体的对象，并且将对象及其公共的属性和方法封装成一个类，整个程序由对象之间的分工和合作完成。主要特点有封装 (只能通过对象来访问方法)、继承 (从已有对象上继承出新的对象)、多态 (多对象的不同形态)，极大提高了大型程序的重用性和可维护性。核心在于类的实现：js 基于 function 来模拟类，通过 prototype 属性来实现类方法的共享，ES6 class 是用来定义类的一个语法糖，通过 extends 来继承父类。类的定义如下：</p>
</blockquote>
<ul>
<li><strong>工厂模式</strong>：解决了重复实例化多个对象的问题，但是不能识别各自的实例化对象。</li>
<li><strong>构造函数模式</strong>：把函数当作一个类，实例化时它会隐式创建一个空对象并最后返回。建议首字母大写以区分普通函数，实例化的对象可以通过 instanceof 判断它的实例。</li>
<li><strong>原型模式</strong>：好处是可以让 <code>所有对象实例</code> 共享 <code>原型对象</code> 所包含的属性和方法。</li>
<li><strong>混合模式</strong>：可变属性写入构造函数，固定属性和方法写入原型对象，这样可以节省内存。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;     <span class="comment">// 原料</span></span><br><span class="line">  obj.<span class="property">name</span> = name;  <span class="comment">// 加工</span></span><br><span class="line">  obj.<span class="property">age</span> = age;    </span><br><span class="line">  obj.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="title function_">person</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;     <span class="comment">// 类：模具</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;    </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)    </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">20</span>);  <span class="comment">// 实例化对象：产品</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;  &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">24</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;   </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p4 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure>


<h2 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h2><blockquote>
<p>无侵入地将一个函数插入到另一个函数的前面或后面。</p>
</blockquote>
<div style="text-indent: 2em">主要功能是将日志统计、异常处理等一些跟核心业务逻辑模块无关的功能抽离出来并封装，然后动态插入到业务逻辑模块的指定位置。这样不仅简化了业务逻辑模块，而且方便统一管理功能模块。AOP 其实只是 OOP 的补充，OOP 从横向上区分出一个个的类，AOP 则从纵向上向对象中加入特定的代码。常用场景如下：`防止 window.onload 被二次覆盖、给 Ajax 请求动态添加参数、统计函数的执行时间、分离表单请求和校验、职责链模式、组合替代继承`。</div>


  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before 切面：让一个函数在另一个函数之前执行</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="variable language_">this</span>;     <span class="comment">// 保存原函数引用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)   <span class="comment">// 执行新函数，修正 this</span></span><br><span class="line">    <span class="keyword">return</span> _self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);  <span class="comment">// 执行原函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after 切面：让一个函数在另一个函数之后执行</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = _self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;tangdy&#x27;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">getName</span> = obj.<span class="property">getName</span>.<span class="title function_">before</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">after</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">obj.<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>


<h2 id="事件驱动编程"><a href="#事件驱动编程" class="headerlink" title="事件驱动编程"></a>事件驱动编程</h2><blockquote>
<p>命令式编程的代码本身给出了程序执行的顺序，但事件驱动程序中的许多代码可能在完全不可预料的时刻被执行 (由用户与正在执行的程序的互动激发导致)。常用于用户与程序的交互，常用于 GUI (图形用户界面) 编程应用通过图形用户接口（鼠标、键盘、触摸板）进行交互式的互动，也可以用于异常的处理和响应用户自定义的事件等。实现事件驱动需要考虑事件定义、事件触发、事件转化、事件合并、事件排队、事件分派、事件处理、事件连带等实际问题，属于事件驱动的编程语言有：VB、C#、Java、Node.js 等。</p>
</blockquote>
<ul>
<li><strong>事件</strong>：通知某个特定的事情已经发生（事件发生具有随机性）。</li>
<li><strong>事件与轮询</strong>：事件是静静地等待事情的发生，轮询则是一种无休止地观察和判断。</li>
<li><strong>事件处理器</strong>：对事件做出响应时执行的代码，使得程序能够对用户行为做出反映。</li>
</ul>
<h1 id="三、模块化编程"><a href="#三、模块化编程" class="headerlink" title="三、模块化编程"></a>三、模块化编程</h1><div style="text-indent: 2em">早期引用 JS 文件时直接通过 script，但是随着项目的复杂度越来越大，这种方式带来了逻辑混乱、可维护性差等问题。所以将代码合理拆分到不同的文件里，每个实现特定功能的文件就是一个模块，文件路径就是模块名，这种组织代码的方式就是模块化。</div> 

<ul>
<li><strong>编程优势</strong><ul>
<li>开发效率高，有利于多人协同开发。</li>
<li>解决项目中的全局变量污染的问题。</li>
<li>功能单一，方便代码的复用和维护。</li>
<li>解决文件依赖问题，无需关注文件引用顺序。</li>
</ul>
</li>
<li><strong>执行环境</strong><ul>
<li>服务器端：相同代码需要多次执行、CPU 和内存资源是瓶颈、从磁盘加载。</li>
<li>浏览器端：代码从一个服务器端分发到多个客户端、网络是瓶颈、通过网络加载。</li>
</ul>
</li>
<li><strong>发展进程</strong><ol>
<li>闭包形式的函数 (命名空间)。</li>
<li>通过立即执行函数(IIFE) 创建命名空间。</li>
<li>服务器端运行时 NodeJS 的 CommonJS 规范。</li>
<li>浏览器端运行 JS 的 AMD&#x2F;CMD 模块定义规范。</li>
<li>兼容 AMD、CommonJS 的 UMD 规范。</li>
<li>通过语言标准支持的 ES Module。</li>
</ol>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Product</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123; name = value &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> name &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">p.<span class="title function_">setName</span>(<span class="string">&quot;Fundebug&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);        <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>());   <span class="comment">// Fundebug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数 IIFE</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">inc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; count += <span class="number">1</span> &#125;,</span><br><span class="line">        <span class="attr">dec</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; count += -<span class="number">1</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">inc</span>();</span><br></pre></td></tr></table></figure>


<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><blockquote>
<p>服务器端的模块化开发规范，主要特点是同步加载模块，NodeJS 模块规范参照它实现。CommonJS 会在启动时把内置模块和加载过的模块放在本地硬盘，文件读取时不受限于网络而等待时间很短，所以在 Node 环境中使用同步加载的方式不会有很大问题。但是 CommonJS 如果应用在浏览器端，同步加载的机制会使得 JS 阻塞 UI 线程，造成页面卡顿，网速不好时还会导致浏览器假死。</p>
</blockquote>
<ul>
<li><strong>模块定义</strong>：NodeJs 为每个模块提供一个 exports 变量指向 module.exports，相当于在每个模块头部执行 <code>var exports = module.exports</code>。exports 默认是个空对象，可以添加属性和方法但不能被赋值，因为这样会切断了两者联系，而且不能导出需要new实例化的类。使用时建议 module.exports 导出对象和类、exports 导出普通函数和变量。</li>
<li><strong>模块加载</strong>：本质是读取模块内部的 module.exports 变量，特点是模块第一次加载并执行后就会缓存结果、模块的同步加载会阻塞下面代码的执行，方法有 require(加载其它模块)、require.resolve(解析模块标识符的绝对路径)。</li>
<li><strong>模块标识</strong>：require() 参数，require 根据其格式使用不同路径加载原则去寻找模块文件。取值范围为 模块名(小驼峰命名规范的字符串)、绝对路径(&#x2F; 开头)、相对路径(.&#x2F; 开头)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出一个要实例化的类  module.exports = exports = function ()&#123; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rocker.js </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    thisl.<span class="property">about</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Rocker</span> = <span class="built_in">require</span>(<span class="string">&#x27;./rocker.js&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> <span class="title class_">Rocker</span>(<span class="string">&#x27;Ozzy&#x27;</span>, <span class="number">62</span>)</span><br><span class="line">r.<span class="title function_">about</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个静态类 exports.funcName = function ()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + name + <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; hello, greet &#125;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">hello</span> = hello</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">greet</span> = greet</span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="built_in">exports</span> = &#123; hello, greet &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&#x27;./hello.js&#x27;</span>)</span><br><span class="line">hello.<span class="title function_">hello</span>()  <span class="comment">// Hello, world</span></span><br></pre></td></tr></table></figure>


<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><blockquote>
<p>异步模块定义，浏览器端模块化开发规范。它允许异步和按需加载模块来解决代码阻塞和被依赖文件必须先加载的问题，用于项目开发时需要引用库函数 RequireJS，</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块定义 define：可选模块标识, 依赖模块数组, 模块初始化的执行函数/对象</span></span><br><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;dependency&#x27;</span>], <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;Byron&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">printName</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(name) &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; printName &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块加载 require：依赖模块数组, 模块加载成功后的回调函数</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;myModule&#x27;</span>], <span class="keyword">function</span> (<span class="params">my</span>)&#123;</span><br><span class="line">　  my.<span class="title function_">printName</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><blockquote>
<p>AMD 基础上改进，浏览器的实现为 seaJS，主要区别是对依赖模块的执行时机处理不同：AMD 推崇依赖前置而在定义模块时声明其依赖模块，CMD 推崇就近依赖则只有在用到某个模块时再去加载。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块 index.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">name</span> = <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">hello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;index&#x27;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">hello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;index&#x27;</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line">seajs.<span class="title function_">use</span>(<span class="string">&#x27;index&#x27;</span>, <span class="keyword">function</span>(<span class="params">my</span>) &#123;</span><br><span class="line">    my.<span class="title function_">hello</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><blockquote>
<p>兼容 AMD、commonJS 而提出了跨平台的解决方案。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无导入导出规范，只有如下的常规写法来检测 JS 环境</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">root, factory</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">        <span class="comment">// AMD</span></span><br><span class="line">        <span class="title function_">define</span>([<span class="string">&#x27;jquery&#x27;</span>], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// CommonJS</span></span><br><span class="line">        <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>(<span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 挂载到全局：root 即 window</span></span><br><span class="line">        root.<span class="property">returnExports</span> = <span class="title function_">factory</span>(root.<span class="property">jQuery</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params">$</span>) &#123;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params"></span>)&#123; &#125;;</span><br><span class="line">    <span class="comment">// 暴露公共方法</span></span><br><span class="line">    <span class="keyword">return</span> myFunc;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>


<h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><blockquote>
<p>CommonJS&#x2F;AMD 规范都只能在运行时确定依赖，ES6 module 模块编译时就能确定模块的依赖关系，以及输入和输出的变量，这种加载方式称为异步按需加载、静态加载。 </p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出错误写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> m;</span><br><span class="line"><span class="keyword">if</span> (x === <span class="number">2</span>) &#123; <span class="keyword">import</span> <span class="title class_">MyModual</span> <span class="keyword">from</span> <span class="string">&#x27;./myModual&#x27;</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出正确写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入写法</span></span><br><span class="line"><span class="keyword">import</span> &#123;m, n&#125; <span class="keyword">from</span> <span class="string">&#x27;./myModual&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyModual</span> <span class="keyword">from</span> <span class="string">&#x27;./myModual&#x27;</span>;</span><br><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;./myModule.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123;export1, export2&#125;</span>) =&gt;</span> &#123; &#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">import</span>(<span class="string">&#x27;./m1.js&#x27;</span>), <span class="title function_">import</span>(<span class="string">&#x27;./m2.js&#x27;</span>), <span class="title function_">import</span>(<span class="string">&#x27;./m3.js&#x27;</span>)])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">[module1, module2, module3]</span>) =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure>


<h1 id="四、异步编程"><a href="#四、异步编程" class="headerlink" title="四、异步编程"></a>四、异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><blockquote>
<p>作为参数传递到其它函数执行，优点是使用简单，缺点是层层嵌套而不利于代码维护、每个事件只能指定一个回调函数、各个模块之间高度耦合而导致流程混乱。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步操作变为异步</span></span><br><span class="line"><span class="title function_">f1</span>(f2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span> (callback) &#123;</span><br><span class="line">　　 <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="title function_">callback</span>()  </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><blockquote>
<p>采用事件驱动模式，优点是可以绑定多个事件、每个事件可以指定多个回调函数、可以去耦合而有利于实现模块化，缺点则是整个程序变成事件驱动型，运行流程不清晰。常用的监听函数有：on、bind、listen、observe、addEventListener。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f1 执行完成后立即触发 done 事件从而执行 f2</span></span><br><span class="line">f1.<span class="title function_">on</span>(<span class="string">&quot;done&quot;</span>, f2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span> () &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        f1.<span class="title function_">trigger</span>(<span class="string">&quot;done&quot;</span>)  </span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><blockquote>
<p>即观察者模式，它定义了一种一对多的关系，通过让多个观察者同时监听某个对象并在对象更新时执行相应操作。主要优点有：通过广播通信即可自动通知所有已经订阅过的对象、目标对象与观察者之间的抽象耦合关系能够单独扩展和重用、目标对象与观察者存在一种动态关联而增加了灵活性。缺点：目标与观察者之间的依赖关系并没有完全解除并且可能循环引用、观察者对象较多时消息发布会降低程序的效率。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f1 执行完成后向信号中心 jQuery 发布 done 信号，从而引发 f2 的执行</span></span><br><span class="line">jQuery.<span class="title function_">subscribe</span>(<span class="string">&quot;done&quot;</span>, f2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// f1 的代码</span></span><br><span class="line">        jQuery.<span class="title function_">publish</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><blockquote>
<p>表示一个异步操作的代理对象，用来解决回调地狱和并发 IO 操作的问题并能够更好地进行错误捕获。只有异步操作的结果可以决定 Promise 对象的当前状态，状态只能从 <strong>pending(等待)</strong> 转变为 <strong>fulfilled(已完成)</strong> &#x2F; <strong>rejected(已失败)</strong> 并且不能继续改变。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建实例：构造函数接收一个 executor 函数，操作完成后执行其参数 resolve/reject。</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 原生方法：then (reject 时触发)、catch (resolve 时触发)、finally (一定触发)。</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;   <span class="comment">// 抛出错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;         <span class="comment">// 不会执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;     <span class="comment">// 接收错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;         <span class="comment">// 继续执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;      <span class="comment">// 一般用于结束动画等</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法糖</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)  <span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">42</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(value) <span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;出错了&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并多个实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timerPromisefy</span>(<span class="params">delay</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(delay)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当数组中所有 Promise 对象被 resolve 之后，该方法才执行 </span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([ <span class="title function_">timerPromisefy</span>(<span class="number">1</span>), <span class="title function_">timerPromisefy</span>(<span class="number">10</span>)])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 任何一个 promise 变为 resolve/reject，程序就停止运行</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([ <span class="title function_">timerPromisefy</span>(<span class="number">1</span>), <span class="title function_">timerPromisefy</span>(<span class="number">10</span>)])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片加载完成后播放音乐</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">loadImg</span>([img, img_1, img_2]).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">playMusic</span>()</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadImg</span> = (<span class="params">img</span>) =&gt; &#123;  </span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(img)) &#123;</span><br><span class="line">        <span class="keyword">const</span> oImg = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">        oImg.<span class="property">src</span> = img</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            oImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">    img.<span class="title function_">forEach</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> oImg = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">        oImg.<span class="property">src</span> = val</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            oImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBarcodeMaster</span> (data) &#123;</span><br><span class="line">    imanDialog.<span class="title function_">showLoading</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="title class_">Http</span>.<span class="title function_">post</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/api/getBarcodeMaster&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">12000</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            imanDialog.<span class="title function_">hideLoading</span>()</span><br><span class="line">            <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">            imanDialog.<span class="title function_">hideLoading</span>()</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataService</span>.<span class="title function_">getBarcodeMaster</span>(&#123;</span><br><span class="line">    <span class="attr">app</span>: $scope.<span class="property">app</span>,</span><br><span class="line">    <span class="attr">user</span>: $scope.<span class="property">user</span>,</span><br><span class="line">    <span class="attr">terminal</span>: umif.<span class="title function_">get</span>(<span class="string">&#x27;Terminal&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>()</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>()</span><br><span class="line">    <span class="keyword">return</span> imanDialog.<span class="title function_">showPopup</span>(&#123; <span class="attr">type</span>: <span class="number">1</span>, <span class="attr">scope</span>: $scope &#125;) </span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="async-x2F-await-异步函数"><a href="#async-x2F-await-异步函数" class="headerlink" title="async&#x2F;await 异步函数"></a>async&#x2F;await 异步函数</h2><blockquote>
<p>一个用同步思维解决异步问题的方案，代码简洁而且更符合编写习惯。async 声明会返回一个 promise 对象的异步函数，await 表示等待后面的异步函数返回结果之后再执行并且只能用于 async 函数内部。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">getDistributionPlan</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> app = req.<span class="property">body</span>.<span class="property">app</span></span><br><span class="line">    <span class="keyword">let</span> user = req.<span class="property">body</span>.<span class="property">user</span></span><br><span class="line">    <span class="keyword">let</span> terminal = req.<span class="property">body</span>.<span class="property">terminal</span></span><br><span class="line">    <span class="keyword">let</span> newErr = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">        newErr.<span class="property">leval</span> = <span class="number">9</span>;</span><br><span class="line">        newErr.<span class="property">title</span> = <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">centerBizLogMsg</span>(app, user, terminal, <span class="string">&#x27;getDistributionPlan&#x27;</span>, req.<span class="property">body</span>)</span><br><span class="line">        <span class="keyword">let</span> userGroups = <span class="keyword">await</span> entityFun.<span class="title function_">find</span>(<span class="string">&#x27;ShiftGroupUser&#x27;</span>, &#123;</span><br><span class="line">            <span class="title class_">Person</span>: user.<span class="property">_id</span>,</span><br><span class="line">            <span class="string">&#x27;Department.IsShift&#x27;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> departments = userGroups.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">Department</span>.<span class="title function_">toString</span>())</span><br><span class="line">        <span class="keyword">let</span> distributionPlanList = <span class="keyword">await</span> entityFun.<span class="title function_">find</span>(<span class="string">&#x27;DistributionPlan&#x27;</span>, &#123;</span><br><span class="line">            <span class="title class_">DistShiftGroup</span>: &#123; <span class="attr">$in</span>: departments &#125;,</span><br><span class="line">            <span class="attr">$where</span>: <span class="string">&quot;this.DistQty &gt; this.TotalDistQty&quot;</span></span><br><span class="line">            <span class="title class_">Status</span>: <span class="title class_">LogisticsEnum</span>.<span class="property">DistributionPlanStatus</span>.<span class="property">Confirmed</span>.<span class="property">Value</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="title class_">DistributionTime</span>: <span class="number">1</span></span><br><span class="line">        &#125;, [</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;ItemMaster&#x27;</span>, <span class="attr">model</span>: <span class="string">&#x27;ItemMaster&#x27;</span>, <span class="attr">select</span>: <span class="string">&#x27;Name Code&#x27;</span> &#125;</span><br><span class="line">        ])</span><br><span class="line">        <span class="keyword">if</span> (distributionPlanList.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            newErr.<span class="property">message</span> = <span class="string">&#x27;未找到配送计划！&#x27;</span>;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: <span class="literal">null</span>, <span class="title class_">Error</span>: newErr &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: distributionPlanList, <span class="title class_">Error</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        newErr.<span class="property">message</span> = error.<span class="property">message</span>;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123; <span class="title class_">Data</span>: <span class="literal">null</span>, <span class="title class_">Error</span>: newErr &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="五、设计模式"><a href="#五、设计模式" class="headerlink" title="五、设计模式"></a>五、设计模式</h1><blockquote>
<p>设计模式是对软件设计开发过程中反复出现的某类问题的通用解决方案，更多的是指导思想和方法论，而不是现成的代码，目的是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</p>
</blockquote>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>仅允许类或对象具有单个实例，并且它使用全局变量来存储该实例。<strong>实现方法</strong>是判断是否存在该对象的实例，如果已存在则不再创建。<strong>使用场景</strong>适用于业务场景中只能存在一个的实例，比如弹窗、购物车。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 懒汉式：类加载时不创建实例，所以类加载速度快，但运行时获取对象的速度慢。</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ShopCar</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 定义单例代码</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            buy (good) &#123; <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">push</span>(good) &#125;,</span><br><span class="line">            <span class="attr">goods</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getInstance</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!instance) &#123; instance = <span class="title function_">init</span>() &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉式：类加载时完成了初始化，所以类加载较慢，但获取对象的速度快。</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ShopCar</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            buy (good) &#123; <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="title function_">push</span>(good) &#125;,</span><br><span class="line">            <span class="attr">goods</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getInstance</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car1 = <span class="title class_">ShopCar</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">let</span> car2 = <span class="title class_">ShopCar</span>.<span class="title function_">getInstance</span>();</span><br><span class="line">car1.<span class="title function_">buy</span>(<span class="string">&#x27;橘子&#x27;</span>);</span><br><span class="line">car2.<span class="title function_">buy</span>(<span class="string">&#x27;苹果&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1.<span class="property">goods</span>);     <span class="comment">// [ &#x27;橘子&#x27;, &#x27;苹果&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car1 === car2);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote>
<p>定义一系列的算法，将每一个算法封装并让它们可以相互替换。<strong>实现方法</strong>是定义一组可变的策略类封装具体算法，定义一组不变的环境类将请求委托给某一个策略类。<strong>使用场景</strong>适用于业务场景中需要判断多种条件，甚至包含复杂条件嵌套的，可以使用策略模式来提升代码的可维护性和可读性。比如支付、博客权限校验。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义几个策略类</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">PaymentMethodStrategy</span> = &#123;</span><br><span class="line">    <span class="title class_">BankAccount</span>: <span class="keyword">function</span> (<span class="params">money</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> money &gt; <span class="number">50</span> ? money * <span class="number">0.7</span> : money;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">CreditCard</span>: <span class="keyword">function</span> (<span class="params">money</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> money * <span class="number">0.8</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Alipay</span>: <span class="keyword">function</span> (<span class="params">money</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="keyword">var</span> userPay = <span class="keyword">function</span> (<span class="params">selectedStrategy, money</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">PaymentMethodStrategy</span>[selectedStrategy](money);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;银行卡支付：&#x27;</span> + <span class="title function_">userPay</span>(<span class="string">&#x27;BankAccount&#x27;</span>, <span class="number">100</span>)); <span class="comment">// 70</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;支付宝支付：&#x27;</span> + <span class="title function_">userPay</span>(<span class="string">&#x27;Alipay&#x27;</span>, <span class="number">100</span>));      <span class="comment">// 100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;信用卡支付：&#x27;</span> + <span class="title function_">userPay</span>(<span class="string">&#x27;CreditCard&#x27;</span>, <span class="number">100</span>));  <span class="comment">// 80</span></span><br></pre></td></tr></table></figure>


<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote>
<p>即订阅-发布模式，是对象的行为模式，在对象之间定义了一个被观察者对多个观察者的依赖关系，当被观察者发生变化时会通知所有的观察者对象做出对应操作。<strong>使用场景</strong>适用于业务场景中当一个对象的状态发生变化时，需要自动通知其它关联对象并自动更新状态或执行方法。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个群来保存通知，通知变化之后通知每个家长：被观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;暂无通知&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parents</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setMassage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = message;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">notifyAllObservers</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notifyAllObservers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parents</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">parent</span>) =&gt;</span> &#123;</span><br><span class="line">            parent.<span class="title function_">update</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">attach</span>(<span class="params">parent</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parents</span>.<span class="title function_">push</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 观察者：每个家长</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, group</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">group</span> = group;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">group</span>.<span class="title function_">attach</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 收到通知: <span class="subst">$&#123;<span class="variable language_">this</span>.group.getMessage()&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> group = <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line"><span class="keyword">let</span> t1 = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;李妈妈&#x27;</span>, group);</span><br><span class="line"><span class="keyword">let</span> t2 = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;王爸爸&#x27;</span>, group);</span><br><span class="line"><span class="keyword">let</span> t3 = <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&#x27;张爷爷&#x27;</span>, group);</span><br><span class="line">group.<span class="title function_">setMassage</span>(<span class="string">&#x27;开家长会&#x27;</span>);</span><br><span class="line">group.<span class="title function_">setMassage</span>(<span class="string">&#x27;开运动会&#x27;</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  李妈妈 收到通知: 开家长会</span></span><br><span class="line"><span class="comment">  王爸爸 收到通知: 开家长会</span></span><br><span class="line"><span class="comment">  张爷爷 收到通知: 开家长会</span></span><br><span class="line"><span class="comment">  李妈妈 收到通知: 开运动会</span></span><br><span class="line"><span class="comment">  王爸爸 收到通知: 开运动会</span></span><br><span class="line"><span class="comment">  张爷爷 收到通知: 开运动会</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><blockquote>
<p>不改变原代码的同时增加额外功能。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Man</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跑步&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Decorator</span> = <span class="keyword">function</span> (<span class="params">old</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">oldAbility</span> = old.<span class="property">run</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fly</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;具备飞行能力&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newAbility</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">oldAbility</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">fly</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"><span class="keyword">const</span> superMan = <span class="keyword">new</span> <span class="title class_">Decorator</span>(man);</span><br><span class="line">superMan.<span class="title function_">fly</span>();     <span class="comment">// 具备飞行能力</span></span><br></pre></td></tr></table></figure>


<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>给某个对象提供一个代理对象，并由代理对象控制对原对象的引用，即中介。<strong>实现方法</strong>是定义一个委托者和一个代理，需要委托的事情在代理中完成。<strong>使用场景</strong>是有时需要代理对象帮助过滤掉一些请求或者开销大的对象。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Letter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暗恋人小明</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">XiaoMing</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="title function_">sendLetter</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        target.<span class="title function_">receiveLetter</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 代理小华</span></span><br><span class="line"><span class="keyword">let</span> xiaoHua = &#123;</span><br><span class="line">    <span class="title function_">receiveLetter</span>(<span class="params">customer</span>) &#123;</span><br><span class="line">        <span class="title class_">XiaoHong</span>.<span class="title function_">listenGoodMood</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">XiaoHong</span>.<span class="title function_">receiveLetter</span>(<span class="keyword">new</span> <span class="title class_">Letter</span>(customer + <span class="string">&#x27;的情书&#x27;</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 心仪对象小红</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">XiaoHong</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">    <span class="title function_">receiveLetter</span>(<span class="params">letter</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;收到：&#x27;</span> + letter.<span class="property">name</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">listenGoodMood</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>();</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">XiaoMing</span>.<span class="title function_">sendLetter</span>(xiaoHua);  <span class="comment">// 小红收到：小明的情书</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复议后新分数比以前大 10 分才有权利去更新成绩</span></span><br><span class="line"><span class="keyword">const</span> scoreList = &#123;</span><br><span class="line">    <span class="string">&#x27;wang&#x27;</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">&#x27;li&#x27;</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">&#x27;wu&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> yyProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(scoreList, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">scoreList, name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scoreList[name] &gt; <span class="number">69</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输出成绩&#x27;</span>) <span class="keyword">return</span> scoreList[name]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不及格的成绩无法公示&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">scoreList, name, val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val - scoreList[name] &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改成绩&#x27;</span>) scoreList[name] = val</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;无法修改成绩&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br><span class="line">yyProxy[<span class="string">&#x27;wang&#x27;</span>] = <span class="number">98</span>   <span class="comment">// 无法修改成绩</span></span><br><span class="line">yyProxy[<span class="string">&quot;li&quot;</span>] = <span class="number">80</span>     <span class="comment">// 修改成绩</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现页面的通信和交互</title>
    <url>/2019/05/28/4-5-js%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h1 id="一、网络通信"><a href="#一、网络通信" class="headerlink" title="一、网络通信"></a>一、网络通信</h1><h2 id="OSI-网络模型"><a href="#OSI-网络模型" class="headerlink" title="OSI 网络模型"></a>OSI 网络模型</h2><blockquote>
<p>IP 协议对应于网络层，TCP&#x2F;UDP 协议对应于传输层，HTTP 协议对应于应用层，注意 OSI 并不包含 Socket。</p>
</blockquote>
  <div align="center">
      <img src="/images/web/network.png" alt="网络模型" width="100%">
  </div>


<h2 id="TCP、UDP-协议"><a href="#TCP、UDP-协议" class="headerlink" title="TCP、UDP 协议"></a>TCP、UDP 协议</h2><blockquote>
<p>TCP 是面向链接的，虽然说网络的不安全不稳定特性决定了多少次握手都不能保证连接的可靠性，但 TCP 的三次握手在最低限度上保证了连接的可靠性。UDP 则是无连接的、不可靠的一种数据传输协议，UDP 传送数据前并不与对方建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收而且也不会重发，但是数据传输效率和实时性更好。　 </p>
</blockquote>
  <div align="center">
      <img src="/images/web/tcp.png" alt="TCP 连接" width="100%">
  </div>

<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><blockquote>
<p>基于 TCP&#x2F;IP 协议的一个超文本传输协议，用于定义客户端与服务器通信的格式，具有单向请求、无状态等特点。WEB 使用 HTTP 协议作为应用层协议来封装 HTTP 文本信息，然后使用 TCP&#x2F;IP 做传输层协议将它发到网络上。我们在传输数据时可以只使用 TCP&#x2F;IP 协议，但是那样会没有应用层而导致无法识别数据内容，如果想要使传输的数据有意义则必须使用应用层协议。</p>
</blockquote>
<ul>
<li><strong>HTTP 请求流程</strong><div align="center">
  <img src="/images/web/http_req.png" alt="HTTP 请求流程" width="100%">
</div></li>
<li><strong>域名解析过程</strong><div align="center">
  <img src="/images/web/domain.png" alt="域名解析过程" width="100%">
</div></li>
<li><strong>HTTP 报文</strong>：HTTP 通信的传输单位，可分为请求报文和响应报文，内部结构如下：<ul>
<li>请求行：用于说明请求方法、请求地址、http 版本号。</li>
<li>响应行：用于说明服务器 http 版本号、响应状态码、状态码的原因短句。</li>
<li>头部字段：分为 通用首部字段、请求首部字段、响应首部字段、实体首部字段。</li>
<li>实体部分：可以用实体首部字段加以说明，content-type 说明实体内容的类型。</li>
</ul>
</li>
<li>操作方式<ul>
<li>浏览器的 url 地址栏。 </li>
<li>XMLHttpRequest 对象。</li>
<li>页面有 src 属性的标签（img、script、link 等）。</li>
<li>带有 action 属性的 form 表单。</li>
</ul>
</li>
<li>连接方式：实际上是 TCP 协议的长&#x2F;短连接，区别在于数据传输后是否立即关闭连接。<ul>
<li><strong>短连接</strong>：HTTP1.0 默认方式。每次 HTTP 操作则建立一次连接，任务结束就立即关闭。常用于并发量大但用户无需频繁操作的场景，比如浏览器网址的 http 服务。</li>
<li><strong>长连接</strong>：HTTP1.1 默认方式。任务结束后不会立即关闭连接，再次请求时继续使用。HTTP 响应头添加 <code>Connection: keep-alive</code>，可以在服务器设定连接时间。</li>
</ul>
</li>
</ul>
<h2 id="Socket-编程接口"><a href="#Socket-编程接口" class="headerlink" title="Socket 编程接口"></a>Socket 编程接口</h2><blockquote>
<p>TCP&#x2F;IP 只是一个协议栈，和操作系统的运行机制一样必须要具体实现并提供对外的操作接口。操作系统会提供标准的 Win32 等编程接口，TCP&#x2F;IP 也必须对外提供编程接口，这就是 Socket。Socket 的出现只是可以更方便的使用 TCP&#x2F;IP 协议栈而已，它对 TCP&#x2F;IP 进行了抽象并封装了一些基础的函数接口：create、listen、accept、connect、read、write。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不同语言都有对应的建立 Socket 服务端和客户端的库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Nodejs 服务端</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = net.<span class="title function_">createServer</span>();</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    client.<span class="title function_">write</span>(<span class="string">&#x27;Hi!\n&#x27;</span>);    <span class="comment">// 服务端向客户端输出信息，使用 write()</span></span><br><span class="line">    client.<span class="title function_">write</span>(<span class="string">&#x27;Bye!\n&#x27;</span>);</span><br><span class="line">    <span class="comment">//client.end();           // 服务端结束该次会话</span></span><br><span class="line">&#125;);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nodejs 客户端</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> net.<span class="title class_">Socket</span>();</span><br><span class="line">client.<span class="title function_">connect</span>(<span class="number">9000</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, chunk.<span class="title function_">toString</span>())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket 长连接：在一个 TCP 连接上连续发送多个数据包，可通过计时器实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket 连接池：维护着一定数量 Socket 长连接的集合。它能自动检测 Socket</span></span><br><span class="line"><span class="comment">// 长连接的有效性，剔除无效的连接并补充连接池中长连接的数量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Nodejs Socket 连接池 generic-pool 模块的源码</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> genericPool = <span class="built_in">require</span>(<span class="string">&#x27;generic-pool&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPool</span>(<span class="params">conifg</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;</span><br><span class="line">        <span class="attr">fifo</span>: <span class="literal">true</span>,                          <span class="comment">// 是否优先使用老的资源</span></span><br><span class="line">        <span class="attr">priorityRange</span>: <span class="number">1</span>,                    <span class="comment">// 优先级</span></span><br><span class="line">        <span class="attr">testOnBorrow</span>: <span class="literal">true</span>,                  <span class="comment">// 是否开启获取验证</span></span><br><span class="line">        <span class="comment">// acquireTimeoutMillis: 10 * 1000,  // 获取的超时时间</span></span><br><span class="line">        <span class="attr">autostart</span>: <span class="literal">true</span>,                     <span class="comment">// 自动初始化和释放调度启用</span></span><br><span class="line">        <span class="attr">min</span>: <span class="number">10</span>,                             <span class="comment">// 连接池保持的长连接最小数量</span></span><br><span class="line">        <span class="attr">max</span>: <span class="number">0</span>,                              <span class="comment">// 最大连接池保持的长连接数量</span></span><br><span class="line">        <span class="attr">evictionRunIntervalMillis</span>: <span class="number">0</span>,        <span class="comment">// 资源释放检验间隔检查</span></span><br><span class="line">        <span class="attr">numTestsPerEvictionRun</span>: <span class="number">3</span>,           <span class="comment">// 每次释放资源数量</span></span><br><span class="line">        <span class="attr">softIdleTimeoutMillis</span>: -<span class="number">1</span>,           <span class="comment">// 可用的&gt;min 且空闲时间时释放</span></span><br><span class="line">        <span class="attr">idleTimeoutMillis</span>: <span class="number">30000</span>             <span class="comment">// 强制释放</span></span><br><span class="line">        <span class="comment">// maxWaitingClients: 50             // 最大等待</span></span><br><span class="line">    &#125;, conifg.<span class="property">options</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> factory = &#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="attr">create</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> socket = <span class="keyword">new</span> net.<span class="title class_">Socket</span>();</span><br><span class="line">                socket.<span class="title function_">setKeepAlive</span>(<span class="literal">true</span>);</span><br><span class="line">                socket.<span class="title function_">connect</span>(conifg.<span class="property">port</span>, conifg.<span class="property">host</span>);</span><br><span class="line">                <span class="comment">// TODO 心跳包的处理逻辑</span></span><br><span class="line">                socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(socket);</span><br><span class="line">                &#125;);</span><br><span class="line">                socket.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="comment">// 先 end 再 close</span></span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">                socket.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 销毁连接</span></span><br><span class="line">        <span class="attr">destroy</span>: <span class="keyword">function</span> (<span class="params">socket</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 不会触发 end， 第一次会触发 close，有 message 则触发 error</span></span><br><span class="line">                socket.<span class="title function_">destroy</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 获取资源池校验资源有效性</span></span><br><span class="line">        <span class="attr">validate</span>: <span class="keyword">function</span> (<span class="params">socket</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket.<span class="property">destroyed</span> || !socket.<span class="property">readable</span> || !socket.<span class="property">writable</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> pool = genericPool.<span class="title function_">createPool</span>(factory, options);</span><br><span class="line">    pool.<span class="title function_">on</span>(<span class="string">&#x27;factoryCreateError&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;   <span class="comment">// 监听新建长连接出错则返回错误</span></span><br><span class="line">        <span class="keyword">const</span> clientResourceRequest = pool.<span class="property">_waitingClientsQueue</span>.<span class="title function_">dequeue</span>();</span><br><span class="line">        <span class="keyword">if</span> (clientResourceRequest) &#123;</span><br><span class="line">            clientResourceRequest.<span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="二、Ajax-请求"><a href="#二、Ajax-请求" class="headerlink" title="二、Ajax 请求"></a>二、Ajax 请求</h1><blockquote>
<p>异步网络请求，在页面不跳转不刷新的情况下实现局部加载，减少了数据传输量。</p>
</blockquote>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><div style="text-indent: 2em">在用户和服务器之间加了―个中间层 (Ajax 引擎)，通过 XmlHttpRequest 对象来向服务器发异步请求并获取数据，然后通过 js 操作 DOM 而更新页面，这样就让用户操作与服务器响应实现了异步化，从而 js 可以及时向服务器提出请求和处理响应而不阻塞用户，达到无刷新的效果。注意如果出现乱码问题就是因为编码格式冲突，发送中文数据时通过 encodeURI() 编码，接收中文数据时通过 decodeURI() 解码即可。</div>

<ul>
<li><strong>优点</strong><ul>
<li>使用异步方式与服务器通信，响应速度更快。</li>
<li>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</li>
<li>页面无刷新，在页面内与服务器通信，减少用户等待时间，增强了用户体验。</li>
<li>可以把一些原本服务器的工作转接到客户端，利用客户端闲置的能力来处理，减轻了服务器和带宽的负担，节约空间和宽带租用成本。</li>
</ul>
</li>
<li><strong>缺点</strong><ul>
<li>对搜索引擎的支持比较弱。</li>
<li>可能会影响程序中的异常处理机制。</li>
<li>无法进行操作的后退，即不支持浏览器的页面后退。</li>
<li>安全问题，对一些网站攻击，比如 csrf、xxs、sql 注入等不能很好地防御。</li>
</ul>
</li>
</ul>
<h2 id="重点注意"><a href="#重点注意" class="headerlink" title="重点注意"></a>重点注意</h2><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ol>
<li><strong>区别</strong><br>* method：<code>GET、POST</code>。<br>* 请求头：POST 发送数据时必须设置。<br>* 安全性：GET 请求时暴露参数数据，安全性较低。<br>* 长度限制：GET 有长度限制，不适合发送大量数据。<br>* 请求缓存：GET 请求可以被缓存和保存，而 POST 请求不能。<br>* 参数位置：<code>url?参数=值&amp;参数=值、xhr.send(&quot;参数=值&amp;参数=值&quot;)</code>。</li>
<li><strong>场景</strong><br>* GET：安全性要求不高时，从服务器获取数据。<br>* POST：对于大量数据、密码数据等，提交到服务器处理。</li>
</ol>
<h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ol>
<li><strong>JSON</strong>：处理大量数据的规范格式。<br>* 对象转字符串：<code>JSON.stringify(json_obj)</code><br>* 字符串转对象：<code>JSON.parse(json_str) / eval(&#39;(&#39;+json_str+&#39;)&#39;)</code><br>* eval：不推荐使用，因为它会把 js 数据而不只是 json_str 都转为 json 对象。</li>
<li><strong>FormData</strong>：处理包括图片和文件的表单数据并通过 post 方式发送到服务端。</li>
</ol>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1、实例一个空 FormData 对象之后 append 键值对</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>() </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;file&quot;</span>).<span class="property">files</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file)</span></span><br><span class="line"><span class="language-javascript">                              </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2、form元素对象 作为参数传入  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);                          </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3、getFormData 方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> formobj =  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> formdata = formobj.<span class="title function_">getFormData</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 其它 API：has、getAll、forEach</span></span></span><br><span class="line"><span class="language-javascript">    formdata.<span class="title function_">delete</span>(<span class="string">&quot;file&quot;</span>)   </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> file = formdata.<span class="title function_">get</span>(<span class="string">&quot;file&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>       </span><br></pre></td></tr></table></figure>


<h3 id="请求体类型"><a href="#请求体类型" class="headerlink" title="请求体类型"></a>请求体类型</h3><blockquote>
<p>ContentType，告诉服务器发送数据的格式</p>
</blockquote>
<ul>
<li><code>application/x-www-form-urlencoded</code>：jquery ajax 默认，查询字符串格式。</li>
<li><code>multipart/form-data</code>：常用于表单上传文件，设置 form enctype 为该类型。</li>
<li><code>application/json</code>：axios 默认类型，使用 json 格式的数据。</li>
</ul>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="原生写法"><a href="#原生写法" class="headerlink" title="原生写法"></a>原生写法</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建 XMLHttpRequest 对象：用来和服务器交换数据的 js 内置对象</span></span><br><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">XMLHttpRequest</span>)&#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();   <span class="comment">// w3c 标准</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>)  <span class="comment">// IE6、IE5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、连接服务器和发送请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GET </span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url?参数=值, <span class="literal">true</span>);   <span class="comment">// true 表示请求异步处理</span></span><br><span class="line">xhr.<span class="title function_">send</span>();    </span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 必须设置请求头</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, url, <span class="literal">true</span>);   </span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;参数=值&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、监听回调函数状态和处理响应数据</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 判断响应是否接收完成、服务器是否成功处理请求</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> ==<span class="number">200</span>)&#123;</span><br><span class="line">        show.<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Ajax-封装"><a href="#Ajax-封装" class="headerlink" title="Ajax 封装"></a>Ajax 封装</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestUrl</span>(<span class="params">url, type, data, callback, error, <span class="keyword">async</span></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = (<span class="keyword">async</span> == <span class="literal">null</span> || </span><br><span class="line">                <span class="keyword">async</span>.<span class="title function_">toString</span>() == <span class="string">&quot;&quot;</span> || </span><br><span class="line">                <span class="title function_">typeof</span>(<span class="keyword">async</span>) == <span class="string">&quot;undefined&quot;</span>) ? <span class="literal">true</span> : !!<span class="keyword">async</span>;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">method</span>: type,</span><br><span class="line">        <span class="attr">async</span>: <span class="keyword">async</span>,</span><br><span class="line">        <span class="attr">data</span>: data</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_data.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(_data.<span class="property">data</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">typeof</span>(error) == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">error</span>(_data)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(_data.<span class="property">data</span>.<span class="property">errMsg</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params"> jqXHR, textStatus </span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">requestUrl</span>(url, type, data, callback, error, <span class="keyword">async</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="JQuery-写法"><a href="#JQuery-写法" class="headerlink" title="JQuery 写法"></a>JQuery 写法</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url?参数=值, calback)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">post</span>(url, &#123;参数：值&#125;, callback)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:       <span class="comment">// 数据的提交方式：get、post</span></span><br><span class="line">    <span class="attr">url</span>:        <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="attr">async</span>:      <span class="comment">// 是否支持异步刷新，默认 true</span></span><br><span class="line">    <span class="attr">data</span>:       <span class="comment">// 需要提交的数据</span></span><br><span class="line">    <span class="attr">dataType</span>:   <span class="comment">// 服务器返回数据的类型，html、json, jsonp 等</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123; &#125;  <span class="comment">// 请求成功后的回调函数 </span></span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;&#125;     <span class="comment">// 请求失败后的回调函数 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="Token-令牌"><a href="#Token-令牌" class="headerlink" title="Token 令牌"></a>Token 令牌</h2><blockquote>
<p>遵从 oauth2.0 规范的授权令牌，它是一种身份&#x2F;权限的认证方式。</p>
</blockquote>
<ol>
<li>应用<br>* 客户端登录等首次请求发送时，服务端根据算法和编码方式生成后返回。<br>* 客户端再次发起请求时，服务端验证通过后返回请求数据，否则失败。</li>
<li>优势<br>* 可以避免 CSRF 攻击。<br>* 完全由应用管理，可以避开同源策略。<br>* 可扩展性强(不用存储)，还可用于 APP。<br>* 可以是无状态的，可以在多个服务间共享。</li>
</ol>
<h1 id="三、跨域方案"><a href="#三、跨域方案" class="headerlink" title="三、跨域方案"></a>三、跨域方案</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">浏览器的同源策略：浏览器出于安全方面的考虑而只允许与本域下的接口交互，</span><br><span class="line">不同源的脚本在没有明确授权时不能读写对方资源，这样阻止恶意修改和攻击但</span><br><span class="line">也产生了跨域问题，浏览器可以设置开启跨域但不是一个好方案。</span><br><span class="line"></span><br><span class="line">同源条件：protocol（协议）、domain（域名）、port（端口）三者一致。</span><br><span class="line"></span><br><span class="line">协议      域名              端口  路径    参数            锚点</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//  www.example.com  :80   /home  ?name=a&amp;age=20  #app</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开启跨域模式：通过 <span class="title class_">Chrome</span> <span class="variable constant_">CORS</span> 插件或手动设置，但这种方式不建议使用。</span><br><span class="line"></span><br><span class="line">浏览器跨域原因：浏览器端允许打开多个页面，但页面之间的需要统一规范来约定，</span><br><span class="line">跨域规范就是通过限制不同源的请求、限制 dom 操作而实现安全性。</span><br></pre></td></tr></table></figure>

<h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><blockquote>
<p>一个 W3C 标准&#x2F;机制，Web 应用使用自定义 HTTP 头部告诉浏览器向跨域服务器发起 HTTP 请求，注意低版本浏览器不支持。</p>
</blockquote>
<ul>
<li><strong>简单请求</strong>：不会触发 CORS 预检请求。条件如下：<ul>
<li>请求方法：GET&#x2F;HEAD&#x2F;POST。</li>
<li>人为设置以下之外的请求头：Accept、Accept-Language、Content-Language、Content-Type、DPR、Downlink、Save-Data、Viewport-Width、Width。</li>
<li>Content-Type：text&#x2F;plain、multipart&#x2F;form-data、application&#x2F;x-www-form-urlencoded。</li>
<li>请求中的对象 XMLHttpRequest.upload 没有注册任何事件监听器。</li>
<li>请求中没有使用 ReadableStream 对象。</li>
</ul>
</li>
<li><strong>非简单请求</strong>：除以上情况之外。</li>
<li><strong>Node 解决方案</strong></li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/corslist&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非简单请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/corslist&quot;</span>, &#123; <span class="attr">header</span>: &#123; <span class="attr">cc</span>: <span class="string">&quot;xxx&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node 原生方式</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, ctx.<span class="property">headers</span>.<span class="property">origin</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Request-Method&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept, cc&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">method</span> === <span class="string">&quot;OPTIONS&quot;</span>) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">204</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Node 第三方中间件</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;koa-cors&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br></pre></td></tr></table></figure>


<h2 id="Node-正向代理"><a href="#Node-正向代理" class="headerlink" title="Node 正向代理"></a>Node 正向代理</h2><blockquote>
<p>利用服务端请求不会跨域的特性，让接口和当前站点同域。</p>
</blockquote>
<h3 id="cli-工具"><a href="#cli-工具" class="headerlink" title="cli 工具"></a>cli 工具</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端请求：浏览器跨域请求默认不传递 cookie，可设置 withCredentials</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;/api/corslist&quot;</span>)</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/api/login&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="comment">// Webpack 4.x</span></span><br><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123; <span class="attr">target</span>: <span class="string">&quot;http://localhost:8080&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Vue-cli：版本 2.x 使用 proxyTable，版本 3.0 使用 proxy</span></span><br><span class="line"><span class="comment">// 配置一个代理</span></span><br><span class="line"><span class="comment">// proxy: &#x27;http://localhost:8000&#x27;  </span></span><br><span class="line"><span class="comment">// 配置多个代理：</span></span><br><span class="line"><span class="attr">proxy</span>: &#123;                             </span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;     <span class="comment">// 请求地址</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://172.16.12:70&quot;</span>,  <span class="comment">// 实际映射的目标地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,             <span class="comment">// 是否跨域</span></span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,                       <span class="comment">// websocket 支持</span></span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,                  <span class="comment">// https 需开启</span></span><br><span class="line">        <span class="attr">pathRewrite</span>:&#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;     <span class="comment">// 重定向</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Parcel (2.x)</span></span><br><span class="line">.<span class="property">proxyrc</span>&#123;  </span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;  <span class="string">&quot;target&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cors-anywhere"><a href="#cors-anywhere" class="headerlink" title="cors-anywhere"></a>cors-anywhere</h3><blockquote>
<p>CORS 标头被添加到代理请求的 NodeJS 代理库，无法专递 cookie 而可能因为不太安全。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端请求</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:7777/http://127.0.0.1:8080/api/corslist&quot;</span>)</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://127.0.0.1:7777/http://127.0.0.1:8080/api/login&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">var</span> host = process.<span class="property">env</span>.<span class="property">HOST</span> || <span class="string">&quot;0.0.0.0&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">7777</span>;</span><br><span class="line"><span class="keyword">var</span> cors_proxy = <span class="built_in">require</span>(<span class="string">&quot;cors-anywhere&quot;</span>);</span><br><span class="line">cors_proxy</span><br><span class="line">.<span class="title function_">createServer</span>(&#123;    </span><br><span class="line">    <span class="attr">originWhitelist</span>: [],</span><br><span class="line">    <span class="attr">requireHeader</span>: [<span class="string">&quot;origin&quot;</span>, <span class="string">&quot;x-requested-with&quot;</span>],    </span><br><span class="line">    <span class="attr">removeHeaders</span>: [<span class="string">&quot;cookie&quot;</span>, <span class="string">&quot;cookie2&quot;</span>]  </span><br><span class="line">&#125;)  </span><br><span class="line">.<span class="title function_">listen</span>(port, host, <span class="keyword">function</span>(<span class="params"></span>) &#123;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Running CORS Anywhere on &quot;</span> + host + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h3><blockquote>
<p>一个测试、开发的神器，本质是请求的拦截与代理，代码。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端请求</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;/api/corslist&quot;</span>)</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/api/login&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/api/corslist&quot;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = &#123; <span class="attr">data</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;闯哥的笔记&quot;</span> &#125;] &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&quot;/api/login&quot;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>, token, &#123; <span class="attr">expires</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;)</span><br><span class="line">    ctx.<span class="property">body</span> = &#123;  <span class="attr">msg</span>: <span class="string">&quot;成功&quot;</span>, <span class="attr">code</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen      <span class="number">80</span>;         <span class="comment">// 监听端口</span></span><br><span class="line">    server_name <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;  <span class="comment">// 监听地址</span></span><br><span class="line">    location /api &#123;         <span class="comment">// 重定向地址</span></span><br><span class="line">        proxy_pass <span class="attr">http</span>:<span class="comment">//localhost:8080;</span></span><br><span class="line">    &#125;        </span><br><span class="line">    location / &#123;            <span class="comment">// 根目录地址    </span></span><br><span class="line">        proxy_pass <span class="attr">http</span>:<span class="comment">//localhost:8000;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动、重启命令</span></span><br><span class="line">sudo nginx</span><br><span class="line">sudo nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前后端代码同上 charles</span></span><br></pre></td></tr></table></figure>


<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><blockquote>
<p>利用 script 标签没有跨域限制的特性来实现跨域读取数据等，是一种非强制性协议而非新技术，也和 json、ajax 没有关系。</p>
</blockquote>
<ol>
<li>定义数据处理函数：<code>var handler = function(data)&#123; &#125;</code>。</li>
<li>创建 script 标签，src 的地址设置为 <code>url?callback=handler</code>。</li>
<li>服务端在收到请求后，解析参数并返回数据，输出 fun(data) 字符串。</li>
<li>fun(data) 会放到 script 标签中作为 js 执行，即此时会调用函数。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端实现</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">path</span> === <span class="string">&quot;/api/jsonp&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; cb, msg &#125; = ctx.<span class="property">query</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = <span class="string">`<span class="subst">$&#123;cb&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(&#123; msg &#125;)&#125;</span>)`</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通 js</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">handler</span> = <span class="keyword">function</span>(<span class="params">res</span>) &#123;  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/api/jsonp?msg=hello&amp;callback=handler&quot;</span>  </span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery Ajax</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/api/jsonp&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;  <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span> &#125;,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&quot;callback&quot;</span>,         <span class="comment">// 回调参数 </span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&quot;handler&quot;</span>   <span class="comment">// jsonp 自定义回调函数  </span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><blockquote>
<p>规范定义了一种客户端和服务器之间存在持久连接的**全双工通信协议(又称双向通信)**，它没有跨域的限制但和 HTTP 都是基于 TCP 协议的应用层协议，两者有良好的兼容性但没有联系。它能更好地节省服务器资源和带宽并可以实现实时通讯。</p>
</blockquote>
<h3 id="实时通信"><a href="#实时通信" class="headerlink" title="实时通信"></a>实时通信</h3><ul>
<li><strong>Ajax 轮询</strong><ul>
<li>原理：客户端设置 计时器，每隔一段时间就向服务器发送一次请求。</li>
<li>缺点：只能由客户端发起请求，而且需要服务器有很快的 资源处理速度。</li>
</ul>
</li>
<li><strong>http 长轮询</strong><ul>
<li>原理：客户端发起请求建立连接后，服务器等到有内容更新时才响应。</li>
<li>缺点：采用阻塞模型，占用的资源空间更多而需要服务器有很高的并发处理能力。</li>
</ul>
<p>  </p>
</li>
<li><strong>WebSocket</strong>：只需要通过一个握手即可实现客户端与服务端通信，不需要询问和等待。</li>
</ul>
<h3 id="连接过程"><a href="#连接过程" class="headerlink" title="连接过程"></a>连接过程</h3><blockquote>
<p>WebSocket 在建立握手时传输数据通过 HTTP，但建立后传输时不需要 HTTP。Socket 则是应用层与 TCP&#x2F;IP 通信的中间软件抽象层，本质一组接口而并非一个协议。</p>
</blockquote>
<ol>
<li>浏览器、服务器通过 TCP 三次握手建立连接 (通信基础)。</li>
<li>浏览器通过向服务器发起一个包含 WebSocket 支持版本号等附加头信息的 HTTP 请求。</li>
<li>服务器同样采用 HTTP 协议返回应答信息。</li>
<li>当收到连接成功的信息后通过 TCP 通道进行传输通信。</li>
<li>客户端&#x2F;服务器端 关闭连接前可以自由传输数据。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端：(&#x27;WebSocket&#x27; in window) 可判断是否支持</span></span><br><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://10.148.221.210:5000&#x27;</span>)  </span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 0、1、2、3 ：正在连接、连接成功、连接正在关闭、连接失败或已关闭</span></span><br><span class="line">    <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="string">&quot;connect success&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">msg</span>)&#123; &#125;</span><br><span class="line">ws.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;)</span><br><span class="line">ws.<span class="title function_">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="keyword">function</span>(<span class="params">socket</span>) &#123;</span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        socket.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h2><blockquote>
<p>采用异步方式支持跨域通信的 HTML5 API，主要功能有：页面和其打开的新窗口的数据传递、多窗口之间消息传递、页面与嵌套的 iframe 消息传递。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;load()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;笔记&quot;</span>, <span class="string">&quot;http://localhost:8080&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">another.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);   <span class="comment">// 笔记</span></span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">source</span>.<span class="title function_">postMessage</span>(e.<span class="property">data</span>, e.<span class="property">origin</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="document-domain-Iframe"><a href="#document-domain-Iframe" class="headerlink" title="document.domain + Iframe"></a>document.domain + Iframe</h2><blockquote>
<p>该方式只能用于二级域名相同的情况下，比如 a.test.com、b.test.com。只需要给页面添加 document.domain &#x3D;’test.com’ 表示二级域名都相同就可以实现跨域。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">www.   baidu.  com     .</span><br><span class="line">三级域  二级域   顶级域   根域</span><br><span class="line"></span><br><span class="line">// a.test.com</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://b.test.com/b.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;load()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&quot;test.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(frame.<span class="property">contentWindow</span>.<span class="property">a</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// b.test.com</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&quot;test.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="window-location-hash-Iframe"><a href="#window-location-hash-Iframe" class="headerlink" title="window.location.hash + Iframe"></a>window.location.hash + Iframe</h2><blockquote>
<p>通过一个非跨域的中间页面来传递 hash 数据：a.html –&gt; c.html –&gt; b.html –&gt; a.html。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/hash/c.html#name1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">b.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">parent</span>.<span class="property">location</span>.<span class="property">hash</span> = location.<span class="property">hash</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">c.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    iframe.<span class="property">src</span> = <span class="string">&quot;http://localhost:8000/hash/b.html#name2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="window-name-Iframe"><a href="#window-name-Iframe" class="headerlink" title="window.name + Iframe"></a>window.name + Iframe</h2><blockquote>
<p>window.location 变化后重新加载，window.name 属性可以保持不变。具体实现：通过 iframe src 属性由外域转向本地域，跨域数据即由 iframe window.name 从外域传递到本地域。这就安全地绕过了浏览器的跨域访问限制。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/name/c.html&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;load()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> first = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// onload 事件会触发2次，第1次加载跨域页，并留存数据于 window.name</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (first) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span></span><br><span class="line"><span class="language-javascript">            iframe.<span class="property">src</span> = <span class="string">&quot;http://localhost:8000/name/b.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(iframe.<span class="property">contentWindow</span>.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">b.html：中间代理页，与 a.html 同域，内容为空。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">c.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;笔记&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、页面操作"><a href="#四、页面操作" class="headerlink" title="四、页面操作"></a>四、页面操作</h1><h2 id="页面更新"><a href="#页面更新" class="headerlink" title="页面更新"></a>页面更新</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新当前页面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到新页面</span></span><br><span class="line">&lt;a href=<span class="string">&quot;url&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = url</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开新页面</span></span><br><span class="line">&lt;a href=<span class="string">&quot;url&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(url, <span class="string">&quot;_blank&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><blockquote>
<p>浏览器中的文件地址打不开时就会变为下载。注意 ios 页面通过 location.href 指向下载地址后会直接预览，返回时会丢失全局数据而导致页面报错，只能使用 window.open。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 1、location、window.open 下载文件</span></span><br><span class="line"> location.<span class="property">href</span> = <span class="string">&quot;http://baidu.com/?name=a&quot;</span></span><br><span class="line"> <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://baidu.com/&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">file_download</span> (data, fileName) &#123;</span><br><span class="line">     <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">     link.<span class="property">download</span> = fileName</span><br><span class="line">     link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2、通过 Blob 下载文本文件</span></span><br><span class="line">     <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data])</span><br><span class="line">     link.<span class="property">href</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 3、通过 base64 下载任意文件</span></span><br><span class="line">     <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">     <span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">     <span class="keyword">var</span> width = data.<span class="property">width</span>;</span><br><span class="line">     <span class="keyword">var</span> height = data.<span class="property">height</span>;</span><br><span class="line">     context.<span class="title function_">drawImage</span>(data, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">     link.<span class="property">href</span> = context.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">     link.<span class="title function_">click</span>()</span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link)</span><br><span class="line">     <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h2 id="PDF-预览"><a href="#PDF-预览" class="headerlink" title="PDF 预览"></a>PDF 预览</h2><blockquote>
<p>通过标签直接加载的方案都是将 pdf 内容全部下载完成之后才开始渲染，文件较大时需要用户等待很长时间，为了实现高性能的在线预览则需要实现分片加载。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于 PDF.js 库进行深度定制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 1、下载分片：通过服务器获取分片 url 并下载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> loadStatus：保存加载状态 (等待、已下载)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> pages：保存已经下载的分片</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">const</span> loadStatus = &#123; <span class="attr">WAIT</span>: <span class="number">0</span>, <span class="attr">LOADED</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> &#123; startPage, totalPage, url &#125; = <span class="keyword">await</span> <span class="title function_">fetchPdfFragment</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> pages = <span class="title function_">initPages</span>(totalPage);</span><br><span class="line"><span class="keyword">const</span> loadingTask = <span class="variable constant_">PDFJS</span>.<span class="title function_">getDocument</span>(url);</span><br><span class="line">loadingTask.<span class="property">promise</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">pdfDoc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pdfDoc.<span class="property">numPages</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> pageIndex = startPage + i;</span><br><span class="line">        <span class="keyword">const</span> page = pages[pageIndex - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (page.<span class="property">loadStatus</span> !== loadStatus.<span class="property">LOADED</span>) &#123;</span><br><span class="line">            pdfDoc.<span class="title function_">getPage</span>(i + <span class="number">1</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">pdfPage</span>) =&gt;</span> &#123;</span><br><span class="line">                page.<span class="property">pdfPage</span> = pdfPage;</span><br><span class="line">                page.<span class="property">loadStatus</span> = loadStatus.<span class="property">LOADED</span>;</span><br><span class="line">                <span class="title function_">startRenderPages</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initPages</span> (totalPage) &#123;</span><br><span class="line">    <span class="keyword">const</span> pages = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalPage; i += <span class="number">1</span>) &#123;</span><br><span class="line">        pages.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">pageNo</span>: i + <span class="number">1</span>, </span><br><span class="line">            <span class="attr">dom</span>: <span class="literal">null</span>, </span><br><span class="line">            <span class="attr">pdfPage</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">loadStatus</span>: loadStatus.<span class="property">WAIT</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、渲染分片</span></span><br><span class="line"><span class="keyword">const</span> viewport = pdfPage.<span class="title function_">getViewport</span>(&#123; <span class="attr">scale</span>: <span class="number">1</span>, <span class="attr">rotation</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> pageSize = &#123; <span class="attr">width</span>: viewport.<span class="property">width</span>, <span class="attr">height</span>: viewport.<span class="property">height</span> &#125;</span><br><span class="line"><span class="keyword">const</span> contentView = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">contentView.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.pageSize.width&#125;</span>px`</span>;</span><br><span class="line">contentView.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;(totalPage * (pageSize.height + <span class="number">10</span>))&#125;</span>px`</span>;</span><br><span class="line">pdfContainer.<span class="title function_">appendChild</span>(contentView);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 pdf 的页码来将其内容渲染到指定区域</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderPageContent</span> (page) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pdfPage, pageNo, dom &#125; = page;</span><br><span class="line">    <span class="keyword">if</span> (dom) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> viewport = pdfPage.<span class="title function_">getViewport</span>(&#123; <span class="attr">scale</span>: <span class="number">1</span>, <span class="attr">rotation</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    canvas.<span class="property">height</span> = pageSize.<span class="property">height</span>;</span><br><span class="line">    canvas.<span class="property">width</span> = pageSize.<span class="property">width</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pageDom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;((pageNo - <span class="number">1</span>) * (pageSize.height + <span class="number">10</span>))&#125;</span>px`</span>;</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;pageSize.width&#125;</span>px`</span>;</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;pageSize.height&#125;</span>px`</span>;</span><br><span class="line">    pageDom.<span class="title function_">appendChild</span>(canvas);</span><br><span class="line">  </span><br><span class="line">    pdfPage.<span class="title function_">render</span>(&#123; <span class="attr">canvasContext</span>: context, viewport &#125;);</span><br><span class="line">    page.<span class="property">dom</span> = pageDom;</span><br><span class="line">    contentView.<span class="title function_">appendChild</span>(pageDom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动加载：监听滚动触发 scrollPdf，防抖保证不会一次产生过多请求</span></span><br><span class="line">scrollPdf = _.<span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = pdfContainer.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> height = pdfContainer.<span class="property">height</span>;</span><br><span class="line">    <span class="comment">// 根据内容可视区域中心点计算页码, 没有滚动时，指向第一页</span></span><br><span class="line">    <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((scrollTop + height/<span class="number">2</span>) / (pageSize.<span class="property">height</span> + <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">const</span> pageIndex = scrollTop &gt; <span class="number">0</span> ? index : <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">loadBefore</span>(pageIndex);</span><br><span class="line">    <span class="title function_">loadAfter</span>(pageIndex);</span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadBefore</span> (pageIndex) &#123;  <span class="comment">// 获取当前页之前页面的分片</span></span><br><span class="line">    <span class="comment">// 假定每个分片的大小是 5 页</span></span><br><span class="line">    <span class="keyword">const</span> start = (<span class="title class_">Math</span>.<span class="title function_">floor</span>(pageIndex/<span class="number">5</span>) * <span class="number">5</span>) - (<span class="number">5</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (start &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> prevPage = pages[start - <span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">        prevPage.<span class="property">loadStatus</span> ===loadStatus.<span class="property">WAIT</span> &amp;&amp; <span class="title function_">loadPdfData</span>(start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadAfter</span> (pageIndex) &#123;  <span class="comment">// 获取当前页之后页面的分片</span></span><br><span class="line">    <span class="keyword">const</span> start = (<span class="title class_">Math</span>.<span class="title function_">floor</span>(pageIndex/<span class="number">5</span>) * <span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (start &lt;= pages.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextPage = pages[start - <span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">        nextPage.<span class="property">loadStatus</span> ===loadStatus.<span class="property">WAIT</span> &amp;&amp; <span class="title function_">loadPdfData</span>(start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、性能优化：文件页数过多时一直滚动渲染可能导致页面卡顿，需要清除可视范围外的页面元素。</span></span><br><span class="line"><span class="comment">// 获取需要渲染的范围</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRenderScope</span> (pageIndex) &#123;</span><br><span class="line">    <span class="keyword">const</span> pagesToRender = [];</span><br><span class="line">    <span class="keyword">let</span> i = pageIndex - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> j = pageIndex + <span class="number">1</span>;</span><br><span class="line">    pagesToRender.<span class="title function_">push</span>(pages[pageIndex - <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 根据当前的可视范围内的页码，我们前后只保留 10 页</span></span><br><span class="line">    <span class="keyword">while</span> (pagesToRender.<span class="property">length</span> &lt; <span class="number">10</span> &amp;&amp; pagesToRender.<span class="property">length</span> &lt; pages.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pagesToRender.<span class="title function_">push</span>(pages[i - <span class="number">1</span>]);</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pagesToRender.<span class="property">length</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= pages.<span class="property">length</span>) &#123;</span><br><span class="line">            pagesToRender.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">pages</span>[j - <span class="number">1</span>]);</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pagesToRender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染需要展示的页面，不需展示的页码将其清除</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderPages</span> (pageIndex) &#123;</span><br><span class="line">    <span class="keyword">const</span> pagesToRender = <span class="title function_">getRenderScope</span>(pageIndex);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> pages) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pagesToRender.<span class="title function_">includes</span>(i)) &#123;</span><br><span class="line">            i.<span class="property">loadStatus</span> === loadStatus.<span class="property">LOADED</span> ? </span><br><span class="line">            <span class="title function_">renderPageContent</span>(i) : <span class="title function_">renderPageLoading</span>(）;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">clearPage</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清除页面 dom</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clearPage</span> (page) &#123;</span><br><span class="line">    <span class="keyword">if</span> (page.<span class="property">dom</span>) &#123;</span><br><span class="line">       contentView.<span class="title function_">removeChild</span>(page.<span class="property">dom</span>);</span><br><span class="line">       page.<span class="property">dom</span> = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 页面正在下载时渲染 loading 视图</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderPageLoading</span> (page) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pageNo, dom &#125; = page;</span><br><span class="line">    <span class="keyword">if</span> (dom) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">const</span> pageDom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">width</span> = <span class="string">`<span class="subst">$&#123;pageSize.width&#125;</span>px`</span>;</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;pageSize.height&#125;</span>px`</span>;</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">    pageDom.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;((pageNo - <span class="number">1</span>) * (pageSize.height + <span class="number">10</span>))&#125;</span>px`</span>;</span><br><span class="line">    <span class="comment">// 此处在 dom 上添加 loading 组件，省略实现</span></span><br><span class="line">    page.<span class="property">dom</span> = pageDom;</span><br><span class="line">    contentView.<span class="title function_">appendChild</span>(pageDom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、表单上传</span></span><br><span class="line">&lt;form action=<span class="string">&quot;/save&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line">$(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">ajaxSubmit</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、模拟表单数据上传</span></span><br><span class="line">&lt;input id=<span class="string">&quot;fileinfo&quot;</span> type=<span class="string">&quot;file&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;upload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;files&quot;</span>, $(<span class="string">&quot;.notFormFile&quot;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>])</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;save&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: formData,</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,           <span class="comment">// 不处理发送数据</span></span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,           <span class="comment">// 不设置 Content-Type</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、分片上传</span></span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span> multiple&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>分片上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="keyword">let</span> files = $(<span class="string">&#x27;#file&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span><br><span class="line"><span class="title function_">upload</span>(files[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">upload</span> (file, skip) &#123;</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    <span class="keyword">var</span> blockSize = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">var</span> nextSize = <span class="title class_">Math</span>.<span class="title function_">min</span>((skip + <span class="number">1</span>) * blockSize, file.<span class="property">size</span>);             </span><br><span class="line">    <span class="keyword">var</span> fileData = file.<span class="title function_">slice</span>(skip * blockSize, nextSize);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, fileData);</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;fileName&quot;</span>, file.<span class="property">name</span>);</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/save&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: formData,</span><br><span class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已上传<span class="subst">$&#123;skip+<span class="number">1</span>&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">if</span> (file.<span class="property">size</span> &lt;= nextSize) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;上传完成&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">upload</span>(file, ++skip)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、拖拽、粘贴上传：ondrop、onpaste</span></span><br><span class="line">&lt;textarea placeholder=<span class="string">&quot;请将文件拖拽或直接粘贴到这里&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">$(<span class="string">&quot;textarea&quot;</span>).<span class="property">ondrop</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">// 拖拽数据</span></span><br><span class="line">    <span class="keyword">var</span> file = event.<span class="property">dataTransfer</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 粘贴数据</span></span><br><span class="line">    <span class="keyword">var</span> clipboard = event.<span class="property">clipboardData</span>.<span class="property">items</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (clipboard.<span class="property">kind</span> == <span class="string">&#x27;file&#x27;</span> || </span><br><span class="line">        clipboard.<span class="property">type</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;image&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        file = clipboard.<span class="title function_">getAsFile</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;files&quot;</span>, files);</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/save&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: formData,</span><br><span class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123; &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 ～ ES9 新特性</title>
    <url>/2019/05/23/4-5-ES%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、ES6"><a href="#一、ES6" class="headerlink" title="一、ES6"></a>一、ES6</h1><h2 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h2><blockquote>
<p><code>一对花括号包裹的代码被称为一个代码块，比如 for 循环、if 条件判断等</code>。块级作用域的引入意味着不再需要通过创建函数来定义一个新的作用域，而只需要使用大括号 { } 即可以创建一个新的作用域，其中的变量必须先声明后使用，相同作用域内不允许重复声明。var 声明的变量可以在代码块外面使用而没有块级作用域，let、const 声明的变量在代码块外面使用会报错而都有块级作用域。</p>
</blockquote>
<ul>
<li><strong>var</strong><ul>
<li>声明变量或常量，可以重复声明和赋值。</li>
<li>变量提升现象：变量可以在声明之前使用。</li>
<li>函数作用域：函数内部的变量只能在函数内部访问。</li>
</ul>
</li>
<li><strong>let</strong><ul>
<li>声明变量，可以重复赋值。</li>
<li>暂时性死区：变量在声明之前使用会报错。</li>
<li>块级作用域：声明的变量只能在其所在的代码块内才能访问。</li>
</ul>
</li>
<li><strong>const</strong><ul>
<li>声明常量，不允许重新赋值。</li>
<li>存在暂时性死区和块级作用域。</li>
<li>常量名建议写成纯大写字母表示。</li>
</ul>
</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 </span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;lux&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6：$&#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;lux&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>)  <span class="comment">// hello lux</span></span><br></pre></td></tr></table></figure>


<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5：反斜杠</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;Hi \</span></span><br><span class="line"><span class="string">man&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6：反引号</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`welcome</span></span><br><span class="line"><span class="string">    to</span></span><br><span class="line"><span class="string">world`</span></span><br></pre></td></tr></table></figure>


<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// includes：判断是否包含</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hahay&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;y&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat: 获取字符串重复n次</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;he&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">repeat</span>(<span class="number">3</span>)) <span class="comment">// &#x27;hehehe&#x27;</span></span><br><span class="line"><span class="comment">// 如果带有小数，先进行 Math.floor(num) 处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// startsWith、endsWith：判断是否以给定文本 开始、结束</span></span><br><span class="line"><span class="keyword">const</span> str =  <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>))        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// padStart、padEnd：若字符串不够指定长度则在 头部、尾部 补全</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> hours = now.<span class="title function_">getHours</span>().<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">const</span> minutes = now.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">const</span> seconds = now.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;hours.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>:<span class="subst">$&#123;minutes.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>:<span class="subst">$&#123;seconds.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>`</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>


<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul>
<li>省略 return 关键字</li>
<li>不需要 function 关键字</li>
<li>始终指向当前上下文的 this 对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有一个参数时不需要 ()</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = n =&gt; n  </span><br><span class="line"><span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一条返回语句时不需要 &#123;&#125;</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回对象则需要括号包裹</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">obj</span> = name =&gt; (&#123;<span class="string">&quot;name&quot;</span>:name&#125;) </span><br></pre></td></tr></table></figure>


<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li>默认参数：定义函数时指定</li>
<li>Rest 参数：获取函数的不定参数</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x=<span class="number">1</span>, y=<span class="number">1</span></span>)&#123;  </span><br><span class="line">  <span class="keyword">return</span> x + y;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, ...params</span>)&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params) </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>)      <span class="comment">// [2]</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)   <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure>


<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性简写：属性名相同</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">people</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; name, age &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> user = &#123; name &#125;;  <span class="comment">// &#123; name: &quot;bar&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法简写</span></span><br><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>,</span><br><span class="line">  getName () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝方法</span></span><br><span class="line"><span class="keyword">const</span> target = &#123;&#125;   </span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, &#123; <span class="attr">name</span>: <span class="string">&#x27;Lisa&#x27;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure>


<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><blockquote>
<p>自动提取数组或对象中的值并赋值给变量，要求前后结构相同或包含。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象：变量须与属性同名但不分顺序</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>: <span class="subst">$&#123;age&#125;</span>`</span>)  <span class="comment">// lux : 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;foo&#125; = &#123;<span class="attr">bar</span>: <span class="string">&#x27;baz&#x27;</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)           <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="attr">name</span>: a &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Lisa&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, a)    <span class="comment">// &quot;&quot; Lisa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组：变量值由其位置决定</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不完全解构</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line">[x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]    <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码重构：最后一行即可</span></span><br><span class="line"><span class="keyword">var</span> body = request.<span class="property">body</span></span><br><span class="line"><span class="keyword">var</span> username = body.<span class="property">username</span></span><br><span class="line"><span class="keyword">var</span> password = body.<span class="property">password</span></span><br><span class="line"><span class="keyword">const</span> &#123; body, <span class="attr">body</span>: &#123; username, password &#125; &#125; = request </span><br></pre></td></tr></table></figure>


<h2 id="Spread-扩展运算符"><a href="#Spread-扩展运算符" class="headerlink" title="Spread 扩展运算符"></a>Spread 扩展运算符</h2><blockquote>
<p>Rest 参数的逆运算，用于将数组或对象展开成一系列用逗号隔开的值。</p>
</blockquote>
<ul>
<li>合并对象或数组：参数位置不限制。</li>
<li>配合解构赋值：必须将参数放到最后，否则报错。  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> colorful = [...color, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]  </span><br><span class="line"><span class="keyword">const</span> [first, ...colorful] = color  <span class="comment">// [&#x27;yellow&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">const</span> userinfo = &#123; ...user, <span class="attr">address</span>: <span class="string">&#x27;shanghai&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, ...userinfo &#125; = user   <span class="comment">// &#123;age: 20&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h2><blockquote>
<p>一种新的原始数据类型，Symbol 值类似于字符串但每一个都表示独一无二的值。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="title class_">Symbol</span>();          </span><br><span class="line"><span class="keyword">var</span> s2 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>);      <span class="comment">// 传入字符串表示描述信息</span></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;foo&quot;</span>);  <span class="comment">// 有则返回，无则创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任何两个 Symbol 值都不相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s1, s1 == s2)   <span class="comment">// symbol false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s3))     <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s4))     <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能与其他类型的值进行运算，否则会报错</span></span><br><span class="line"><span class="comment">// var k = s1 + 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以转为字符串、布尔值</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="title class_">String</span>(s1)</span><br><span class="line"><span class="keyword">var</span> bl = <span class="title class_">Boolean</span>(s1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为对象属性名：不能使用点操作</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; [s1]: <span class="string">&#x27;hello&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj[s1] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, s1, &#123; <span class="attr">value</span>: <span class="string">&#x27;hello&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性名的遍历</span></span><br><span class="line"><span class="keyword">var</span> sKey = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)  <span class="comment">// 返回Symbol键名</span></span><br><span class="line"><span class="keyword">var</span> aKey = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)               <span class="comment">// 返回所有键名</span></span><br></pre></td></tr></table></figure>


<h2 id="for-of-遍历"><a href="#for-of-遍历" class="headerlink" title="for-of 遍历"></a>for-of 遍历</h2><ul>
<li>方式对比<ul>
<li>forEach：无法跳出循环，即 break、return 命令都不奏效。</li>
<li>for-in：主要是为遍历对象而设计的，不适用于遍历数组。</li>
<li>for-of：调用遍历器接口，使用范围较广。</li>
</ul>
</li>
<li>使用技巧<ul>
<li>类似数组的对象：通过 Array.from 方法转为数组。</li>
<li>普通对象：通过 Object.keys 方法将键名生成数组、通过 Generator 函数将对象重新包装。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrLike = &#123; <span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(arrLike)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Iterator-遍历器"><a href="#Iterator-遍历器" class="headerlink" title="Iterator 遍历器"></a>Iterator 遍历器</h2><blockquote>
<p>本质是一种有 next() 方法的指针对象，第几次调用就指向第几个成员</p>
</blockquote>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>为各种数据结构提供一个统一的、简便的访问接口（统一）</li>
<li>使得数据结构的成员能够按某种次序排列（按序）</li>
<li>配合 for-of 实现遍历</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote>
<p>本质是一个生成遍历器的函数，不同于 forEach 等遍历方法</p>
</blockquote>
  <div style="text-indent: 2em">默认部署在数据结构的 Symbol.iterator 属性，它是当前数据结构默认的遍历器生成函数，执行这个函数就会返回一个遍历器。原生具备 Iterator 接口的数据结构如下：Array、TypedArray、Map、Set、String，只有这些数据结构不需要自定义遍历器生成函数并部署，循环遍历时可以直接通过 for-of 循环或 while 判断对象的 done 属性。</div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生接口</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iter.<span class="title function_">next</span>())  <span class="comment">// &#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义接口</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 对象属性组成的数组</span></span><br><span class="line">    <span class="keyword">const</span> ks = <span class="title class_">Object</span>.<span class="title function_">keys</span>(that);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: that[ks[index++]],</span><br><span class="line">          <span class="attr">done</span>: (index &gt; ks.<span class="property">length</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);      <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">break</span>;      <span class="comment">// 触发 return </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote>
<p>任何接受数组作为参数的场景都默认调用了遍历器接口，比如 Array.from、Object.keys、Promise.all、Map()。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>().<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = set;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">[...str] <span class="comment">//  [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// yield*</span></span><br><span class="line"><span class="keyword">let</span> generator = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>


<h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><blockquote>
<p>处理异步操作的对象，可以通过链式调用的方式来组织代码，让代码更加直观</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建promise</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 进行一些异步或耗时操作</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="comment">/* 如果成功 */</span> ) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;Stuff worked!&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="title class_">Error</span>(<span class="string">&quot;It broke&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定处理程序</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="Generators-函数"><a href="#Generators-函数" class="headerlink" title="Generators 函数"></a>Generators 函数</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul>
<li><strong>定义</strong><ul>
<li>function 关键字和函数名之间有一个星号。</li>
<li>内部使用 yield 语句，定义不同的内部状态。</li>
<li>作为对象属性时可以简写。</li>
</ul>
</li>
<li><strong>调用</strong><ul>
<li>直接调用 Generator函数并不会执行和返回运行结果，而是返回一个遍历器对象。</li>
<li>依次调用遍历器对象的 next 方法，从上次暂停地方执行到 yield&#x2F;return 语句而可以遍历 Generator 函数内部的每一个状态。</li>
</ul>
</li>
<li><strong>原理</strong><ul>
<li>通过 yield 语句实现传出返回对象。</li>
<li>yield 表达式本身没有返回值，可以通过 next(value) 将传入参数作为上一个 yield 语句的返回值。</li>
</ul>
</li>
<li><strong>yield 语句</strong> <ul>
<li>只能用于 Generator 函数内部。</li>
<li>如果用于其它表达式中，则必须放到圆括号里面。</li>
<li>用作函数参数或放在赋值表达式的右边时，可以不加括号。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="title function_">foo</span>();				</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());  <span class="comment">// &#123; value: 100, done: false &#125;	</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());	<span class="comment">// &#123; value: 200, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());	<span class="comment">// &#123; value: 300, done: true &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f.<span class="title function_">next</span>());	<span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>异步编程：将异步操作写到 yield 语句，等到调用 next 方法时再继续执行。</li>
<li>控制流管理：执行多步的耗时操作时，通过回调函数或 Promise 方式都不简洁。</li>
<li>部署 Iterator 接口：利用 Generator 函数，可以在任意对象上部署 Iterator 接口。</li>
<li>作为数据结构：可以返回一系列的值，所以它可以对任意表达式提供类似数组的接口。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步操作的同步化表达</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">loadUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showLoading</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">loadUIDataAsynchronously</span>();</span><br><span class="line">  <span class="title function_">hideLoading</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> loader = <span class="title function_">loadUI</span>();</span><br><span class="line">loader.<span class="title function_">next</span>()  <span class="comment">// 加载</span></span><br><span class="line">loader.<span class="title function_">next</span>()  <span class="comment">// 隐藏</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制流管理</span></span><br><span class="line"><span class="title function_">step1</span>(<span class="keyword">function</span> (<span class="params">value1</span>) &#123;</span><br><span class="line">  <span class="title function_">step2</span>(value1, <span class="keyword">function</span>(<span class="params">value2</span>) &#123;</span><br><span class="line">    <span class="title function_">step3</span>(value2, <span class="keyword">function</span>(<span class="params">value3</span>) &#123;</span><br><span class="line">      <span class="comment">// Do something with value3</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(step1)</span><br><span class="line">  .<span class="title function_">then</span>(step2)</span><br><span class="line">  .<span class="title function_">then</span>(step3)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value3</span>) &#123;</span><br><span class="line">      <span class="comment">// Do something with value3</span></span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;&#125;)</span><br><span class="line">  .<span class="title function_">done</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">longRunningTask</span>(<span class="params">value1</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value2 = <span class="keyword">yield</span> <span class="title function_">step1</span>(value1);</span><br><span class="line">    <span class="keyword">var</span> value3 = <span class="keyword">yield</span> <span class="title function_">step2</span>(value2);</span><br><span class="line">    <span class="keyword">var</span> value4 = <span class="keyword">yield</span> <span class="title function_">step3</span>(value3);</span><br><span class="line">    <span class="keyword">var</span> value5 = <span class="keyword">yield</span> <span class="title function_">step4</span>(value4);</span><br><span class="line">    <span class="comment">// Do something with value4</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署 Iterator 接口</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">iterEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = keys[i];</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">foo</span>: <span class="number">3</span>, <span class="attr">bar</span>: <span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">iterEntries</span>(myObj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为数据结构</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doStuff</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    fs.<span class="property">readFile</span>.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="string">&#x27;hello.txt&#x27;</span>),</span><br><span class="line">    fs.<span class="property">readFile</span>.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="string">&#x27;world.txt&#x27;</span>),</span><br><span class="line">    fs.<span class="property">readFile</span>.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="string">&#x27;and-such.txt&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">doStuff</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> fs.<span class="property">readFile</span>.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> fs.<span class="property">readFile</span>.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="string">&#x27;world.txt&#x27;</span>);</span><br><span class="line">  <span class="keyword">yield</span> fs.<span class="property">readFile</span>.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="string">&#x27;and-such.txt&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (task <span class="keyword">of</span> <span class="title function_">doStuff</span>()) &#123;</span><br><span class="line">    <span class="comment">// task是一个函数，可以像回调函数那样使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Moudle-模块"><a href="#Moudle-模块" class="headerlink" title="Moudle 模块"></a>Moudle 模块</h2>  <div style="text-indent: 2em">ES5 不支持原生的模块化，ES6 内置模块功能借鉴了 CommonJS、AMD，根据功能将代码封装到不同模块。每一个模块都有独立的作用域和命名空间，可以防止命名冲突。当前模块通过 export (default) 定义对外暴露的接口，通过 import 实现加载外部模块。</div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export：可以有多个，需要加 &#123;&#125;，加载时不可改变变量名</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;Mark&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name, age&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  name = <span class="string">&#x27;Mark&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;        <span class="comment">// 别名：允许使用两次</span></span><br><span class="line">  name <span class="keyword">as</span> v1,</span><br><span class="line">  name <span class="keyword">as</span> v2,</span><br><span class="line">  setName <span class="keyword">as</span> setNameV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> userName &#125; <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; name, age &#125; <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; setName &#125; <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; v1, v2, setNameV &#125; <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./lib&quot;</span>;       <span class="comment">// 整个模块</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> userinfo <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>; <span class="comment">// 模块别名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// export default：最多有一个，不需要 &#123;&#125;，加载时可以自定义变量名</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;   <span class="comment">// 等同于 export &#123; name as default &#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> setName;  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; name, setName &#125;  <span class="comment">// 作为对象导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> userName <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> setUserName <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> userObj <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;  == <span class="keyword">export</span> &#123;name <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"><span class="keyword">import</span> n <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span>; == <span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> n&#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合写法</span></span><br><span class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span>; <span class="comment">// 转发变量而并没有导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span> &amp;&amp; <span class="keyword">export</span> &#123; foo, bar &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> myFoo &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span>; <span class="comment">// 改名并转发变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">&#x27;./lib&#x27;</span> &amp;&amp; <span class="keyword">export</span> &#123;foo <span class="keyword">as</span> myFoo&#125;</span><br></pre></td></tr></table></figure>


<h2 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>本质是扩充原型，使其所有实例可以访问相应的属性、方法。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prototype&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态属性和方法</span></span><br><span class="line">  <span class="title class_">User</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">  <span class="title class_">User</span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">User</span> = user;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// 构造函数：实例化时默认执行(返回实例对象 this)</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态方法：不会被实例继承，只能通过类来直接调用</span></span><br><span class="line">  <span class="keyword">static</span> age = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">run</span>();</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line">u.<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure>


<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<p>本质是延长原型链，将父类的实例置于子类原型链上，使子类的实例可以访问父类及其原型链上的所有属性和方法。</p>
</blockquote>
<ul>
<li><strong>constructor</strong>：子类继承父类时的构造方法，默认返回实例对象 this。主要用于初始化数据、绑定属性和方法。new 实例时会自动补上而可以省略。</li>
<li><strong>super</strong>：子类必须在 constructor 调用它之后才能继承父类的属性和方法，否则新建实例时会报错。这是因为子类自己的 this 对象必须先通过父类的构造函数完成塑造，得到父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的属性和方法。子类如果不调用 super() 就得不到 this 对象。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name, age</span>)&#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age; </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age, address</span>)&#123;</span><br><span class="line">  <span class="comment">// Father.apply(this, arguments);</span></span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">address</span> = address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6：super 在不同调用场景指向不同</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span> (name, age, address) &#123;</span><br><span class="line">    <span class="comment">// 作为函数调用，表示父类的构造函数：继承时必须调用</span></span><br><span class="line">    <span class="variable language_">super</span>();  <span class="comment">// </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">address</span> = address;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">height</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 作为对象在普通方法时，指向父类的原型对象</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">height</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">weight</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 作为对象在静态方法时，指向父类</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">weight</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><blockquote>
<p>通过 <code>getters/setters</code> 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问  对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有 getter 没有 setter 时无法进行赋值操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123; <span class="comment">//构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 对 this.name 赋则会调用 set name 导致无限递归</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// TOM</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">_name</span>);   <span class="comment">// tom</span></span><br><span class="line">p.<span class="title function_">sayName</span>();            <span class="comment">// TOM</span></span><br></pre></td></tr></table></figure>


<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">map.<span class="title function_">get</span>(obj)      <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">has</span>(obj)      <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">delete</span>(obj)   <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">has</span>(obj)      <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储无重复值的有序列表</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);    <span class="comment">// 2       </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">5</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>


<h1 id="二、ES7"><a href="#二、ES7" class="headerlink" title="二、ES7"></a>二、ES7</h1><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote>
<p>通过装饰器函数可以对类、类成员 (类的属性或方法) 进行修饰，从而进行一些相关功能定制。函数有三个参数：<code>target</code> (类的原型)、<code>name</code> (类&#x2F;属性&#x2F;方法的名字)、<code>descriptor</code> (将传递给 Object.defineProperty)。</p>
</blockquote>
<h3 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h3><ul>
<li>包装模式：它们都是通过封装其他对象达到设计目的，但是形态有很大区别<ul>
<li>适配器模式：比如连接不同数据库时需要包装已有接口而实现适配数据库。类似手机使用转接口来适配插座。</li>
<li>装饰器模式：旨在促进代码复用 (可看作继承)，希望为对象添加额外功能而又不需要改变原有接口。类似手机添加一个外壳而并不影响原有的通话、充电等功能。</li>
</ul>
</li>
<li>应用场景<ul>
<li>经典应用：AOP 编程，包括 安全检查、缓存、调试、持久化等。</li>
<li>具体实例：比如日志系统，它的作用是记录系统的行为操作，在不影响原有系统功能的基础上增加记录环节，类似你佩戴了一个智能手环。</li>
</ul>
</li>
</ul>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 装饰类成员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">  @log</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @unenumerable</span><br><span class="line">  @readonly</span><br><span class="line">  name = <span class="string">&quot;alibaba&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readonly</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">  descriptor.<span class="property">writable</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unenumerable</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">  descriptor.<span class="property">enumerable</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">target, name, descriptor</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> original = descriptor.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> original === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Arguments: <span class="subst">$&#123;args&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = original.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Result: <span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Error: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">e.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">e.<span class="property">name</span> = <span class="string">&#x27;antd&#x27;</span>; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doge</span>(<span class="params">tar</span>) &#123;</span><br><span class="line">  tar.<span class="property">isDoge</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">@doge</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123; &#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property">isDoge</span> <span class="comment">//  true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doge</span> (par) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">tar</span>) &#123;</span><br><span class="line">    tar.<span class="property">isDoge</span> = par;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_">doge</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123; &#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property">isDoge</span> <span class="comment">//  false</span></span><br></pre></td></tr></table></figure>


<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react、redux 库的结合使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">MyReactComponent</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用装饰器</span></span><br><span class="line">@<span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyReactComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="arr-includes"><a href="#arr-includes" class="headerlink" title="arr.includes"></a>arr.includes</h2><blockquote>
<p>判断数组是否包含一个指定值</p>
</blockquote>
<ul>
<li>参数<ul>
<li>要搜索的值</li>
<li>搜索的开始索引</li>
</ul>
</li>
<li>区别<ul>
<li>返回布尔值，indexOf 返回数值</li>
<li>可用来判断数组是否包含 NaN，而 indexOf 不行</li>
<li>对于数组中的空值，includes 返回 undefined，而 indexOf 不会</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, , <span class="number">3</span>, <span class="title class_">NaN</span>]</span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="number">1</span>)          <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="number">1</span>, <span class="number">1</span>)       <span class="comment">// false</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="title class_">NaN</span>)        <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="literal">undefined</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h2 id="求幂运算符"><a href="#求幂运算符" class="headerlink" title="求幂运算符"></a>求幂运算符</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运算符 **  </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">a **= <span class="number">3</span></span><br><span class="line">a == <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>) == <span class="number">2</span> ** <span class="number">3</span>   <span class="comment">// 8    </span></span><br></pre></td></tr></table></figure>
<h1 id="三、ES8"><a href="#三、ES8" class="headerlink" title="三、ES8"></a>三、ES8</h1><h2 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><blockquote>
<p>async 可看作多个异步操作包装成的一个 Promise 对象，await 是 then() 的语法糖</p>
</blockquote>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><blockquote>
<p>async 函数是对 Generator 函数的改进，使用时将它的 星号、yield 分别替换为 async、await 即可，优点如下：</p>
</blockquote>
<ul>
<li>内置执行器：Generator 函数的执行必须依靠 co 模块的执行器，而 async 函数自带</li>
<li>更好的语义：async、await 分别表示函数里有异步操作、需要等待后面表达式<br>  的执行结果，语义比较清楚</li>
<li>更广的适用性：co 模块约定 yield 命令后面只能是 Thunk 函数或 Promise 对象，<br>  而 await 命令后面可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</li>
<li>返回 Promise 对象：可以用 then 方法指定下一步的操作</li>
</ul>
<h3 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">login</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;1001&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">600</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (userId === <span class="string">&#x27;1001&#x27;</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;Fail&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">600</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用 async/await</span></span><br><span class="line"><span class="title function_">doLogin</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">login</span>(userName)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">getData</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">doLogin2</span>(<span class="params">userName</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> userId=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">login</span>(userName);</span><br><span class="line">    <span class="keyword">const</span> result=<span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getData</span>(userId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">doLogin</span>()   <span class="comment">// Success</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">doLogin2</span>()  <span class="comment">// Succes</span></span><br></pre></td></tr></table></figure>


<h2 id="SharedArrayBuffer-Atomics"><a href="#SharedArrayBuffer-Atomics" class="headerlink" title="SharedArrayBuffer-Atomics"></a>SharedArrayBuffer-Atomics</h2><blockquote>
<p> 用于从共享内存位置读取和写入</p>
</blockquote>
<ul>
<li>并行：同时执行多个任务<ul>
<li>JavaScript 在单线程中执行任务<ul>
<li>同步任务直接在单线程中排队执行</li>
<li>异步任务通过回调函数将结果重新放入到单线程等待执行调用</li>
</ul>
</li>
<li>Web Worker 引入了多线程并行处理任务<ul>
<li>主线程用来与用户互动</li>
<li>Worker 线程用来承担计算任务</li>
<li>每个线程的数据都是隔离的，通过 postMessage() 通信</li>
</ul>
</li>
<li>WebGL 用于 GPU 计算来并行处理数据</li>
</ul>
</li>
<li>并发：在重叠的时间段内执行几个任务<ul>
<li>SharedArrayBuffer：允许 Worker 线程与主线程共享同一块内存</li>
<li>Atomics: 用于处理 worker 共同操作同一内存地址时引起的冲突等问题</li>
</ul>
</li>
</ul>
<h2 id="Object-values-x2F-entries"><a href="#Object-values-x2F-entries" class="headerlink" title="Object.values&#x2F;entries"></a>Object.values&#x2F;entries</h2><ul>
<li>Object.values：返回自身属性值的数组</li>
<li>Object.entries：返回自身属性的键值对的数组</li>
<li>Object.getOwnPropertyDescriptors：返回自身属性的描述对象</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Jine&quot;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123; <span class="keyword">return</span> <span class="string">&#x27;18&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj)   <span class="comment">// [&quot;Jine&quot;, &quot;18&quot;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)  <span class="comment">// [[&quot;name&quot;, &quot;Jine&quot;], [&quot;age&quot;, &quot;18&quot;]]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&quot;name&quot;</span>)  <span class="comment">// 单个属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)         <span class="comment">// 所有属性</span></span><br></pre></td></tr></table></figure>


<h2 id="String-padStart-x2F-padEnd"><a href="#String-padStart-x2F-padEnd" class="headerlink" title="String.padStart&#x2F;padEnd"></a>String.padStart&#x2F;padEnd</h2><blockquote>
<p>用于填补字符串的首部或尾部来达到给定长度，参数为 目标长度和可选的填充字符</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;a&quot;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>)         <span class="comment">//  a </span></span><br><span class="line"><span class="string">&quot;a&quot;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;bc&quot;</span>)   <span class="comment">// ba</span></span><br><span class="line"><span class="string">&quot;a&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">3</span>, <span class="string">&quot;b&quot;</span>)      <span class="comment">// abb</span></span><br></pre></td></tr></table></figure>


<h1 id="四、ES9"><a href="#四、ES9" class="headerlink" title="四、ES9"></a>四、ES9</h1><blockquote>
<p>正则命名捕获组、反向断言、Unicode 转义等略过</p>
</blockquote>
<h2 id="异步迭代"><a href="#异步迭代" class="headerlink" title="异步迭代"></a>异步迭代</h2><blockquote>
<p>允许 async&#x2F;await 和 for-of 一起使用，以串行的方式执行异步操作</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 同步迭代器</span></span><br><span class="line"><span class="keyword">const</span> items = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);  <span class="comment">// a b   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步迭代器：返回一个 Promise</span></span><br><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>)),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>)),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> p <span class="keyword">of</span> promises) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">//1 ,2 3</span></span><br></pre></td></tr></table></figure>



<h2 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title="Promise.finally"></a>Promise.finally</h2><blockquote>
<p>指定最终一定会执行的逻辑处理</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span>&#123; &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123; &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123; &#125;) </span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>JS 扩展</category>
      </categories>
      <tags>
        <tag>JS 扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数据结构</title>
    <url>/2019/05/20/4-4-js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote>
<p>计算机存储、组织数据的方式。</p>
</blockquote>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><blockquote>
<p>数据组织方式。</p>
</blockquote>
<ul>
<li><strong>集合结构</strong><ul>
<li>操作：并集、交集、补集。</li>
<li>特点：集合由一组无序且唯一的项组成、单个数据元素之间没有任何关系。</li>
</ul>
</li>
<li><strong>线性结构</strong><ul>
<li>类型：线性表，包括 堆、栈、队列、一维数组。</li>
<li>特点：数据元素是有序的、数据元素之间存在 一对一 的层次关系。</li>
</ul>
</li>
<li><strong>树形结构</strong><ul>
<li>类型：树。</li>
<li>特点：数据元素之间存在 一对多 的层次关系。</li>
</ul>
</li>
<li><strong>图形结构</strong><ul>
<li>类型：图。</li>
<li>特点：数据元素之间是 多对多 的层次关系。</li>
</ul>
</li>
</ul>
<h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><blockquote>
<p>数据存储方式。</p>
</blockquote>
<ul>
<li><strong>顺序存储</strong><ul>
<li>内存：元素连续放置，基于位置关系访问</li>
<li>优点：随机访问</li>
<li>缺点：插入删除效率低，大小固定</li>
</ul>
</li>
<li><strong>链式存储</strong><ul>
<li>内存：元素并不连续放置，基于引用指针关系访问</li>
<li>优点：大小动态扩展，插入删除效率高</li>
<li>缺点：访问链表元素需要循环查找，不能随机访问</li>
</ul>
</li>
<li><strong>索引存储</strong><ul>
<li>内存：整体无序但索引块之间有序</li>
<li>优点：对顺序查找的一种改进，查找效率高</li>
<li>缺点：需要额外空间存储索引表</li>
</ul>
</li>
<li><strong>散列存储</strong><ul>
<li>内存：数据元素根据函数计算存储位置</li>
<li>优点：基于数据本身查找，查找和存取效率高</li>
<li>缺点：存取随机而不利于顺序查找，存储位置可能相同而冲突</li>
</ul>
</li>
</ul>
<h1 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h1><ul>
<li>一种遵循先进后出原则的特殊线性表</li>
<li>它基于数组或链表实现，只能在栈顶增删元素</li>
<li>新元素靠近栈顶，旧元素靠近栈底，类似叠起来的书</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义栈类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 底层数据结构是数组</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入栈</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出栈</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 末位</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">peek</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否为空栈</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">isEmpty</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 尺寸</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用栈类</span></span><br><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="property">isEmpty</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">5</span>)</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">8</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="property">peek</span>)     <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="property">size</span>)     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>


<h1 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h1><ul>
<li>一种遵循先进先出原则的特殊线性表</li>
<li>只能队尾添加、队首删除元素，类似排队人群</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = items || []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环队列</span></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">element</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 优先队列：根据优先级增删</span></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">element, priority</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> queueElement = &#123; element, priority &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isEmpty</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(queueElement)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> preIndex = <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> queueElement.<span class="property">priority</span> &lt; item.<span class="property">priority</span>)</span><br><span class="line">        <span class="keyword">if</span> (preIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(preIndex, <span class="number">0</span>, queueElement)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(queueElement)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">front</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">clear</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">isEmpty</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通队列</span></span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="property">size</span>)     <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="property">isEmpty</span>)  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列</span></span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;Surmon&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">queue.<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环队列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoopQueue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Queue</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">items</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(items)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getIndex</span>(<span class="params">index</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> length = <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">      <span class="keyword">return</span> index &gt; length ? (index % length) : index</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">find</span>(<span class="params">index</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">isEmpty</span> ? <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="title function_">getIndex</span>(index)] : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> loopQueue = <span class="keyword">new</span> <span class="title class_">LoopQueue</span>([<span class="string">&#x27;Surmon&#x27;</span>])</span><br><span class="line">loopQueue.<span class="title function_">enqueue</span>(<span class="string">&#x27;SkyRover&#x27;</span>)</span><br><span class="line">loopQueue.<span class="title function_">enqueue</span>(<span class="string">&#x27;Even&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(loopQueue.<span class="property">size</span>)      <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(loopQueue.<span class="title function_">find</span>(<span class="number">26</span>))  <span class="comment">// &#x27;Evan&#x27;</span></span><br></pre></td></tr></table></figure>


<h1 id="三、链表"><a href="#三、链表" class="headerlink" title="三、链表"></a>三、链表</h1><blockquote>
<p>链接方式存储数据的线性表。链表的每个数据单元就是一个节点，包含节点信息、指向后一个节点的引用地址 (称为”链”) </p>
</blockquote>
  <div style="text-indent: 2em">数组是存储多个元素时最常用的数据结构，但是在很多编程语言中，数组的长度固定，当数组填满后再添加元素比较困难，删除和添加元素时需要将数组中的所有元素变换位置，操作成本较高。JS 数组并不存在上述问题，主要是因为它们被作为对象实现，不过效率较低。线性表的顺序存储结构由于存储元素不连续都会有以上问题，链表就是针对它的优化结果。</div>
        

<h2 id="链表类型"><a href="#链表类型" class="headerlink" title="链表类型"></a>链表类型</h2><ul>
<li>单链表：单一的向下传递，每个节点只记录下一个节点的信息</li>
<li>静态链表：基于数组实现的链表，每个节点包含了数据和指向地址</li>
<li>循环链表：由于单链表到达尾部时回溯到头部很麻烦，所以首尾相连形成循环</li>
<li>双向链表：基于单链表增加前指针，每个节点都保存两个分别指向前后节点的地址</li>
</ul>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3>  <div align="center">
      <img src="/images/js/link-list.png" alt="单链表结构" width="100%">
  </div>
  
<ul>
<li>data中保存着数据，next保存着下一个链表的引用</li>
<li>我们将链表的尾元素指向了 null 节点，表示链接结束的位置</li>
<li>可以说 data2 跟在 data1 后面，但不能说 data2 是链表中的第二个元素</li>
</ul>
<h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3>  <div align="center">
      <img src="/images/js/link-opration.png" alt="单链表节点操作" width="100%">
  </div>

<ul>
<li>插入：修改前驱节点而使其指向新节点，并将新节点指向原前驱节点指向的节点</li>
<li>删除：将待删节点的前驱节点指向待删节点的，同时将待删节点指向 null</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链表节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element  <span class="comment">// 数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>        <span class="comment">// 指针 </span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 追加元素</span></span><br><span class="line">  <span class="title function_">append</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">    <span class="keyword">let</span> current = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">while</span>(current.<span class="property">next</span>) &#123;</span><br><span class="line">            current = current.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        current.<span class="property">next</span> = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任意位置插入元素</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">position, element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">      <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">            previous = current</span><br><span class="line">            current = current.<span class="property">next</span></span><br><span class="line">          &#125;</span><br><span class="line">          node.<span class="property">next</span> = current</span><br><span class="line">          previous.<span class="property">next</span> = node</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">length</span>++</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除指定位置元素</span></span><br><span class="line">  <span class="title function_">removeAt</span>(<span class="params">position</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查越界值</span></span><br><span class="line">    <span class="keyword">if</span> (position &gt; -<span class="number">1</span> &amp;&amp; position &lt; length) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">                previous = current</span><br><span class="line">                current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            previous.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>--</span><br><span class="line">        <span class="keyword">return</span> current.<span class="property">element</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找元素下标</span></span><br><span class="line">  <span class="title function_">findIndex</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      <span class="keyword">if</span> (element === current.<span class="property">element</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      index++</span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除指定文档</span></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转为字符串</span></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">let</span> string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">      string += <span class="string">` <span class="subst">$&#123;current.element&#125;</span>`</span></span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linkedList)</span><br><span class="line"></span><br><span class="line">linkedList.<span class="title function_">append</span>(<span class="number">2</span>)</span><br><span class="line">linkedList.<span class="title function_">append</span>(<span class="number">6</span>)</span><br><span class="line">linkedList.<span class="title function_">insert</span>(<span class="number">3</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linkedList)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linkedList.<span class="title function_">findIndex</span>(<span class="number">24</span>))</span><br></pre></td></tr></table></figure>

<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链表节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prev</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任意位置插入元素</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">position, element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= <span class="variable language_">this</span>.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 首位</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!head)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tail</span> = node</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node.<span class="property">next</span> = current</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">head</span> = node</span><br><span class="line">                current.<span class="property">prev</span> = node</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 末位</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">tail</span></span><br><span class="line">            current.<span class="property">next</span> = node</span><br><span class="line">            node.<span class="property">prev</span> = current</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = node</span><br><span class="line">        <span class="comment">// 中位</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">              previous = current</span><br><span class="line">              current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            node.<span class="property">next</span> = current</span><br><span class="line">            previous.<span class="property">next</span> = node</span><br><span class="line">            current.<span class="property">prev</span> = node</span><br><span class="line">            node.<span class="property">prev</span> = previous</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>++</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除指定位置元素</span></span><br><span class="line">  <span class="title function_">removeAt</span>(<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; -<span class="number">1</span> &amp;&amp; position &lt; <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">        <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首位</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 末位</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">prev</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中位</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">              previous = current</span><br><span class="line">              current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            previous.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">            current.<span class="property">next</span>.<span class="property">prev</span> = previous</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span>--</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">element</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、集合"><a href="#四、集合" class="headerlink" title="四、集合"></a>四、集合</h1><blockquote>
<p>由一组无序且唯一的项组成，操作方法可分为 并集、交集、差集。集合、字典、散列表都可以存储不重复的数据。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Set</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">has</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">hasOwnProperty</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">items</span>[value] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">has</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[value]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">size</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">items</span>).<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">values</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 并集</span></span><br><span class="line">  <span class="title function_">union</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> unionSet = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">values</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> unionSet.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">values</span>[i]))</span><br><span class="line">    otherSet.<span class="property">values</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> unionSet.<span class="title function_">add</span>(otherSet.<span class="property">values</span>[i]))</span><br><span class="line">    <span class="keyword">return</span> unionSet</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交集</span></span><br><span class="line">  <span class="title function_">intersection</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">values</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (otherSet.<span class="title function_">has</span>(v)) &#123;</span><br><span class="line">            intersectionSet.<span class="title function_">add</span>(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> intersectionSet</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 差集</span></span><br><span class="line">  <span class="title function_">difference</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> differenceSet = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">values</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!otherSet.<span class="title function_">has</span>(v)) &#123;</span><br><span class="line">            differenceSet.<span class="title function_">add</span>(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> differenceSet</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子集</span></span><br><span class="line">  <span class="title function_">subset</span>(<span class="params">otherSet</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">size</span> &gt; otherSet.<span class="property">size</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">values</span>.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span> !otherSet.<span class="title function_">has</span>(v))</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> set1 = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set1.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set2.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set2.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set1.<span class="property">values</span>)   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set1.<span class="title function_">has</span>(<span class="number">1</span>))  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> set11 = set1.<span class="title function_">union</span>(set2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set11.<span class="property">values</span>);  <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> set12  = set1.<span class="title function_">intersection</span>(set2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set12.<span class="property">values</span>);  <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> set13 = set2.<span class="title function_">difference</span>(set1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set13.<span class="property">values</span>); <span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断子集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set1.<span class="title function_">subset</span>(set2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


<h1 id="五、字典"><a href="#五、字典" class="headerlink" title="五、字典"></a>五、字典</h1><blockquote>
<p>即映射，以键值对 { key: value } 的形式存储不重复的数据，Object 对象是字典在 Js 中的实现。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>[key] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">keys</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">items</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">values</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 ES7 values</span></span><br><span class="line">    <span class="comment">// return Object.values(this.items)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过循环生成一个数组并输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">items</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">r, c, i</span>) =&gt;</span> &#123;</span><br><span class="line">        r.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">items</span>[c])</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;, [])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dictionary = <span class="keyword">new</span> <span class="title class_">Dictionary</span>()</span><br><span class="line">dictionary.<span class="title function_">set</span>(<span class="string">&#x27;Gandalf&#x27;</span>, <span class="string">&#x27;gandalf@email.com&#x27;</span>)</span><br><span class="line">dictionary.<span class="title function_">set</span>(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;johnsnow@email.com&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="property">keys</span>) </span><br></pre></td></tr></table></figure>


<h1 id="六、散列表"><a href="#六、散列表" class="headerlink" title="六、散列表"></a>六、散列表</h1><blockquote>
<p>又称哈希表，是根据关键字而直接访问内存存储位置的数据结构。</p>
</blockquote>
  <div style="text-indent: 2em">通过计算一个数据关键字的函数，将所需查询的数据内容映射到表中的一个存放位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。简单来说，通过散列函数将要检索的项与索引（散列值）关联起来，生成一种便于搜索的数据结构（散列表）。</div>
        
<ul>
<li>散列函数<ul>
<li>原则：函数本身便于计算、计算出来的地址分布均匀。</li>
<li>方法：数字分析法、平方取中法、分段叠加法、除留余数法。</li>
</ul>
</li>
<li>处理冲突：键值不同的元素可能会映射到散列表的同一地址，称为 hash 冲突。<ul>
<li>拉链法&#x2F;分离链接：将所有散列地址相同的记录都放入一个线性链表。</li>
<li>开放定址法：冲突时寻找散列表中的空地址。线性探测 (顺序查看表中下一单元)、二次探测 (在表的左右进行跳跃式探测)、随机探测 (建立一个伪随机数发生器)。</li>
<li>再散列法：冲突时通过其它散列函数计算地址。</li>
<li>建立公共溢出区：将所有和散列表冲突的元素都放入溢出表。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 散列函数</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">loseloseHashCode</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hash = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> key) &#123;</span><br><span class="line">      hash += codePoint.<span class="title function_">charCodeAt</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % <span class="number">37</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不考虑冲突</span></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;position&#125;</span> - <span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span>[position] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[<span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span>[<span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)] = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分离链接处理冲突：需要一个辅助类 LinkedList 表示要加入的元素</span></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="title function_">append</span>(&#123; key, value &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getElementValue</span> = node =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node &amp;&amp; !node.<span class="property">element</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">is</span>(node.<span class="property">element</span>.<span class="property">key</span>, key)) &#123;</span><br><span class="line">          <span class="keyword">return</span> node.<span class="property">element</span>.<span class="property">value</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getElementValue</span>(node.<span class="property">next</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getElementValue</span>(<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">head</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getElementValue</span> = node =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node &amp;&amp; !node.<span class="property">element</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">is</span>(node.<span class="property">element</span>.<span class="property">key</span>, key)) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="title function_">remove</span>(node.<span class="property">element</span>)</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">isEmpty</span>) &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">table</span>[position] = <span class="literal">undefined</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getElementValue</span>(node.<span class="property">next</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getElementValue</span>(<span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="property">head</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线性探查</span></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[position] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span>[position] = &#123; key, value &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = ++position</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">table</span>[index] = &#123; key, value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">table</span>[position].<span class="title function_">append</span>(&#123; key, value &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getElementValue</span> = index =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span>, key)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">value</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getElementValue</span>(index + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getElementValue</span>(position)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title class_">HashTable</span>.<span class="title function_">loseloseHashCode</span>(key)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">removeElementValue</span> = index =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">table</span>[index] === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="variable language_">this</span>.<span class="property">table</span>[index].<span class="property">key</span>, key)) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">table</span>[index] = <span class="literal">undefined</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">removeElementValue</span>(index + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">removeElementValue</span>(position)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="title class_">HashTable</span>()</span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;Surmon&#x27;</span>, <span class="string">&#x27;surmon.me@email.com&#x27;</span>)  <span class="comment">// 19 - Surmon</span></span><br><span class="line">hash.<span class="title function_">put</span>(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;johnsnow@email.com&#x27;</span>)     <span class="comment">// 29 - John</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Surmon&#x27;</span>))  <span class="comment">// surmon.me@email.com</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash.<span class="title function_">get</span>(<span class="string">&#x27;Loiane&#x27;</span>))  <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hash)</span><br></pre></td></tr></table></figure>


<h1 id="七、树"><a href="#七、树" class="headerlink" title="七、树"></a>七、树</h1><blockquote>
<p>一对多的非线性结构、分层数据的抽象模型。树状结构分为树和二叉树，树的操作比较复杂但可以转换为二叉树处理。</p>
</blockquote>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><blockquote>
<p>n 个相同类型的数据元素的有限集合，树的集合为森林。主要属性有：<strong>节点</strong> (树中的数据元素。根节点 (没有父节点)、<strong>分支节点</strong> (有子节点)、<strong>叶子节点</strong> (没有子节点))、<strong>子树</strong> (节点组成的树)、<strong>层级</strong> (可以按照节点级别分层)、<strong>深度</strong> (节点到根节点的节点数量)、<strong>高度</strong> (所有节点深度中的最大值)、权值。</p>
</blockquote>
<ul>
<li><strong>无序树</strong>：子节点之间没有顺序关系，又称自由树。</li>
<li><strong>有序树</strong>：子节点之间有顺序关系。<ul>
<li><strong>二叉树</strong>：每个节点最多含有两个子树<ul>
<li>完全二叉树：最后一层右边可能满或不满，左边和其余层都是满的。堆就是一个完全二叉树。</li>
<li>满二叉树：所有叶节点都在最底层的完全二叉树</li>
<li>排序二叉树：有序二叉树、二叉查找树、二叉搜索树</li>
<li>平衡二叉树：AVL树，任何节点的左右子树的高度差不超过 1</li>
</ul>
</li>
<li><strong>哈夫曼树</strong>：最优二叉树，带权路径最短的二叉树<ul>
<li>路径长度：两个节点之间所经过的分支数目</li>
<li>树带权路径长度：所有叶子节点的带权路径长度之和</li>
<li>节点带权路径长度：节点到根节点的分支数目和该节点权值的乘积</li>
</ul>
</li>
<li><strong>B 树</strong>：一种对读写操作进行优化的自平衡的二叉查找树，能够保持数据有序，拥有多余两个子树。</li>
</ul>
</li>
</ul>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ul>
<li>中序遍历<ul>
<li>顺序：左侧子节点、节点本身、右侧子节点</li>
<li>应用：排序操作</li>
</ul>
</li>
<li>前序遍历<ul>
<li>顺序：节点本身、左侧子节点、右侧子节点</li>
<li>应用：打印一个结构化的文档</li>
</ul>
</li>
<li>后序遍历<ul>
<li>顺序：左侧子节点、节点本身、右侧子节点</li>
<li>应用：计算目录及其子目录的文件空间</li>
</ul>
</li>
</ul>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3>  <div align="center">  
      <img src="/images/js/binary-order.png" alt="二叉树顺序存储结构" width="100%">
  </div>
  <div align="center">
      <img src="/images/js/binary-link.png" alt="二叉树链式存储结构" width="100%">
  </div>


  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序存储结构</span></span><br><span class="line"><span class="keyword">var</span> tree = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, , <span class="number">6</span>, , , <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式存储结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryNode</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key, left = <span class="literal">null</span>, right = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = left</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = right</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="comment">// 数据元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key </span><br><span class="line">    <span class="comment">// 指向左右节点的指针</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(key)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">insertNode</span> = (<span class="params">node, newNode</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (newNode.<span class="property">key</span> &lt; node.<span class="property">key</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">left</span> = newNode</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">insertNode</span>(node.<span class="property">left</span>, newNode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                node.<span class="property">right</span> = newNode</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">insertNode</span>(node.<span class="property">right</span>, newNode)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">root</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">root</span> = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, newNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历</span></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inOrderTraverseNode</span> = (<span class="params">node, callback</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title function_">inOrderTraverseNode</span>(node.<span class="property">left</span>, callback)</span><br><span class="line">            <span class="title function_">callback</span>(node.<span class="property">key</span>)</span><br><span class="line">            <span class="title function_">inOrderTraverseNode</span>(node.<span class="property">right</span>, callback)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">inOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序遍历</span></span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">preOrderTraverseNode</span> = (<span class="params">node, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(node.<span class="property">key</span>)</span><br><span class="line">          <span class="title function_">preOrderTraverseNode</span>(node.<span class="property">left</span>, callback)</span><br><span class="line">          <span class="title function_">preOrderTraverseNode</span>(node.<span class="property">right</span>, callback)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">preOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后序遍历</span></span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">postOrderTraverseNode</span> = (<span class="params">node, callback</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="title function_">postOrderTraverseNode</span>(node.<span class="property">left</span>, callback)</span><br><span class="line">          <span class="title function_">postOrderTraverseNode</span>(node.<span class="property">right</span>, callback)</span><br><span class="line">          <span class="title function_">callback</span>(node.<span class="property">key</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">postOrderTraverseNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">min</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">minNode</span> = node =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> node ? (node.<span class="property">left</span> ? <span class="title function_">minNode</span>(node.<span class="property">left</span>) : node) : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">minNode</span>(node || <span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">max</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">maxNode</span> = node =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> node ? (node.<span class="property">right</span> ? <span class="title function_">maxNode</span>(node.<span class="property">right</span>) : node) : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">maxNode</span>(node || <span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">search</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">searchNode</span> = (<span class="params">node, key</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">key</span> === key) <span class="keyword">return</span> node</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">searchNode</span>((key &lt; node.<span class="property">key</span>) ? node.<span class="property">left</span> : node.<span class="property">right</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">searchNode</span>(root, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_removeNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_removeNode</span>(<span class="params">node, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.<span class="property">key</span>) &#123;</span><br><span class="line">        node.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="title function_">_removeNode</span>(node.<span class="property">left</span>, key)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.<span class="property">key</span>) &#123;</span><br><span class="line">        node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">_removeNode</span>(node.<span class="property">right</span>, key)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.<span class="property">right</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.<span class="property">left</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> minNode = <span class="variable language_">this</span>.<span class="title function_">_findMinNode</span>(node.<span class="property">right</span>)</span><br><span class="line">            node.<span class="property">key</span> = minNode.<span class="property">key</span></span><br><span class="line">            node.<span class="property">right</span> = <span class="variable language_">this</span>.<span class="title function_">_removeNode</span>(node.<span class="property">right</span>, minNode.<span class="property">key</span>)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>()</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">11</span>)</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">7</span>)</span><br><span class="line">tree.<span class="title function_">insert</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tree)</span><br><span class="line">tree.<span class="title function_">inOrderTraverse</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(value) &#125;)</span><br></pre></td></tr></table></figure>


<h1 id="八、图"><a href="#八、图" class="headerlink" title="八、图"></a>八、图</h1><blockquote>
<p>由一系列顶点和连接顶点的边组成的一种非线性数据结构，可以用来表示任何二元关系。</p>
</blockquote>
<h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><blockquote>
<p>没有绝对正确的表示方式，采用哪种方式取决于图的类型和待解决的问题。</p>
</blockquote>
<h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><blockquote>
<p>使用一个二维数组来表示图中顶点之间的连接，如果索引为 i、j 的两个节点连接，则 arr[i][j] &#x3D;&#x3D;&#x3D; 1，否则为 0。缺点是只有一个相邻顶点的顶点也需要一整行来表示连接，浪费内存。</p>
</blockquote>
  <div align="center">
      <img src="/images/js/near-matrix.png" alt="邻接矩阵" width="100%">
  </div>


<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><blockquote>
<p>由图中每个顶点的相邻顶点列表所组成。只要能表示一对多的数据结构都可以用来描述邻接表，比如多维数组、链表、散列表、字典等。</p>
</blockquote>
  <div align="center">
      <img src="/images/js/near-table.png" alt="邻接表" width="100%">
  </div>

<h3 id="关联矩阵"><a href="#关联矩阵" class="headerlink" title="关联矩阵"></a>关联矩阵</h3><blockquote>
<p>矩阵的行列分别表示顶点和边，使用二维数组表示两者之间的连通性，如果顶点A 是边 E 的入射点，则 array[A][E] &#x3D;&#x3D;&#x3D; 1，否则为 0。通常用于边的数量比顶点少的情况，以节省空间和内存。</p>
</blockquote>
  <div align="center">
      <img src="/images/js/near-table.png" alt="关联矩阵" width="100%">
  </div>

    
<h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><blockquote>
<p>可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环等。思路是追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探索。</p>
</blockquote>
<ul>
<li>广度优先搜索：一层一层的遍历顶点</li>
<li>深度优先搜索：选择一个路径一直深入遍历直到尽头，再递归回去选择未访问的顶点</li>
</ul>
<h2 id="创建图类"><a href="#创建图类" class="headerlink" title="创建图类"></a>创建图类</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span> = <span class="keyword">new</span> <span class="title class_">Dictionary</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加顶点</span></span><br><span class="line">  <span class="title function_">addVertex</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">push</span>(v)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">set</span>(v, [])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加线</span></span><br><span class="line">  <span class="title function_">addEdge</span>(<span class="params">v, w</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(v).<span class="title function_">push</span>(w)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(w).<span class="title function_">push</span>(v)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">r, v, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">adjList</span>.<span class="title function_">get</span>(v).<span class="title function_">reduce</span>(<span class="function">(<span class="params">r, w, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r + <span class="string">`<span class="subst">$&#123;w&#125;</span> `</span></span><br><span class="line">        &#125;, <span class="string">`<span class="subst">$&#123;r&#125;</span>\n<span class="subst">$&#123;v&#125;</span> =&gt; `</span>)</span><br><span class="line">    &#125;, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建顶点之间的路径</span></span><br><span class="line">  <span class="title function_">distance</span>(<span class="params">fromVertex</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vertices = <span class="variable language_">this</span>.<span class="property">vertices</span></span><br><span class="line">    <span class="keyword">const</span> &#123; distances, predecessors &#125; = <span class="variable language_">this</span>.<span class="title function_">bfs</span>(fromVertex)</span><br><span class="line">    vertices.<span class="title function_">forEach</span>(<span class="function"><span class="params">toVertex</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!!distances[toVertex]) &#123;</span><br><span class="line">            <span class="keyword">let</span> preVertex = predecessors[toVertex]</span><br><span class="line">            <span class="keyword">let</span> slug = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">while</span> (fromVertex !== preVertex) &#123;</span><br><span class="line">                slug = <span class="string">`<span class="subst">$&#123;preVertex&#125;</span> - <span class="subst">$&#123;slug&#125;</span>`</span></span><br><span class="line">                preVertex = predecessors[preVertex]</span><br><span class="line">            &#125;</span><br><span class="line">            slug = <span class="string">`<span class="subst">$&#123;fromVertex&#125;</span> - <span class="subst">$&#123;slug&#125;</span><span class="subst">$&#123;toVertex&#125;</span>`</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(slug)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 广度优先搜索算法</span></span><br><span class="line">  <span class="title function_">bfs</span>(<span class="params">v, callback</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> read = []</span><br><span class="line">      <span class="keyword">const</span> distances = []</span><br><span class="line">      <span class="keyword">const</span> predecessors = []</span><br><span class="line">      <span class="keyword">const</span> adjList = <span class="variable language_">this</span>.<span class="property">adjList</span></span><br><span class="line">      <span class="keyword">const</span> pending = [v || <span class="variable language_">this</span>.<span class="property">vertices</span>[<span class="number">0</span>]]</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">readVertices</span> = vertices =&gt; &#123;</span><br><span class="line">        vertices.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            read.<span class="title function_">push</span>(key)</span><br><span class="line">            pending.<span class="title function_">shift</span>()</span><br><span class="line">            distances[key] = distances[key] || <span class="number">0</span></span><br><span class="line">            predecessors[key] = predecessors[key] || <span class="literal">null</span></span><br><span class="line">            adjList.<span class="title function_">get</span>(key).<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!pending.<span class="title function_">includes</span>(v) &amp;&amp; !read.<span class="title function_">includes</span>(v)) &#123;</span><br><span class="line">                    pending.<span class="title function_">push</span>(v)</span><br><span class="line">                    distances[v] = distances[key] + <span class="number">1</span></span><br><span class="line">                    predecessors[v] = key</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(key)</span><br><span class="line">            <span class="keyword">if</span> (pending.<span class="property">length</span>) <span class="title function_">readVertices</span>(pending)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">readVertices</span>(pending)</span><br><span class="line">      <span class="keyword">return</span> &#123; distances, predecessors &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 深度优先搜索算法</span></span><br><span class="line">  <span class="title function_">dfs</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> readTimer = <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> read = []</span><br><span class="line">      <span class="keyword">const</span> readTimes = []</span><br><span class="line">      <span class="keyword">const</span> finishedTimes = []</span><br><span class="line">      <span class="keyword">const</span> predecessors = []</span><br><span class="line">      <span class="keyword">const</span> adjList = <span class="variable language_">this</span>.<span class="property">adjList</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">readVertices</span> = (<span class="params">vertices, predecessor</span>) =&gt; &#123;</span><br><span class="line">        vertices.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            readTimer++</span><br><span class="line">            <span class="keyword">if</span> (adjList.<span class="title function_">get</span>(key).<span class="title function_">every</span>(<span class="function"><span class="params">v</span> =&gt;</span> read.<span class="title function_">includes</span>(v)) &amp;&amp; !finishedTimes[key]) &#123;</span><br><span class="line">                finishedTimes[key] = readTimer</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (read.<span class="title function_">includes</span>(key)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            readTimes[key] = readTimer</span><br><span class="line">            read.<span class="title function_">push</span>(key)</span><br><span class="line">            <span class="keyword">if</span> (callback) <span class="title function_">callback</span>(key)</span><br><span class="line">            predecessors[key] = predecessors[key] || predecessor || <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (read.<span class="property">length</span> !== <span class="variable language_">this</span>.<span class="property">vertices</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="title function_">readVertices</span>(adjList.<span class="title function_">get</span>(key), key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">readVertices</span>(adjList.<span class="property">keys</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123; readTimes, finishedTimes, predecessors &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> <span class="title class_">Graph</span>()</span><br><span class="line"><span class="keyword">const</span> vertices = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>];</span><br><span class="line">vertices.<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> graph.<span class="title function_">addVertex</span>(v))</span><br><span class="line"></span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph.<span class="title function_">toString</span>())  </span><br><span class="line">graph.<span class="title function_">bfs</span>(graph.<span class="property">vertices</span>[<span class="number">0</span>], <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Visited: &#x27;</span> + value))</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数据类型</title>
    <url>/2019/05/18/4-3-js%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="一、字符串"><a href="#一、字符串" class="headerlink" title="一、字符串"></a>一、字符串</h1><blockquote>
<p>用于存储和处理文本，可看作类数组</p>
</blockquote>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str_1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str_2 = <span class="title class_">String</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> str_3 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello str&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul>
<li>length：长度</li>
<li>prototype：原型属性，保存当前对象的原型对象</li>
<li>constructor：引用属性，保存当前对象的构造函数</li>
</ul>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li>字符索引：<code>charAt、indexOf</code></li>
<li>正则匹配：<code>match、search、replace</code></li>
<li>分割为数组：<code>split</code></li>
<li>字符串连接：<code>concat</code></li>
<li>裁剪字符串：<code>slice、substr、substring</code></li>
</ul>
<h2 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line"><span class="keyword">var</span> eg1 = <span class="string">&quot; ab &quot;</span>.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除左边的空格</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">LTrim</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除右边的空格</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Rtrim</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/(\s*$)/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除前后空格</span></span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Trim</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　</p>
<h1 id="二、对象"><a href="#二、对象" class="headerlink" title="二、对象"></a>二、对象</h1><blockquote>
<p>由方法和属性作为键值对组成的一个无序集合。可看作是一个黑盒子，使用时只关注它的对外接口而不需要了解内部结构</p>
</blockquote>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol>
<li>内部对象<br><div style="text-indent: 2em">包括<code>Array、Boolean、Date、Function、Global、Math、Number、Object、RegExp、String以及 Error、ReferenceError等各种错误类对象</code>。其中 <code>Global 和 Math</code> 这两个对象又被称为“内置对象”，这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。</div></li>
<li>宿主对象<br><div style="text-indent: 2em">执行JS脚本的环境提供的对象。对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象，如<code>Window、Documen、Element、form、image</code>等。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭，这也带来了浏览器兼容问题，增加开发难度。</div></li>
<li>自定义对象<br><div style="text-indent: 2em">开发人员自己定义的对象，用于扩展 JS 应用和功能。</div></li>
</ol>
<h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><blockquote>
<p><code>字面量方式 和 new Object()</code> 是两种最常用的对象创建方式，但是在使用同一接口创建多个对象时会产生大量重复代码，为了简化代码量并提高可维护性，项目开发时一般使用面向对象写法。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、字面量创建</span></span><br><span class="line"><span class="keyword">var</span> p1 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;lisa&quot;</span>,</span><br><span class="line">        <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 报错, null / &quot;&quot; 都可以</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&quot;name&quot;</span>: <span class="title class_">None</span> &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、Object.create 将对象继承到 __proto__ 属性上</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">__proto__</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、new 继承构造函数的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建系统内置对象</span></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;)  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3) </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;ys&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建自定义对象 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p4 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tom&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><ul>
<li><strong>赋值</strong><ul>
<li><code>=、new Object</code> </li>
<li>原始对象和目标对象指向同一内存地址，任何修改都会相互影响</li>
</ul>
</li>
<li><strong>浅拷贝</strong><ul>
<li><code>Object.assign / $.extend (target, [objN])</code> </li>
<li>只有目标对象的内层对象修改时才会影响原始对象</li>
</ul>
</li>
<li><strong>深拷贝</strong><ul>
<li><code>for in / JSON.parse(JSON.stringify(obj)) / $.extend(true, target, [objN])</code></li>
<li>目标对象的任何修改都不会影响到原始对象</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> _obj = obj;</span><br><span class="line">_obj.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>, _obj.<span class="property">age</span>); <span class="comment">// 20 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123; <span class="attr">home</span>: <span class="string">&#x27;北京&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _boy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, boy);</span><br><span class="line">_boy.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">_boy.<span class="property">address</span>.<span class="property">home</span> = <span class="string">&quot;上海&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">age</span>, _boy.<span class="property">age</span>);   <span class="comment">// 18 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">address</span>.<span class="property">home</span>, _boy.<span class="property">address</span>.<span class="property">home</span>); <span class="comment">// 上海 上海</span></span><br></pre></td></tr></table></figure>
<h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><ul>
<li><strong>数据属性</strong>：包含一个数据值的位置，用于读取和写入值<ul>
<li>Configurable：配置，表示能否删除</li>
<li>Enumerable：枚举，表示能否通过 for-in 循环</li>
<li>Writable：可写，表示能否修改属性值</li>
<li>Value：属性的数据值，表示读写属性值的位置</li>
</ul>
</li>
<li><strong>访问器属性</strong><ul>
<li>即存取器属性，是一组获取和设置值的函数</li>
<li>设置 get&#x2F;set 特性之后，属性就会变成访问器属性</li>
<li>不能直接定义，必须使用 Object.defineProperty() 来定义</li>
<li>分类：Configurable、Enumerable、Get、Set</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123; </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Jine&quot;</span>, </span><br><span class="line">  <span class="attr">_year</span>: <span class="number">2020</span>    <span class="comment">// 私有属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看属性</span></span><br><span class="line"><span class="keyword">var</span> prop = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(cat, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数据属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(cat, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置访问器属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(dog, <span class="string">&#x27;year&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_year</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_year</span> = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化对象属性值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span> + <span class="string">&quot;_s&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">n</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = n </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Lisa&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);  <span class="comment">// Lisa_s</span></span><br></pre></td></tr></table></figure>


<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="comment">// 点操作后只能是属性名，有横杠时须去掉并把后面的首字母大写</span></span><br><span class="line"><span class="keyword">var</span> name = obj.<span class="property">name</span>   </span><br><span class="line"> <span class="comment">// 中括号中可放属性名或变量名  </span></span><br><span class="line"><span class="keyword">var</span> age = obj[<span class="string">&#x27;age&#x27;</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;新属性值&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">obj.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">age</span>          </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断类型</span></span><br><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断对象实例是否包含某个属性</span></span><br><span class="line">obj.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断对象实例及其原型中是否包含某个属性</span></span><br><span class="line"><span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断`obj`是否为空</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEmptyObject</span>(<span class="params">obj</span>)&#123;  </span><br><span class="line">  <span class="keyword">if</span>(!obj || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ! <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><div style="text-indent: 2em">每个对象都会在其内部初始化一个属性，就是 prototype (原型)，当我们访问一个对象的属性时，如果这个对象内部没有这个属性则去 prototype 里找这个属性，这个 prototype 又会有自己的 prototype，直到 null 结束，如果没有则返回undefined，这就是原型链的运行原理，即查找顺序：`实例对象 obj --> 原型对象 fn.prototype --> Object.prototype -->  null`</div>

<ol>
<li>相互关系：<code>obj.constructor.prototype = obj.__proto__</code></li>
<li>函数对象：通过 new Function() 创建都是函数对象，其他的都是普通对象。每个对象都有 <code>__proto__</code> 属性指向原型对象，但只有函数对象才有 <code>prototype</code> 属性</li>
<li>原型对象：一个普通对象。所有的原型对象都会自动获得一个指向其构造函数的指针 <code>constructor</code>，构造函数通过 <code>prototype</code> 属性指向它的原型对象，可以说 原型对象 <code>Person.prototype</code> 就是构造函数 <code>Person</code> 的一个实例</li>
<li>原型链继承：利用原型让一个引用类型继承另一个引用类型的属性和方法，即让原型对象等于另一个类型的实例，这样就可以通过 <code>__proto__</code> 属性构成实例与原型的链条, 从而实现继承。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;son1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;son2&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">__proto__</span> == s2.<span class="property">__proto__</span>)</span><br></pre></td></tr></table></figure>


<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><div style="text-indent: 2em">JSON 是一种轻量级的数据交互方式，可以存储和传输数据而显示更丰富的信息，一般作为前后端交互的数据格式。</div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json 对象转为字符串</span></span><br><span class="line"><span class="keyword">var</span> json_1 = &#123; <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">var</span> strJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// json 字符串转为对象</span></span><br><span class="line"><span class="keyword">var</span> strJson = <span class="string">&#x27;&#123; name: &quot;tom&quot;, age: 18 &#125;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> json_2 = <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> +strJson+ <span class="string">&#x27;)&#x27;</span>);   <span class="comment">// 不建议使用</span></span><br><span class="line"><span class="keyword">var</span> json_3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(strJson)        <span class="comment">// 接近 W3C 标准</span></span><br></pre></td></tr></table></figure>


<h2 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h2><div style="text-indent: 2em">拥有一个length属性和若干索引属性的对象，常见的有 `arguments、document.forms、document.getElementsByClassName`。arguments 是函数中自动创建的一种类数组对象，用来模拟函数重载效果（根据传入参数个数执行不同函数）。</div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换为数组</span></span><br><span class="line"><span class="keyword">var</span> arrayLike = &#123; <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;b&#x27;</span>, length : <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike);</span><br><span class="line"><span class="keyword">var</span> arr2 = [].<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike);</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 重载</span></span><br><span class="line"><span class="keyword">var</span> checkout = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  　　<span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>==<span class="number">0</span>)&#123;</span><br><span class="line">  　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;微信&quot;</span>);</span><br><span class="line">  　　&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>==<span class="number">1</span>)&#123;</span><br><span class="line">  　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;现金&quot;</span>);</span><br><span class="line">  　　&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;刷卡&quot;</span>);</span><br><span class="line">  　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">checkout</span>();      <span class="comment">// 微信</span></span><br><span class="line"><span class="title function_">checkout</span>(<span class="number">100</span>);   <span class="comment">// 现金</span></span><br><span class="line"><span class="title function_">checkout</span>(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// 刷卡</span></span><br></pre></td></tr></table></figure>



<h1 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h1><blockquote>
<p>一组数据的有序集合，表现形式是内存中的一段连续的内存地址</p>
</blockquote>
<h2 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接创建 </span></span><br><span class="line"><span class="keyword">var</span> arr = []            <span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    <span class="comment">// 三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过构造函数</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>()    <span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>)    <span class="comment">// 长度为10 </span></span><br><span class="line"><span class="keyword">var</span> arr3 =  <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">// 两个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中是否存在下标为 1 的元素</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> arr </span><br></pre></td></tr></table></figure>

<h2 id="拷贝-1"><a href="#拷贝-1" class="headerlink" title="拷贝"></a>拷贝</h2><ul>
<li>浅拷贝<ul>
<li><code>arr.slice(0)、arr.concat()</code></li>
<li>如果数组元素都是基本类型，原始数组和目标数组的修改互不影响</li>
<li>如果数组元素是对象或数组，这样会只拷贝引用而导致修改时相互影响</li>
</ul>
</li>
<li>深拷贝<ul>
<li><code>JSON.parse(JSON.stringify(arr))</code></li>
<li>不论数组元素是什么类型，原始数组和目标数组的修改都会互不影响</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> shallowCopy = <span class="keyword">function</span> (<span class="params">obj</span>) &#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>; </span><br><span class="line">  <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">var</span> deepCopy = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> newObj = obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      newObj[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">deepCopy</span>(obj[key]) : obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="特殊数组"><a href="#特殊数组" class="headerlink" title="特殊数组"></a>特殊数组</h2><ul>
<li>多维数组：元素是数组</li>
<li>稀疏数组：索引不连续，length值大于实际元素个数</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [ [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, ‘good’] ]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>


<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ol>
<li>基础<br>* 读写：<code>索引/属性</code><br>* 添加：<code>arr[index] = new</code><br>* 删除：<code>delete arr[index]</code><br>* 遍历：<code>for</code></li>
<li>ES3<br>* 添加：<code>push、unshift、concat</code><br>* 删除：<code>pop、shift</code><br>* 裁剪：<code>slice、splice</code><br>* 排序：<code>sort、reverse</code><br>* 转换：<code>join、toString</code></li>
<li>ES5<br>* 位置：<code>indexOf、lastIndexOf</code><br>* 迭代：<code>every、some、filter、forEach、map</code><br>* 累计：<code>reduce</code></li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 元素读写</span></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"> consloe.<span class="title function_">log</span>(arr.<span class="property">length</span>)</span><br><span class="line"> consloe.<span class="title function_">log</span>(arr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"> arr[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"> arr[-<span class="number">1.23</span>] = <span class="literal">true</span>  <span class="comment">// 超出范围时就不是索引，而是属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 判断是否数组</span></span><br><span class="line"> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)   </span><br><span class="line"> arr <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"> arr.<span class="property">constructor</span> === <span class="title class_">Array</span></span><br><span class="line"> arr.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">apply</span>([<span class="title class_">Array</span>])</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 判断元素         </span></span><br><span class="line"> arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line"> &#125;) </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123; </span><br><span class="line">     <span class="keyword">return</span> a-b</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 遍历</span></span><br><span class="line"> arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123; &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 映射返回新数组，原数组不改变</span></span><br><span class="line"> arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123; </span><br><span class="line">     <span class="keyword">return</span> value * <span class="number">2</span>    </span><br><span class="line"> &#125;)</span><br><span class="line"> arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 过滤不符合条件的元素</span></span><br><span class="line"> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index</span>)&#123; </span><br><span class="line">     <span class="keyword">return</span> value % <span class="number">2</span> !== <span class="number">0</span></span><br><span class="line"> &#125;)          </span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 累计</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">count</span> = arr =&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> pre + cur</span><br><span class="line">     &#125;, <span class="number">0</span>) </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h2 id="扩展方法-1"><a href="#扩展方法-1" class="headerlink" title="扩展方法"></a>扩展方法</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)</span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)</span><br><span class="line"><span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]  </span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))   <span class="comment">// Set 有元素唯一的特性</span></span><br></pre></td></tr></table></figure>
<h1 id="四、Base64"><a href="#四、Base64" class="headerlink" title="四、Base64"></a>四、Base64</h1><h2 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h2><ul>
<li><strong>字节</strong>：存储二进制数据的基本单位，可表示的范围是 0～255 (十六进制：0x00～0xFF)，其中 ASCII 值的范围为 0～127 (十六进制：0x00～0x7F)，而超过 ASCII 范围的 128～255 (十六进制：0x80 ～ 0xFF) 之间的值是不可见字符。</li>
<li><strong>ASCII</strong>：美国信息交换标准代码) 是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语，其扩展版本可以部分支持其他西欧语言。其中 0～31、127 是控制字符(33 个)，32～126 是可打印字符(95 个)。</li>
<li><strong>传输问题</strong>：当不可见字符在网络上传输时一般需要经过多个路由设备，但是不同设备对字符的处理方式有些不同而可能导致字符被处理错误，常见的有中文乱码、图片失败等。</li>
</ul>
<h2 id="base64-简介"><a href="#base64-简介" class="headerlink" title="base64 简介"></a>base64 简介</h2><ul>
<li><strong>base64</strong>：基于 64 个可打印字符 <code>A-Z、a-z、0-9、+、/</code> 来表示二进制数据的一种方法。常用于处理文本数据的场合，表示、传输、存储一些二进制数据，包括 MIME 电子邮件、XML 复杂数据。</li>
<li><strong>编码规则</strong>：一种将二进制序列的数据转换为字符串的算法，只是无法直接看到明文但并非加密。中文通过 utf-8、gbk 等编码方式获取不同结果，图像和文本等转换为二进制序列后才能进行 Base64 编码。</li>
<li><strong>base64 编码</strong>：由于 2⁶ &#x3D; 64，所以每 6 个比特为一个单元并对应某个可打印字符。3 个字节有 24 个比特并对应 4 个 base64 单元，即 3 个字节可由 4 个可打印字符来表示并对应 24 个二进制位。</li>
</ul>
<h2 id="图片应用"><a href="#图片应用" class="headerlink" title="图片应用"></a>图片应用</h2><blockquote>
<p>base64Url 字符串作为图片地址、图片上传时一般使用截取 <code>data:image/png;base64</code> 的纯字符串。编码后的数据体积一般会变大，浏览器不会缓存 base64Url 图片而需要每次访问页面时下载一次，所以不适合大量使用和复杂图片。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@title</span> 图片预览</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@method</span> changeImg        图片选中：获取 file 对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@method</span> fileReader       图片读取：file 转 base64</span></span><br><span class="line"><span class="comment">  * &lt;input type=&quot;file&quot; accept=&quot;image/*&quot; capture=&quot;camera&quot; </span></span><br><span class="line"><span class="comment">    <span class="doctag">@change</span>=&quot;changeImg&quot; /&gt;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">async</span> changeImg (e) &#123;</span><br><span class="line">    <span class="keyword">let</span> file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!file) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> base64Img = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fileReader</span>(file);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">async</span> clickImg () &#123;</span><br><span class="line">    <span class="keyword">let</span> base64Img = <span class="title function_">getBase64Image</span>(<span class="string">&quot;./pic.png&quot;</span>, <span class="number">0.8</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 图片文件</span></span><br><span class="line">fileReader (file, maxSize) &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line">        (reader.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// Base64 格式</span></span><br><span class="line">getBase64Img (url, quality = <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span> = url</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">            canvas.<span class="property">width</span> = img.<span class="property">width</span>;</span><br><span class="line">            canvas.<span class="property">height</span> = img.<span class="property">height</span>;</span><br><span class="line">            <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">            ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, img.<span class="property">width</span>, img.<span class="property">height</span>);</span><br><span class="line">            dataURL = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>, quality);</span><br><span class="line">            <span class="title function_">resolve</span>(dataURL)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式转换</span></span><br><span class="line">dataUrlToBlob (dataurl, mimeType = <span class="string">&#x27;text/plain&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = <span class="variable language_">window</span>.<span class="title function_">atob</span>(dataurl.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">let</span> ab = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(bytes.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">let</span> ia = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(ab);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bytes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        ia[i] = bytes.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([ab], &#123; <span class="attr">type</span>: mimeType &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">dataUrlToFile (dataurl, filename = <span class="string">&#x27;file.txt&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = dataurl.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">    mime = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">    bstr = <span class="title function_">atob</span>(arr[<span class="number">1</span>]),</span><br><span class="line">    n = bstr.<span class="property">length</span>,</span><br><span class="line">    u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.<span class="title function_">charCodeAt</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], filename, &#123; <span class="attr">type</span>: mime &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生 API：编码、解码、中文编码时需要先进行 URI 组件编码</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">btoa</span>(<span class="string">&#x27;xiaomabuhei&#x27;</span>)     </span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">atob</span>(<span class="string">&#x27;eGlhb21hYnVoZWk=&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">btoa</span>(<span class="variable language_">window</span>.<span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;小黑马&#x27;</span>))</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">decodeURIComponent</span>(<span class="variable language_">window</span>.<span class="title function_">atob</span>(baseStr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 JS</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Base64</span> = &#123;</span><br><span class="line">  <span class="attr">_keyStr</span>: <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">encode</span>: <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;  </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;  </span><br><span class="line">    input = <span class="title class_">Base64</span>.<span class="title function_">_utf8_encode</span>(input);  </span><br><span class="line">    <span class="keyword">while</span> (i &lt; input.<span class="property">length</span>) &#123;  </span><br><span class="line">        chr1 = input.<span class="title function_">charCodeAt</span>(i++);  </span><br><span class="line">        chr2 = input.<span class="title function_">charCodeAt</span>(i++);  </span><br><span class="line">        chr3 = input.<span class="title function_">charCodeAt</span>(i++);  </span><br><span class="line">        enc1 = chr1 &gt;&gt; <span class="number">2</span>;  </span><br><span class="line">        enc2 = ((chr1 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | (chr2 &gt;&gt; <span class="number">4</span>);  </span><br><span class="line">        enc3 = ((chr2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | (chr3 &gt;&gt; <span class="number">6</span>);  </span><br><span class="line">        enc4 = chr3 &amp; <span class="number">63</span>;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr2)) &#123;  </span><br><span class="line">            enc3 = enc4 = <span class="number">64</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr3)) &#123;  </span><br><span class="line">            enc4 = <span class="number">64</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        output = output +  </span><br><span class="line">        _keyStr.<span class="title function_">charAt</span>(enc1) + _keyStr.<span class="title function_">charAt</span>(enc2) +  </span><br><span class="line">        _keyStr.<span class="title function_">charAt</span>(enc3) + _keyStr.<span class="title function_">charAt</span>(enc4);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> output; </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">decode</span>: <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">var</span> chr1, chr2, chr3;  </span><br><span class="line">    <span class="keyword">var</span> enc1, enc2, enc3, enc4;  </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;  </span><br><span class="line">    input = input.<span class="title function_">replace</span>(<span class="regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">    <span class="keyword">while</span> (i &lt; input.<span class="property">length</span>) &#123;  </span><br><span class="line">        enc1 = _keyStr.<span class="title function_">indexOf</span>(input.<span class="title function_">charAt</span>(i++));  </span><br><span class="line">        enc2 = _keyStr.<span class="title function_">indexOf</span>(input.<span class="title function_">charAt</span>(i++));  </span><br><span class="line">        enc3 = _keyStr.<span class="title function_">indexOf</span>(input.<span class="title function_">charAt</span>(i++));  </span><br><span class="line">        enc4 = _keyStr.<span class="title function_">indexOf</span>(input.<span class="title function_">charAt</span>(i++));  </span><br><span class="line">        chr1 = (enc1 &lt;&lt; <span class="number">2</span>) | (enc2 &gt;&gt; <span class="number">4</span>);  </span><br><span class="line">        chr2 = ((enc2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>) | (enc3 &gt;&gt; <span class="number">2</span>);  </span><br><span class="line">        chr3 = ((enc3 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | enc4;  </span><br><span class="line">        output = output + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(chr1);  </span><br><span class="line">        <span class="keyword">if</span> (enc3 != <span class="number">64</span>) &#123;  </span><br><span class="line">            output = output + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(chr2);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (enc4 != <span class="number">64</span>) &#123;  </span><br><span class="line">            output = output + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(chr3);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    output = <span class="title class_">Base64</span>.<span class="title function_">_utf8_decode</span>(output);  </span><br><span class="line">    <span class="keyword">return</span> output;  </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">_utf8_encode</span>: <span class="keyword">function</span>(<span class="params">string</span>) &#123;</span><br><span class="line">    string = string.<span class="title function_">replace</span>(<span class="regexp">/\r\n/g</span>, <span class="string">&quot;\n&quot;</span>);  </span><br><span class="line">    <span class="keyword">var</span> utftext = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; string.<span class="property">length</span>; n++) &#123;  </span><br><span class="line">        <span class="keyword">var</span> c = string.<span class="title function_">charCodeAt</span>(n);  </span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;  </span><br><span class="line">            utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c);  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;  </span><br><span class="line">            utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>);  </span><br><span class="line">            utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>);  </span><br><span class="line">            utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>);  </span><br><span class="line">            utftext += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> utftext; </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">_utf8_decode</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> string = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">var</span> c = c1 = c2 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> ( i &lt; utftext.<span class="property">length</span> ) &#123;  </span><br><span class="line">        c = utftext.<span class="title function_">charCodeAt</span>(i);  </span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;  </span><br><span class="line">            string += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(c);  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>((c &gt; <span class="number">191</span>) &amp;&amp; (c &lt; <span class="number">224</span>)) &#123;  </span><br><span class="line">            c2 = utftext.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>);  </span><br><span class="line">            string += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));  </span><br><span class="line">            i += <span class="number">2</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            c2 = utftext.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>);  </span><br><span class="line">            c3 = utftext.<span class="title function_">charCodeAt</span>(i+<span class="number">2</span>);  </span><br><span class="line">            string += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(((c &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));  </span><br><span class="line">            i += <span class="number">3</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="五、二进制对象"><a href="#五、二进制对象" class="headerlink" title="五、二进制对象"></a>五、二进制对象</h1><div style="text-indent: 2em">JS 最初无法处理文件、网络流等二进制编码格式的数据，只能先使用 charCodeAt() 逐字节读取或转换为 Base64 格式，但是处理速度慢而且容易出错。JS 后来通过引入 API 可以处理二进制数据但没有标准，所以 Web、NodeJS 各自处理而导致二进制处理方式有些不同。</div> 

<ul>
<li><strong>Blob</strong>：Web 一个专门用于支持文件操作的二进制对象。</li>
<li><strong>ArrayBuffer</strong>：Web Node 通用的二进制缓冲区，只读的类数组对象。</li>
<li><strong>Buffer</strong>：NodeJS 提供的一个二进制缓冲区，常用来处理 I&#x2F;O 操作。</li>
</ul>
<h2 id="Web-Node-通用"><a href="#Web-Node-通用" class="headerlink" title="Web Node 通用"></a>Web Node 通用</h2><ul>
<li><strong>ArrayBuffer</strong>：表示内存中存储了一段二进制数据的缓冲区对象，本质是一串数字组成的乱码而且没有格式。它不能直接被操作，只能通过 TypedArray、DataView 进行读写。</li>
<li><strong>TypedArray</strong>：数据类型相同而且没有空位的类数组对象，本质是二进制数据的抽象数据结构，用于以指定格式读写二进制数据但本身并不存储。主要包括三类视图：有符号整数 (Int8Array、Int16Array、Int32Array)、无符号整数 (Uint8Array、Uint16Array、Uint32Array)、浮点数 (Float32Array、Float64Array)。<br>  <strong>DataView</strong>：TypedArray 的强化版视图，成员可以是不同的数据类型，而且读写时可以自行设定大小端字节序。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、ArrayBuffer：创建、裁剪</span></span><br><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>)    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>)     <span class="comment">// 8 字节  </span></span><br><span class="line"><span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(buffer)         <span class="comment">// 是否为视图实例</span></span><br><span class="line"><span class="keyword">let</span> buffer1 = buffer.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>)   <span class="comment">// 裁剪缓冲区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、TypedArray：直接创建、buffer 转换、操作元素</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title class_">Float64Array</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; f.<span class="property">byteLength</span>; i++)&#123; &#125;</span><br><span class="line"><span class="comment">// 与普通数组互转</span></span><br><span class="line"><span class="keyword">let</span> _f = <span class="title class_">Array</span>.<span class="title function_">from</span>(f)</span><br><span class="line"><span class="keyword">let</span> _u = <span class="title class_">Array</span>.<span class="title function_">apply</span>([], u)</span><br><span class="line"><span class="keyword">let</span> u = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 与字符串互转</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, buffer)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strToBuf</span> (str) &#123;</span><br><span class="line">    <span class="comment">// 每个字符占用 2 个字节</span></span><br><span class="line">    <span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(str.<span class="property">length</span>*<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> bufView = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>(buf)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        bufView[i] = str.<span class="title function_">charCodeAt</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bufView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、DataView：独有方法写入参数为 开始位置、写入数据、大/小端读取</span></span><br><span class="line"><span class="keyword">let</span> dataView = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer)</span><br><span class="line">dataView.<span class="title function_">getInt8</span>(<span class="number">0</span>)</span><br><span class="line">dataView.<span class="title function_">setInt8</span>(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">dataView.<span class="title function_">setInt32</span>(<span class="number">0</span>, <span class="number">25</span>, <span class="literal">false</span>) </span><br></pre></td></tr></table></figure>

<h2 id="web-环境特有"><a href="#web-环境特有" class="headerlink" title="web 环境特有"></a>web 环境特有</h2><ul>
<li><p><strong>Blob 对象</strong>：表示一个不可变的文件对象，它提供了一系列操作文件的接口。</p>
</li>
<li><p><strong>Blob 功能</strong></p>
<ul>
<li>文件下载：通过 URL.createObjectURL(blob) 生成 blobUrl 赋值给 a.download。</li>
<li>图片展示：通过 URL.createObjectURL(blob) 生成 blobUrl 赋值给 img.src。</li>
<li>分片上传：通过 blob.slice 分割二进制数据上传。</li>
<li>文件读取：通过 FileReader 将 blob&#x2F;flie 转化为文本。</li>
</ul>
</li>
<li><p><strong>Blob 派生对象</strong>：继承于底层对象 blob 并进行了扩展，但其内容一样无法修改。</p>
<ul>
<li><strong>File 对象</strong>：保存文件的相关信息并允许 Js 访问。主要包括：input 元素选择文件后返回的 FileList 对象、普通元素被拖拽时返回的 DataTransfer 对象、HTMLCanvasElement 执行 mozGetAsFile() 方法后的返回结果。</li>
<li><strong>FileReader 对象</strong>：提供了异步读取文件或二进制数据并保存到 result 属性的接口：readAsText、readAsDataURL、readAsBinaryString、readAsArrayBuffer。</li>
<li><strong>URL 对象</strong>：通过内存文件创建出一个临时指向 File&#x2F;Blob 对象的 url。注意：网页刷新或关闭会导致 url 失效、同样的 blob 在不同的事件调用中会得到不同 url。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 1、Blob 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 创建：new Blob(二进制对象或字符串的数组, 数据类型)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> 裁剪：blob.slice(start, end, contentType)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> canvas.toBlob(callback, type, options)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&quot;Hello World&quot;</span>], &#123;<span class="attr">type</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([buffer], &#123;<span class="attr">type</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uArr = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>([<span class="number">97</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">100</span>]);</span><br><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([uArr]);</span><br><span class="line"></span><br><span class="line">blob.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">5</span>)   <span class="comment">// 裁剪并返回新对象</span></span><br><span class="line">blob.<span class="title function_">close</span>()       <span class="comment">// 释放对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.<span class="title function_">toBlob</span>(<span class="keyword">function</span>(<span class="params">blob</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(blob)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">blobToFile</span> (blob, fileName) &#123;</span><br><span class="line">    blob.<span class="property">lastModifiedDate</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    blob.<span class="property">name</span> = fileName;</span><br><span class="line">    <span class="keyword">return</span> blob;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、File 对象：选择文件后获取文件信息、拖动结束时获取拖动数据</span></span><br><span class="line"><span class="keyword">var</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#fileInput&quot;</span>);</span><br><span class="line">fileInput.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fileList = fileInput.<span class="property">files</span></span><br><span class="line">    <span class="keyword">var</span> file = fileList[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file.<span class="property">name</span>, file.<span class="property">size</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;#box&quot;</span>);</span><br><span class="line">box.<span class="property">ondrop</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="comment">// 拖动的默认处理方式是在新窗口打开</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">dataTransfer</span>.<span class="property">files</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 3、FileReader 读取数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> readAsText(file, encoding)：返回纯文本，编码格式默认 UTF-8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> readAsDataURL(file)：返回 Base64 编码的 dataURL 字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> readAsBinaryString(file)：返回原始二进制字符串（每个字符表示一字节）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> readAsArrayBuffer(file)：返回包含文件内容的 ArrayBuffer 对象</span></span><br><span class="line"><span class="comment"> **/</span> </span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="title function_">readAsArrayBuffer</span>(file);</span><br><span class="line"></span><br><span class="line">reder.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;      <span class="comment">// 更新</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reader.<span class="property">result</span>)  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;         <span class="comment">// 成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reader.<span class="property">result</span>)  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">result</span>)</span><br><span class="line">&#125;</span><br><span class="line">reader.<span class="property">onloadstart</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; &#125;  <span class="comment">// 开始</span></span><br><span class="line">reader.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; &#125;    <span class="comment">// 完成</span></span><br><span class="line">reader.<span class="property">onabort</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; &#125;      <span class="comment">// 中止</span></span><br><span class="line">reader.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123; &#125;      <span class="comment">// 出错</span></span><br><span class="line">reader.<span class="title function_">abort</span>() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、URL 对象：在网页插入图片</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(file);   <span class="comment">// 生成</span></span><br><span class="line">img.<span class="property">width</span> = <span class="number">60</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(<span class="variable language_">this</span>.<span class="property">src</span>);     <span class="comment">// 释放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Node-环境特有"><a href="#Node-环境特有" class="headerlink" title="Node 环境特有"></a>Node 环境特有</h2><blockquote>
<p>Buffer 表示 V8 堆内存之外的一块原始内存，并不会占用 NodeJS 进程内存，常用来存储需要占用大量内存的数据。它继承于 Uint8Array 并实现了更多的接口，对象中的每个元素储存着 2 位 16 进制的数据，代表内存的一个字节。注意一个 Buffer 对象的大小在创建时就会固定下来，即创建之后不可改变。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> 创建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> new Buffer：已弃用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Buffer.from：参数可为 string、buffer、array、object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Buffer.alloc：指定大小并已经初始化数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@prame</span> Buffer.allocUnsafe：指定大小但并不初始化数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">0x62</span>, <span class="number">0x75</span>, <span class="number">0x66</span>]);</span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">5</span>, <span class="string">&#x27;aG8Q=&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>);  <span class="comment">// 一个参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="property">length</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">isBuffer</span>(buf);           <span class="comment">// 是否 buffer 对象     </span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">isEncoding</span>(<span class="string">&#x27;base64&#x27;</span>);    <span class="comment">// 是否支持指定编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">buf.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">buf.<span class="title function_">compare</span>(_buf)</span><br><span class="line">buf.<span class="title function_">copy</span>(buf, <span class="number">2</span>)</span><br><span class="line">buf.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">buf.<span class="title function_">fill</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">concat</span>([buf, buf])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写</span></span><br><span class="line"><span class="keyword">var</span> value = buf.<span class="title function_">readInt32LE</span>(<span class="number">0</span>)</span><br><span class="line">buf.<span class="title function_">writeFloatLE</span>(<span class="number">3.</span> <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换</span></span><br><span class="line">buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">buf.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>)             <span class="comment">// test</span></span><br><span class="line">buf.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>, <span class="number">0</span>, <span class="number">2</span>)       <span class="comment">// te</span></span><br><span class="line">buf.<span class="title function_">toJSON</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream 转 buffer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">streamToBuffer</span>(<span class="params">stream</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> buffers = [];</span><br><span class="line">        stream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, reject);</span><br><span class="line">        stream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> buffers.<span class="title function_">push</span>(data))</span><br><span class="line">        stream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers)))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// buffer 转 stream</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Duplex</span> = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>).<span class="property">Duplex</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bufferToStream</span>(<span class="params">buffer</span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> stream = <span class="keyword">new</span> <span class="title class_">Duplex</span>();</span><br><span class="line">    stream.<span class="title function_">push</span>(buffer);</span><br><span class="line">    stream.<span class="title function_">push</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 主要内容</title>
    <url>/2019/05/15/4-1-js%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="一、Javascript"><a href="#一、Javascript" class="headerlink" title="一、Javascript"></a>一、Javascript</h1><blockquote>
<p>JavaScript 由对象组成，一切皆为对象</p>
</blockquote>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><ul>
<li><strong>ECMAScript</strong>：核心，描述了JS的语法和基本对象</li>
<li><strong>DOM</strong>：文档对象模型，处理网页内容的方法和接口</li>
<li><strong>BOM</strong>：浏览器对象模型，与浏览器交互的方法和接口</li>
</ul>
<h2 id="语言特点"><a href="#语言特点" class="headerlink" title="语言特点"></a>语言特点</h2><ul>
<li>解释型的脚本语言：在程序的运行过程中逐行进行解释</li>
<li>语法简单：使用弱类型的变量，对数据类型也没有严格要求</li>
<li>事件驱动：通过事件对用户操作做出响应</li>
<li>跨平台性：不依赖于操作系统，只需要兼容浏览器即可</li>
</ul>
<h2 id="历史演变"><a href="#历史演变" class="headerlink" title="历史演变"></a>历史演变</h2><ul>
<li>始于1995年，前身为网景公司开发的 LiveScript，用来处理 以前由服务端负责的数据验证</li>
<li>后更名为JavaScript，功能演变为：前后端数据交互、页面特效、服务端开发 NodeJS</li>
<li>JS 的很多语法和 Java、C# 语法相似，和 Java 毫无关系</li>
</ul>
<h1 id="二、ECMAScript"><a href="#二、ECMAScript" class="headerlink" title="二、ECMAScript"></a>二、ECMAScript</h1><blockquote>
<p>一种根据 ECMA-262 标准制定的通用脚本语言规范，JavaScript 是遵守该标准实现的一种脚本语言</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul>
<li>方法：匈牙利命名法、驼峰命名法</li>
<li>规则<ul>
<li>首字符：英文字母、下划线</li>
<li>组成：英文字母、下划线、数字</li>
<li>禁忌：关键字、保留字</li>
</ul>
</li>
</ul>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul>
<li>显式声明：<code>var 变量名</code></li>
<li>错误用法：没有类型、重复声明、隐式声明、不声明直接使用</li>
<li>正确用法：先声明后读写、先赋值后运算</li>
</ul>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol>
<li>全局变量</li>
</ol>
<ul>
<li>包含：在函数外定义的变量，没有使用 var 的变量</li>
<li>调用：任何位置</li>
</ul>
<ol start="2">
<li>局部变量</li>
</ol>
<ul>
<li>包含：在函数内使用 var 声明的变量，函数的参数变量</li>
<li>调用：当前函数体内</li>
</ul>
<ol start="3">
<li>优先级</li>
</ol>
<ul>
<li>局部变量 &gt; 同名参数变量 &gt; 同名全局变量</li>
</ul>
<ol start="4">
<li>特性</li>
</ol>
<ul>
<li>忽略块级用域<ul>
<li>ES6之前，js的作用域只有 函数作用域和全局作用域</li>
<li>ES6中定义了块级作用域，有“暂时性死区”的特性（声明前不可用）</li>
</ul>
</li>
<li>作用域链<ul>
<li>内层函数可以访问外层函数的局部变量</li>
<li>外层函数不能访问内层函数的局部变量<br>生命周期</li>
<li>全局变量除非被显式删除，否则一直存在</li>
<li>局部变量从声明开始到函数运行完毕或被显式删除</li>
<li>回收机制有 标记清除、引用计数</li>
</ul>
</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">say</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(say)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>()   <span class="comment">// 报错，没有在函数作用域内创建 fn</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">// 2，遵循就近原则</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">// undefined，变量提升</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">// 1，重新赋值而未重新声明</span></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test3</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 报错，let 不能变量提升</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test4</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test5</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  &#123; <span class="keyword">let</span> a = <span class="number">2</span>; &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 1，console不在块级作用域中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test5</span>();</span><br></pre></td></tr></table></figure>


<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote>
<p>分为原始数据和引用数据，js 变量的类型会根据其所赋值的数据类型来决定</p>
</blockquote>
<h3 id="基本数据"><a href="#基本数据" class="headerlink" title="基本数据"></a>基本数据</h3><ul>
<li>即原始值：<code>Number、String、Boolean、undefined、Null、symbol、BigInt</code></li>
<li>6 个假值：<code>0、&quot; &quot;、undefined、null、NaN、false</code></li>
<li>存储方式：存储在栈中的简单数据段。js 可按值访问其实际保存的值，复制时则会创建其副本。</li>
<li>检测方法：<code>typeof</code></li>
</ul>
<h3 id="引用数据"><a href="#引用数据" class="headerlink" title="引用数据"></a>引用数据</h3><ul>
<li>即引用值：<code>Object</code></li>
<li>检测方法：<code>instanceof</code></li>
<li>存储方式：存储在堆中的对象。js按引用访问其值，即访问时先从栈中读取内存地址（大小固定，保存于栈中），然后再找到保存在堆内存中的值。复制时只是复制了地址，两个对象实际指向的都是同一个值。</li>
</ul>
<h3 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h3><ul>
<li><strong>栈 stack</strong>：可理解为一个无盖水缸，它会自动分配内存空间和释放。用于存储基本数据类型，具有空间大小固定和先进后出的特点。</li>
<li><strong>堆 heap</strong>：可理解为封闭盒子，动态分配内存，大小不固定而且不会自动释放。用于存储基本数据类型包装起来的类，实际上保存的不是变量本身，而是指向该对象的指针。</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li>强制转换：<code>Boolean()、Number()、String()</code></li>
<li>普通转换：<code>parseInt()、parseFloat()、num.toString()</code></li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>算术运算符：<code>+、-、*、/、%、++、--</code></li>
<li>赋值运算符：<code>=、+=、-=、*=、/=</code></li>
<li>字符串运算符：<code>+、+=</code></li>
<li>比较运算符：<code>&gt;、&lt;、&gt;=、&lt;=、==、!=、===、!==</code></li>
<li>逻辑运算符：<code>&amp;&amp;、||、!</code></li>
<li>三元运算符：<code>?:</code></li>
</ul>
<h2 id="流程语句"><a href="#流程语句" class="headerlink" title="流程语句"></a>流程语句</h2><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul>
<li>while：<code>while(条件表达式) &#123; 代码段 &#125;</code></li>
<li>do-while：<code>do&#123; 代码段 &#125; while(条件表达式)</code></li>
<li>for：<code>for(循环变量 = 初值; 循环条件; 递增/递减)&#123; 代码段 &#125;</code></li>
<li>for-in：<code>for(声明变量 in 对象)&#123; 代码段 &#125;</code></li>
</ul>
<h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><ul>
<li>return：终止函数体的运行，并返回一个 值</li>
<li>break：终止整个循环，不再判断</li>
<li>continue：结束本次循环，判断是否执行下次循环</li>
</ul>
<h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><ul>
<li>if：<code>if(条件1)&#123; &#125; else if(条件2)&#123; &#125; else&#123; &#125;</code></li>
<li>switch：<code>switch(条件)&#123; case 1: break; default: break; &#125;</code></li>
<li>三元表达式：<code>var res = x&gt;0 ? 1 : (x=0 ? -1 : 2)</code></li>
</ul>
<h3 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h3><ul>
<li>throw：主动抛出异常</li>
<li>try：指明需要处理的代码段</li>
<li>catch：捕获异常</li>
<li>finally：后期处理</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>一段可以反复调用的代码块</p>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>普通函数</li>
<li>函数对象：通过 new Function() 创建的对象。</li>
<li>构造函数：类的标示 (class 是其语法糖)，为初始化的对象添加属性和方法。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、普通函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;  &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式    </span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数 callback：特定条件下调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">num, callback</span>)&#123;   </span><br><span class="line">  <span class="keyword">if</span>(num == <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="title function_">callback</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自执行函数 IIFE：独立作用域而不会污染全局环境</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、函数对象</span></span><br><span class="line"><span class="keyword">var</span> f4 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;console.log(str)&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、构造函数：首字母大写</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// return 基本类型则被忽略</span></span><br><span class="line">  <span class="comment">// return &#123; &#x27;Jack&#x27;: 18 &#125;; // return 引用类型则被返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;;  </span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>


<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><ul>
<li>函数模式：<code>fn()</code></li>
<li>方法模式：<code>obj.fn()、绑定 html 标签</code></li>
<li>构造器模式：<code>new</code></li>
<li>上下文模式：<code>call / apply</code></li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">m, n</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">return</span> m + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 以 window 为上下文调用</span></span><br><span class="line"><span class="keyword">var</span> f1 = foo.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">5</span>])</span><br><span class="line"><span class="keyword">var</span> f1 = foo.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法调用</span></span><br><span class="line"><span class="keyword">var</span> f2 = obj.<span class="title function_">getAge</span>();</span><br><span class="line"><span class="comment">//  以 obj 为上下文调用</span></span><br><span class="line"><span class="keyword">var</span> f2 = obj.<span class="property">getAge</span>.<span class="title function_">apply</span>(obj);</span><br><span class="line"><span class="keyword">var</span> f2 = obj.<span class="property">getAge</span>.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure>


<h3 id="函数前置"><a href="#函数前置" class="headerlink" title="函数前置"></a>函数前置</h3><div style="text-indent: 2em">函数声明会被 js解析器 优先读取，有重名的只留一个（变量和函数重名只留函数）。表达式只有在执行该语句时才会被逐行解析，而函数只有在被调用时才执行内部封装的函数体。</div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f1</span>() </span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;   <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">f2</span>() </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>)&#123; &#125;        <span class="comment">// 正常 </span></span><br></pre></td></tr></table></figure>


<h3 id="函数标识"><a href="#函数标识" class="headerlink" title="函数标识"></a>函数标识</h3><ul>
<li>this：指向当前操作对象</li>
<li>callee：指向参数集合所属对象</li>
<li>prototype：指向函数附带的原型对象</li>
<li>constructor：指向创建该对象的构造函数</li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote>
<p>指有权访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数，主要是用来设计私有的方法和变量。</p>
</blockquote>
<div style="text-indent: 2em">局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量以便反复使用，但又不会造成全局污染。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。</div>

<ul>
<li>特性：函数嵌套函数、函数内部可以引用外部的参数和变量、参数和变量不会被垃圾回收机制回收。</li>
<li>用途：数据缓存、封装私有变量、封装自定义插件、实现类和继承。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步获取数据并缓存</span></span><br><span class="line"><span class="keyword">const</span> getList = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> packageOptions = &#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/names&#x27;</span>,</span><br><span class="line">                <span class="attr">params</span>: &#123;</span><br><span class="line">                    <span class="attr">normal</span>: <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">rsp</span>) &#123;</span><br><span class="line">                    data = rsp.<span class="property">data</span></span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="title function_">ajax</span>(packageOptions);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 闭包存储data</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">JONS</span>.<span class="title function_">stringify</span>(data) === <span class="string">&#x27;&#123;&#125;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">getData</span>();</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;)() </span><br><span class="line"><span class="title function_">getList</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装私有变量</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">function</span>(<span class="params"></span>)&#123;     </span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;default&quot;</span>;       </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> &#123;    </span><br><span class="line">        getName : <span class="keyword">function</span>(<span class="params"></span>)&#123;    </span><br><span class="line">            <span class="keyword">return</span> name;    </span><br><span class="line">        &#125;,    </span><br><span class="line">        setName : <span class="keyword">function</span>(<span class="params">newName</span>)&#123;    </span><br><span class="line">            name = newName;    </span><br><span class="line">      &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;();    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);       <span class="comment">// undefined    </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>());  <span class="comment">// default  </span></span><br><span class="line">person.<span class="title function_">setName</span>(<span class="string">&quot;chuang&quot;</span>);    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>());  <span class="comment">// chuang  </span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装插件：匿名自执行函数执行完后会立刻释放资源</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"><span class="variable language_">document</span></span>) &#123; </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">setColor</span>: <span class="keyword">function</span>(<span class="params">id, color</span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">style</span>.<span class="property">color</span> = color;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">view</span> = obj;  <span class="comment">// 暴露接口</span></span><br><span class="line">&#125;)(<span class="variable language_">document</span>);</span><br><span class="line">view.<span class="title function_">setColor</span>(<span class="string">&#x27;main&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类和继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;    </span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;default&quot;</span>;       </span><br><span class="line">     </span><br><span class="line">  <span class="keyword">return</span> &#123;    </span><br><span class="line">     <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;    </span><br><span class="line">         <span class="keyword">return</span> name;    </span><br><span class="line">     &#125;,    </span><br><span class="line">     <span class="attr">setName</span>: <span class="keyword">function</span>(<span class="params">newName</span>)&#123;    </span><br><span class="line">         name = newName;    </span><br><span class="line">     &#125;    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">setName</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="title function_">getName</span>());</span><br></pre></td></tr></table></figure>


<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote>
<p>使用 <code>RegExp</code> 对象表示并由元字符、字符串和量词组成，用于描述字符串的匹配规则</p>
</blockquote>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ol>
<li>方式<br>* 字面量：<code>/pattern/attributes</code>，特殊字符不需要转义，不支持字符串拼接<br>* 实例化：<code>new RegExp(“pattern”, “attributes”)</code>，特殊字符需要转义，支持字符串拼接</li>
<li>参数<br>* pattern：正则表达式<br>* attributes：匹配模式，<code>g、i、m</code> 分别表示 全局匹配、忽略大小写、多行匹配</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regExp = <span class="string">&#x27;ab&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量 </span></span><br><span class="line"><span class="keyword">var</span> reg_1 = <span class="regexp">/regExp/</span>;</span><br><span class="line"><span class="keyword">var</span> reg_1 = <span class="regexp">/^[a-zA-Z0-9]&#123;3,8&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">var</span> reg_2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(regExp+<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> reg_2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(“[a-zA-<span class="variable constant_">Z0</span>-<span class="number">9</span>]&#123;<span class="number">3</span>,<span class="number">8</span>&#125;”);</span><br></pre></td></tr></table></figure>

<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3>  <div align="center">
      <img src="/images/js/regExp.png" alt="regExp" width="100%">
  </div>



<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><blockquote>
<p>Window 对象，表示允许 JavaScript 代码访问的 Web 浏览器窗口</p>
</blockquote>
<h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul>
<li>编码：<code>encodeURI、encodeURIComponent、escape</code></li>
<li>解码：<code>decodeURI、decodeURIComponent、unescape</code></li>
<li>检测：<code>isNaN、isFinite</code></li>
<li>转换：<code>eval、String、Number</code></li>
<li>解析：<code>parseInt、parseFloat</code></li>
</ul>
<h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><ul>
<li>NaN：不是数字值</li>
<li>undefined：未定义的值</li>
<li>Infinity：正无穷大的数值</li>
</ul>
<h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><div style="text-indent: 2em">requestAnimationFrame 采用系统时间间隔来保持最佳绘制效率而不需要手动设置，这样就不会因间隔时间过短而会造成 过度绘制并增加开销，也不会因时间太长则导致 动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</div>

<ul>
<li><strong>setTimeout</strong>：延时执行指定代码, 取消时使用 clearTimeout</li>
<li><strong>setInterval</strong>：间隔时间重复执行代码, 取消时使用 clearInterval</li>
<li><strong>requestAnimationFrame</strong>：在浏览器每次刷新页面之前执行代码，时间间隔由浏览器刷新频率决定，取消时使用 cancelAnimationFrame</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> timer = <span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> width = <span class="built_in">parseInt</span>(box.<span class="property">style</span>.<span class="property">width</span>);</span><br><span class="line">      <span class="keyword">if</span>(width &lt; <span class="number">500</span>)&#123;</span><br><span class="line">          box.<span class="property">style</span>.<span class="property">width</span> = width + <span class="number">10</span>;</span><br><span class="line">          <span class="title function_">requestAnimationFrame</span>(step);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">cancelAnimationFrame</span>(timer);</span><br><span class="line">      &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><blockquote>
<p>this 代表当前方法执行时自动生成的一个上下文对象。</p>
</blockquote>
<ul>
<li>元素绑定事件：指向当前操作的元素。</li>
<li>普通函数：指向点前面的对象，没有点则指向 window (js 严格模式下是 undefined)。</li>
<li>构造函数：指向生成的对象实例，而且 this 指向无法改变。new 的过程是在内部新建一个空对象，添加构造函数的属性和方法并返回该对象。</li>
<li>箭头函数：指向定义时所在的对象，因为它没有自身的 this，使用的是外层 this。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>: fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();       <span class="comment">// window</span></span><br><span class="line">obj.<span class="title function_">fn</span>();   <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>)&#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// p：&#123;name: &quot;Tom&quot;, age: 20&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tony&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// Window</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// obj</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">a</span>()</span><br><span class="line">obj.<span class="title function_">b</span>()</span><br></pre></td></tr></table></figure>


<h2 id="apply、call、bind"><a href="#apply、call、bind" class="headerlink" title="apply、call、bind"></a>apply、call、bind</h2><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><blockquote>
<p>相同点：用来改变 this 指向、第一个参数是 this 要指向的对象 (默认 window)。区别如下：</p>
</blockquote>
<ul>
<li>参数：call 单个传递、apply 数组、bind 值或数组。</li>
<li>功能：call、apply 函数直接执行，bind 函数会返回一个绑定了新 this 的函数但不会执行。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础使用</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">&#x27;linxin&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">apply</span>(a, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">f.<span class="title function_">call</span>(a, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">f.<span class="title function_">bind</span>(a, <span class="number">1</span>, <span class="number">2</span>)()</span><br></pre></td></tr></table></figure>


<h3 id="call-应用场景"><a href="#call-应用场景" class="headerlink" title="call 应用场景"></a>call 应用场景</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、改变 this 指向</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;linxin&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo.<span class="title function_">call</span>(obj);   <span class="comment">// linxin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、借用别的对象的方法</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person1</span>  = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;linxin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person2</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getname</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用 Person1 对象代替 this 对象，所以 Person2 继承了 Person1 的属性和方法</span></span><br><span class="line">  <span class="title class_">Person1</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person2</span>();</span><br><span class="line">person.<span class="title function_">getname</span>();  <span class="comment">// linxin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、调用函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;linxin&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>();  <span class="comment">// linxin</span></span><br></pre></td></tr></table></figure>


<h3 id="call-拓展用法"><a href="#call-拓展用法" class="headerlink" title="call 拓展用法"></a>call 拓展用法</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、利用 call 判断数据类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;qq&quot;</span>))        <span class="comment">// [Object String]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">12</span>))          <span class="comment">// [object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>))   <span class="comment">// [object Undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、利用 call 翻转字符串：将字符串转化为数组，通过数组的 reverse 将字符串翻转过来</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> a =  <span class="title class_">Array</span>.<span class="title function_">from</span>(str).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)  <span class="comment">// gfedcba</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reverse</span>.<span class="title function_">call</span>(str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)  <span class="comment">// gfedcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、利用 apply 求最大值：执行 Math.max(1, 2, 3, 5)，然后将内部的 this 改为 arr</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">56</span>, <span class="number">889</span>]</span><br><span class="line"><span class="comment">// 第一个 arr 表示让 arr 借用 max 方法，第二个 arr 表示传给 max 的数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(arr, arr)) </span><br></pre></td></tr></table></figure>


<h2 id="JS-算法"><a href="#JS-算法" class="headerlink" title="JS 算法"></a>JS 算法</h2><ul>
<li>排序算法<ul>
<li><strong>冒泡排序</strong>：比较任何两个相邻元素，如果第一个比第二个大则交换位置。元素向上移动到正确顺序，类似气泡上升至表面而得名。</li>
<li><strong>选择排序</strong>：每次从元素中选出最小或最大值，存放在序列的起始位置，以此循环至排序完毕。</li>
<li><strong>插入排序</strong>：将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，适用于少量数据的排序。</li>
<li><strong>归并排序</strong>：将原始序列切分成较小的序列直到无法再切分，然后将小序列排序后归并成大序列，直到最后只有一个排序完毕的大序列。</li>
<li><strong>快速排序</strong>：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行上述递归排序，以此达到整个数据变成有序序列。</li>
</ul>
</li>
<li>搜索算法<ul>
<li><strong>顺序搜索</strong>：让目标元素与列表中的每一个元素逐个比较，直到找出与给定元素相同的元素为止，缺点是效率低下。</li>
<li><strong>二分搜索</strong>：在一个有序列表，以中间值为基准拆分为两个子列表，拿目标元素与中间值作比较从而再在目标的子列表中递归此方法，直至找到目标元素。</li>
</ul>
</li>
<li>其他<ul>
<li><strong>贪心算法</strong>：在对问题求解时，不考虑全局，总是做出局部最优解的方法。</li>
<li><strong>动态规划</strong>：在对问题求解时，由以求出的局部最优解来推导全局最优解。</li>
<li><strong>复杂度</strong>：一个方法在执行的整个生命周期所需要占用的时间、空间等资源。</li>
</ul>
</li>
</ul>
<h1 id="三、DOM"><a href="#三、DOM" class="headerlink" title="三、DOM"></a>三、DOM</h1><blockquote>
<p>文档对象模型，用于操作 HTML 和 XML 文档（浏览器内容）的编程接口</p>
</blockquote>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><div style="text-indent: 2em">DOM 将整个文档（XML文档和HTML文档）看作一个树形结构，并用document对象表示该文档，并规定其中每个成分都是一个节点（Node），JavaScript 通过 DOM API 可以操作到每个节点。</div>

<h3 id="节点信息"><a href="#节点信息" class="headerlink" title="节点信息"></a>节点信息</h3><ul>
<li><code>nodeType</code>：节点类型</li>
<li><code>nodeName</code>：节点名称</li>
<li><code>nodeValue</code>：节点值</li>
</ul>
<h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><ul>
<li>文档节点：整个文档</li>
<li>注释节点：文档注释</li>
<li>元素节点：html 标签</li>
<li>文本节点：元素&#x2F;属性节点中的文本内容</li>
<li>属性节点：元素节点的属性</li>
</ul>
  <div align="center">
      <img src="/images/js/domNodes.png" alt="节点类型" width="100%">
  </div>


<h3 id="文档节点"><a href="#文档节点" class="headerlink" title="文档节点"></a>文档节点</h3><ul>
<li>标签：<code>document.documentElement/body/forms</code></li>
<li>信息：<code>document.URL/domain/readyState</code></li>
<li>方法：<code>document.write/writeln/open/close</code></li>
</ul>
<h3 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h3><blockquote>
<p>文本节点、属性节点都属于元素节点的子节点，操作时都需要先获取 元素节点</p>
</blockquote>
<ol>
<li>获取<br>* document<ul>
<li><code>document.getElementById/TagName/ClassName/Name</code></li>
<li><code>document.querySelector [All]</code></li>
<li><code>document.documentElement</code></li>
<li><code>document.body</code></li>
<li><code>document.forms</code> <ul>
<li>节点指针</li>
</ul>
</li>
<li>父节点：<code>parentNode</code></li>
<li>同级节点：<code>previousSibling、nextSibling</code></li>
<li>子节点：<code>firstChild、lastChild、childNodes、children</code></li>
</ul>
</li>
<li>操作<br>* 创建：<code>createElement、createAttribute、createTextNode</code><br>* 插入：<code>appendChild、insertBefore</code><br>* 替换：<code>replaceChild</code><br>* 复制：<code>cloneNode</code><br>* 删除：<code>removeChild</code><br>* 样式：<code>dom.style.样式名</code><ul>
<li>样式名必须使用驼峰命名法</li>
<li>修改 class 时必须使用 className</li>
</ul>
</li>
<li>属性<br>* 获取：<code>getAttribute</code><br>* 设置：<code>setAttribute</code><br>* 移除：<code>removeAttribute</code></li>
<li>文本<br>* 获取：<code>innerHTML / innerText</code><br>* 设置：<code>dom.innerHTML / innerText = &quot;new&quot;</code><br>* 表单元素：<code>input.value、input.value = “new”</code></li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素属性</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">box.<span class="title function_">setAttribute</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;this is box&quot;</span>);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">getAttribute</span>(<span class="string">&quot;title&quot;</span>));  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 创建属性节点</span></span><br><span class="line"><span class="keyword">var</span> placeholder = <span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;placeholder&quot;</span>);</span><br><span class="line">placeholder.<span class="property">nodeValue</span> = <span class="string">&quot;请输入姓名&quot;</span>; </span><br><span class="line">box.<span class="title function_">setAttributeNode</span>(placeholder);  </span><br></pre></td></tr></table></figure>


<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="DOM0-级"><a href="#DOM0-级" class="headerlink" title="DOM0 级"></a>DOM0 级</h3><blockquote>
<p>在 DOM 中直接绑定事件</p>
</blockquote>
<ul>
<li>绑定：<code>DOM.onclick = function()&#123; &#125;</code></li>
<li>移除：<code>DOM.onclick = null / &quot;&quot;</code></li>
</ul>
<h3 id="DOM2-级"><a href="#DOM2-级" class="headerlink" title="DOM2 级"></a>DOM2 级</h3><blockquote>
<p>使用事件监听绑定事件，浏览器监听到用户执行相关操作做出响应</p>
</blockquote>
<ol>
<li>主流浏览器<br>* 绑定：<code>DOM.addEventListener(&#39;click&#39;, fn, false)</code><br>* 移除：<code>DOM.removeEventListener(&#39;click&#39;, fn)</code><br>* 参数：false 时在冒泡阶段执行，true 则在捕获阶段执行</li>
<li>IE8及以下<br>* 绑定：<code>DOM.attachEvent(&#39;onclick&#39;, fn)</code><br>* 移除：<code>DOM.detachEvent(&#39;click&#39;, fn)</code></li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM0 级事件可能被覆盖：2，3，4</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#box&#x27;</span>)</span><br><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure>

<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><blockquote>
<p>事件的执行顺序</p>
</blockquote>
<ul>
<li>事件冒泡：事件从事件目标元素开始触发，向上触发到最外层的 document 对象</li>
<li>事件捕获：与冒泡相反</li>
<li>DOM 事件流：DOM 先捕获到目标元素，然后冒泡到最外层</li>
</ul>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><blockquote>
<p>触发 DOM 上的某个事件时会产生一个事件对象 event，它包含着所有与事件有关的信息</p>
</blockquote>
<ol>
<li>属性：鼠标 &#x2F; 键盘属性、IE 属性、标准 Event 属性</li>
<li>方法：stopPropagation、preventDefault</li>
<li>事件<br>* 鼠标事件：<code>click、dbclick、mousedown、mousemove、mouseout、mouseover、mouseup</code><br>* 键盘事件：<code>keydown、keypress、keyup</code><br>* HTML事件：<code>load、unload、resize、change、scroll、focus、blur、select、reset、submit</code></li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> <span class="title class_">Event</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面加载完成后</span></span><br><span class="line">    <span class="attr">readyEvent</span>: <span class="keyword">function</span>(<span class="params">fn</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123; </span><br><span class="line">            fn = <span class="variable language_">document</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">var</span> oldonload = <span class="variable language_">window</span>.<span class="property">onload</span>; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onload</span> != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">onload</span> = fn; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">                <span class="title function_">oldonload</span>(); </span><br><span class="line">                <span class="title function_">fn</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定事件</span></span><br><span class="line">    <span class="attr">addEvent</span>: <span class="keyword">function</span>(<span class="params">element, type, handler</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;    </span><br><span class="line">              element.<span class="title function_">addEventListener</span>(type, handler, <span class="literal">false</span>); <span class="comment">// DOM2</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123; </span><br><span class="line">            element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + type, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  handler.<span class="title function_">call</span>(element);     <span class="comment">// 兼容IE</span></span><br><span class="line">            &#125;); </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">            element[<span class="string">&#x27;on&#x27;</span> + type] = handler;  <span class="comment">// DOM0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除事件 </span></span><br><span class="line">    <span class="attr">removeEvent</span>: <span class="keyword">function</span>(<span class="params">element, type, handler</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">            element.<span class="title function_">removeEventListener</span>(type, handler, <span class="literal">false</span>); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">datachEvent</span>) &#123; </span><br><span class="line">            element.<span class="title function_">datachEvent</span>(<span class="string">&#x27;on&#x27;</span> + type, handler); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            element[<span class="string">&#x27;on&#x27;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取应用到元素上的所有样式</span></span><br><span class="line">    <span class="attr">getStyle</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> style = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>)&#123;</span><br><span class="line">            style = <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(obj,<span class="literal">null</span>);  <span class="comment">// W3C</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            style = obj.<span class="property">currentStyle</span>;   <span class="comment">// IE</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取事件对象，确保随时可以使用</span></span><br><span class="line">    <span class="attr">getEvent</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123; </span><br><span class="line">        <span class="keyword">var</span> ev = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ev)&#123; </span><br><span class="line">            <span class="keyword">var</span> c = <span class="variable language_">this</span>.<span class="property">getEvent</span>.<span class="property">caller</span>; </span><br><span class="line">            <span class="keyword">while</span>(c) &#123; </span><br><span class="line">                ev = c.<span class="property">argument</span>[<span class="number">0</span>]; </span><br><span class="line">                <span class="keyword">if</span> (ev &amp;&amp; <span class="title class_">Event</span> == ev.<span class="property">constructor</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">                c = c.<span class="property">caller</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> ev; </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取触发事件的元素 </span></span><br><span class="line">    <span class="attr">getTarget</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> event.<span class="property">target</span> || event.<span class="property">srcElemnt</span>; </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻止冒泡，比如 父子元素都有事件时阻止同时触发</span></span><br><span class="line">    <span class="attr">stopPropagation</span>: <span class="keyword">function</span>(<span class="params">ev</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (ev.<span class="property">stopPropagation</span>) &#123; </span><br><span class="line">            ev.<span class="title function_">stopPropagation</span>(); </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; </span><br><span class="line">            ev.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="attr">stop_propagation</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="keyword">var</span> e = <span class="variable language_">window</span>.<span class="property">event</span> || <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>.<span class="property">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(e &amp;&amp; e.<span class="property">stopPropagation</span>)&#123; </span><br><span class="line">            e.<span class="title function_">stopPropagation</span>();   </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">event</span>)&#123; </span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻止浏览器默认行为，比如 点击提交按钮时阻止默认提交表单、a链接阻止默认跳转</span></span><br><span class="line">    <span class="attr">preventDefault</span>: <span class="keyword">function</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.<span class="property">preventDefault</span>) &#123; </span><br><span class="line">            ev.<span class="title function_">preventDefault</span>(); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ev.<span class="property">returnValue</span> = <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><blockquote>
<p>利用事件冒泡原理，将本该元素执行的事件委托给了它的父元素执行  </p>
</blockquote>
<ol>
<li>优势：节省内存而提升性能、减少 DOM 操作而提高运行效率。</li>
<li>适用场景：给多个同类元素绑定相同事件、给动态生成的新元素绑定事件。</li>
<li>实现代码  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为三个同级的 input 绑定点击事件</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"><span class="comment">// box.on(&quot;click&quot;, &quot;input&quot;, callback) </span></span><br><span class="line">box.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">  <span class="keyword">var</span> target = ev.<span class="property">target</span> || ev.<span class="property">srcElement</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断元素：target.className == &quot;box&quot;</span></span><br><span class="line">  <span class="keyword">if</span>(target.<span class="property">nodeName</span>.<span class="title function_">toLocaleLowerCase</span>() == <span class="string">&#x27;input&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(target.<span class="property">id</span>)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span> :</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;添加&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;remove&#x27;</span> :</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;select&#x27;</span> :</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;选择&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为添加的子元素绑定事件</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line">oUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = ev || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">var</span> target = ev.<span class="property">target</span> || ev.<span class="property">srcElement</span>;</span><br><span class="line">    <span class="keyword">if</span>(target.<span class="property">nodeName</span>.<span class="title function_">toLocaleLowerCase</span>() == <span class="string">&#x27;li&#x27;</span>)&#123;</span><br><span class="line">        ev.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;black&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    oLi.<span class="property">innerHTML</span> = <span class="number">4</span>;</span><br><span class="line">    oUl.<span class="title function_">appendChild</span>(oLi);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="四、BOM"><a href="#四、BOM" class="headerlink" title="四、BOM"></a>四、BOM</h1><blockquote>
<p>浏览器对象模型，用于操作浏览器本身的应用编程接口  </p>
</blockquote>
  <div align="center">
      <img src="/images/js/bom.png" alt="BOM" width="100%">
  </div>


<h1 id="五、JS-工具库"><a href="#五、JS-工具库" class="headerlink" title="五、JS 工具库"></a>五、JS 工具库</h1><h2 id="jquery-库"><a href="#jquery-库" class="headerlink" title="jquery 库"></a>jquery 库</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><ul>
<li>对象转换   <ul>
<li>DOM 转为 jq：<code>var $btn = $(btn)</code></li>
<li>jq 转为 DOM：<code>var btn = $btn[0] / $btn.get(0)</code></li>
</ul>
</li>
<li>动画实现<ul>
<li>显示隐藏：show&#x2F;hide(speed, callback)</li>
<li>滑入滑出：slideDown&#x2F;Up&#x2F;Toggle(speed, callback)</li>
<li>淡出淡入：fadeIn&#x2F;Out&#x2F;Toggle(speed, callback)</li>
<li>自定义动画：animate(prop, speed, easing, callback)</li>
</ul>
</li>
<li>操作样式<ul>
<li>css 操作：<code>css(&quot;width&quot;)、css(&quot;width&quot;, &quot;0&quot;)、css(&#123;&quot;color&quot;: &quot;red&quot;&#125;)</code></li>
<li>class 操作：addClass、removeClass、toggleClass、hasClass、is</li>
</ul>
</li>
<li>操作 DOM<ul>
<li>创建：<code>var $h3 = $(&#39;h3&#39;)</code></li>
<li>插入：<code>父.append/prepend(子)、子.appendTo(父)、同胞.before/after(&#39;插入同胞&#39;)、插入同胞.insertBefore/After(&#39;同胞&#39;)</code></li>
<li>删除：<code>$(&#39;#box&#39;).remove()、$(&#39;ul&#39;).remove(&#39;l1&#39;)</code></li>
<li>克隆：clone()，传入 true 时克隆结构加事件，否则只克隆结构。</li>
<li>清空子元素：empty()、html()，不会清理子元素事件而造成内存泄漏，不推荐。</li>
</ul>
</li>
<li>操作属性<ul>
<li>读取移除：attr&#x2F;prop(name)、removeAttr&#x2F;Prop(name)</li>
<li>方法区别：操作元素的固有属性 prop、处理元素的自定义属性 attr</li>
<li>设置属性：<code>img.attr(&#39;src&#39;, &#39;1.png&#39;)、div.attr(&#123;&#39;class&#39;: &#39;a&#39; &#125;)</code></li>
</ul>
</li>
<li>操作内容<ul>
<li>表单元素：val(value)</li>
<li>普通元素：html(str)、text(str)</li>
</ul>
</li>
</ul>
<h3 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h3><ul>
<li>发展历程<ol>
<li>简单绑定：一次只能绑定一个事件，<code>click(handler)、scroll(handler)</code></li>
<li>bind 绑定：不支持动态元素绑定事件 <code>bind(&quot;click mouseenter&quot;, handler)</code></li>
<li>on 绑定</li>
</ol>
<ul>
<li>自身绑定：<code>on(事件名称, 事件处理函数)</code></li>
<li>事件委托<code>on(事件名称, 可选后代元素, 传递数据, 事件处理函数)</code></li>
<li>事件解绑：<code>off()</code> 解绑元素的所有事件、<code>off(&quot;click&quot;, &quot;**&quot;)</code> 解绑元素的所有代理事件但不会解绑自身事件。</li>
<li>先解绑再绑定：<code>$(&#39;#btn&#39;).off(&#39;click&#39;).on(&#39;click&#39;, callback)</code> 防止事件累加，导致点击一次而事件执行多次。</li>
</ul>
</li>
<li>事件触发<ul>
<li>直接调用：<code>$(&#39;div&#39;).click()</code></li>
<li>trigger：会触发浏览器默认操作，<code>$(&#39;input&#39;).trigger(&#39;focus&#39;)</code></li>
<li>triggerHandler：不触发默认操作，<code>$(&#39;input&#39;).triggerHandler(&#39;focus&#39;)</code></li>
</ul>
</li>
<li>事件委托<ol>
<li>把事件绑定在父元素上。</li>
<li>点击子元素时会触发事件冒泡。</li>
<li>父元素的事件响应时获取触发该事件的元素。</li>
<li>如果该元素和 on 绑定的元素相匹配则触发事件处理函数。</li>
</ol>
</li>
</ul>
<h3 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h3><ul>
<li>js、jquery：可共存但不可混用，jquery 通过 return this 支持链式编程。</li>
<li>隐式迭代：方法内部为所有匹配元素进行循环遍历，但注意设置全部元素而获取首个元素的值，比如 <code>$(&#39;div&#39;).css(&#39;color&#39;, &#39;red&#39;)、$(&#39;li&#39;).css(&#39;width&#39;)</code>。</li>
<li>多库共存：多个引用库的 $ 符号可能冲突，解决方案为 <code>(function($)&#123; &#125;)(jQuery)、jQuery(function($)&#123; &#125;)、$.noConflict()</code>。</li>
</ul>
<h3 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ======== 插件开发：为 jQuery 原型添加功能函数来扩展功能 ==========</span></span><br><span class="line"><span class="comment">// 1、类级别：扩展 jquery 类本身，只能通过 jq/$ 类调用 $.hello()、$.myExtend.hello()</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">    $.<span class="title function_">extend</span>(&#123;  <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125; &#125;)</span><br><span class="line">    $.<span class="title function_">myExtend</span>(&#123; <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;  &#125;)</span><br><span class="line">&#125;)(jQuery)</span><br><span class="line"><span class="comment">// 2、对象级别：扩展 jquery 原型对象，每个 jquery 实例对象都能调用 $(&quot;#box&quot;).myAnimate()</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">$</span>)&#123;</span><br><span class="line">    <span class="comment">// $.fn.pluginName = $.fn.extend(pluginName) = $.prototype.extend(pluginName)</span></span><br><span class="line">    $.fn.<span class="title function_">extend</span>(&#123;  <span class="attr">myAnimate</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125; &#125;)</span><br><span class="line">    $.fn.<span class="property">myAnimate</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;)(jQuery) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@title</span> 插件模板</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@desp</span>  分号：开头是为了避免别人的代码不规范引起错误，结尾是为了避免压缩出错。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@params</span> window、document：快速查找，而且也便于代码压缩，比如 window 可能被压缩为 w。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@params</span> undefined：保证原生，防止他人把其定义为别的。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params">win, doc, $, <span class="literal">undefined</span></span>)&#123;             <span class="comment">// 没有第四个参数</span></span><br><span class="line">    $.fn.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="string">&quot;pluginName&quot;</span>: <span class="keyword">function</span> (<span class="params">opt</span>) &#123; &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> defaults = &#123; &#125;</span><br><span class="line">    $.fn.<span class="property">pluginName</span> = <span class="keyword">function</span> (<span class="params">opt</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> set = $.<span class="title function_">extend</span>(&#123;&#125;, defaults, opt)   <span class="comment">// 合并默认配置和用户配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;     <span class="comment">// 支持链式调用</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;(<span class="variable language_">window</span>, <span class="variable language_">document</span>, jQuery))</span><br></pre></td></tr></table></figure>


<h2 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h2><blockquote>
<p>一个轻量级的 Js 原生工具函数库，不需要引入其他第三方依赖。它内部封装了很多对字符串、数组、对象等常见数据类型的处理函数，可以极大提高开发效率。</p>
</blockquote>
<ul>
<li>辅助函数<ul>
<li><strong>Array</strong>：适合于数组，比如填充数据、查找元素、数组分片等。</li>
<li><strong>Collocation</strong>：适用于数组和对象，部分适用于字符串，比如分组、查找、过滤等。</li>
<li><strong>Function</strong>：适用于函数，比如节流、延迟、缓存、设置钩子等。</li>
<li><strong>Lang</strong>：普遍适用于各种类型，常用于执行类型判断和类型转换。</li>
<li><strong>Math</strong>：使用与数值类型，常用于执行数学运算。</li>
<li><strong>Number</strong>：适用于生成随机数，比较数值与数值区间的关系。</li>
<li><strong>Object</strong>：适用于对象类型，常用于对象的创建、扩展、类型转换、检索、集合等。</li>
<li><strong>Seq</strong>：常用于创建链式调用，提高执行性能（惰性计算）。</li>
<li><strong>String</strong>：适用于字符串类型。</li>
</ul>
</li>
<li>lodash&#x2F;fp 模块：提供了更接近函数式编程的开发方式，主要特点如下。<ul>
<li><strong>Rearragned Arguments</strong>：重新调整参数位置，便于函数之间的聚合。</li>
<li><strong>Capped Iteratee Argument</strong>：封装 Iteratee 参数。</li>
<li><strong>Fixed Arity</strong>：固化参数个数，便于柯里化。</li>
<li><strong>New Methods</strong></li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装引用</span></span><br><span class="line">npm i lodash -S</span><br><span class="line">npm i babel-plugin-lodash -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>:[ <span class="string">&quot;lodash&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见用法</span></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash/fp&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、N 次循环</span></span><br><span class="line">_.<span class="title function_">times</span>(<span class="number">5</span>,<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、深层查找属性值</span></span><br><span class="line"><span class="keyword">var</span> ownerArr = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;Colin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pets&quot;</span>: [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;dog1&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;dog2&quot;</span>&#125;]</span><br><span class="line">  &#125;, </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pets&quot;</span>: [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;dog3&quot;</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;dog4&quot;</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> lodashMap = _.<span class="title function_">map</span>(ownerArr, <span class="string">&#x27;pets[0].name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、深克隆对象</span></span><br><span class="line"><span class="keyword">var</span> objB = _.<span class="title function_">cloneDeep</span>(objA)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、在指定范围内获取一个随机值</span></span><br><span class="line"><span class="keyword">var</span> randomNum = _.<span class="title function_">random</span>(<span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、扩展对象</span></span><br><span class="line"><span class="keyword">var</span> objA = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;戈德斯文&quot;</span>, <span class="string">&quot;car&quot;</span>: <span class="string">&quot;宝马&quot;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> objB = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;柴硕&quot;</span>, <span class="string">&quot;loveEat&quot;</span>: <span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">var</span> target = _.<span class="title function_">assign</span>(objA, objB)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、从列表中随机的选择列表项</span></span><br><span class="line"><span class="keyword">var</span> smartTeam = [<span class="string">&quot;戈德斯文&quot;</span>, <span class="string">&quot;杨海月&quot;</span>, <span class="string">&quot;柴硕&quot;</span>, <span class="string">&quot;师贝贝&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> randomSmarter = _.<span class="title function_">sample</span>(smartTeam)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、判断对象中是否含有某元素：查询的对象、元素、开始下标</span></span><br><span class="line"><span class="keyword">var</span> smartPerson = &#123;</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;戈德斯文&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sm = _.<span class="title function_">includes</span>(smartPerson, <span class="string">&#x27;戈德斯文&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> st = _.<span class="title function_">includes</span>(smartTeam, <span class="string">&#x27;杨海月&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8、遍历循环</span></span><br><span class="line">_.<span class="title function_">forEach</span>([<span class="number">1</span>, <span class="number">3</span>] , <span class="keyword">function</span>(<span class="params">value, key</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key,value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9、遍历循环执行某个方法</span></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;barney&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;fred&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> mapUser = _.<span class="title function_">map</span>(users, <span class="string">&#x27;user&#x27;</span>)  <span class="comment">// [&#x27;barney&#x27;, &#x27;fred&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10、检验值是否为空</span></span><br><span class="line">_.<span class="title function_">isEmpty</span>(<span class="literal">null</span>)         <span class="comment">// =&gt; true</span></span><br><span class="line">_.<span class="title function_">isEmpty</span>(<span class="literal">true</span>)         <span class="comment">// =&gt; true</span></span><br><span class="line">_.<span class="title function_">isEmpty</span>(<span class="number">1</span>)            <span class="comment">// =&gt; true</span></span><br><span class="line">_.<span class="title function_">isEmpty</span>([<span class="number">1</span>, <span class="number">2</span>])       <span class="comment">// =&gt; false</span></span><br><span class="line">_.<span class="title function_">isEmpty</span>(&#123; <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span> &#125;)   <span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11、查找属性</span></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;barney&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">36</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;fred&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">40</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;pebbles&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// find 返回真值的第一个元素</span></span><br><span class="line">_.<span class="title function_">find</span>(users, <span class="keyword">function</span> (<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> o.<span class="property">age</span> &lt; <span class="number">40</span>;</span><br><span class="line">&#125;)</span><br><span class="line">_.<span class="title function_">find</span>(users, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">_.<span class="title function_">find</span>(users, [<span class="string">&#x27;active&#x27;</span>, <span class="literal">false</span>])</span><br><span class="line">_.<span class="title function_">find</span>(users, <span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter：返回真值的所有元素的数组，reject 是其反向方法</span></span><br><span class="line">_.<span class="title function_">filter</span>(users, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">_.<span class="title function_">filter</span>(users, [<span class="string">&#x27;active&#x27;</span>, <span class="literal">false</span>])</span><br><span class="line">_.<span class="title function_">filter</span>(users, <span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12、数组去重</span></span><br><span class="line"><span class="keyword">var</span> arr2 = _.<span class="title function_">uniq</span>(arr1);</span><br><span class="line">_.<span class="title function_">uniqBy</span>([<span class="number">2.1</span>, <span class="number">1.2</span>, <span class="number">2.3</span>], <span class="title class_">Math</span>.<span class="property">floor</span>)  <span class="comment">// [2.1, 1.2]</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 预处理工具</title>
    <url>/2019/05/12/3-3-css%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、出现需求"><a href="#一、出现需求" class="headerlink" title="一、出现需求"></a>一、出现需求</h1><div style="text-indent: 2em">css 只能用来写样式但不能实现真正的编程，而预处理器为 CSS 增加了编程特性，让它更加简洁的同时不再需要考虑浏览器的兼容问题，适应性和可读性更好，可以进行模块化开发，节省开发时间而且方便后期维护等。目前最主流的三个预处理器有 Less、Sass、Stylus</div>

<div style="text-indent: 2em">最早也是最成熟的是 Sass，它使用 以严格的缩进式语法规则书写而不带 {} 和 ; 的缩排语法，后来为了方便习惯 css 的开发人员而升级为Scss，Scss 兼容 Sass 语法而且书写规则类似css。Less 受 Sass 的影响较大，更容易上手但编程功能不够，Stylus主要用来给 Node 项目进行 css 预处理支持</div>
    

<h1 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h1><h2 id="引用-import"><a href="#引用-import" class="headerlink" title="引用 @import"></a>引用 <code>@import</code></h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接引用文件</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;index.css&quot;</span>, <span class="string">&quot;index2.scss&quot;</span>;   <span class="comment">// 导入多个文件</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;http://foo.com/bar&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> url(foo);</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;_index.scss&quot;</span>;  <span class="comment">// 避免引入文件被编译</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;colors&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量插值</span></span><br><span class="line"><span class="variable">$device</span>: mobile;</span><br><span class="line"><span class="keyword">@import</span> url(styles.#&#123;<span class="variable">$device</span>&#125;<span class="selector-class">.css</span>);</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  单行注释(不会被编译到css文件中);</span></span><br><span class="line"><span class="comment">/*  多行注释(在非压缩模式下会被编译到css文件中)  */</span></span><br><span class="line"><span class="comment">/*! 重要注释(各种压缩模式下都会被编译到css文件中)  */</span></span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><strong>变量名</strong>：以$开头,可用作选择器&#x2F;属性(值)&#x2F;字符串;</li>
<li><strong>变量值</strong>：数字、字符串(可不带引号)、布尔值、空值(null)、List(列表，类似数组)、Map(映射，类似对象)</li>
<li><strong>注意</strong>：当使用 #{} 时,带引号的字符串将被编译为 不带引号的字符串(为了便于使用);</li>
</ul>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局颜色</span></span><br><span class="line"><span class="variable">$color-primary</span>: <span class="number">#3ecacb</span>;</span><br><span class="line"><span class="variable">$color-success</span>: <span class="number">#4fc48d</span>;</span><br><span class="line"><span class="variable">$color-warning</span>: <span class="number">#f3d93f</span>;</span><br><span class="line"><span class="variable">$color-danger</span>: <span class="number">#f6588e</span>;</span><br><span class="line"><span class="variable">$color-info</span>: <span class="number">#27c6fa</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局图片</span></span><br><span class="line"><span class="variable">$common-path</span>: <span class="string">&#x27;./primary/assets/img/&#x27;</span>;</span><br><span class="line"><span class="variable">$icon-see</span>: <span class="variable">$common-path</span> + <span class="string">&#x27;icon-see.png&#x27;</span>;</span><br><span class="line"><span class="variable">$icon-play</span>: <span class="variable">$common-path</span> + <span class="string">&#x27;icon-play.png&#x27;</span>;</span><br><span class="line"><span class="variable">$icon-comment</span>: <span class="variable">$common-path</span> + <span class="string">&#x27;icon-comment.png&#x27;</span>;</span><br><span class="line"><span class="variable">$icon-checkbox</span>: <span class="variable">$common-path</span> + <span class="string">&#x27;icon-checkbox.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础使用</span></span><br><span class="line"><span class="variable">$width</span>: <span class="number">1px</span>;             <span class="comment">// 全局变量(定义在所有选择器外)</span></span><br><span class="line"><span class="variable">$width2</span>: <span class="number">2px</span>;    </span><br><span class="line"><span class="variable">$width2</span>: <span class="number">3px</span> !default;   <span class="comment">// 默认变量(无值时起作用)</span></span><br><span class="line"><span class="variable">$pos</span>: bottom;</span><br><span class="line"><span class="selector-class">.aa</span> &#123;</span><br><span class="line">    <span class="variable">$fs</span>: <span class="number">14px</span>;           <span class="comment">// 局部变量(定义在选择器内)</span></span><br><span class="line">    <span class="variable">$lh</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;                  <span class="comment">// 常规使用($var)</span></span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$pos</span>&#125;: <span class="number">1px</span> solid red;  <span class="comment">// 拼字符串(#&#123;$var&#125;)</span></span><br><span class="line">    <span class="attribute">font</span>: #&#123;<span class="variable">$fs</span>&#125;/#&#123;lh&#125; sans-serif;  <span class="comment">// 复杂属性值(#&#123;$var&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bb</span> &#123;</span><br><span class="line">    <span class="variable">$width</span>: <span class="number">3px</span> !global;            <span class="comment">// 覆盖全局变量</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span> + <span class="variable">$width2</span>;        <span class="comment">// 用于计算($var + $var)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> link-style(<span class="variable">$sel</span>) &#123;</span><br><span class="line">    <span class="selector-tag">li</span> #&#123;<span class="variable">$sel</span>&#125; &#123;                    <span class="comment">// 作为选择器(#&#123;$var&#125;)</span></span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> link-style(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择器嵌套</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line">    <span class="comment">// 使用 &amp; 表示在嵌套中对父元素的引用</span></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line">    <span class="comment">// 选择器嵌套多层后让某个选择器跳出根元素</span></span><br><span class="line">    <span class="keyword">@at-root</span> .d &#123;  </span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 属性嵌套</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">    <span class="comment">// 嵌套属性后须写冒号</span></span><br><span class="line">    <span class="attribute">border</span>: &#123;   </span><br><span class="line">        style: solid;</span><br><span class="line">        <span class="attribute">left</span>: &#123; <span class="attribute">width</span>: <span class="number">4px</span>; <span class="attribute">color</span>: <span class="number">#888</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="混合宏-mixin"><a href="#混合宏-mixin" class="headerlink" title="混合宏 @mixin"></a>混合宏 <code>@mixin</code></h2><ul>
<li>@mixin 定义可重用的代码段，@include 调用</li>
</ul>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参 </span></span><br><span class="line"><span class="keyword">@mixin</span> aa &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bb</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> aa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为数组 </span></span><br><span class="line"><span class="variable">$margin</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$left</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="keyword">@mixin</span> aa(<span class="variable">$left</span>, <span class="variable">$margin</span>) &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$margin</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bb</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> aa(<span class="variable">$left</span>, <span class="variable">$margin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为对象 </span></span><br><span class="line"><span class="variable">$map</span>: (left: <span class="number">10px</span>, width: <span class="number">100px</span>);</span><br><span class="line"><span class="keyword">@mixin</span> aa(<span class="variable">$left</span>, <span class="variable">$width</span>) &#123;</span><br><span class="line">    <span class="comment">// 接收参数为key值</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$left</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> aa(<span class="variable">$map</span>...); <span class="comment">// 传递参数为对象名+...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数(不传参数时会用默认参数)</span></span><br><span class="line"><span class="keyword">@mixin</span> aa(<span class="variable">$left</span>: <span class="number">10px</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不定参数 </span></span><br><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">    <span class="comment">// 不定参数用 ...</span></span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> box-shadow(<span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">#eee</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器前缀设置 </span></span><br><span class="line"><span class="keyword">@mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: <span class="number">10px</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>-#&#123;<span class="variable">$vert</span>&#125;#&#123;<span class="variable">$horz</span>&#125;: <span class="variable">$radius</span>;</span><br><span class="line">    -webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> rounded(top, left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> rounded(top, left, <span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承 @extend"></a>继承 <code>@extend</code></h2><ul>
<li>不管是否调用，基类的样式都将会出现在编译出来的 CSS 代码中</li>
</ul>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-bor</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-red</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .btn; <span class="comment">//多个扩展</span></span><br><span class="line">    <span class="keyword">@extend</span> .btn-bor !optional; </span><br><span class="line">    <span class="comment">// 用optional直接跳过空样式,防止元素不存在而导致报错</span></span><br><span class="line">    <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hoverlink</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> <span class="attribute">a</span>:<span class="attribute">hover</span>;   <span class="comment">//@extend可扩展任何选择器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合占位选择器(%扩展单一选择器,编译后不在css)使用</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span>%box &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bor-box</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> %box; <span class="comment">//此时才会编译产生</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 编译为 .container div.bor-box &#123; &#125; </span></span><br></pre></td></tr></table></figure>


<h2 id="占位符-placeholder"><a href="#占位符-placeholder" class="headerlink" title="占位符 %placeholder"></a>占位符 <code>%placeholder</code></h2><ul>
<li>一个独立定义的声明块，不调用时不会编译生成 CSS</li>
</ul>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%mt&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> %mt;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>:block;</span><br><span class="line">        <span class="keyword">@extend</span> %mt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="keyword">@extend</span> %mt;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>:block;</span><br><span class="line">        <span class="keyword">@extend</span> %mt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、进阶语法"><a href="#三、进阶语法" class="headerlink" title="三、进阶语法"></a>三、进阶语法</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul>
<li>可单独使用或结合 @else (if) 使用</li>
<li>使用 not&#x2F;or&#x2F;and 分别表示非&#x2F;或&#x2F;与，如 @if not($var)</li>
<li>使用 !&#x3D;&#x2F;&#x3D;&#x3D; 分别表示(不)等于，如 @if $a !&#x3D;0</li>
</ul>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> blockOrHidden(<span class="variable">$boolean</span>:true) &#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="variable">$boolean</span> &#123;</span><br><span class="line">        <span class="keyword">@debug</span> <span class="string">&quot;$boolean is #&#123;$boolean&#125;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: block; <span class="comment">//参数为真，显示</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@else</span> &#123;</span><br><span class="line">        <span class="keyword">@debug</span> <span class="string">&quot;$boolean is #&#123;$boolean&#125;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: none; <span class="comment">//参数为假，不显示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> blockOrHidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> blockOrHidden(false);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="循环-list-x2F-map"><a href="#循环-list-x2F-map" class="headerlink" title="循环 list&#x2F;map"></a>循环 list&#x2F;map</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list(用空格/逗号隔开项):</span></span><br><span class="line"><span class="variable">$name</span>: <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="variable">$px</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>; </span><br><span class="line"><span class="variable">$sel2</span>: (sel1: <span class="string">&quot;span&quot;</span>, sel2: <span class="string">&quot;div&quot;</span>) </span><br><span class="line"></span><br><span class="line">// Map</span><br><span class="line"><span class="variable">$map</span>: (key1: <span class="number">1</span>, key2: <span class="number">2</span>, key3: <span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$var</span> from &lt;start&gt; through &lt;end&gt; // 包含end值</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$var</span> from &lt;start&gt; to &lt;end&gt;      // 不包含end值</span><br><span class="line">  </span><br><span class="line">// each循环:</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$var</span> in list/map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// while</span><br><span class="line"><span class="variable">$i</span>: <span class="number">2</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span>&gt;<span class="number">0</span> &#123;   	<span class="comment">// 条件为 true 就会执行</span></span><br><span class="line">    <span class="selector-class">.color</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#222</span> * <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$i</span>:<span class="variable">$i</span> - <span class="number">1</span>;     <span class="comment">// 不能写成 $i:$i-1，因为会被当成字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环 </span></span><br><span class="line"><span class="variable">$arr</span>: ( (theme: dark, size: <span class="number">40px</span>), </span><br><span class="line">    (theme: light, size: <span class="number">32px</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through length(<span class="variable">$arr</span>) &#123;</span><br><span class="line">    <span class="variable">$item</span>: <span class="built_in">nth</span>(<span class="variable">$arr</span>, <span class="variable">$i</span>);             <span class="comment">// 获取数组中第i项的值</span></span><br><span class="line">    .#&#123;<span class="built_in">map-get</span>($item, theme)&#125; &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">map-get</span>(<span class="variable">$item</span>, size);  <span class="comment">// 获取指定键值</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="built_in">map-get</span>(<span class="variable">$item</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// each循环</span></span><br><span class="line"><span class="variable">$margins</span>: <span class="number">5px</span> <span class="number">10px</span>, <span class="number">15px</span> <span class="number">20px</span>;    <span class="comment">// 两个项</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="built_in">nth</span>(<span class="variable">$margins</span>, <span class="number">1</span>) <span class="built_in">nth</span>(<span class="variable">$margins</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="built_in">nth</span>(<span class="variable">$margins</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sel2</span>: (sel1: <span class="string">&quot;span&quot;</span>, sel2: <span class="string">&quot;div&quot;</span>);  <span class="comment">// Map形式</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$s</span> in <span class="variable">$sel2</span> &#123;</span><br><span class="line">    .#&#123;<span class="variable">$s</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$headers</span>: (h1:<span class="number">2em</span>, h2:<span class="number">1.5em</span>, h3:<span class="number">1.2em</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headers</span> &#123;</span><br><span class="line">    #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="函数和运算"><a href="#函数和运算" class="headerlink" title="函数和运算"></a>函数和运算</h2><ol>
<li><strong>自定义</strong><br>* @fuction 定义，@return 返回结果</li>
<li><strong>三元条件</strong><br>* if($condition, $if-true, $if-false)：条件成立时返回值1，否则返回值2</li>
<li><strong>颜色</strong><br>* rgb&#x2F;rgba()：创建颜色<br>* alpha&#x2F;opacity($color)：获取颜色透明度值<br>* rgba($color, $alpha)：改变颜色透明度值<br>* mix($color1, $color2, [$weight])：混合颜色<br>* lighten&#x2F;darken($color, $percent)：变浅&#x2F;加深</li>
<li><strong>数字</strong><br>* random()：随机数<br>* min&#x2F;max($nums…)：最小值&#x2F;最大值<br>* floor&#x2F;ceil($value)：向下&#x2F;上整数<br>* percentage&#x2F;abs&#x2F;round($val)：百分比值&#x2F;绝对值&#x2F;取整</li>
<li><strong>字符串</strong><br>* quote&#x2F;unquote($string)：给字符串添加&#x2F;删除引号<br>* to-upper&#x2F;lower-case()：字符串大小写字母转换</li>
<li><strong>List</strong><br>* length($list)：获取长度<br>* nth($list, i)：获取列表项（索引i从1开始）<br>* append($px, 11px)：添加新值<br>* join($list1, $list2)：列表合并<br>* zip($lists…)：合并多个表为多维列表<br>* index($list, $value)：返回该值在列表中的索引	</li>
<li><strong>Map</strong><br>* map-keys&#x2F;values($map)：获取所有key&#x2F;values<br>* map-get&#x2F;remove($map, key)：获取&#x2F;删除指定项<br>* map-has-key($map, key)：判断是否有key<br>* map-merge($map1, $map2)：合并map<br>* keywords($args)：返回函数参数(可动态设置key和value)</li>
<li><strong>Introspection</strong><br>* type-of($value)：返回值的类型<br>* unit($number)：返回值的单位<br>* unitless($number)：判断该值是否带有单位<br>* commparable($num, $num)：判断两个值是否可做加减和合并</li>
</ol>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> colors(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="variable">$names</span>: <span class="built_in">map-keys</span>(<span class="variable">$social-colors</span>);</span><br><span class="line">    <span class="keyword">@if</span> <span class="keyword">not</span> index(<span class="variable">$names</span>, <span class="variable">$color</span>) &#123;</span><br><span class="line">        <span class="keyword">@warn</span> <span class="string">&quot;Waring: `#&#123;$color&#125; is not a valid color name.`&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@return</span> map-get(<span class="variable">$social-colors</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-weibo</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">colors</span>(weibo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$social-colors</span>: (</span><br><span class="line">    dribble: <span class="number">#ea4c89</span>,</span><br><span class="line">    facebook: <span class="number">#3b5998</span>,</span><br><span class="line">    github: <span class="number">#171515</span>,</span><br><span class="line">    google: <span class="number">#db4437</span>,</span><br><span class="line">    twitter: <span class="number">#55acee</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$name</span> in map-keys(<span class="variable">$social-colors</span>) &#123;</span><br><span class="line">    <span class="selector-class">.btn-</span>#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">colors</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through length(map-keys(<span class="variable">$social-colors</span>)) &#123;</span><br><span class="line">    <span class="selector-class">.btn-</span>#&#123;<span class="built_in">nth</span>(map-keys($social-colors), <span class="variable">$i</span>)&#125; &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">colors</span>(<span class="built_in">nth</span>(<span class="built_in">map-keys</span>(<span class="variable">$social-colors</span>), <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类似于控制台输出信息</span></span><br><span class="line"><span class="keyword">@debug</span> <span class="string">&#x27;This is adebug&#x27;</span>;</span><br><span class="line"><span class="keyword">@warn</span> <span class="string">&#x27;Warn&#x27;</span>;</span><br><span class="line"><span class="keyword">@error</span> <span class="string">&#x27;Error&#x27;</span>;</span><br></pre></td></tr></table></figure>


<h1 id="四、相关插件"><a href="#四、相关插件" class="headerlink" title="四、相关插件"></a>四、相关插件</h1><h2 id="stylelint-样式代码检查"><a href="#stylelint-样式代码检查" class="headerlink" title="stylelint 样式代码检查"></a>stylelint 样式代码检查</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install gulp stylelint gulp-postscss  postcss-reporter </span><br><span class="line">stylelint-config-standard --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根目录新建 gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> reporter = <span class="built_in">require</span>(<span class="string">&#x27;postcss-reporter&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> stylelint = <span class="built_in">require</span>(<span class="string">&#x27;stylelint&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> stylelintConfig = &#123; </span><br><span class="line">    <span class="comment">// 标准校验规则插件，具体校验规则可查看官网</span></span><br><span class="line">    <span class="string">&#x27;extends&#x27;</span>: <span class="string">&#x27;stylelint-config-standard&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;rules&#x27;</span>: &#123;    </span><br><span class="line">        <span class="string">&#x27;at-rule-no-unknown&#x27;</span>: [</span><br><span class="line">            <span class="literal">true</span>, </span><br><span class="line">            &#123;<span class="string">&#x27;ignoreAtRules&#x27;</span>: [<span class="string">&#x27;extend&#x27;</span>, <span class="string">&#x27;include&#x27;</span>, <span class="string">&#x27;mixin&#x27;</span>, <span class="string">&#x27;for&#x27;</span>]&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;scss-lint&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> processors = [    </span><br><span class="line">        <span class="title function_">stylelint</span>(stylelintConfig),    </span><br><span class="line">        <span class="title function_">reporter</span>(&#123;      </span><br><span class="line">            <span class="attr">clearMessages</span>: <span class="literal">true</span>,      </span><br><span class="line">            <span class="attr">throwError</span>: <span class="literal">true</span>    </span><br><span class="line">        &#125;)  </span><br><span class="line">    ];  </span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(  </span><br><span class="line">        [<span class="string">&#x27;src/style/*.scss&#x27;</span>]       <span class="comment">// 需要工具检查的 scss 文件 </span></span><br><span class="line">    ).<span class="title function_">pipe</span>(<span class="title function_">postcss</span>(processors));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;scss-lint&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="stylefmt-样式自动修复"><a href="#stylefmt-样式自动修复" class="headerlink" title="stylefmt 样式自动修复"></a>stylefmt 样式自动修复</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个基于 stylelint 的代码修正工具，它支持基于 stylelint 的代码规范约定配置，</span></span><br><span class="line"><span class="comment">// 对可修正的地方作格式化输出。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> stylefmt = <span class="built_in">require</span>(<span class="string">&#x27;gulp-stylefmt&#x27;</span>);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;stylefmt&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;src/style/student/index.scss&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">stylefmt</span>(stylelintConfig))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;src/style/dest/student&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;fix&#x27;</span>, [<span class="string">&#x27;stylefmt&#x27;</span>]);</span><br></pre></td></tr></table></figure>


<h2 id="gulp-sass-编译-scss-语法"><a href="#gulp-sass-编译-scss-语法" class="headerlink" title="gulp-sass 编译 scss 语法"></a>gulp-sass 编译 scss 语法</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> gulpsass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;gulpsass&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/style/components/hwIcon.scss&#x27;</span>)    </span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">gulpsass</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, gulpsass.<span class="property">logError</span>))   </span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;src/style/dest&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/style/components/hwIcon.scss&#x27;</span>, [<span class="string">&#x27;gulpsass&#x27;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>HTML CSS</category>
      </categories>
      <tags>
        <tag>HTML CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 样式</title>
    <url>/2019/05/08/3-2-css/</url>
    <content><![CDATA[<h1 id="一、浏览器兼容"><a href="#一、浏览器兼容" class="headerlink" title="一、浏览器兼容"></a>一、浏览器兼容</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul>
<li>img 之间出现间距：浮动。</li>
<li>上下 margin 重合问题：上下选一个。</li>
<li>opacity、placeholder、outline、伪元素、z-index：<code>css hack</code>。</li>
<li>li 元素使用 display: inline-block 时会出现缝隙：<code>浮动、font-size: 0</code>。</li>
<li>子元素的 margin-top 会出现在父元素的上方：父元素 <code>overflow: hidden / border: 1px solid transparent / padding-top</code>。</li>
</ul>
<h2 id="css-hack"><a href="#css-hack" class="headerlink" title="css hack"></a>css hack</h2><blockquote>
<p>针对不同的浏览器写不同的 CSS 来解决浏览器兼容。</p>
</blockquote>
<ul>
<li>选择器前缀法：@media screen</li>
<li>CSS 属性前缀法：-webkit-、-moz-、-ms-、-o-</li>
<li>IE 条件注释语句：解决 IE 兼容问题</li>
</ul>
<h1 id="二、CSS3"><a href="#二、CSS3" class="headerlink" title="二、CSS3"></a>二、CSS3</h1><h2 id="css-单位"><a href="#css-单位" class="headerlink" title="css 单位"></a>css 单位</h2><ul>
<li><strong>rem</strong>: 相对于根元素字体尺寸</li>
<li><strong>em</strong>: 相对于父级元素的字体尺寸</li>
<li><strong>%</strong>: 百分比，相对于父元素的尺寸</li>
<li><strong>px</strong>: 像素，相对于用户设备分辨率的最基本单元</li>
<li>pt：Word等办公软件中使用的字体大小单位</li>
<li>dp：安卓开发时使用的长度单位</li>
<li>sp：安卓开发时使用的字体大小单位</li>
<li>vw：视窗宽度，1vw等于视窗宽度的 1%</li>
<li>vh：视窗高度，1vh等于视窗高度的 1%</li>
<li>vmin &#x2F; vmax：vw和vh中较 小&#x2F;大 的那个</li>
</ul>
<h2 id="引用字体"><a href="#引用字体" class="headerlink" title="引用字体"></a>引用字体</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;                       </span><br><span class="line">    <span class="attribute">font-family</span>: ArtifaktBlod;     </span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;fonts/ArtifaktElementOfc-Bold.ttf&#x27;</span>);    </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: ArtifaktBlod;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><ol>
<li><strong>转换属性</strong><br>* transform-origin：指定元素变换的中心点<br>* transform-style：指定场景为 2D 或 3D<br>* perspective：指定 3D 的视距<br>* perspective-origin：设置视距的基点<br>* backface-visibility：是否可以看见 3D 场景背面</li>
<li><strong>2D变换</strong><br>* translate：位移，translate &#x2F; translateX &#x2F; translateY<br>* scale：缩放，scale &#x2F; scaleX &#x2F; scaleY<br>* rotate：旋转，rotate<br>* skew：变形，skew &#x2F; skewX &#x2F; skewY<br>* matrix：矩阵，是所有 2D 变换的本质</li>
<li><strong>3D变换</strong><br>* translate3d：位移，translate3d &#x2F; translateZ<br>* scale3d：缩放，scale3d &#x2F; scaleZ<br>* rotate3d：旋转，rotate3d &#x2F; rotateX &#x2F; rotateY &#x2F; rotateZ<br>* matrix3d：矩阵，是所有 3D 变换的本质</li>
</ol>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">200px</span> <span class="number">300px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等价于 </span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">300px</span>) </span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">30deg</span>)</span><br><span class="line">              <span class="built_in">translate</span>(-<span class="number">200px</span>, -<span class="number">300px</span>); </span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* perspective() 配合 transform 其他函数一起使用，</span></span><br><span class="line"><span class="comment">    仅表示当前变形元素的视距 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">200px</span>) <span class="built_in">rotateY</span>(<span class="number">45deg</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// perspective 指定子元素共享的视距 </span></span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// center表示眼睛在场景正中心</span></span><br><span class="line">    <span class="attribute">perspective-origin</span>: center;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="comment">// 父元素不指定 3D 则失效 </span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">16px</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 让背面不可见，旋转时常用</span></span><br><span class="line">        <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><ol>
<li><strong>过渡效果</strong>：默认样式中定义元素的初始样式和过渡函数，然后定义过渡后的元素样式</li>
<li><strong>缩写语法</strong>：<code>transition：过渡属性 过渡时间 [过渡曲线] [时间延迟]</code></li>
</ol>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="comment">/* transition: width 1s ease-in, backgroundColor 1s ease-in; */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> ease-in .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h2><ol>
<li><strong>动画效果</strong>：通过 animation 绑定 @keyframes 定义的动画，自动实现一种或多种形态同时变化的效果</li>
<li><strong>动画定义</strong>：<code>@keyframes 动画名&#123; 百分比 或 from、to &#125;</code></li>
<li><strong>动画绑定</strong>：<code>animation: 动画名 时间 动画曲线 延迟时间 播放次数 是否逆向播放 [非动画时间的状态]</code></li>
<li><strong>动画暂停</strong>：<code>animation-play-state: paused;</code></li>
</ol>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>; </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>; </span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">    <span class="number">0%</span>   &#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#f00</span> &#125;</span><br><span class="line">    <span class="number">50%</span>  &#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">#f00</span> &#125;</span><br><span class="line">    <span class="number">100%</span> &#123; <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="number">#f00</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: change <span class="number">1s</span> ease-in infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-class">.stop</span> &#123;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="三、组件样式"><a href="#三、组件样式" class="headerlink" title="三、组件样式"></a>三、组件样式</h1><blockquote>
<p>只在当前组件生效，不影响全局样式。</p>
</blockquote>
<h2 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h2><blockquote>
<p>缺点：可能影响其它相同类名的组件样式而不能完全避免冲突、增加了每个样式的权重而导致必须全局修改、增加了标签渲染时间。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在元素中添加了一个唯一属性用来区分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span><span class="selector-attr">[data-v-4c3b6c1c]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><blockquote>
<p>CSS 模块化的一种方式而并非官方标准和浏览器的特性，它重新生成类名而有效避开了 css 权重和类名重复的问题。注意它需要安装 css-loader 插件并进行配置 (Vue 等框架已经集成)，所有类名都要通过 :class 进行绑定。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;css.wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">:class</span>=<span class="string">&quot;css.input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>=<span class="string">&quot;css&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.input</span> &#123; &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css-loader 默认配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">localIdentName</span>: <span class="string">&#x27;[hash:base64]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 vue-loader 自定义配置</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="string">&#x27;\.vue$&#x27;</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">cssModules</span>: &#123;</span><br><span class="line">          <span class="comment">// 格式化类名：当前文件名、当前类名、hash 字符串</span></span><br><span class="line">          <span class="attr">localIdentName</span>: <span class="string">&#x27;[name]**[local]-[hash:base64:5]&#x27;</span>,</span><br><span class="line">          <span class="comment">// only 只支持驼峰绑定类名，true 支持驼峰和中括号</span></span><br><span class="line">          <span class="attr">camelCase</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、PC-端样式"><a href="#四、PC-端样式" class="headerlink" title="四、PC 端样式"></a>四、PC 端样式</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset.css  */</span></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, hr, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, pre, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125; </span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, select, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125; </span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125; </span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125; </span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, pre, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125; </span><br><span class="line">small&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125; </span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125; </span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>: <span class="number">#3D3F40</span>; &#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>: <span class="number">#62B060</span>; &#125; </span><br><span class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125; </span><br><span class="line">sub&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125; </span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125; </span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, select, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125; </span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;  <span class="comment">/* 设置字体平滑 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft YaHei&quot;</span>, <span class="string">&#x27;Muli&#x27;</span>, <span class="string">&quot;Helvetica&quot;</span>, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  定义滚动条样式   */</span>   </span><br><span class="line">::-webkit-scrollbar &#123;   </span><br><span class="line"><span class="comment">/* ::-webkit-scrollbar:horizontal  */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;   </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;  <span class="comment">/*  高宽分别对应横竖滚动条的尺寸  */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*定义滚动条轨道 内阴影+圆角*/</span>   </span><br><span class="line">::-webkit-scrollbar-track &#123;   </span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);     </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;   </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;   </span><br><span class="line">&#125;   </span><br><span class="line"><span class="comment">/*定义滑块 内阴影+圆角*/</span>   </span><br><span class="line">::-webkit-scrollbar-thumb &#123;   </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;   </span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);   </span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#C0C0C0</span>;   </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<h2 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="selector-class">.child</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="selector-class">.child</span> &#123;</span><br><span class="line">        justify-self: center;</span><br><span class="line">        <span class="attribute">align-self</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="布局方式"><a href="#布局方式" class="headerlink" title="布局方式"></a>布局方式</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 左边固定右边自适应的两列布局（定位和flex方式略） */</span></span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;            </span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;               </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;     </span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span> &#123;  </span><br><span class="line">    *zoom : <span class="number">1</span>      </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 两边固定中间自适应的三列布局 (浮动和定位略) */</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,<span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 移动端窗口居中布局 */</span></span><br><span class="line"><span class="selector-class">.text_box</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#eff1f2</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50vw</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text_box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50vw</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50vh</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="瀑布流布局"><a href="#瀑布流布局" class="headerlink" title="瀑布流布局"></a>瀑布流布局</h2><div style="text-indent: 2em">原理是页面容器内的多个高度不固定的 div 之间按照一定的间隔参差不齐的无序浮动，鼠标滚动时不断在容器内的尾部加载数据并自动加载到空缺位置，不断循环。</div>
<div style="text-indent: 2em">核心是基于一个网格的布局，而且每行包含的项目列表高度是随机的（随自身内容动态改变高度），同时每个项目列表呈堆栈形式排列，最关键的是，堆栈之间彼此之间没有多余的间距差存大。</div>

  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 大层 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 瀑布流层 */</span></span><br><span class="line"><span class="selector-class">.waterfall</span> &#123;</span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一个内容层 */</span></span><br><span class="line"><span class="selector-class">.item</span> &#123; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    -webkit-column-<span class="attribute">break-inside</span>: avoid; <span class="comment">/* Chrome, Safari, Opera */</span></span><br><span class="line">    <span class="attribute">page-break-inside</span>: avoid;  <span class="comment">/* Firefox */</span></span><br><span class="line">    <span class="attribute">break-inside</span>: avoid;       <span class="comment">/* IE 10+ */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 清除默认框 */</span></span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: none / <span class="number">0</span> ;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 清除下拉框默认选择样式 */</span></span><br><span class="line">select&#123;</span><br><span class="line">    appearance: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 隐藏下拉箭头 */</span></span><br><span class="line">select::-ms-expand &#123; </span><br><span class="line">    <span class="attribute">display</span>: none; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 应用于有焦点的元素(输入框, 超链接)具有焦点的时间内*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123; </span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">1px</span>  dotted red; </span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123; </span><br><span class="line">    <span class="attribute">background</span>: yellow; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* placeholder 颜色 */</span></span><br><span class="line">::-webkit-input-placeholder&#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d3d3d3</span>; </span><br><span class="line">&#125; </span><br><span class="line">:-moz-placeholder&#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d3d3d3</span>; </span><br><span class="line">&#125; </span><br><span class="line">::-moz-placeholder&#123; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d3d3d3</span>;</span><br><span class="line">&#125; </span><br><span class="line">:-ms-input-placeholder&#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#d3d3d3</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h2><blockquote>
<p>一行居中、多行左对齐</p>
</blockquote>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本超出省略"><a href="#文本超出省略" class="headerlink" title="文本超出省略"></a>文本超出省略</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单行文本 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;  </span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;  </span><br><span class="line">    <span class="attribute">word-break</span>: break-all;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行文本 */</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    line-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 跨浏览器兼容方法 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">1px</span> <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">ellipsis_bg.png</span>) repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="常用特殊图形"><a href="#常用特殊图形" class="headerlink" title="常用特殊图形"></a>常用特殊图形</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三角形：原理是相邻边框连接处是均分</span></span><br><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid black;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头</span></span><br><span class="line"><span class="selector-class">.border-triangle-top</span>(@brcolor: #fbfdff, @bgcolor: #fff, </span><br><span class="line">@brwidth: <span class="number">8px</span>, @width: <span class="number">100%</span>, @height: <span class="number">40px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: @width;</span><br><span class="line">    <span class="attribute">height</span>: @height;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span>,</span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: @brwidth solid transparent;</span><br><span class="line">        <span class="attribute">border-bottom-color</span>: @brcolor;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: -@brwidth;</span><br><span class="line">        <span class="attribute">top</span>: -@brwidth * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">border-bottom-color</span>: @bgcolor;</span><br><span class="line">        <span class="attribute">top</span>: -@brwidth * <span class="number">2</span> + <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border-triangle-bottom</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#d9d9d9</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">span</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">text-align</span>: left;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">        &amp;<span class="selector-class">.t-left</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span>,</span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">        <span class="attribute">border-top-color</span>: <span class="number">#d9d9d9</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: -<span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">border-top-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: -<span class="number">7px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;div class=&quot;title&quot; data-title=&quot;hello world&quot;&gt;title悬浮框&lt;/div&gt;</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-title);</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 半圆</span></span><br><span class="line"><span class="selector-class">.semi-circle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 半椭圆</span></span><br><span class="line"><span class="selector-class">.semiellipse</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span> /<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 椭圆</span></span><br><span class="line"><span class="selector-class">.ellipse</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>/<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 梯形</span></span><br><span class="line"><span class="selector-class">.echelon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">100px</span> solid;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三栏</span></span><br><span class="line"><span class="selector-class">.three-cols</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">30px</span> solid;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">30px</span> solid;</span><br><span class="line">    <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">    <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多层阴影</span></span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> green,<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 眼睛</span></span><br><span class="line"><span class="selector-class">.eye</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: currentColor;</span><br><span class="line">    <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放大镜</span></span><br><span class="line"><span class="selector-class">.magnifier</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.magnifier</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;    </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;    </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;    </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;    </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;    </span><br><span class="line">    <span class="attribute">position</span>: absolute;    </span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">22px</span>;    </span><br><span class="line">    <span class="attribute">top</span>: <span class="number">38px</span>;    </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索框：聚焦时变长 &lt;input class=&quot;search&quot; type=&quot;text&quot;&gt;</span></span><br><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid lightblue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: width <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.search</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卡券效果 &lt;p class=&quot;coupon&quot;&gt;&lt;span&gt;200&lt;/span&gt;优惠券&lt;/p&gt;</span></span><br><span class="line"><span class="selector-class">.coupon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>));</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle at right bottom, </span><br><span class="line">      transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) top right /<span class="number">50%</span> <span class="number">51px</span> no-repeat,</span><br><span class="line">      <span class="built_in">radial-gradient</span>(circle at left bottom, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) </span><br><span class="line">      top left / <span class="number">50%</span> <span class="number">51px</span> no-repeat,</span><br><span class="line">      <span class="built_in">radial-gradient</span>(circle at right top, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) </span><br><span class="line">      bottom right / <span class="number">50%</span> <span class="number">51px</span> no-repeat,</span><br><span class="line">      <span class="built_in">radial-gradient</span>(circle at left top, transparent <span class="number">10px</span>, <span class="number">#ffffff</span> <span class="number">0</span>) </span><br><span class="line">      bottom left / <span class="number">50%</span> <span class="number">51px</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.coupon</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="五、移动端样式"><a href="#五、移动端样式" class="headerlink" title="五、移动端样式"></a>五、移动端样式</h1><h2 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    -webkit-text-size-adjust: none;</span><br><span class="line">    <span class="comment">/* 禁用长按选中、复制文本功能 */</span></span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -webkit-touch-callout: none;</span><br><span class="line">    <span class="comment">/* 取消可点击元素点击时的背景色 */</span></span><br><span class="line">    -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbfbfb</span>;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;  <span class="comment">/* 滚动条上下拉动时卡顿 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;PingFang SC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Helvetica Neue&quot;</span>,STHeiti,<span class="string">&quot;Microsoft Yahei&quot;</span>,Tahoma,Simsun,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,</span><br><span class="line">pre,<span class="selector-tag">form</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,select &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 取消聚焦高亮效果 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">button</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>, <span class="selector-tag">input</span>, <span class="selector-tag">button</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123; </span><br><span class="line">    <span class="attribute">resize</span>: none; </span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">65</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder,</span><br><span class="line">textarea::-webkit-input-placeholder&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-moz-placeholder,</span><br><span class="line">textarea:-moz-placeholder&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-ms-input-placeholder,</span><br><span class="line">textarea:-ms-input-placeholder&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">font</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span>, </span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    -webkit-text-fill-<span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    -webkit-<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">6px</span> <span class="number">#c8c8c8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 开启硬件加速，解决页面闪白，保证动画流畅 */</span></span><br><span class="line"><span class="selector-class">.animation</span> &#123; </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* rem 配置 */</span></span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">321px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">375px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">11px</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">376px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">414px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">12px</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">415px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">639px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">15px</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">640px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">719px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">20px</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">720px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">749px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">22.5px</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">750px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">799px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">23.5px</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">800px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">25px</span> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 竖屏时的样式 */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">orientation</span>:portrait)&#123;   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 横屏时的样式 */</span></span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">orientation</span>:landscape)&#123;   &#125;</span><br></pre></td></tr></table></figure>


<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* input placeholder 出现文本位置偏上 */</span></span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输入框 placeholder 的颜色值改变 */</span></span><br><span class="line">::-webkit-input-placeholder &#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br><span class="line">:-moz-placeholder &#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br><span class="line">::-moz-placeholder &#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br><span class="line">:-ms-input-placeholder &#123;  </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>::-webkit-input-placeholder&#123; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IOS Input Disabled 默认样式问题 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    -webkit-text-fill-<span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    -webkit-<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 改变选中内容的背景颜色：字体颜色换成 color */</span></span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FFF</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line">::-moz-selection &#123; </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span>; </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line">::-webkit-selection &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FFF</span>; </span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用 select 默认下拉箭头 */</span></span><br><span class="line">select::-ms-expand &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用 radio 和 checkbox 默认样式 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span>::-ms-check, </span><br><span class="line">input[type=checkbox]::-ms-check</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用表单输入框默认清除按钮 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>::-ms-clear,</span><br><span class="line">input[type=tel]::-ms-clear,</span><br><span class="line">input[type=number]::-ms-clear &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重置默认外观 */</span></span><br><span class="line"><span class="selector-tag">input</span>, select &#123; </span><br><span class="line">    <span class="comment">/* 清除默认内阴影 */</span></span><br><span class="line">    -webkit-appearance:none; </span><br><span class="line">    appearance: none; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁止winphone默认触摸事件 (e.preventDefault无效) */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    -ms-touch-action: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1px-border"><a href="#1px-border" class="headerlink" title="1px border"></a>1px border</h2>  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 法一</span></span><br><span class="line"><span class="selector-class">.border_1px</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border_1px</span> &#123;</span><br><span class="line">        <span class="attribute">border-bottom</span>: none;</span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border-image</span>: <span class="built_in">url</span>(../img/<span class="number">1px</span>line.png) <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> stretch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 法二</span></span><br><span class="line"><span class="selector-class">.border_1px</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border_1px</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border_1px</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="selector-class">.border_1px</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.33</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单一边框</span></span><br><span class="line"><span class="selector-class">.hair-line</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hair-line</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#dcdcdc</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hair-line--b</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hair-line--t</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hair-line--r</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hair-line--l</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hair-line--a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="六、动画效果"><a href="#六、动画效果" class="headerlink" title="六、动画效果"></a>六、动画效果</h1><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol>
<li>通过定时器 <code>setTimeout、setIterval</code> 间隔改变元素样式，但经常导致页面频繁性重排重绘而消耗性能。</li>
<li>通过浏览器用于定时循环操作的接口 <code>requestAnimationFrame</code> 实现最佳动画效果：它可看作一个性能优化版的 setTimeout，但并不指定回调函数运行时间而是跟着浏览器内建的刷新频率来执行回调。</li>
<li>复杂动画交互建议使用 RAF、setInterval&#x2F;setTimeout 降级处理。</li>
</ol>
<h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><blockquote>
<p><code>transition、animation</code> 摆脱了 js 的控制，并且可以利用硬件加速以及实现复杂动画效果。比如在移动端开发时使用 transition 会让页面变慢甚至卡顿，通过添加 <code>transform: translate3D(0,0,0) / translateZ(0)</code> 来开启移动端动画的 GPU 加速可以让动画过程更加流畅。</p>
</blockquote>
<h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><ul>
<li><code>svg</code>：使用 XML 格式定义基于矢量的图形并嵌入到 HTML 使用。</li>
<li><code>canvas</code>：可用于实现复杂动画，可通过 js 渲染控制动画的执行。</li>
<li><code>WebGL</code>：可看作是浏览器提供的接口，门槛较高而一般使用封装后的 Three.js。</li>
</ul>
<h2 id="常用的库"><a href="#常用的库" class="headerlink" title="常用的库"></a>常用的库</h2><ul>
<li><code>Animate.css</code>：CSS3 动画库，运动元素添加类名。</li>
<li><code>Tween.js</code>：包含各种经典算法的补间动画，以平滑效果变化。</li>
<li><code>Three.js</code>：实现 3D 程序的 js 类库，封装了 webgl 接口。</li>
<li><code>swiper.animate.js</code>：移动端触摸滑块类库，初始化回调中使用并在运动元素添加类名。</li>
</ul>
<h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h2><blockquote>
<p>精彩动画：<a href="https://mp.weixin.qq.com/s/ShPvRu6bo7c-ETlHAQrLZQ">https://mp.weixin.qq.com/s/ShPvRu6bo7c-ETlHAQrLZQ</a></p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.loading-box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">6</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.loading-box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">40vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: rotating <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">12</span>, end) infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> rotating &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;loading-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/mobile/loading.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 圆环 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.app_loading</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#0c0d22</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: opacity <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">pointer-events</span>: none;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text_box</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#eff1f2</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">50vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text_box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">50vw</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text_box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">25vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">25vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: box_fade <span class="number">3s</span> <span class="number">0s</span> ease-in infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text_box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">45vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">45vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: box_fade <span class="number">3s</span> .<span class="number">4s</span> ease-in infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text_box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">65vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">65vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: box_fade <span class="number">3s</span> .<span class="number">8s</span> ease-in infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text_box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: box_fade <span class="number">3s</span> <span class="number">1.2s</span> ease-in infinite;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> box_fade &#123;</span></span><br><span class="line"><span class="language-css">      <span class="number">0%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">30%</span> &#123; <span class="attribute">opacity</span>: .<span class="number">6</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">60%</span> &#123; <span class="attribute">opacity</span>: .<span class="number">2</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="number">100%</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.starline</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* background: pink; */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.starline</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(right, </span></span><br><span class="line"><span class="language-css">          <span class="built_in">rgba</span>(<span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">225</span>, <span class="number">225</span>, <span class="number">225</span>, <span class="number">1</span>));</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.starline</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: xmove <span class="number">12s</span> ease-out infinite;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">45deg</span>) <span class="built_in">translate3d</span>(-<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> xmove &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">45deg</span>) <span class="built_in">translate3d</span>(-<span class="number">800px</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.starline</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: ymove <span class="number">8s</span> ease-out infinite;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">45deg</span>) <span class="built_in">translate3d</span>(-<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> ymove &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">45deg</span>) <span class="built_in">translate3d</span>(-<span class="number">800px</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.starline</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">animation</span>: zmove <span class="number">16s</span> ease-out infinite;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">45deg</span>) <span class="built_in">translate3d</span>(-<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="keyword">@keyframes</span> zmove &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-<span class="number">45deg</span>) <span class="built_in">translate3d</span>(-<span class="number">800px</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app_loading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text_box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;starline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>HTML CSS</category>
      </categories>
      <tags>
        <tag>HTML CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 元素</title>
    <url>/2019/05/06/3-1-html/</url>
    <content><![CDATA[<h1 id="入门基础"><a href="#入门基础" class="headerlink" title="入门基础"></a>入门基础</h1><h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><ul>
<li>行内元素：一行可放多个、宽高不可设置、宽度包裹内容。常用的有：<code>i、a、span、label、strong</code>。</li>
<li>块级元素：独占一行、可设宽高、不设宽度时默认是其父元素的 100%。6个属性：<code>width、height、background、border、padding、margin</code>。常用的有：<code>h、p、ul、div、table</code>。</li>
<li>行内块元素：一行多个、可设宽高。常用的有：<code>img、input、button</code>。</li>
</ul>
<h2 id="布局模型"><a href="#布局模型" class="headerlink" title="布局模型"></a>布局模型</h2><blockquote>
<p>整体布局用浮动、局部布局用定位。</p>
</blockquote>
<ol>
<li>流动模型：浏览器默认文档流。块级元素自下而上、内联元素自左而右按顺序排列。</li>
<li>层模型：定位流。父元素相对定位，子元素绝对&#x2F;固定定位，z-index 定义堆叠顺序。</li>
<li>浮动模型：浮动流。浮动元素脱离文档流而释放空间，但不遮挡后面内容。<br>* float：设计初衷是文字环绕效果，主要特性有包裹性、破坏性。<br>* 清除浮动：清除对后面元素的影响，但父元素有浮动&#x2F;绝对定位时不需要。<br>* 清除方法：<code>给父元素指定高度、在浮动元素后面添加 clear: both、给浮动元素父元素添加 overflow: hidden/auto、底部添加伪元素 after</code>。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动经典方法 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;       <span class="comment">/* 添加内容为空 */</span>   </span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;           <span class="comment">/* 不占空间 */</span></span><br><span class="line">  <span class="attribute">visibility</span>: hidden;  <span class="comment">/* 不可见  */</span>   </span><br><span class="line">  <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;  </span><br><span class="line">  *zoom : <span class="number">1</span>;   <span class="comment">/* 兼容低版本浏览器 */</span>   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><ul>
<li><strong>文件引入优先级</strong>：就近原则，距离相应代码近的引入方式优先级高。</li>
<li><strong>浏览器读取规则</strong>：从右向左，因为相比从左到右匹配更快、性能更优。</li>
<li><strong>元素隐藏方法</strong>：display、Opacity、visibility、hide、遮罩等。</li>
<li><strong>伪类和伪元素</strong><ul>
<li>伪类：<code>:hover、:active、:first-child</code>等用于向已有元素添加特殊效果。</li>
<li>伪元素：<code>::before、::after</code>等用于新建抽象元素并添加样式而实现特殊效果。</li>
</ul>
</li>
</ul>
<hr>
<p>以下为 HTML5 新特性：</p>
<h1 id="一、audio、video"><a href="#一、audio、video" class="headerlink" title="一、audio、video"></a>一、audio、video</h1><blockquote>
<p>支持的格式：Ogg、MP3、WAV</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    src：地址、preload：预加载、autoplay：自动播放</span></span><br><span class="line"><span class="comment">    loop：循环播放、controls：浏览器自带的控制条 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;music/bg.mp3&quot;</span> <span class="attr">autoplay</span>&gt;</span>不支持提示语句<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audio&quot;</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music/bg.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;music/bg.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  优先播放音乐 bg.ogg，不支持播放 bg.mp3</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- width/height：video 独有属性、poster：视频封面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">poster</span>=<span class="string">&quot;video.jpg&quot;</span> <span class="attr">controls</span> <span class="attr">autobuffer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">  您的浏览器不支持 video 标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3>  <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">src：视频的URL</span><br><span class="line">poster：视频封面，没有播放时显示的图片</span><br><span class="line">preload：预加载</span><br><span class="line">autoplay：自动播放</span><br><span class="line">loop：循环播放</span><br><span class="line">controls：浏览器自带的控制条</span><br><span class="line">width：视频宽度</span><br><span class="line">height：视频高度</span><br><span class="line"><span class="attribute">webkit-playsinline</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> IOS下防止全屏播放</span><br><span class="line"><span class="attribute">playsinline</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> 同上</span><br><span class="line"><span class="attribute">x-webkit-airplay</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> 支持ios的AirPlay功能</span><br><span class="line"><span class="attribute">x5-video-player-type</span><span class="operator">=</span><span class="string">&quot;h5&quot;</span> 启用同层H5播放器</span><br><span class="line"><span class="attribute">x5-video-player-fullscreen</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> 全屏设置</span><br><span class="line"><span class="attribute">x5-video-orientation</span><span class="operator">=</span><span class="string">&quot;portraint&quot;</span> 竖屏</span><br><span class="line"><span class="attribute">style</span><span class="operator">=</span><span class="string">&quot;object-fit:fill&quot;</span> 封面铺满</span><br><span class="line"><span class="attribute">muted</span><span class="operator">=</span><span class="string">&quot;true&quot;</span> 静音播放</span><br></pre></td></tr></table></figure>


<h3 id="标签样式"><a href="#标签样式" class="headerlink" title="标签样式"></a>标签样式</h3><blockquote>
<p>chrome 调试方式：F12、右上方三个点、setting、Perferences、勾选 Show user agent shadow Dom，然后就可以查看 video 标签的控制栏 dom 结构。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全屏按钮</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-fullscreen-button &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放按钮</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-play-button &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进度条</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-timeline &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观看的当前时间</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-current-time-display &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余时间</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-time-remaining-display &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音量按钮</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-mute-button &#123; &#125;</span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-toggle-closed-captions-button &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音量的控制条</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-volume-slider &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有控件</span></span><br><span class="line"><span class="attr">video</span>::-webkit-media-controls-enclosure &#123; &#125;</span><br></pre></td></tr></table></figure>


<h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误状态</span></span><br><span class="line">$video.<span class="property">error</span>;      <span class="comment">// null: 正常  </span></span><br><span class="line">$video.<span class="property">error</span>.<span class="property">code</span>; <span class="comment">// 1.用户终止 2.网络错误 3.解码错误 4.URL无效 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络状态</span></span><br><span class="line">$video.<span class="property">currentSrc</span>;         <span class="comment">// 当前资源的 URL  </span></span><br><span class="line">$video.<span class="property">src</span> = value;        <span class="comment">// 设置当前资源的 URL  </span></span><br><span class="line">$video.<span class="title function_">canPlayType</span>(type);  <span class="comment">// 是否能播放某种格式的资源  </span></span><br><span class="line">$video.<span class="property">networkState</span>;       <span class="comment">// 视频的当前网络状态</span></span><br><span class="line">$video.<span class="property">buffered</span>;           <span class="comment">// 获取已缓冲区域</span></span><br><span class="line">$video.<span class="property">buffered</span>.<span class="title function_">end</span>(<span class="number">0</span>)     <span class="comment">// 获取最后一刻的数据</span></span><br><span class="line">$video.<span class="title function_">load</span>();             <span class="comment">// 重新加载 src 指定的资源 </span></span><br><span class="line">$video.<span class="property">preload</span>;            <span class="comment">// 是否预加载视频</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备状态</span></span><br><span class="line">$video.<span class="property">readyState</span>;    <span class="comment">// 视频是否已准备好播放</span></span><br><span class="line">$video.<span class="property">seeking</span>;       <span class="comment">// 是否正在寻址 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放状态</span></span><br><span class="line">$video.<span class="property">currentTime</span> = value; <span class="comment">// 当前播放位置  </span></span><br><span class="line">$video.<span class="property">duration</span>;            <span class="comment">// 当前资源长度  </span></span><br><span class="line">$video.<span class="property">paused</span>;              <span class="comment">// 是否暂停  </span></span><br><span class="line">$video.<span class="property">defaultPlaybackRate</span> = value;  <span class="comment">// 默认的回放速度</span></span><br><span class="line">$video.<span class="property">playbackRate</span> = value;         <span class="comment">// 当前播放速度 </span></span><br><span class="line">$video.<span class="property">seekable</span>;    <span class="comment">// 返回可以寻址的区域 </span></span><br><span class="line">$video.<span class="property">ended</span>;       <span class="comment">// 是否结束  </span></span><br><span class="line">$video.<span class="property">autoPlay</span>;    <span class="comment">// 是否自动播放  </span></span><br><span class="line">$video.<span class="property">loop</span>;        <span class="comment">// 是否循环播放  </span></span><br><span class="line">$video.<span class="title function_">play</span>();      <span class="comment">// 播放  </span></span><br><span class="line">$video.<span class="title function_">pause</span>();     <span class="comment">//暂停  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相关控制</span></span><br><span class="line">$video.<span class="property">controls</span>;         <span class="comment">// 是否有默认控制条  </span></span><br><span class="line">$video.<span class="property">volume</span> = value;   <span class="comment">// 音量  </span></span><br><span class="line">$video.<span class="property">muted</span> = value;    <span class="comment">// 静音</span></span><br></pre></td></tr></table></figure>


<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loadstart         <span class="comment">// 客户端开始请求数据  </span></span><br><span class="line">*progress         <span class="comment">// 客户端正在请求数据  </span></span><br><span class="line">suspend           <span class="comment">// 延迟下载  </span></span><br><span class="line">abort             <span class="comment">// 客户端主动终止下载（不是因为错误引起） </span></span><br><span class="line">*error            <span class="comment">// 请求数据时遇到错误  </span></span><br><span class="line">stalled           <span class="comment">// 网速失速  </span></span><br><span class="line">*play             <span class="comment">// 开始播放时触发  </span></span><br><span class="line">*pause            <span class="comment">// 暂停时触发  </span></span><br><span class="line">loadedmetadata    <span class="comment">// 成功获取资源长度  </span></span><br><span class="line">*waiting          <span class="comment">// 等待数据，并非错误  </span></span><br><span class="line">*playing          <span class="comment">// 开始回放  </span></span><br><span class="line">canplay           <span class="comment">// 可以播放，但中途可能因为加载而暂停  </span></span><br><span class="line">*canplaythrough   <span class="comment">// 可以播放  </span></span><br><span class="line">seeking           <span class="comment">// 资源寻找中  </span></span><br><span class="line">seeked            <span class="comment">// 资源寻找完毕  </span></span><br><span class="line">*timeupdate       <span class="comment">// 播放时间改变  </span></span><br><span class="line">*ended            <span class="comment">// 播放结束  </span></span><br><span class="line">ratechange        <span class="comment">// 播放速率改变  </span></span><br><span class="line">durationchange    <span class="comment">// 资源长度改变  </span></span><br><span class="line">*volumechange     <span class="comment">// 音量改变         </span></span><br></pre></td></tr></table></figure>


<h2 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h2><blockquote>
<p>ios、Android、微信为了节省流量而规定忽视 autoplay 属性。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ios、Android：循环播放失效时方案相似</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;audio&#x27;</span>).<span class="title function_">play</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 微信</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;audios&#x27;</span>).<span class="title function_">play</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 针对苹果的手机微信端</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">autoPlayVideo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">    <span class="attr">debug</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">appId</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">timestamp</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">nonceStr</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">signature</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">jsApiList</span>:[]</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> autoplayVideo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;audio&quot;</span>);</span><br><span class="line">    autoplayVideo.<span class="title function_">play</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><blockquote>
<p>navigator.getUserMedia 可以提示用户需要权限去使用像摄像头、麦克风等媒体设备。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 兼容写法</span></span><br><span class="line">navigator.<span class="property">getMedia</span> = (navigator.<span class="property">getUserMedia</span> ||</span><br><span class="line">  navigator.<span class="property">webkitGetUserMedia</span> ||</span><br><span class="line">  navigator.<span class="property">mozGetUserMedia</span> ||</span><br><span class="line">  navigator.<span class="property">msGetUserMedia</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户摄像头并提供拍照功能：video、canvas、button</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取元素，创建设置等等</span></span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>),</span><br><span class="line">  context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">  video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>),</span><br><span class="line">  videoObj = &#123; <span class="string">&quot;video&quot;</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  errBack = <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Video capture error: &quot;</span>, error.<span class="property">code</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加 video 监听器</span></span><br><span class="line">  <span class="keyword">if</span>(navigator.<span class="property">getUserMedia</span>) &#123; <span class="comment">// 标准</span></span><br><span class="line">      navigator.<span class="title function_">getUserMedia</span>(videoObj, <span class="keyword">function</span>(<span class="params">stream</span>) &#123;</span><br><span class="line">          video.<span class="property">src</span> = stream;</span><br><span class="line">          video.<span class="title function_">play</span>();</span><br><span class="line">      &#125;, errBack);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(navigator.<span class="property">webkitGetUserMedia</span>) &#123; <span class="comment">// WebKit 前缀</span></span><br><span class="line">      navigator.<span class="title function_">webkitGetUserMedia</span>(videoObj, <span class="keyword">function</span>(<span class="params">stream</span>)&#123;</span><br><span class="line">          video.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">webkitURL</span>.<span class="title function_">createObjectURL</span>(stream);</span><br><span class="line">          video.<span class="title function_">play</span>();</span><br><span class="line">      &#125;, errBack);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(navigator.<span class="property">mozGetUserMedia</span>) &#123;    <span class="comment">// Firefox 前缀</span></span><br><span class="line">      navigator.<span class="title function_">mozGetUserMedia</span>(videoObj, <span class="keyword">function</span>(<span class="params">stream</span>)&#123;</span><br><span class="line">          video.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(stream);</span><br><span class="line">          video.<span class="title function_">play</span>();</span><br><span class="line">      &#125;, errBack);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;snap&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      context.<span class="title function_">drawImage</span>(video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>


<h1 id="二、Canvas"><a href="#二、Canvas" class="headerlink" title="二、Canvas"></a>二、Canvas</h1><blockquote>
<p>提供了一系列绘图方法的对象。</p>
</blockquote>
<h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(canvas.<span class="property">getContext</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段 </span></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">20</span>); </span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">40</span>);</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">5</span>; </span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#CC0000&#x27;</span>; </span><br><span class="line">ctx.<span class="title function_">stroke</span>();    <span class="comment">// 绘制</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;#ff0000&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">20</span>, <span class="number">70</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">70</span>, <span class="number">70</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径：填充</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">240</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">2</span> , <span class="literal">false</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#0000ff&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径：填充 + 边框</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">300</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">2</span> , <span class="literal">false</span>);</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;#0000ff&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;rgba(0,0,255,0.2)&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 贝塞尔曲线</span></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;skyblue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">bezierCurveTo</span>(<span class="number">300</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">50</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="comment">// 蓝色填充矩形</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#0000ff&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">60</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 红色边框矩形</span></span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">10</span>; </span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">60</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#0000ff&quot;</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;#ff0000&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">50</span>, <span class="number">240</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;pink&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">50</span>, <span class="number">240</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本</span></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;Bold 20px Arial&quot;</span>; </span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;left&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#008600&quot;</span>; </span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello!&quot;</span>, <span class="number">10</span>, <span class="number">50</span>); </span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&quot;Hello!&quot;</span>, <span class="number">10</span>, <span class="number">100</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渐变色</span></span><br><span class="line"><span class="keyword">var</span> grd = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">0</span>,<span class="string">&quot;#ff0000&quot;</span>);</span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">1</span>,<span class="string">&quot;#0000ff&quot;</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = grd;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 阴影</span></span><br><span class="line">ctx.<span class="property">shadowOffsetX</span> = <span class="number">10</span>; </span><br><span class="line">ctx.<span class="property">shadowOffsetY</span> = <span class="number">10</span>; </span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">5</span>; </span><br><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;rgba(0,0,0,0.5)&quot;</span>; </span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#CC0000&quot;</span>; </span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>


<h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;400&quot;</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">image.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 图片绘制</span></span><br><span class="line">  <span class="comment">// ctx.drawImage(image, 0, 0)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 图片裁剪</span></span><br><span class="line">  ctx.<span class="title function_">beginPath</span>(); </span><br><span class="line">  ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>*<span class="number">2</span>, <span class="literal">true</span>); </span><br><span class="line">  ctx.<span class="title function_">clip</span>();          </span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(image, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">image.<span class="property">src</span> = <span class="string">&#x27;./mobile-type.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取图片保存地址</span></span><br><span class="line"><span class="keyword">let</span> src = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">var</span> speed = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line">  x += speed;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= <span class="number">0</span> || x &gt;= <span class="number">475</span>)&#123;</span><br><span class="line">      speed = -speed;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">draw</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  context.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">170</span>);</span><br><span class="line">  context.<span class="property">fillStyle</span> = <span class="string">&quot;#ff00ff&quot;</span>;</span><br><span class="line">  context.<span class="title function_">fillRect</span>(x, y, <span class="number">25</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">animation</span>()</span><br></pre></td></tr></table></figure>


<h2 id="像素处理"><a href="#像素处理" class="headerlink" title="像素处理"></a>像素处理</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取图像数据</span></span><br><span class="line"><span class="keyword">let</span> imgData = ctx.<span class="title function_">getImageData</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 处理图像数据</span></span><br><span class="line"><span class="title function_">filter</span>(imageData);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新绘制图像</span></span><br><span class="line">ctx.<span class="title function_">putImageData</span>(imageData, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<h1 id="三、WebSocket"><a href="#三、WebSocket" class="headerlink" title="三、WebSocket"></a>三、WebSocket</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  socket.<span class="title function_">send</span>(<span class="string">&#x27;hello HTML5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;receive a message&#x27;</span>, event)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params">ev</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;socket has closed&#x27;</span>, event)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  socket.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="四、Web-Worker"><a href="#四、Web-Worker" class="headerlink" title="四、Web Worker"></a>四、Web Worker</h1><h2 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h2><ul>
<li>在当前 js 的主线程中，通过 Worker 类加载一个 js 文件来开辟一个新的线程</li>
<li>新线程可以加载 JS 进行大量的复杂运算，同时主线程不需要挂起等待而是执行其它代码</li>
<li>新线程创建时，它的脚本文件生成的两个对象和一套 API 可以实现主线程和子线程的数据通信<ul>
<li><strong>worker 对象</strong>：主线程脚本中通过构造函数显式创建，通过实例方法获取</li>
<li><strong>WorkerGlobalScope 对象</strong>：子线程脚本中隐式创建的全局对象，通过 this 获取</li>
<li><strong>API 接口</strong>：主线程和子线程脚本间进行数据传输的接口，主要为 postMessage、onmessage</li>
</ul>
</li>
</ul>
<h2 id="Web-主线程"><a href="#Web-主线程" class="headerlink" title="Web 主线程"></a>Web 主线程</h2><ol>
<li>创建新线程：<code>var worker = new Worker(url)</code></li>
<li>发送数据：<code>worker.postMessage(data)</code></li>
<li>接收数据：<code>worker.onmessage = fn</code></li>
<li>结束新线程：<code>worker.terminate()</code></li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断当前浏览器是否支持 web worker</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="title class_">Worker</span>) != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (w) == <span class="string">&quot;undefined&quot;</span>) &#123;       </span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;webworker.js&quot;</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 事件处理函数，用来处理后端的 web worker 传递的消息  </span></span><br><span class="line">    w.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123; </span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载一个 JS 文件来创建一个 worker，同时返回一个 worker 实例</span></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;worker.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 worker 发送数据</span></span><br><span class="line">worker.<span class="title function_">postMessage</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 worker 发送的数据</span></span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">worker.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="comment">// 错误所在的代码文件和行数、错误信息</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;Line #&quot;</span> + err.<span class="property">lineno</span> + <span class="string">&quot; - &quot;</span> + err.<span class="property">message</span> + <span class="string">&quot; in &quot;</span> + err.<span class="property">filename</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束 worker</span></span><br><span class="line">worker.<span class="title function_">terminate</span>()  </span><br></pre></td></tr></table></figure>
<h2 id="worker-新线程"><a href="#worker-新线程" class="headerlink" title="worker 新线程"></a>worker 新线程</h2><blockquote>
<p>全局变量 this 省略</p>
</blockquote>
<ol>
<li>发送数据：<code>postMessage(data)</code></li>
<li>接收数据：<code>onmessage = fn</code></li>
<li>加载脚本：<code>importScripts(&#39;a.js&#39;, &#39;b.js&#39;)</code></li>
<li>结束自身：<code>self.close()</code></li>
</ol>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>用来进行处理大量的复杂计算而不挂起主线程。</li>
<li>可以在 worker 中通过 <code>importScripts(url) </code>加载其它脚本文件。</li>
<li>可以使用 <code>setTimeout、clearTimeout、setInterval、clearInterval</code>。</li>
<li>可以使用 <code>XMLHttpRequest</code> 来发送请求。</li>
<li>可以访问 <code>navigator、location</code> 对象。</li>
</ul>
<h2 id="操作限制"><a href="#操作限制" class="headerlink" title="操作限制"></a>操作限制</h2><blockquote>
<p>Worker 线程脚本</p>
</blockquote>
<ul>
<li><strong>脚本限制</strong>：无法调用 alert、confirm 等函数。</li>
<li><strong>同源限制</strong>：不能跨域加载脚本文件，它必须与主线程的脚本文件同源。</li>
<li><strong>通信限制</strong>：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信。</li>
<li><strong>文件限制</strong>：无法读取本地文件，所加载的脚本必须 来自网络或通过服务器打开。</li>
<li><strong>DOM 限制</strong>：无法访问 DOM 节点、无法访问 window、document 等全局变量。</li>
</ul>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li><strong>专用线程</strong>：只能被创建它的页面访问，随当前页面的关闭而结束，通信通过 onmessage()、postmessage()。</li>
<li><strong>共享线程</strong>：可以被多个页面访问，connect 后通过 port 属性实现通信。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ---------- 专用线程 -----------</span></span><br><span class="line"><span class="comment">// 主线程 index.html/script</span></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;worker.js&quot;</span>); </span><br><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&quot;hello world&quot;</span>);      <span class="comment">// 发送数据</span></span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;   <span class="comment">// 接收数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);             </span><br><span class="line">  worker.<span class="title function_">terminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子线程：worker.js </span></span><br><span class="line">onmessage = <span class="keyword">function</span> (<span class="params">event</span>)&#123;          <span class="comment">// 接收数据</span></span><br><span class="line">  <span class="keyword">var</span> d = event.<span class="property">data</span>;    </span><br><span class="line">  <span class="title function_">postMessage</span>(<span class="string">&quot;已收到：&quot;</span> + d);        <span class="comment">// 发送数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过服务器打开文件：直接打开会报错</span></span><br><span class="line">live-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- 共享线程 -----------</span></span><br><span class="line"><span class="comment">// 主线程 </span></span><br><span class="line">worker.<span class="property">port</span>.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;&#125;</span><br><span class="line">worker.<span class="property">port</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;data&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子线程 </span></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> port = event.<span class="property">ports</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">// 接收</span></span><br><span class="line">  port.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 发送</span></span><br><span class="line">  port.<span class="title function_">postMessage</span>(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">  port.<span class="title function_">start</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h1 id="五、拖放操作"><a href="#五、拖放操作" class="headerlink" title="五、拖放操作"></a>五、拖放操作</h1><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote>
<p>事件对象为 被拖拽的元素、放置的目标元素 (拖放范围)。</p>
</blockquote>
<ul>
<li>拖拽元素：dragstart、drag、dragend</li>
<li>目标元素：dragenter、dragover (拖拽)、dragleave (拖出)、drop (拖入后释放鼠标)</li>
<li>执行顺序：drop 是否触发分类<ul>
<li>触发：<code>dragstart、drag、dragenter、dragover、drop、dragend</code></li>
<li>不触发：<code>dragstart、drag、dragenter、dragover、dragleave、dragend</code></li>
</ul>
</li>
</ul>
<h2 id="dataTransfer-对象"><a href="#dataTransfer-对象" class="headerlink" title="dataTransfer 对象"></a>dataTransfer 对象</h2><blockquote>
<p>拖动时回调函数接受的事件参数。注意火狐浏览器下必须设置它的 setData 方法才可以拖拽除图片外的其他标签。</p>
</blockquote>
<ul>
<li>属性：dropEffect(元素行为和相应光标)、effectAllowed(允许拖动元素的光标样式)、files(被拖放的文件对象)。</li>
<li>方法：getData、setData、clearData、setDragImage(指定拖动时显示的图像)、addElement(添加被拖拽元素)。</li>
</ul>
<h2 id="拖拽上传预览图片"><a href="#拖拽上传预览图片" class="headerlink" title="拖拽上传预览图片"></a>拖拽上传预览图片</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">  box.<span class="property">ondragenter</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;可以释放&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  box.<span class="property">ondragover</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  box.<span class="property">ondragleave</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;请拖拽到此区域&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  box.<span class="property">ondrop</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="comment">// 连续触发事件阻止冒泡</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据对象</span></span><br><span class="line">    <span class="keyword">var</span> fs = event.<span class="property">dataTransfer</span>.<span class="property">files</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &gt; fs.<span class="property">length</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 读取文件信息的接口对象</span></span><br><span class="line">      <span class="keyword">var</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>();  </span><br><span class="line">      <span class="keyword">if</span>( fs[i].<span class="property">type</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;image&#x27;</span>)!=-<span class="number">1</span> )&#123;</span><br><span class="line">          fr.<span class="title function_">readAsDataURL</span>( fs[i] );</span><br><span class="line">          fr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> oLi = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> oImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">            oImg.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">result</span>;</span><br><span class="line">            oLi.<span class="title function_">appendChild</span>( oImg );</span><br><span class="line">            list.<span class="title function_">appendChild</span>( oLi );</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">&#x27;请拖放图片指定格式&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="六、地理定位"><a href="#六、地理定位" class="headerlink" title="六、地理定位"></a>六、地理定位</h1><blockquote>
<p>常用的地理位置定位方式：HTML5、百度地图、高德地图。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML5 定位</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>,  <span class="comment">// 是否要求高精度</span></span><br><span class="line">    <span class="attr">maximumAge</span>: <span class="number">1000</span>           <span class="comment">// 应用缓存时间</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (navigator.<span class="property">geolocation</span>) &#123;</span><br><span class="line">      navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="function"><span class="params">position</span> =&gt;</span>  &#123;</span><br><span class="line">        <span class="keyword">var</span> latitude = position.<span class="property">coords</span>.<span class="property">latitude</span>;    </span><br><span class="line">        <span class="keyword">var</span> longitude = position.<span class="property">coords</span>.<span class="property">longitude</span>;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`纬度：<span class="subst">$&#123;latitude&#125;</span>, 经度：<span class="subst">$&#123;longitude&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">      &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        <span class="comment">// 常见错误：需要用户授权、仅限 HTTPS、需要翻墙 (谷歌浏览器)</span></span><br><span class="line">      &#125;, options);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 浏览器不支持</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 百度地图：申请密钥之后以参数形式引入，然后即可调用</span></span><br><span class="line"><span class="comment">// script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=zbLUqlSrM&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Map</span>(<span class="string">&quot;allmap&quot;</span>); <span class="comment">// 创建Map实例</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">Point</span>(<span class="number">116.404</span>, <span class="number">39.915</span>)</span><br><span class="line">map.<span class="title function_">centerAndZoom</span>(point, <span class="number">15</span>)   <span class="comment">// 初始化地图，设置中心点坐标和地图级别</span></span><br><span class="line"><span class="comment">// map.centerAndZoom(&quot;上海&quot;,15)</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">addControl</span>(<span class="keyword">new</span> <span class="title class_">BMap</span>.<span class="title class_">MapTypeControl</span>())    <span class="comment">// 添加地图类型控件</span></span><br><span class="line">map.<span class="title function_">setCurrentCity</span>(<span class="string">&quot;北京&quot;</span>)                   <span class="comment">// 设置地图显示的城市</span></span><br><span class="line">map.<span class="title function_">enableScrollWheelZoom</span>(<span class="literal">true</span>)             <span class="comment">// 开启鼠标滚轮缩放</span></span><br></pre></td></tr></table></figure>


<h1 id="七、全屏模式"><a href="#七、全屏模式" class="headerlink" title="七、全屏模式"></a>七、全屏模式</h1>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动全屏模式  </span></span><br><span class="line"><span class="title function_">launchFullScreen</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>);   <span class="comment">// 整个页面  </span></span><br><span class="line"><span class="title function_">launchFullScreen</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>)); <span class="comment">// 单独元素 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消全屏  </span></span><br><span class="line"><span class="title function_">cancelFullscreen</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">launchFullScreen</span>(<span class="params">element</span>) &#123;  </span><br><span class="line">  <span class="keyword">if</span>(element.<span class="property">requestFullScreen</span>) &#123;  </span><br><span class="line">      element.<span class="title function_">requestFullScreen</span>();  </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">mozRequestFullScreen</span>) &#123;  </span><br><span class="line">      element.<span class="title function_">mozRequestFullScreen</span>();  </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">webkitRequestFullScreen</span>) &#123;  </span><br><span class="line">      element.<span class="title function_">webkitRequestFullScreen</span>();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cancelFullscreen</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">cancelFullScreen</span>) &#123;  </span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">cancelFullScreen</span>();  </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">mozCancelFullScreen</span>) &#123;  </span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">mozCancelFullScreen</span>();  </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">webkitCancelFullScreen</span>) &#123;  </span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">webkitCancelFullScreen</span>();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全屏元素</span></span><br><span class="line"><span class="keyword">var</span> fullscreenEle = <span class="variable language_">document</span>.<span class="property">fullscreenElement</span> ||</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">mozFullScreenElement</span> ||</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">webkitFullscreenElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否全屏</span></span><br><span class="line"><span class="keyword">var</span> isFullscreen = <span class="variable language_">document</span>.<span class="property">fullscreenEnabled</span> ||</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">fullScreen</span> ||</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">webkitIsFullScreen</span> ||</span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">msFullscreenEnabled</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全屏事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;fullscreenchange&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;fullscreenerror&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;)</span><br></pre></td></tr></table></figure>
<h1 id="八、数据储存"><a href="#八、数据储存" class="headerlink" title="八、数据储存"></a>八、数据储存</h1><blockquote>
<p>客户端存储方式：localStorage、sessionStorage、cookie、UserData、webSQL、IndexedDB、HTML5 离线存储等。</p>
</blockquote>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote>
<p>随着每次 http 请求头信息一起发送，无形中增加了网络流量，而且能存储的数据容量较小，适用于购物车、客户端登录等场景</p>
</blockquote>
<ul>
<li>优点：可控制过期时间、可扩展和可用性比较好、可加密而减少被破解的可能性。</li>
<li>缺点：在请求头上携带数据而安全性差、数量和长度有限制(最多 20 条、最长 40k)。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">key, value, expireTime</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cookie = key + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> expireTime !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> expire = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    expire.<span class="title function_">setTime</span>(expire.<span class="title function_">getTime</span>() + expireTime);</span><br><span class="line">    cookie += <span class="string">&#x27;;expires=&#x27;</span> + expire.<span class="title function_">toUTCString</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = cookie + <span class="string">&#x27;;domain=&#x27;</span> + location.<span class="property">hostname</span> + <span class="string">&#x27;;path=/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cookie = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">replace</span>(<span class="regexp">/;\s*/g</span>, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">  cookie = <span class="title function_">parseParam</span>(cookie, <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> cookie[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delCookie</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  exp.<span class="title function_">setTime</span>(exp.<span class="title function_">getTime</span>() - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> cval = <span class="variable language_">this</span>.<span class="title function_">getCookie</span>(key);</span><br><span class="line">  <span class="keyword">if</span> (cval != <span class="literal">null</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = key + <span class="string">&quot;=&quot;</span> + cval + <span class="string">&quot;;expires=&quot;</span> + exp.<span class="title function_">toGMTString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote>
<p>本地存储方式可以长期存储数据，没有时间限制，而且可以储存电话本等大量数据。</p>
</blockquote>
<ul>
<li>特点：同源策略限制、只在本地存储、永久保存、同浏览器共享。</li>
<li>优点<ul>
<li>扩展了 cookie 的 4k 限制。</li>
<li>可以将请求数据直接存储到本地，节约带宽。</li>
<li>遵循同源策略，不同网站之间不能直接共用。</li>
</ul>
</li>
<li>缺点<ul>
<li>需要手动删除，否则长期存在。</li>
<li>浏览器大小不一，版本的支持也不一样。</li>
<li>只支持存储 string 类型的数据，JSON 对象需要转换。</li>
<li>本质是对字符串的读取，如果存储内容多则会消耗内存空间而导致页面变卡。</li>
</ul>
</li>
<li>应用场景<ul>
<li>多页面访问共同数据：可以在多个标签页中共享数据。</li>
<li>数据比较大的临时保存方案：比如在线编辑文章时的自动保存。</li>
</ul>
</li>
<li>API<ul>
<li>存储：<code>localStorage.setItem(key, value)</code>。</li>
<li>读取：<code>localStorage.getItem(key)</code>(单个)、<code>localStorage.valueOf()</code>(全部)。</li>
<li>删除：<code>localStorage.removeItem(key)</code>(单个)、<code>localStorage.clear()</code>(全部)。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setStore</span> = (<span class="params">name, content</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> content !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    content = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(content);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(name, content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getStore</span> = name =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeStore</span> = name =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name) <span class="keyword">return</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h2><blockquote>
<p>会话存储，关闭浏览器之后数据就会消失。非常适合单页应用程序，便于各业务模块之间的传值</p>
</blockquote>
<ul>
<li>特点<ul>
<li><strong>同源策略限制</strong> </li>
<li><strong>单标签页限制</strong>：同一个标签页中的同源页面共享数据。</li>
<li><strong>只在本地存储</strong>：数据只会在存储在本地，并在标签页关闭后清除。</li>
<li><strong>存储方式</strong>：采用键值对的方式，注意 value 值必须为字符串类型。</li>
<li><strong>存储上限限制</strong>：不同的浏览器存储的上限不同，但大多数限制在 5MB 以下。</li>
</ul>
</li>
<li>API<ul>
<li>存储：<code>sessionStorage.setItem(key, value)</code></li>
<li>读取<ul>
<li>单个：<code>sessionStorage.getItem(key)</code></li>
<li>全部：<code>sessionStorage.valueOf()</code></li>
</ul>
</li>
<li>删除<ul>
<li>单个：<code>sessionStorage.removeItem(key)</code></li>
<li>全部：<code>sessionStorage.clear()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="以上区别"><a href="#以上区别" class="headerlink" title="以上区别"></a>以上区别</h2><ul>
<li>传递<ul>
<li>cookie 数据通常经过加密，而且会在浏览器和服务器间来回传递。</li>
<li>后两个不会自动把数据发给服务器，仅在本地保存。</li>
</ul>
</li>
<li>存储大小<ul>
<li>cookie 数据大小不能超过4k，始终在同源的 http 请求中携带。</li>
<li>后两个虽然也有存储大小的限制但比 cookie 大得多，可以达到 5M 及以上。</li>
</ul>
</li>
<li>生命周期<ul>
<li>cookie 数据只在过期时间之前一直有效。</li>
<li>localStorage存储持久数据，不要不主动删除数据就有效有效。</li>
<li>sessionStorage数据在当前浏览器窗口关闭后自动删除。</li>
</ul>
</li>
<li>作用域    <ul>
<li>sessionStorage 不在不同浏览器窗口中共享。</li>
<li>另外两个在所有同源窗口中都共享。</li>
</ul>
</li>
</ul>
<h2 id="临时数据"><a href="#临时数据" class="headerlink" title="临时数据"></a>临时数据</h2><blockquote>
<p>html 标签上添加自定义属性来存储和操作数据，注意 js 可以动态添加和删除，但不能删除行内添加的。</p>
</blockquote>
<ul>
<li>html：<code>div data-name=&quot;值&quot;</code>，name 为自定义属性名</li>
<li>注意：<code>data-e-name：eName, data-myName：myname</code></li>
<li>原生 js<ul>
<li>获取：<code>div.dataset.name</code></li>
<li>设置：<code>div.dataset.name = new</code></li>
<li>删除：<code>div.dataset.name = null</code></li>
</ul>
</li>
<li>jQuery<ul>
<li>获取：<code>$(&quot;div&quot;).data(&quot;name&quot;)</code></li>
<li>设置：<code>$(&quot;div&quot;).data(&quot;name&quot;, &quot;new&quot;)</code></li>
<li>删除：<code>$(&quot;div&quot;).removeDate(&quot;name&quot;)</code></li>
</ul>
</li>
</ul>
<h2 id="离线存储"><a href="#离线存储" class="headerlink" title="离线存储"></a>离线存储</h2><blockquote>
<p>Application Cache 应用程序缓存，常用于存储网页</p>
</blockquote>
<ul>
<li>优势<ul>
<li>加载快：已缓存资源加载速度块</li>
<li>离线浏览：用户可以在应用离线时使用</li>
<li>减少服务器负载：浏览器只从服务器下载更新过的资源</li>
</ul>
</li>
<li>使用<ul>
<li>html 标签添加 manifest 属性：html manifest&#x3D;”.&#x2F;js&#x2F;demo.manifest”</li>
<li>编写 manifest 文件：用于告知浏览器需要缓存和不需要缓存的内容</li>
</ul>
</li>
</ul>
<h1 id="九、其它"><a href="#九、其它" class="headerlink" title="九、其它"></a>九、其它</h1><ul>
<li>普通元素<ul>
<li>新增标签：<code>nav、header、aside、section、footer、canvas、video、output、...</code></li>
<li>新增属性：<code>contextmenu、contentEditable、hidden、draggable、data-*</code></li>
</ul>
</li>
<li>表单元素<ul>
<li>输入验证：<code>邮箱、地址、日期、数字、电话、范围、搜索、颜色</code></li>
<li>新增属性：<code>required、pattern、autofocus、autocomplete、novalidate、multiple</code></li>
</ul>
</li>
<li>超链接<ul>
<li>短信：<code>&lt;a href=&#39;sms:15919218899&#39;&gt;&lt;/a&gt;</code></li>
<li>电话：<code>&lt;a href=&quot;tel:15919218899&quot;&gt;&lt;/a&gt;</code></li>
<li>邮件：<code>&lt;a href=&quot;mailto:99519876@qq.com&quot;&gt;&lt;/a&gt;</code></li>
<li>地图：<code>&lt;a href=&quot;http://map.baidu.com/mobile/search...&quot;&gt;&lt;/a&gt;</code></li>
<li>QQ客服：<code>&lt;a target=&quot;_blank&quot; href=&quot;http://wpa.qq.com/msgrd?v=3&amp;...&quot;&gt;&lt;/a&gt;</code></li>
</ul>
</li>
<li>History<ul>
<li>功能：实现无刷新更新地址</li>
<li>API：<code>history.pushState、history.replaceState</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML CSS</category>
      </categories>
      <tags>
        <tag>HTML CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Three.js 绘图插件</title>
    <url>/2019/03/10/2-5-web%E7%BB%98%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="一、WebGL-原生绘图"><a href="#一、WebGL-原生绘图" class="headerlink" title="一、WebGL 原生绘图"></a>一、WebGL 原生绘图</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="OpenGL、WebGL"><a href="#OpenGL、WebGL" class="headerlink" title="OpenGL、WebGL"></a>OpenGL、WebGL</h3><ul>
<li><strong>OpenGL</strong>：最常用的跨平台图形库，用于渲染 2D、3D 矢量图形的跨语言、跨平台的应用程序编程接口</li>
<li><strong>OpenGL ES</strong>：OpenGL API 的子集 GPU，是针对手机、PDA 和游戏主机等嵌入式设备而专门设计的接口</li>
<li><strong>GLSL</strong>：OpenGL ES 着色语言，用于OpenGL中着色编程的语言。在图形卡的GPU上执行，代替了固定的渲染管线的一部分，使渲染管线中不同层次具有可编程性，如视图转换、投影转换等。  </li>
<li><strong>WebGL</strong>：基于 OpenGL 设计的面向 web 的图形标准，它提供的一系列 Js API 对显卡的硬件细节进行了封装抽象，可用于控制 GPU渲染管线(显卡硬件) 进行图形渲染，从而获得了较高性能。</li>
<li><strong>WebGL程序</strong>：主要组成是 js控制代码 和 计算机的图形处理单元GPU。而 GPU 核心即着色程序 program 由顶点和片元两个着色器组成，使用 GLSL 编写并通过常以字符串的形式存放在Js中等待调用 (浏览器不识别 GLSL)。</li>
</ul>
<h3 id="CPU、GPU"><a href="#CPU、GPU" class="headerlink" title="CPU、GPU"></a>CPU、GPU</h3><blockquote>
<p>图像处理主要偏简单的矩阵运算，逻辑判断等很少。两者的设计架构不同。GPU很适合做简单的并发计算，应用于图像处理、深度学习等领域加快速度，引爆了人工智能</p>
</blockquote>
<ul>
<li><strong>CPU</strong><ul>
<li>可看作”万能教授”，但运算效率较低</li>
<li>中央处理器，计算机的运算和控制核心</li>
<li>需要很强的通用性来处理各种不同的数据类型和逻辑判断</li>
</ul>
</li>
<li><strong>GPU</strong><ul>
<li>可看作”专业学生”，用来实现硬件加速计算，执行重复运算效率高</li>
<li>图像处理器，是显卡的处理器和核心，也是图像运算工作的微处理器</li>
<li>专为执行复杂的数学和几何计算而设计，用于将 CPU 从图形处理的任务中解放出来而去执行其他更多的系统任务，提高计算机的整体性能</li>
</ul>
</li>
</ul>
<h3 id="图形渲染"><a href="#图形渲染" class="headerlink" title="图形渲染"></a>图形渲染</h3>  <div style="text-indent: 2em">渲染是从使用计算机程序模型生成图像的过程。在图形中一个虚拟场景的呈现需要使用 几何、视点、纹理、光照和阴影等通过一个渲染程序传递信息描述，输出一个数字图像。渲染可以在本地或远程上进行。复杂图像所需的硬件资源可以在专用服务器上完成，即基于服务器的绘制。渲染也可以通过在本地CPU完成, 即基于客户端的渲染。所以渲染类型如下：</div>

<ul>
<li><strong>软件渲染</strong>：所有的渲染是在 CPU 的帮助下计算完成。 </li>
<li><strong>硬件渲染</strong>：所有的图形计算都由 GPU (图形处理单元)完成的。</li>
</ul>
<h3 id="图形术语"><a href="#图形术语" class="headerlink" title="图形术语"></a>图形术语</h3><ul>
<li><strong>坐标系</strong>：x、y、z 轴<ul>
<li>无论画布多大，WebGL 上的坐标被限制为 (1, 1, 1)、(-1, -1, -1)。</li>
<li>WebGL 在 GPU 上的主要工作是将顶点数据通过矩阵变换转换到裁剪空间坐标，然后基于空间坐标绘制像素点。</li>
</ul>
</li>
<li><strong>缓冲</strong><ul>
<li>缓冲区对象，即将发送到 GPU 的一些二进制数据序列。</li>
<li>用于存储要绘制模型的各种数据，比如顶点、颜色等。</li>
<li>驻留在 GPU 存储器却可以被直接呈现，提高了性能。</li>
</ul>
</li>
<li><strong>图元</strong>：几何顶点的组合(点、线段和三角面)，一般是三角形。</li>
<li><strong>网格</strong>：使用顶点所绘的 2D、3D 模型，它的每个面被称为 一个片元 (一般是三角形)。</li>
<li><strong>片元和像素</strong><ul>
<li>在光栅化中纹理映射之后图元信息转化为了像素。</li>
<li>片元包括 像素点及其颜色、深度和纹理数据等信息。</li>
</ul>
</li>
<li><strong>着色器</strong><ul>
<li>现代 GPU 中的顶点处理和片段处理等可编程部分被称为着色器。</li>
<li>主要包括顶点着色器和片元着色器，可理解为运行在显卡中的指令和数据。</li>
<li>着色器程序使用的是 GLSL ES 语言，所以在 Js 中需要存放在字符串中等待调用编译，通过编译处理后传递给 顶点&#x2F;片元 着色器执行。</li>
</ul>
</li>
<li><strong>纹理图像</strong><ul>
<li>将一张真实图片贴到一个几何图像表面称为 纹理映射，映射的图像为纹理图像。</li>
<li>组成纹理图像的像素称为纹素，而纹理坐标 是纹理图像上的坐标，通过纹理坐标可以在纹理图像上获取纹素颜色。</li>
</ul>
</li>
<li><strong>绘图</strong><ul>
<li>WebGL 只能绘制 点、线和三角形，其他都是由它们合成后绘制到三维空间。</li>
<li>WebGL 中的顶点、颜色、纹理等几何详细信息存储在缓冲区对象，然后被传递到GPU上的着色器程序来创建图形对象。</li>
</ul>
</li>
</ul>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><blockquote>
<p>程序代码是 Js、OpenGL 的组合，两者分别负责与 CPU、GPU 通信</p>
</blockquote>
<h3 id="显卡内部结构"><a href="#显卡内部结构" class="headerlink" title="显卡内部结构"></a>显卡内部结构</h3><blockquote>
<p>电脑一般都具有独立显卡</p>
</blockquote>
<ul>
<li><strong>GPU</strong>：渲染管线：可编程的着色器、不可编程的光栅器等，用于和 GPU 传递数据。</li>
<li><strong>显存</strong>：GPU 读写数据的存储区，主要组成有：<code>顶点缓存</code>(存储顶点的位置、颜色等数据)、<code>渲染缓存</code>(接收渲染管线生成数据)、<code>纹理缓存</code>(用于实现纹理贴图)、<code>帧缓存</code>(颜色缓存、深度缓存、模板缓存)。</li>
</ul>
<h3 id="图像绘制流程"><a href="#图像绘制流程" class="headerlink" title="图像绘制流程"></a>图像绘制流程</h3><blockquote>
<p>上线网站的 WebGL 相关文件会放在远程的服务器硬盘存储器。网页 http 请求后，CPU 将顶点坐标等数据 和 WebGL 程序代码 传递给 GPU 存储。</p>
</blockquote>
<ol>
<li>浏览器解析硬盘的 WebGL 文件，CPU 分配内存并将数据传递给 GPU 存储数据和程序代码</li>
<li>CPU 执行程序初始化并调用 GPU 存储的程序代码，初始化着色器时把处理好的 着色器程序 和 矩阵等数据 发送给 GPU 处理器</li>
<li>GPU 通过矩阵变换和光栅化等操作将图像信息转化为像素并写入显卡的帧缓存 (包括颜色、透明度等)</li>
<li>显示器扫描读取显存中的像素数据，然后显示到浏览器 canvas</li>
</ol>
<h3 id="GPU-处理流程"><a href="#GPU-处理流程" class="headerlink" title="GPU 处理流程"></a>GPU 处理流程</h3><blockquote>
<p>获取顶点坐标、图元装配、光栅化(生成片元, 即一个个像素点)、存储在缓存区</p>
</blockquote>
<ol>
<li><strong>数据准备</strong>：<code>uv</code>(贴图坐标)、<code>索引</code>(顶点绘制顺序)、<code>矩阵数据</code>(uniform 变量传递给顶点着色器)、<code>顶点坐标</code>(attribute 变量传递给顶点着色器，一般由三维软件导出)。</li>
<li><strong>图元装配</strong><br>* 顶点着色器(Js 定义的程序代码，初始化后会传递给 GPU) 将顶点坐标转换为图元。<br>* 本质：GPU 逐顶点数量执行顶点着色器，通过矩阵变换将 3D 坐标转为 2D 图形。</li>
<li><strong>光栅化</strong><br>* 片元着色器(处理模型的颜色、质地、光照效果、阴影) 将图元转换为像素点。<br>* 本质：GPU 逐片元数量执行片元着色器，为每个片元进行着色。</li>
<li><strong>存储到缓存区</strong>：片元只要通过了检测和融合 (融合单元主要实现透明度效果)，就可以存储到颜色缓存区，最终完成整个渲染。</li>
</ol>
<h2 id="绘图流程"><a href="#绘图流程" class="headerlink" title="绘图流程"></a>绘图流程</h2><ol>
<li><strong>初始化绘图上下文</strong>：<code>canvas.getContext(&quot;webgl&quot;, &#123; // 配置选项 &#125;</code>。</li>
<li><strong>初始化着色器程序</strong>：创建顶点着色器程序、片段着色器程序，然后通过 js 将这两个着色器 link 到一个 program (着色程序) 并提交到 GPU。</li>
<li><strong>建立模型和数据缓存</strong>：创建缓冲区对象并绑定到目标，然后写入顶点数据并连接所分配的变量。创建纹理并加载纹理图像，配置属性并在 webgl 中使用</li>
<li><strong>图像绘制和动画</strong>：简单图形 <code>gl.drawArrays(mode, first, count)</code>、复杂的三维图形：<code>gl.drawElements(mode, count, type, offset)</code>。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">webGLStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化上下文</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line">    <span class="title function_">initGL</span>(canvas);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化着色器</span></span><br><span class="line">    <span class="title function_">initShader</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化缓冲区</span></span><br><span class="line">    <span class="title function_">initBuffers</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化纹理图片</span></span><br><span class="line">    <span class="title function_">initTexture</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定清空画布的颜色，</span></span><br><span class="line">    gl.<span class="title function_">clearColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除颜色缓冲区 (使用定义的颜色来填充相应区域)</span></span><br><span class="line">    gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启隐藏面消除的功能  启用深度测试</span></span><br><span class="line">    gl.<span class="title function_">enable</span>(gl.<span class="property">DEPTH_TEST</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制场景</span></span><br><span class="line">    <span class="title function_">drawScene</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、Three-js-基础使用"><a href="#二、Three-js-基础使用" class="headerlink" title="二、Three.js 基础使用"></a>二、Three.js 基础使用</h1><blockquote>
<p>将创建好的物体添加到场景中，然后通过相机渲染到渲染器，从而呈现到网页。</p>
</blockquote>
<h2 id="对比-WebGL"><a href="#对比-WebGL" class="headerlink" title="对比 WebGL"></a>对比 WebGL</h2><ul>
<li>WebGL：浏览器提供的原生 API，需要数学和图形学的知识，学习和开发的成本较高。</li>
<li>Three.js：可看作是一款 webGL 框架。它将复杂接口简单化，上手比较容易。简化的工作主要有：<code>辅助导出模型数据、自动生成各种矩阵、生成了顶点着色器、辅助生成材质并配置灯光、根据设置的材质生成片元着色器</code>。</li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol>
<li>创建场景：构建一个三维空间。</li>
<li>创建相机：选择一个观察点，并确定观察方向&#x2F;角度等。</li>
<li>创建物体并添加至场景中：在场景中添加供观察的物体。</li>
<li>创建渲染器并渲染场景：将观察到的场景渲染到屏幕上。</li>
</ol>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绘制网格线</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initGrid</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 场景</span></span><br><span class="line">  <span class="keyword">var</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相机</span></span><br><span class="line">  <span class="keyword">var</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">3.75</span>, -<span class="number">3.75</span>, <span class="number">0.1</span>, <span class="number">100</span>);</span><br><span class="line">  camera.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, -<span class="number">25</span>, <span class="number">0</span>);</span><br><span class="line">  camera.<span class="title function_">lookAt</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">  scene.<span class="title function_">add</span>(camera);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染器</span></span><br><span class="line">  <span class="keyword">var</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  renderer.<span class="title function_">setSize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">  renderer.<span class="property">autoClear</span> = <span class="literal">false</span>;</span><br><span class="line">  renderer.<span class="title function_">setClearColor</span>(<span class="number">0x000000</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个几何体</span></span><br><span class="line">  <span class="keyword">var</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Geometry</span>();</span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(-<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 定义竖着的线段</span></span><br><span class="line">      <span class="keyword">var</span> line = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Line</span>(geometry, <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LineBasicMaterial</span>(&#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="number">0xffffff</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">      <span class="comment">// 线段之间的间隔为 0.8，-2 是为了达到田字格的效果</span></span><br><span class="line">      line.<span class="property">position</span>.<span class="property">z</span> = (i * <span class="number">0.8</span>) - <span class="number">2</span>;</span><br><span class="line">      scene.<span class="title function_">add</span>(line);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 定义横着的线段</span></span><br><span class="line">      <span class="keyword">var</span> line = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Line</span>(geometry, <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LineBasicMaterial</span>(&#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="number">0xffffff</span>,</span><br><span class="line">          <span class="attr">opacity</span>: <span class="number">0.2</span></span><br><span class="line">      &#125;));</span><br><span class="line">      line.<span class="property">position</span>.<span class="property">x</span> = (i * <span class="number">0.8</span>) - <span class="number">2</span>;</span><br><span class="line">      line.<span class="property">rotation</span>.<span class="property">y</span> = <span class="number">90</span> * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>;</span><br><span class="line">      scene.<span class="title function_">add</span>(line);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 渲染</span></span><br><span class="line">      renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="场景动画"><a href="#场景动画" class="headerlink" title="场景动画"></a>场景动画</h2><blockquote>
<p>在循环渲染(即重绘，循环绘制新场景) 的过程中不断改变 <code>物体属性(scale、rotation、position、material) 或相机属性(位置、方向、面向坐标)</code>，让场景动起来。</p>
</blockquote>
<ul>
<li><strong>直接实现</strong><ul>
<li>物体移动而摄像机不动：<code>mesh.position.x -= 1</code></li>
<li>摄像机移动而物体不动：<code>camera.position.x = camera.position.x + 1</code></li>
</ul>
</li>
<li><strong>Tween.js</strong><ul>
<li>引入后可以定义某个属性值的过渡而实现复杂动画</li>
<li>它会自动计算出起止的所有中间值，这个过程叫做 tweening 补间</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旋转的正方体</span></span><br><span class="line"><span class="keyword">var</span> scene, camera, renderer, mesh, stats;</span><br><span class="line"><span class="title function_">initThree</span>();</span><br><span class="line"><span class="title function_">animation</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initThree</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建场景对象 (插入光照/物体)</span></span><br><span class="line">  scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建相机对象</span></span><br><span class="line">  <span class="keyword">var</span> aspect = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">  camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>( <span class="number">70</span>, aspect, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 光照设置</span></span><br><span class="line">  <span class="keyword">var</span> light = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DirectionalLight</span>( <span class="number">0xffffff</span> );</span><br><span class="line">  light.<span class="property">position</span>.<span class="title function_">set</span>( <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> ).<span class="title function_">normalize</span>();  <span class="comment">// 光源位置</span></span><br><span class="line">  scene.<span class="title function_">add</span>(light);    <span class="comment">// 将光照插入场景</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建网络模型</span></span><br><span class="line">  <span class="keyword">var</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>( <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);  <span class="comment">// 立方体几何对象</span></span><br><span class="line">  <span class="keyword">var</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhongMaterial</span>(&#123;        <span class="comment">// 材质对象</span></span><br><span class="line">          <span class="attr">color</span>: <span class="number">0x0033ff</span>, </span><br><span class="line">          <span class="attr">specular</span>: <span class="number">0x555555</span>, </span><br><span class="line">          <span class="attr">shininess</span>: <span class="number">30</span> </span><br><span class="line">  &#125;);</span><br><span class="line">  mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material );   <span class="comment">// 网格模型对象</span></span><br><span class="line">  mesh.<span class="property">position</span>.<span class="property">z</span> = -<span class="number">50</span>;</span><br><span class="line">  scene.<span class="title function_">add</span>(mesh);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建渲染器对象</span></span><br><span class="line">  renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span><br><span class="line">  renderer.<span class="title function_">clear</span>()                        </span><br><span class="line">  renderer.<span class="title function_">setClearColor</span>(<span class="number">0xb9d3ff</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>( <span class="string">&#x27;resize&#x27;</span>, onWindowResize, <span class="literal">false</span> );</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">onWindowResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      camera.<span class="property">aspect</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">      camera.<span class="title function_">updateProjectionMatrix</span>();</span><br><span class="line">      renderer.<span class="title function_">setSize</span>( <span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span> );</span><br><span class="line">      <span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行渲染</span></span><br><span class="line">  <span class="title function_">render</span>();         </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单动画：在循环渲染过程中不断改变 物体/相机的属性，从而让场景动起来</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    mesh.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">.04</span>;</span><br><span class="line">    mesh.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">.02</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animation);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mesh.material = new THREE.MeshLambertMaterial(&#123;</span></span><br><span class="line">    <span class="comment">//     color: 0xff0000</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// mesh.position.z = 1;</span></span><br><span class="line">    <span class="comment">// mesh.position.set(1.5, -0.5, 0);</span></span><br><span class="line">    <span class="comment">// mesh.position = new THREE.Vector3(1.5, -0.5, 0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新性能插件     </span></span><br><span class="line">    <span class="comment">// stats.update();  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让物体运动</span></span><br><span class="line">    <span class="comment">// TWEEN.update();   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂动画：Tween 的任何一个函数返回的都是自身，支持链式编程</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initTween</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">TWEEN</span>.<span class="title class_">Tween</span>(mesh.<span class="property">position</span>)    <span class="comment">// 要改变属性的对象</span></span><br><span class="line">            .<span class="title function_">to</span>( &#123; <span class="attr">x</span>: -<span class="number">400</span> &#125;, <span class="number">3000</span> )  <span class="comment">// 目标值和需要时间</span></span><br><span class="line">            .<span class="title function_">repeat</span>( <span class="title class_">Infinity</span> )       <span class="comment">// 重复无穷次</span></span><br><span class="line">            .<span class="title function_">start</span>();                 <span class="comment">// 开始动画</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="性能检测"><a href="#性能检测" class="headerlink" title="性能检测"></a>性能检测</h2><blockquote>
<p>引用插件 stats.js 之后可以在场景中的左上角看到视图小框，点击切换可看到以下信息。</p>
</blockquote>
<ul>
<li>**38 MS (19-74)**：MS 表示渲染一帧需要的毫秒数，其值越小越好。</li>
<li>**34 FPS (30-34)**：FPS 表示每秒渲染的帧数，其值越大越好，括号内表示帧率范围。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动画性能检测： http://www.wjceo.com/lib/js/libs/stats.min.js</span></span><br><span class="line">stats = <span class="keyword">new</span> <span class="title class_">Stats</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为 0 时显示 FPS 界面，参数为 1 时显示 MS 界面</span></span><br><span class="line">stats.<span class="title function_">setMode</span>(<span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// stats 的界面对应左上角</span></span><br><span class="line">stats.<span class="property">domElement</span>.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">stats.<span class="property">domElement</span>.<span class="property">left</span> = <span class="string">&#x27;0px&#x27;</span>;</span><br><span class="line">stats.<span class="property">domElement</span>.<span class="property">top</span> = <span class="string">&#x27;0px&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(stats.<span class="property">dom</span>);</span><br></pre></td></tr></table></figure>


<h2 id="绘图要素"><a href="#绘图要素" class="headerlink" title="绘图要素"></a>绘图要素</h2><blockquote>
<p>绘图页面中必备且唯一的要素：camera、scene、renderer</p>
</blockquote>
<ul>
<li><strong>Scene</strong>：场景（三维空间），是物体、光源等元素的容器 </li>
<li><strong>Camera</strong>：相机（观察者），控制视角位置、范围和焦点位置 </li>
<li><strong>Object3D</strong>：物体（三维模型），包括二维的点线面、三维的粒子等</li>
<li><strong>Light</strong>：光源，包括全局光、平行光、点光源等</li>
<li><strong>Renderer</strong>：渲染器（画布），用于渲染场景及其物体</li>
<li><strong>Control</strong>：控制器（相机控件），可通过键盘、鼠标控制相机</li>
</ul>
<h3 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h3><ul>
<li><strong>正投影相机</strong>：OrthographicCamera，物体的实际尺寸而远近相同。<ul>
<li>参数：视角、窗口的长宽比、近远裁面的距离</li>
<li>OrthographicCamera(left, right, top, bottom, near, far)</li>
</ul>
</li>
<li><strong>透视投影相机</strong>：PerspectiveCamera，类似人眼而近大远小。</li>
<li><strong>3D 相机</strong>：StereoCamera，合成两个相机的拍摄结果，用于 3D 立体影像或视差屏障等效果。</li>
<li><strong>全景相机</strong>：CubeCamera，可以 360 度拍摄。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 属性设置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, -<span class="number">1</span>, <span class="number">5</span>);    <span class="comment">// 设定相机位置 </span></span><br><span class="line">camera.<span class="property">up</span>.<span class="property">x</span> = <span class="number">0</span>;                 <span class="comment">// 相机以哪个方向为上方</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(scene.<span class="property">position</span>);   <span class="comment">// 相机面向哪个坐标(默认面向z轴负方向)</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>));  <span class="comment">// 相机往x轴移动10单位 </span></span><br></pre></td></tr></table></figure>


<h3 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h3><blockquote>
<p>Object3D 是它们的基类。创建时需要 几何体和材质，几何体定义模型的形状 (骨架)，材质定义几何图形的表面效果 (皮肤，包括颜色、纹理、透明度、质感等)。</p>
</blockquote>
<ul>
<li><p>分类</p>
<ul>
<li><strong>Line</strong>：线段模型，由线条组成</li>
<li><strong>Mesh</strong>：网格模型，由三角面和四边形面组成</li>
<li><strong>Points</strong>：粒子系统，使用一堆点的集合来描述</li>
<li><strong>Sprite</strong>：精灵图，指包含于场景中的二维图像或动画，用于加载纹理(不接受阴影)。</li>
</ul>
</li>
<li><p>几何体</p>
<ul>
<li><strong>构造函数创建</strong>：Geometry 是它们的基类<ul>
<li><strong>二维平面</strong><ul>
<li>圆平面：CircleGeometry </li>
<li>矩形平面：PlaneGeometry</li>
</ul>
</li>
<li><strong>三维几何体</strong><ul>
<li>立方体：BoxGeometry、CubeGeometry(旧版本)</li>
<li>球体：SphereGeometry    </li>
<li>圆柱：CylinderGeometry</li>
<li>圆环：TorusGeometry</li>
<li>环面：TorusKnotGeometry</li>
<li>多面体：PolyhedronGeometry</li>
<li>正四面体：TetrahedronGeometry</li>
<li>正八面体：OctahedronGeometry</li>
<li>正二十面体：IcosahedronGeometry</li>
<li>复杂几何体<ul>
<li>凸面体：ConvexGeometry</li>
<li>扫描体：LatheGeometry</li>
<li>管状体：TubeGeometry</li>
<li>拉伸几何体：ExtrudeGeometry</li>
<li>参数几何体：ParameterGeometry</li>
<li>文本几何体：TextGeometry</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>自定义创建</strong><ul>
<li><strong>三维</strong><ul>
<li>几何体：Geometry</li>
<li>顶点：Vector3</li>
<li>顶面：Face3</li>
</ul>
</li>
<li><strong>二维</strong><ul>
<li>平面：Shape</li>
<li>线条<ul>
<li>直线：moveTo、lineTo </li>
<li>圆弧：arc、absarc </li>
<li>椭圆：ellipse、absellipse </li>
<li>贝塞尔曲线：quadraticCurveTo</li>
</ul>
</li>
<li>几何体          <ul>
<li>makeGeometry</li>
<li>createPointsGeometry</li>
<li>createSpacedPointsGeometry</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initShape</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模型对象和材质对象 </span></span><br><span class="line">  <span class="keyword">var</span> geometry, material;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// -------------- 构造函数创建 ---------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 矩形平面：PlanGeometry(长,宽, 长的分割, 宽的分割) </span></span><br><span class="line">  <span class="keyword">let</span> planeGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">  <span class="keyword">let</span> planeMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xffffff</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> plane = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(planeGeometry,planeMaterial)</span><br><span class="line">  plane.<span class="property">receiveShadow</span> = <span class="literal">true</span>        <span class="comment">// 接收阴影</span></span><br><span class="line">  plane.<span class="property">rotation</span>.<span class="property">x</span> = -<span class="number">0.5</span>*<span class="title class_">Math</span>.<span class="property">PI</span>   <span class="comment">// x 轴旋转 -90 度</span></span><br><span class="line">  plane.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  scene.<span class="title function_">add</span>( plane )</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 圆平面：CircleGeometry(半径, 切片数, 开始, 跨过角度)  </span></span><br><span class="line">  <span class="comment">// 切片数越大则越接近圆, 参数为3(最小值)是三角形, 参数为4则是矩形</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">CircleGeometry</span>(<span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xffffff</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> circle = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 圆环：TorusGeometry(半径, 管道半径, 纬度分割, 经度分割, 圆环面的弧度)</span></span><br><span class="line">  <span class="comment">// 最后一个参数 控制是否绘制完整一个圆环</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TorusGeometry</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">50</span>)  </span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0x7777ff</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> torus = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 立方体：BoxGeometry(长, 宽, 高, 长的分割, 宽的分割, 高的分割)</span></span><br><span class="line">  <span class="comment">// 旧版本用CubeGeometry</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xff0000</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> box = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 球体：SphereGeometry(半径, 经度切片, 纬度切片, 经度开始, 经度跨过, 纬度开始, 纬度跨过)</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">4</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0x7777ff</span> &#125; )</span><br><span class="line">  <span class="keyword">let</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line">  sphere.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">1.5</span>,<span class="number">1.5</span>,<span class="number">1.5</span>);  <span class="comment">//缩放</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">  <span class="comment">// 圆柱：CylinderGeometry(顶部面积, 底部面积, 高, 圆分割, 高分割, 是否没有顶面和底面) </span></span><br><span class="line">  <span class="comment">// 顶部或底部为0，则变成圆锥</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">CylinderGeometry</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0x7777ff</span> &#125;)</span><br><span class="line">  <span class="keyword">let</span> cylinder = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 正 20 面体 </span></span><br><span class="line">  meometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">IcosahedronGeometry</span>(<span class="number">4</span>, <span class="number">0</span>);   </span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>( &#123;<span class="attr">color</span>: <span class="number">0x7777ff</span>&#125; )</span><br><span class="line">  <span class="keyword">let</span> icosahedron = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// -------------- 自定义创建 ---------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点模型</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Geometry</span>();    <span class="comment">// 声明一个空几何体对象</span></span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">// 顶点1坐标</span></span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>);   <span class="comment">// 顶点2坐标</span></span><br><span class="line">  <span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">15</span>, <span class="number">15</span>, <span class="number">0</span>);  <span class="comment">// 顶点3坐标</span></span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(p1,p2,p3);       <span class="comment">// 顶点坐标添加到geometry对象</span></span><br><span class="line"></span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(&#123;  <span class="comment">// 点对象像素的颜色尺寸</span></span><br><span class="line">      <span class="attr">color</span>: <span class="number">0x0000ff</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="number">10.0</span>       </span><br><span class="line">  &#125;); </span><br><span class="line">  <span class="keyword">var</span> points = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(geometry, material);</span><br><span class="line">  scene.<span class="title function_">add</span>(points);        <span class="comment">// 点模型添加到场景中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线条</span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Geometry</span>();</span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(p1, p2);           <span class="comment">// vertices 存放坐标</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> color1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xFF0000</span>);  </span><br><span class="line">  <span class="keyword">var</span> color2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0x0000FF</span>);   </span><br><span class="line">  geometry.<span class="property">colors</span>.<span class="title function_">push</span>(color1, color2);      <span class="comment">// colors 存放顶点颜色</span></span><br><span class="line">  </span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">LineBasicMaterial</span>(&#123;</span><br><span class="line">      <span class="comment">// color: 0x0000ff,        // 线条颜色，用16进制表示，默认白色</span></span><br><span class="line">      <span class="attr">vertexColors</span>: <span class="variable constant_">THREE</span>.<span class="property">VertexColors</span>,  <span class="comment">// 线条材质是否使用顶点颜色</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> line = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Line</span>(geometry, material);</span><br><span class="line">  scene.<span class="title function_">add</span>(line);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三角面和矩形 </span></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Geometry</span>(); </span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">80</span>, <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">  <span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">80</span>, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建三角面及其法向量 (平面的法向量垂直于平面本身)</span></span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(p1, p2, p3); </span><br><span class="line">  <span class="keyword">var</span> normal = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>( <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> ); </span><br><span class="line">  <span class="keyword">var</span> face = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>( <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, normal); </span><br><span class="line">  <span class="keyword">var</span> color1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xFF0000</span>);  <span class="comment">// 红色</span></span><br><span class="line">  <span class="keyword">var</span> color2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0x00FF00</span>);  <span class="comment">// 绿色</span></span><br><span class="line">  <span class="keyword">var</span> color3 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0x0000FF</span>);  <span class="comment">// 蓝色</span></span><br><span class="line">  face.<span class="property">vertexColors</span>.<span class="title function_">push</span>(color1, color2, color3);  <span class="comment">// 定义顶点颜色</span></span><br><span class="line">  geometry.<span class="property">faces</span>.<span class="title function_">push</span>(face); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建矩形平面</span></span><br><span class="line">  <span class="keyword">var</span> p4 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">80</span>, <span class="number">0</span>); </span><br><span class="line">  geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(p1, p2, p3, p4); </span><br><span class="line">  <span class="keyword">var</span> normal = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); </span><br><span class="line">  <span class="keyword">var</span> face0 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, normal); </span><br><span class="line">  <span class="keyword">var</span> face1 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, normal); </span><br><span class="line">  geometry.<span class="property">faces</span>.<span class="title function_">push</span>(face0, face1); </span><br><span class="line"></span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="number">0x0000ff</span>,         </span><br><span class="line">      <span class="attr">side</span>: <span class="variable constant_">THREE</span>.<span class="property">DoubleSide</span>   <span class="comment">// 两面可见</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry,material);</span><br><span class="line">  scene.<span class="title function_">add</span>(mesh);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 二维图形：ShapeGeometry(shapes, options)  </span></span><br><span class="line">  <span class="comment">// shapes 参数: THREE.Shape对象可单个传入, 多个时传数组</span></span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> heartShape = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Shape</span>()  <span class="comment">// 心形</span></span><br><span class="line"></span><br><span class="line">  heartShape.<span class="title function_">moveTo</span>( x + <span class="number">5</span>, y + <span class="number">5</span> )</span><br><span class="line">  heartShape.<span class="title function_">bezierCurveTo</span>( x + <span class="number">5</span>, y + <span class="number">5</span>, x + <span class="number">4</span>, y, x, y )</span><br><span class="line">  heartShape.<span class="title function_">bezierCurveTo</span>( x - <span class="number">6</span>, y, x - <span class="number">6</span>, y + <span class="number">7</span>,x - <span class="number">6</span>, y + <span class="number">7</span> )</span><br><span class="line">  heartShape.<span class="title function_">bezierCurveTo</span>( x - <span class="number">6</span>, y + <span class="number">11</span>, x - <span class="number">3</span>, y + <span class="number">15.4</span>, x + <span class="number">5</span>, y + <span class="number">19</span> )</span><br><span class="line">  heartShape.<span class="title function_">bezierCurveTo</span>( x + <span class="number">12</span>, y + <span class="number">15.4</span>, x + <span class="number">16</span>, y + <span class="number">11</span>, x + <span class="number">16</span>, y + <span class="number">7</span> )</span><br><span class="line">  heartShape.<span class="title function_">bezierCurveTo</span>( x + <span class="number">16</span>, y + <span class="number">7</span>, x + <span class="number">16</span>, y, x + <span class="number">10</span>, y )</span><br><span class="line">  heartShape.<span class="title function_">bezierCurveTo</span>( x + <span class="number">7</span>, y, x + <span class="number">5</span>, y + <span class="number">5</span>, x + <span class="number">5</span>, y + <span class="number">5</span> )</span><br><span class="line"></span><br><span class="line">  geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">ShapeGeometry</span>( heartShape )</span><br><span class="line">  material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>( &#123; <span class="attr">color</span>: <span class="number">0x00ff00</span> &#125; )</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, material ) </span><br><span class="line">  scene.<span class="title function_">add</span>( mesh )</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 几何体 </span></span><br><span class="line">  <span class="comment">// 1.创建顶点</span></span><br><span class="line">  <span class="keyword">var</span> vertices = [</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>,-<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.创建面</span></span><br><span class="line">  <span class="keyword">var</span> faces = [</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Face3</span>(<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>),</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.创建几何体架构</span></span><br><span class="line">  <span class="keyword">var</span> geom = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Geometry</span>()</span><br><span class="line">  geom.<span class="property">vertices</span> = vertices</span><br><span class="line">  geom.<span class="property">faces</span> = faces</span><br><span class="line">  geom.<span class="title function_">computeFaceNormals</span>()  <span class="comment">//计算法向量, 这决定了对光做出的反应</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.添加材质</span></span><br><span class="line">  <span class="keyword">var</span> materials = [</span><br><span class="line">      <span class="comment">// 几何体面的材质 (Lambert材质适合光照)</span></span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshLambertMaterial</span>(&#123; </span><br><span class="line">          <span class="attr">opacity</span>: <span class="number">0.8</span>, </span><br><span class="line">          <span class="attr">color</span>:<span class="number">0x44e144</span>, </span><br><span class="line">          <span class="attr">transparent</span>: <span class="literal">true</span> </span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 一个几何体框架的材质</span></span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">          <span class="attr">color</span>:<span class="number">0x008800</span>,</span><br><span class="line">          <span class="attr">wireframe</span>:<span class="literal">true</span></span><br><span class="line">      &#125;),</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5.创建几何体(传入结构, 材质)</span></span><br><span class="line">  mesh = <span class="variable constant_">THREE</span>.<span class="property">SceneUtils</span>.<span class="title function_">createMultiMaterialObject</span>(geom, materials) </span><br><span class="line">  mesh.<span class="property">name</span> = <span class="string">&#x27;源&#x27;</span></span><br><span class="line">  mesh.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      e.<span class="property">castShadow</span> = <span class="literal">true</span>  <span class="comment">//可以生成影子</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6.添加进场景中</span></span><br><span class="line">  scene.<span class="title function_">add</span>(mesh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><blockquote>
<p>三维物体表面各个可视属性（颜色、纹理、光滑度、透明度、反射率、反光度等）的结合，决定了物体的外观效果。THREE.Material 是材质的基类，拥有所有材质的公有属性，它派生出的各种材质如下：</p>
</blockquote>
<ul>
<li><strong>MeshBasicMaterial</strong>：基础材质，用于显示几何体的线框并给几何体赋予一种简单的颜色。特点：材质颜色如果没有指定则随机、物体颜色始终是材质颜色并且不会因光照产生明暗、阴影效果。</li>
<li><strong>MeshLambertMaterial</strong>：朗伯材质，用于创建 暗淡的、不光亮的表面。特点：可以通过 emissive 属性给材质添加亮色、在物体表面均匀地散射灯光，比如纸的表面粗糙但亮度均匀。</li>
<li><strong>MeshPhongMaterial</strong>：Phong 式材质，用于创建金属类光亮的表面。特点：反光强度更大、会给表面添加金属光泽、可通过 shininess 属性改变反光强度。</li>
<li><strong>MeshStandardMaterial</strong>：网格标准材质，用于创建暗淡的、有金属性光泽的表面。特点：MeshLambertMaterial 和 MeshPhoneMaterial 的结合、同时具有粗糙度和金属性的材质并且可以改变这些属性。</li>
<li><strong>MeshDepthMaterial</strong>：深度材质，根据内容所在的深度对网格对象的灰度级别从黑到白绘制。</li>
<li><strong>MeshNormalMaterial</strong>：法向材质，根据面的法线或朝向使用不同的颜色来渲染网格的面。</li>
<li><strong>MeshFaceMaterial</strong>：面材质，一个可以为几何体的各个表面指定不同颜色的容器。</li>
<li><strong>ShaderMaterial</strong>：着色器材质，允许使用自定义的着色器程序，比如顶点的放置方式、像素的着色方式。</li>
<li><strong>LineBasicMaterial</strong>：直线基础材质，用于在 THREE.Line 中创建着色的直线。</li>
<li><strong>LineDashMaterial</strong>：虚线材质，允许创建出一种虚线的效果。</li>
<li><strong>PointsMaterial</strong>：粒子材质，适用于粒子系统、模拟雪花雨等。</li>
<li><strong>SpriteMaterial</strong>：雪碧材质，用于加载图像纹理、canvas 创建的纹理等。</li>
</ul>
<h3 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h3><blockquote>
<p>THREE.Light 是所有光源的基类，其构造函数接受 hex(一个16进制的颜色值)作为参数。但要让光源具有颜色之外的特性。我们需要使用由基类派生出来的其他种类光源，注意环境光、方向光的光强不受距离远近影响。</p>
</blockquote>
<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul>
<li><strong>AmbientLight</strong><ul>
<li>名称：环境光</li>
<li>功能：弱化阴影、添加颜色</li>
<li>光线：来自各个方向并均匀反射到物体表面</li>
<li>特点：影响整个场景、没有特定来源、不会影响生成阴影、不能作为场景唯一光源</li>
</ul>
</li>
<li><strong>DirectionLight</strong><ul>
<li>名称：平行光、方向光</li>
<li>功能：常用于实现阴影效果</li>
<li>光线：一组没有衰减的平行光线，类似太阳光</li>
<li>特点：产生阴影、光强相同、效果只与方向有关</li>
</ul>
</li>
<li><strong>PointLight</strong><ul>
<li>名称：点光源</li>
<li>光线：单点发光但辐射四面八方</li>
<li>特点：类似蜡烛和灯泡、单点发光、不产生阴影</li>
</ul>
</li>
<li><strong>SpotLight</strong><ul>
<li>名称：聚光灯      </li>
<li>功能：实现阴影效果，类似台灯、手电筒</li>
<li>光线：从一个锥体中射出并在物体上产生聚光的效果</li>
<li>特点：距离越远则光强越弱、光强衰减指数越大则光强衰减越快</li>
</ul>
</li>
</ul>
<h4 id="影响材质"><a href="#影响材质" class="headerlink" title="影响材质"></a>影响材质</h4><blockquote>
<p>只有在正常的光照条件下，我们才能容易分辨物体的材质。</p>
</blockquote>
<ul>
<li>没有任何光源时，材质颜色最终是黑色 (离开光时材质无法体现)。</li>
<li>Lambert 材质会受环境光的影响而呈现环境光的颜色，与材质本身颜色关系不大。</li>
<li>只有环境光时，灯光位置不影响材质效果(阴影等)。只有其他光源时，能照射到的地方为 光源颜色，不能照射的地方则呈现暗色(黑色)。</li>
<li>当混合光源存在时，单一光源能照射的地方呈现为 对应的光源颜色，多种光源都能照射到的地方是 颜色相加结果，都不能照射到的则呈现 暗色&#x2F;环境光颜色。<ul>
<li>光源：环境光为 绿色(0x00FF00)，平行光为 红色(0xFF0000)</li>
<li>效果：平行光照射到的地方呈现黄色(颜色值相加：0xFFFF00)，其它呈现绿色</li>
</ul>
</li>
</ul>
<h4 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initShadow</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="comment">// 告诉render我要渲染阴影</span></span><br><span class="line">  renderer.<span class="property">shadowMap</span>.<span class="property">enabled</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 让物体(立方体)投射阴影</span></span><br><span class="line">  <span class="keyword">var</span> geo = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">  <span class="keyword">var</span> mat = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhoneMaterial</span>(&#123;<span class="attr">color</span>:<span class="number">0xffffff</span>&#125;)</span><br><span class="line">  <span class="keyword">var</span> box = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geo,mat)</span><br><span class="line">  box.<span class="property">castShadow</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 让其他物体(平面)接受阴影</span></span><br><span class="line">  <span class="keyword">var</span> geo_2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">100</span>,<span class="number">50</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">  <span class="keyword">var</span> mat_2 = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhoneMaterial</span>(&#123;<span class="attr">color</span>:<span class="number">0xeeeeee</span>, <span class="attr">side</span>:<span class="variable constant_">THREE</span>.<span class="property">DoubleSize</span>&#125;)</span><br><span class="line">  <span class="keyword">var</span> plane = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geo_2, mat_2)</span><br><span class="line">  plane.<span class="property">receiveShadow</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 告诉光源需要投射阴影</span></span><br><span class="line">  <span class="keyword">var</span> light = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">DirectionalLight</span>(<span class="number">0xffffff</span>)</span><br><span class="line">  light.<span class="property">castShadow</span> = <span class="literal">true</span> </span><br><span class="line">  scene.<span class="title function_">add</span>(light)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a>渲染器</h3><ul>
<li><strong>WebGLRender</strong>：使用 WebGL 渲染图形</li>
<li><strong>WebGLRenderTarget</strong>：渲染一个缓冲区</li>
<li><strong>WebGLRenderTargetCube</strong>：用于 CubeCamera</li>
<li><strong>CSS3DRenderer</strong>：基于 CSS3，简化版为 2D</li>
<li><strong>SVGRenderer</strong>：使用 SVG 渲染几何数据</li>
</ul>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><ul>
<li><strong>FlyControls</strong>：飞行控制，用键盘和鼠标控制相机的移动和转动</li>
<li><strong>OrbitControls</strong>：轨道控制器，模拟轨道卫星旋转平移并用键盘、鼠标控制相机位置</li>
<li><strong>PointerLockControls</strong>：指针锁定，鼠标离开画布依然能被捕捉到鼠标交互而常用于游戏</li>
<li><strong>TrackballControls</strong>：轨迹球控制器，通过键盘和鼠标控制前后左右平移和缩放场景</li>
<li><strong>TransformControls</strong>：变换物体控制器，可以通过鼠标对物体的进行拖放等操作</li>
</ul>
<h1 id="三、Three-js-纹理"><a href="#三、Three-js-纹理" class="headerlink" title="三、Three.js 纹理"></a>三、Three.js 纹理</h1><h2 id="纹理贴图"><a href="#纹理贴图" class="headerlink" title="纹理贴图"></a>纹理贴图</h2><blockquote>
<p>WebGL 提供了简单的纹理贴图功能，如果要实现凹凸、法线、环境等高级贴图功能则需要一定的算法。three.js 对常用的贴图算法进行了封装，可以用来实现各种贴图</p>
</blockquote>
<ul>
<li><strong>纹理</strong><ul>
<li>定义：3D模型的皮肤 (图片)</li>
<li>本质：存储在 内存&#x2F;显存，由像素点组成的图像数据</li>
<li>用法：将纹理数据以一定规则映射到几何体(一般是三角形)</li>
</ul>
</li>
<li><strong>纹理贴图</strong><ul>
<li>定义：一个应用在物体表面用来 反射&#x2F;折射 的图</li>
<li>本质：将存储在内存中的 位图(Bitmap) 映射到物体的表面 </li>
<li>功能：减少了在场景中制作几何体和纹理的计算量，提高了模型渲染性能</li>
</ul>
</li>
</ul>
<h2 id="UV-贴图"><a href="#UV-贴图" class="headerlink" title="UV 贴图"></a>UV 贴图</h2>  <div style="text-indent: 2em">随着 3D 模型的面越来越多，为每个面创建贴图不现实，`UV 贴图则是将 2D 纹理贴图映射到 3D 模型表面最灵活的一种方式`。在这个过程中，三维模型曲面网格的顶点坐标系 (x, y, z) 被展平映射到二维的纹理坐标系 (u, v)，将图像上的每一个点精确对应到模型物体的表面。</div>
  <div align="center">
    <img src="/images/js/texture-map.png" alt="Texture Mapping" width="100%">
  </div>
             
<ul>
<li>UV 映射<ul>
<li>本质：纹理映射，将纹理坐标映射到顶点坐标</li>
<li>优势：减少 http 请求，减轻了服务器负担</li>
<li>劣势：增加了图片解析时间，可能影响性能，而且合成后不好修改</li>
</ul>
</li>
<li>贴图处理<ul>
<li>简单模型<ul>
<li>处理：硬纸盒(立方体) 沿折痕剪开后放到 桌面( UV 坐标系)</li>
<li>贴图：可以使用一张贴图映射到所有几何体的一个面或所有表面</li>
<li>映射方式<ul>
<li>球体：一个封闭的球体曲面对应一张图片，比如世界地图和地球仪</li>
<li>圆柱：圆柱面和两个底面 分别对应一张图片</li>
<li>立方体：六个平面分别对应六张图片</li>
</ul>
</li>
</ul>
</li>
<li>复杂模型<ul>
<li>处理：分解成多个三维体，份数越多越高清则工作量和难度就越大。</li>
<li>贴图：将大图分割碎片化之后解析，然后使用 canvas 拼接</li>
<li>优势：极大减少了图片加载时间而提高了用户体验</li>
<li>劣势：增加服务器的负担，严重时可能导致崩溃</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="纹理创建"><a href="#纹理创建" class="headerlink" title="纹理创建"></a>纹理创建</h2><ul>
<li>基类：Texture     </li>
<li>加载器<ul>
<li>新版：TextureLoader.load(url)</li>
<li>旧版：ImageUtils.loadTexture(url)</li>
</ul>
</li>
<li>属性设置<ul>
<li>重复：texture.wrapS&#x2F;wrapT   </li>
<li>缩放：texture.magFilter&#x2F;minFilter   </li>
<li>重复次数：texture.repeat.set(20, 20)</li>
</ul>
</li>
<li>扩展方法    <ul>
<li>直接创建：DataTexture<ul>
<li>深度纹理：DepthTexture</li>
<li>视频纹理：VideoTexture</li>
<li>三维纹理：DataTexture3D</li>
<li>立方体纹理：CubeTexture</li>
</ul>
</li>
<li>基于canvas：CanvasTexture</li>
<li>基于压缩数据：CompressedTexture</li>
</ul>
</li>
</ul>
<h2 id="纹理类型"><a href="#纹理类型" class="headerlink" title="纹理类型"></a>纹理类型</h2><h3 id="图片纹理"><a href="#图片纹理" class="headerlink" title="图片纹理"></a>图片纹理</h3><ul>
<li>功能：直接在物体表面应用图片。</li>
<li>实现方式<ol>
<li>创建一个几何体对象 (用于纹理映射)</li>
<li>创建一个纹理对象 (加载一张图片作为纹理贴图)</li>
<li>将纹理对象赋值给材质对象的 map 属性</li>
<li>将 几何体 和 纹理材质 整合到一个物体上</li>
</ol>
</li>
<li>图片不显示<ul>
<li>图片异步加载问题：使用渲染循环、在纹理回调中重绘。</li>
<li>Chrome 同源限制：降低浏览器的安全级别、将外部文件放到本机服务器作为网络文件访问。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用图片纹理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMesh</span>(<span class="params">shape, imgUrl</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> geometry, material</span><br><span class="line">  <span class="keyword">switch</span>(shape)&#123;</span><br><span class="line">    <span class="comment">// 矩形平面</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;plane&quot;</span>: </span><br><span class="line">      geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">      <span class="comment">// 设置纹理坐标，必须逆时针方向</span></span><br><span class="line">      geometry.<span class="property">vertices</span>[<span class="number">0</span>].<span class="property">uv</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      geometry.<span class="property">vertices</span>[<span class="number">1</span>].<span class="property">uv</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0.5</span>, <span class="number">0</span>);</span><br><span class="line">      geometry.<span class="property">vertices</span>[<span class="number">2</span>].<span class="property">uv</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0.5</span>, <span class="number">0.5</span>);</span><br><span class="line">      geometry.<span class="property">vertices</span>[<span class="number">3</span>].<span class="property">uv</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">      <span class="keyword">var</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>( imgUrl );</span><br><span class="line">      material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 立方体</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;box&quot;</span>: </span><br><span class="line">      geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">300</span>, <span class="number">200</span>, <span class="number">150</span>); </span><br><span class="line">      <span class="keyword">if</span>(imgUrl)&#123;</span><br><span class="line">        <span class="comment">// 六个面相同贴图</span></span><br><span class="line">        <span class="keyword">var</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>( imgUrl );</span><br><span class="line">        material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 六个面不同贴图</span></span><br><span class="line">        material = []</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &gt; <span class="number">7</span>; i++)&#123;  </span><br><span class="line">          <span class="keyword">var</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./imgs/&#x27;</span> + i + <span class="string">&#x27;.jpg&#x27;</span>);</span><br><span class="line">          material.<span class="title function_">push</span>( <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;) );</span><br><span class="line">        &#125; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material);</span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 一幅图片多个精灵, 即把一幅外部图片中包含的所有精灵存入一个精灵材质数组</span></span><br><span class="line"><span class="keyword">var</span> spriteMaterials = [];</span><br><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &gt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> spriteMaterial = material.<span class="title function_">clone</span>();</span><br><span class="line">  <span class="comment">// 每种精灵必须单独加载同一幅外部图片</span></span><br><span class="line">  spriteMaterial.<span class="property">map</span> = loader.<span class="title function_">load</span>(<span class="string">&#x27;./assets/textures/sprite-sheet.png&#x27;</span>);</span><br><span class="line">  <span class="comment">// 水平方向(从左)和垂直方向(从上), 偏移比例, 取值 0~1</span></span><br><span class="line">  spriteMaterial.<span class="property">map</span>.<span class="property">offset</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0.2</span> * (i % <span class="number">5</span>), <span class="number">0</span>); </span><br><span class="line">  <span class="comment">// 从 offset 处开始向右下截取的比例, 取值 0~1</span></span><br><span class="line">  spriteMaterial.<span class="property">map</span>.<span class="property">repeat</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">1</span> / <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">  spriteMaterials.<span class="title function_">push</span>(spriteMaterial);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="凹凸贴图"><a href="#凹凸贴图" class="headerlink" title="凹凸贴图"></a>凹凸贴图</h3><ul>
<li>功能：创建凹凸和皱纹。</li>
<li>实现方式<ol>
<li>使用一张灰度图创建纹理。</li>
<li>将纹理赋给材质的 bumpMap 属性。</li>
<li>调整 bumpScale (深度) 获得凹凸效果。</li>
</ol>
</li>
<li>适用场景<ul>
<li>它只保存了像素和高度而没有坡度的方向性信息，只是在某个方向看着很立体，而且所能达到的厚度和细节程度有限，适用于光线变化不大和物体不转动的场景。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用凹凸纹理贴图创建皱纹</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMesh</span>(<span class="params">geom, img, bump</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./imgs/&#x27;</span>+img);</span><br><span class="line">  <span class="keyword">var</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhongMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(bump)&#123;</span><br><span class="line">    <span class="keyword">var</span> bump = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./imgs/&#x27;</span>+bump);</span><br><span class="line">    material.<span class="property">bumpMap</span> = bump;</span><br><span class="line">    material.<span class="property">bumpScale</span> = <span class="number">0.2</span>;   <span class="comment">// 凹凸的高度，负数表示凹下去的深度。</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geom, material);</span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="法向贴图"><a href="#法向贴图" class="headerlink" title="法向贴图"></a>法向贴图</h3><ul>
<li>功能：创建更加细致的凹凸和皱纹。</li>
<li>优势：只需要使用 很少的顶点和面。</li>
<li>实现方式：创建一张法向图片来保存纹理图片像素点的法向量信息、合并两个图片的信息而形成一个细节丰富的立体纹理图片、通过设置 normalScale 属性指定凹凸的程度。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用法向贴图创建更加细致的凹凸和皱褶</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMesh</span>(<span class="params">geom, img, normal</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./imgs/&#x27;</span>+img);</span><br><span class="line">  <span class="keyword">var</span> normalTexture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&#x27;./imgs/&#x27;</span>+normal);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhongMaterial</span>(&#123;</span><br><span class="line">        <span class="attr">map</span>: texture,</span><br><span class="line">        <span class="attr">normalMap</span>: normalTexture,</span><br><span class="line">        <span class="attr">bumpScale</span>:<span class="number">0.2</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geom, material);</span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="光照贴图"><a href="#光照贴图" class="headerlink" title="光照贴图"></a>光照贴图</h3><ul>
<li>功能：创建假阴影。</li>
<li>本质：使用 图片 模拟真实阴影，只对静态场景有效果。</li>
<li>实现：将阴影图片赋值给材质的 lightMap 属性。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用光照贴图创建阴影效果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMesh</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> groundGeom = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(<span class="number">95</span>, <span class="number">95</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> lm = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&quot;./lightmap.png&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> wood = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(<span class="string">&quot;./floor-wood.jpg&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> groundMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">        <span class="attr">map</span>: wood,</span><br><span class="line">        <span class="attr">lightMap</span>: lm,</span><br><span class="line">        <span class="attr">color</span>: <span class="number">0x777777</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 为光照贴图明确指定 UV 映射</span></span><br><span class="line">  groundGeom.<span class="property">faceVertexUvs</span>[<span class="number">1</span>] = groundGeom.<span class="property">faceVertexUvs</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="光亮贴图"><a href="#光亮贴图" class="headerlink" title="光亮贴图"></a>光亮贴图</h3><ul>
<li>功能：指定材质某部分的高光效果。</li>
<li>实现：将纹理赋给材质的属性 specularMap、设置高光颜色和强度 specular shininess。</li>
</ul>
<h3 id="环境贴图"><a href="#环境贴图" class="headerlink" title="环境贴图"></a>环境贴图</h3><ul>
<li>功能：创建虚假的反光、高光等效果。</li>
<li>本质：使用一张 全景图片 模拟真实的环境。</li>
<li>实现：将图片渲染成无缝的环境盒子并应用到特定对象。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用环境贴图产生反光效果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMesh</span>(<span class="params">geom</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> planetTexture = <span class="variable constant_">THREE</span>.<span class="property">ImageUtils</span>.<span class="title function_">loadTexture</span>(<span class="string">&quot;../planets/Earth.png&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> specularTexture = <span class="variable constant_">THREE</span>.<span class="property">ImageUtils</span>.<span class="title function_">loadTexture</span>(<span class="string">&quot;../EarthSpec.png&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> normalTexture = <span class="variable constant_">THREE</span>.<span class="property">ImageUtils</span>.<span class="title function_">loadTexture</span>(<span class="string">&quot;../EarthNormal.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> planetMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhongMaterial</span>();</span><br><span class="line">  planetMaterial.<span class="property">specularMap</span> = specularTexture;</span><br><span class="line">  planetMaterial.<span class="property">specular</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xff0000</span>);</span><br><span class="line">  planetMaterial.<span class="property">shininess</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  planetMaterial.<span class="property">normalMap</span> = normalTexture;</span><br><span class="line">  <span class="comment">// planetMaterial.map = planetTexture;</span></span><br><span class="line">  <span class="comment">// planetMaterial.shininess = 150;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="variable constant_">THREE</span>.<span class="property">SceneUtils</span>.<span class="title function_">createMultiMaterialObject</span>(geom, [planetMaterial]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-UV-贴图"><a href="#自定义-UV-贴图" class="headerlink" title="自定义 UV 贴图"></a>自定义 UV 贴图</h3><ul>
<li>画布纹理: 使用 canvas 绘制文字、特殊图形等。 </li>
<li>视频纹理: 使用 Video 创建动态纹理。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用画布作为纹理</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>); </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas-output&#x27;</span>).<span class="title function_">appendChild</span>(canvas);</span><br><span class="line">$(<span class="string">&#x27;#canvas-output&#x27;</span>).<span class="title function_">literallycanvas</span>(&#123;</span><br><span class="line">    <span class="attr">imageURLPrefix</span>: <span class="string">&#x27;../libs/literally/img&#x27;</span></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createMesh</span>(<span class="params">geom</span>) &#123;</span><br><span class="line">  <span class="comment">//将画布直接传入材质的构造函数即可</span></span><br><span class="line">  <span class="keyword">var</span> canvasMap = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Texture</span>(canvas);</span><br><span class="line">  <span class="keyword">var</span> mat = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshPhongMaterial</span>();</span><br><span class="line">  mat.<span class="property">map</span> = canvasMap;</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geom, mat);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用视频作为纹理</span></span><br><span class="line"><span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Texture</span>(video);</span><br><span class="line">texture.<span class="property">minFilter</span> = <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>;</span><br><span class="line">texture.<span class="property">magFilter</span> = <span class="variable constant_">THREE</span>.<span class="property">LinearFilter</span>;</span><br><span class="line">texture.<span class="property">format</span> = <span class="variable constant_">THREE</span>.<span class="property">RGBFormat</span>;</span><br><span class="line">texture.<span class="property">generateMipmaps</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;  <span class="comment">// 更新纹理</span></span><br><span class="line">  stats.<span class="title function_">update</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (video.<span class="property">readyState</span> === video.<span class="property">HAVE_ENOUGH_DATA</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (texture) texture.<span class="property">needsUpdate</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (controls.<span class="property">rotate</span>) &#123;</span><br><span class="line">      cube.<span class="property">rotation</span>.<span class="property">x</span> += -<span class="number">0.01</span>;</span><br><span class="line">      cube.<span class="property">rotation</span>.<span class="property">y</span> += -<span class="number">0.01</span>;</span><br><span class="line">      cube.<span class="property">rotation</span>.<span class="property">z</span> += -<span class="number">0.01</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">  webGLRenderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Sprite 创建文字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSpriteText</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先用画布将文字画出</span></span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#ffff00&quot;</span>;</span><br><span class="line">  ctx.<span class="property">font</span> = <span class="string">&quot;Bold 100px Arial&quot;</span>;</span><br><span class="line">  ctx.<span class="property">lineWidth</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把整个 canvas 作为纹理，字尽量大一些来撑满画布，但不要溢出</span></span><br><span class="line">  ctx.<span class="title function_">fillText</span>(<span class="string">&quot;ABCDRE&quot;</span>,<span class="number">4</span>,<span class="number">104</span>);</span><br><span class="line">  <span class="keyword">let</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Texture</span>(canvas);</span><br><span class="line">  texture.<span class="property">needsUpdate</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//使用 Sprite 显示文字</span></span><br><span class="line">  <span class="keyword">let</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SpriteMaterial</span>(&#123;<span class="attr">map</span>:texture&#125;);</span><br><span class="line">  <span class="keyword">let</span> textObj = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Sprite</span>(material);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 精灵很小，要放大</span></span><br><span class="line">  textObj.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">0.5</span> * <span class="number">100</span>, <span class="number">0.25</span> * <span class="number">100</span>, <span class="number">0.75</span> * <span class="number">100</span>);</span><br><span class="line">  textObj.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">98</span>);</span><br><span class="line">  <span class="keyword">return</span> textObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Sprite 创建一个圆</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSpriteShape</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、创建画布，不设置宽高则使用默认的，可能导致图像变形</span></span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  canvas.<span class="property">width</span> = <span class="number">120</span>;</span><br><span class="line">  canvas.<span class="property">height</span> = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、创建图形 </span></span><br><span class="line">  <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#ff0000&quot;</span>;</span><br><span class="line">  ctx.<span class="title function_">arc</span>(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">  ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、将 canvas 作为纹理，创建 Sprite</span></span><br><span class="line">  <span class="keyword">let</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Texture</span>(canvas);</span><br><span class="line">  texture.<span class="property">needsUpdate</span> = <span class="literal">true</span>;  <span class="comment">// 注意这句不能少</span></span><br><span class="line">  <span class="keyword">let</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SpriteMaterial</span>(&#123;<span class="attr">map</span>:texture&#125;);</span><br><span class="line">  <span class="keyword">let</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Sprite</span>(material);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、放大图片，精灵默认很小</span></span><br><span class="line">  mesh.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Web 图片、视频、图表</title>
    <url>/2019/03/02/2-4-web%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<h1 id="一、Web-图片"><a href="#一、Web-图片" class="headerlink" title="一、Web 图片"></a>一、Web 图片</h1><h2 id="图片获取"><a href="#图片获取" class="headerlink" title="图片获取"></a>图片获取</h2><blockquote>
<p>本地图片信息获取的两种方式：H5 input 选择图片、native jsBridge 扫描或导入扫描身份证、银行卡等。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> H5 图片预览上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> changeImg        图片选中：获取 file 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> fileReader       图片读取：file 转 base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> compress         图片压缩：缩放比例、图片质量等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> dataURLtoFile    格式转换：base64 转 file</span></span><br><span class="line"><span class="comment"> * &lt;input type=&quot;file&quot; accept=&quot;image/*&quot; capture=&quot;camera&quot; <span class="doctag">@change</span>=&quot;changeImg&quot; /&gt;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">changeImg</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!file) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 图片预览</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">base64Img</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fileReader</span>(file);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">uploadFile</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 截取 data:image/png;base64 后面的纯字符串、file 对象</span></span><br><span class="line">    <span class="keyword">let</span> baseImg = <span class="variable language_">this</span>.<span class="property">base64Img</span>.<span class="title function_">substring</span>(<span class="variable language_">this</span>.<span class="property">base64Img</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;,&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> file = <span class="variable language_">this</span>.<span class="title function_">dataURLtoFile</span>(baseImg)</span><br><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;image&quot;</span>, file);</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/unload&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: formData,</span><br><span class="line">        <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;multipart/form-data&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&quot;json&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">fileReader</span>(<span class="params">file, maxSize</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line">        (reader.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">compress</span>(<span class="params">baseUrl, file, maxSize = <span class="number">1</span>, scale = <span class="number">1</span>, quality = <span class="number">0.9</span></span>) &#123;</span><br><span class="line">    <span class="comment">// file.size 获取字节数：1MB = 1024KB，1KB = 1024字节</span></span><br><span class="line">    <span class="keyword">if</span> (file.<span class="property">size</span> &lt; maxSize * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> baseUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    img.<span class="property">src</span> = baseUrl;</span><br><span class="line">    img.<span class="title function_">setAttribute</span>(<span class="string">&quot;crossOrigin&quot;</span>, <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">// url 为外域时需要</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> </span><br><span class="line">        (img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>),</span><br><span class="line">            ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),</span><br><span class="line">            w = img.<span class="property">width</span> * scale,</span><br><span class="line">            h = img.<span class="property">height</span> * scale;</span><br><span class="line">          canvas.<span class="property">width</span> = w;</span><br><span class="line">          canvas.<span class="property">height</span> = h;</span><br><span class="line">          ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">          <span class="keyword">let</span> baseImg = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>, quality)</span><br><span class="line">          <span class="title function_">resolve</span>(baseImg);</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">dataURLtoFile</span>(<span class="params">dataurl, filename</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = dataurl.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>), mime = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">        bstr = <span class="title function_">atob</span>(arr[<span class="number">1</span>]), n = bstr.<span class="property">length</span>, u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        u8arr[n] = bstr.<span class="title function_">charCodeAt</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], filename, &#123;<span class="attr">type</span>: mime&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> Native 扫描方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> idCardScan     呼叫身份证扫描</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> getBank        导入银行卡</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">idCardScan</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="title function_">clearTimer</span>()</span><br><span class="line">    <span class="keyword">const</span> idcard = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            options = options ? <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(options) : <span class="literal">undefined</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">HQAppJSInterface</span>.<span class="title function_">requestScanCertificateCard</span>(options)</span><br><span class="line">            <span class="variable language_">window</span>.**tid = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">status</span>) &#123;</span><br><span class="line">                    <span class="title function_">clearTimer</span>()</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="title class_">SetCustomerRules</span>(<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">value</span>))</span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">                    <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">idCard</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// reject(&#x27;fail&#x27;)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">30</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">checkload</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">idcard</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">getBank</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">clearTimer</span>()</span><br><span class="line">  <span class="keyword">let</span> bank = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">HQAppJSInterface</span>.<span class="title function_">requestScanBankCard</span>()</span><br><span class="line">          <span class="variable language_">window</span>.**tid = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">status</span>) &#123;</span><br><span class="line">                  <span class="title function_">clearTimer</span>()</span><br><span class="line">                  <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">value</span>)</span><br><span class="line">                  <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">status</span> = <span class="literal">false</span></span><br><span class="line">                  <span class="variable language_">window</span>.<span class="property">jsBridge</span>.<span class="property">status</span>.<span class="property">bank</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="title function_">reject</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;, <span class="number">30</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">checkload</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">bank</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中触发方法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">idCardScan</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;scan&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">idCardScan</span>(&#123; <span class="attr">skipOCR</span>: <span class="string">&#x27;Y&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>


<h2 id="OCR-识别"><a href="#OCR-识别" class="headerlink" title="OCR 识别"></a>OCR 识别</h2><blockquote>
<p>指将图片上的文字位置和内容智能识别为文字信息并返回，目前支持的场景有：<code>身份证识别、银行卡识别、名片识别、营业执照识别、行驶证驾驶证识别、车牌号识别、通用印刷体识别、手写体识别</code>。</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// infoScan.vue：扫描识别组件，前端将图片信息传给后台对接 ocr 识别平台返回结果即可。</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Icon</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">scan</span> @<span class="attr">click</span>=<span class="string">&quot;nativeScan&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;h5&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;h5Scan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HqScan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">h5</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    nativeScan () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">h5</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">getBank</span>()</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">report</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(res))</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取并压缩，然后上传并识别图片</span></span></span><br><span class="line"><span class="language-javascript">    h5Scan ($event) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> file = $event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> file = e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">fileReader</span>(file)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">image</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="title function_">compress</span>(file, img)))</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">img</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="variable language_">this</span>.<span class="title function_">recognition</span>(img), <span class="variable language_">this</span>.<span class="title function_">upload</span>(img)]))</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">merge</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="property">report</span>, toast)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    upload (file) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="variable constant_">API</span>.<span class="property">UPLOAD</span>, &#123; file &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; url: [url] &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(url)</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="variable language_">this</span>.<span class="property">reject</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    recognition (image) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// OCR 识别：将图片信息发给后端即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">post</span>(<span class="variable constant_">API</span>.<span class="property">OCR</span>.<span class="property">BANK</span>, &#123; image &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> code = data[<span class="string">&#x27;rsp_code&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (code === <span class="string">&#x27;0000&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(data)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code === <span class="string">&#x27;1111&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(data[<span class="string">&#x27;error_msg&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;银行卡识别失败&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    merge ([info, cardImgUrl]) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">toast</span>(<span class="string">&#x27;扫描成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123; ...info, cardImgUrl &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    reject (data) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(data)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    report (data) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;scan&#x27;</span>, data)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        -webkit-appearance: button;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><blockquote>
<p>主要有两大步骤：<code>1、人脸检测：找出人脸位置，用于美颜、换肤、抠图、换脸。2、人脸识别：识别用户，用于会员、支付</code>。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 身份证等资料上传接口：获取 uniqueUserId</span></span><br><span class="line">    <span class="title function_">fileUpload</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;/insure/ocrIdentityVerify&quot;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: params,</span><br><span class="line">            <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span> &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">faceRecognition</span>(res.<span class="property">data</span>.<span class="property">uniqueUserId</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 人脸识别接口：获取人脸识别的跳转地址，并拼接上当前地址用于识别成功后返回原页面</span></span><br><span class="line">    <span class="title function_">faceRecognition</span>(<span class="params">uniqueUserId</span>)&#123;</span><br><span class="line">        <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;/insure/biometricsSigForInsure&quot;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123; uniqueUserId &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span> &amp;&amp; res.<span class="property">success</span>) &#123;</span><br><span class="line">                <span class="comment">// 存储 uniqueTbUserId</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">saveUniqueUserId</span>(uniqueUserId);</span><br><span class="line">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = res.<span class="property">data</span> + </span><br><span class="line">                <span class="built_in">encodeURIComponent</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 查询人脸识别的结果，未通过人脸识别或者出错跳转订单详情</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> ticket 人脸识别返回</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> uniqueUserId   OCR识别返回</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">faceRecognitionResult</span>(<span class="params">ticket, uniqueUserId</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> resData = <span class="keyword">await</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;/insure/biometricsResultForInsure&quot;</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">ticket</span>: ticket,</span><br><span class="line">                <span class="attr">uniqueUserId</span>: uniqueUserId</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ticket &#125; = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">UniqueUserParms</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;UniqueUserParms&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">UniqueUserParms</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">UniqueUserParms</span>) || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(ticket &amp;&amp; <span class="title class_">UniqueUserParms</span>.<span class="property">uniqueTbUserId</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">faceRecognitionResult</span>(ticket, <span class="title class_">UniqueUserParms</span>.<span class="property">uniqueTbUserId</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="二、Video-视频"><a href="#二、Video-视频" class="headerlink" title="二、Video 视频"></a>二、Video 视频</h1><blockquote>
<p>自定义封装视频控件的样式和功能。</p>
</blockquote>
<h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;playControl&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &#x27;play-control&#x27;:true, </span></span></span><br><span class="line"><span class="string"><span class="tag">      playing:paused, </span></span></span><br><span class="line"><span class="string"><span class="tag">      paused: !paused&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;current&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current-time&quot;</span>&gt;</span>&#123;&#123;currentTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleJumpProgress&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">ref</span>=<span class="string">&quot;slider&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width: progress*100 + &#x27;%&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;duration-time&quot;</span>&gt;</span>&#123;&#123;totalTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Draggable</span> <span class="keyword">from</span> <span class="string">&quot;./draggable&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;video-controls&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;video&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">paused</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">currentTime</span>: <span class="string">&quot;00:00&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">totalTime</span>: <span class="string">&quot;00:00&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">progress</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    handleJumpProgress,</span></span><br><span class="line"><span class="language-javascript">    handleDragProgress,</span></span><br><span class="line"><span class="language-javascript">    handleDurationChange,</span></span><br><span class="line"><span class="language-javascript">    handleTimeUpdate,</span></span><br><span class="line"><span class="language-javascript">    handleClickPlayControl</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">draggable</span> = <span class="title class_">Draggable</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">progress</span>, <span class="variable language_">this</span>.<span class="property">handleDragProgress</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;durationchange&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleDurationChange</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;timeupdate&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleTimeUpdate</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;play&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">paused</span> = <span class="literal">false</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;pause&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> (<span class="variable language_">this</span>.<span class="property">paused</span> = <span class="literal">true</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">playControl</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleClickPlayControl</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">draggable</span>.<span class="title function_">destroy</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleClickPlayControl</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">paused</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">pause</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleTimeUpdate</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">currentTime</span> = <span class="title function_">formatTime</span>(e.<span class="property">target</span>.<span class="property">currentTime</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">progress</span> = e.<span class="property">target</span>.<span class="property">currentTime</span> / e.<span class="property">target</span>.<span class="property">duration</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">paused</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleDurationChange</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">totalTime</span> = <span class="title function_">formatTime</span>(e.<span class="property">target</span>.<span class="property">duration</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleDragProgress</span>(<span class="params">delt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; progress, slider &#125; = <span class="variable language_">this</span>.<span class="property">$refs</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> w = slider.<span class="property">offsetWidth</span> + delt;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (w &gt; progress.<span class="property">offsetWidth</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    w = progress.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (w &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    w = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">progress</span> = w / progress.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">currentTime</span> = <span class="variable language_">this</span>.<span class="property">progress</span> * <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">duration</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleJumpProgress</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> target = e.<span class="property">currentTarget</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> rect = target.<span class="title function_">getBoundingClientRect</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> clickX = e.<span class="property">clientX</span> - rect.<span class="property">left</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">progress</span> = clickX / rect.<span class="property">width</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">currentTime</span> = <span class="variable language_">this</span>.<span class="property">progress</span> * <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">duration</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">formatTime</span>(<span class="params">seconds</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> m = <span class="title class_">Math</span>.<span class="title function_">floor</span>(seconds / <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> s = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(seconds % <span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title function_">formatNumber</span>(m) + <span class="string">&quot;:&quot;</span> + <span class="title function_">formatNumber</span>(s);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">formatNumber</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> num &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + num : num;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-controls</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.play-control</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-top</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.playing</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-top</span>: <span class="number">8px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-left</span>: <span class="number">12px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-bottom</span>: <span class="number">8px</span> solid transparent;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.paused</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.progress</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#818a95</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">i</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: -<span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.current-time</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.duration-time</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// draggable.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Draggable</span>(<span class="params">el, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> isTouchStart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  el.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, handleDown);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, handleMove);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, handleUp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleDown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    isTouchStart = <span class="literal">true</span>;</span><br><span class="line">    startX = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageX</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isTouchStart) &#123;</span><br><span class="line">      <span class="keyword">let</span> deltX = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageX</span> - startX;</span><br><span class="line">      startX = e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageX</span>;</span><br><span class="line">      <span class="title function_">callback</span>(deltX);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    isTouchStart = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    el.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchstart&quot;</span>, handleDown);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, handleMove);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;touchup&#x27;</span>, handleUp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; destroy &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">&quot;video&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">autoplay</span></span></span><br><span class="line"><span class="tag">      <span class="attr">preload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">disablePictureInPicture</span></span></span><br><span class="line"><span class="tag">      <span class="attr">controlslist</span>=<span class="string">&quot;nodownload nofullscreen&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">playsinline</span></span></span><br><span class="line"><span class="tag">      <span class="attr">webkit-playsinline</span></span></span><br><span class="line"><span class="tag">      <span class="attr">x5-video-player-type</span>=<span class="string">&quot;h5&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">play</span>=<span class="string">&quot;isPaused = false&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">pause</span>=<span class="string">&quot;isPaused = true&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">contextmenu</span>=<span class="string">&quot;handleContext&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">fullscreenchange</span>=<span class="string">&quot;handleFullScreenChange&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;images/icon-play.png&quot;</span> </span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;playVideo&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;&#123;&#x27;shown&#x27;: isPaused&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video-control</span> <span class="attr">v-if</span>=<span class="string">&quot;video&quot;</span> <span class="attr">:video</span>=<span class="string">&quot;video&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">VideoControl</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Controls.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;video-player&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">VideoControl</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">video</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isPaused</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">curIndex</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">videoList</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">playVideo</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> video = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">video</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (video.<span class="property">paused</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        video.<span class="title function_">pause</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handleContext</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    onTap,</span></span><br><span class="line"><span class="language-javascript">    handleFullScreenChange,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">getVideoUrl</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">onTap</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">video</span>, <span class="variable language_">this</span>.<span class="property">playVideo</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">video</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">curIndex</span> &lt; <span class="variable language_">this</span>.<span class="property">videoList</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">curIndex</span>++;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">video</span>.<span class="property">src</span> = res.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">video</span>.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">onTap</span>(<span class="params">el, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> touchStarted = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">  el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    touchStarted = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      touchStarted = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    touchStarted = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (touchStarted) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">callback</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.video-player</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">video</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#243c70</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">object-fit</span>: fill;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-class">.shown</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="三、Agora-声网"><a href="#三、Agora-声网" class="headerlink" title="三、Agora 声网"></a>三、Agora 声网</h1><blockquote>
<p>一个专注移动端的高清实时通话云服务解决方案，运用场景有：<code>语音通话（一对一、多对多）、视频通话（一对一、多对多）、互动直播（语音、视频）、互动游戏（游戏内置实时语音、视频通话）、录制（服务端录制）、信令（呼叫、消息传递、状态同步等）</code>。</p>
</blockquote>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><blockquote>
<p>WebRTC 是一个开源项目，旨在使得浏览器能为实时通信 RTC 提供简单的 JS 接口，即让浏览器提供 JS 的即时通信接口。为了简洁快速的进行开发，我们需要基于 WebRTC 进行优化集中的 anyRTC，anyRTC 是为开发者提供实时音视频 API，只需集成 anyRTC SDK 即可调用不同 API 在应用内构建多种实时互动场景。</p>
</blockquote>
<ul>
<li><strong>引用 anyRTC</strong><ul>
<li>npm 导入：<code>npm i ar-rtm-sdk -S、import ArRTM from &quot;ar-rtm-sdk&quot;</code></li>
<li>script 导入：<code>&lt;script src=&quot;https://ardw.anyrtc.io/sdk/web/ArRTM@latest.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
<li><strong>RTM 实时消息 api</strong><ul>
<li>创建 RTM 实时消息引擎：createInstance</li>
<li>登录：login</li>
<li>退出登录： logout</li>
<li>事件监听：on</li>
<li>主叫：createLocallnuvitation</li>
<li>发送呼叫邀请：send</li>
<li>取消呼叫邀请：cancel</li>
<li>接受呼叫邀请：accept</li>
<li>拒绝呼叫邀请：refuse</li>
</ul>
</li>
<li><strong>RTC 实时音视频 api</strong><ul>
<li>创建 RTC 音视频引擎：createClient</li>
<li>创建本地音频视频：createMicrophoneAndCameraTracks</li>
<li>加入频道：join</li>
<li>离开频道：leave</li>
<li>开启本地视频发送：publish</li>
<li>关闭本地视频发送：unpublish</li>
<li>订阅拉流：subscribe</li>
<li>取消订阅：unsubscribe</li>
<li>静音&#x2F;取消静音：setEnabled</li>
</ul>
</li>
</ul>
<h2 id="RTM-相关"><a href="#RTM-相关" class="headerlink" title="RTM 相关"></a>RTM 相关</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rtmClient = <span class="title class_">ArRTM</span>.<span class="title function_">createInstance</span>(<span class="title class_">App</span> <span class="variable constant_">ID</span> );</span><br><span class="line">rtmClient.<span class="title function_">login</span>(&#123;<span class="attr">uid</span>: 用户id&#125;)； <span class="comment">// 用户 id 唯一，登录成功后才可以使用 RTM</span></span><br><span class="line"><span class="comment">// rtmClient.logout();          //  退出登录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================= 被邀请用户(接受者) ========================</span></span><br><span class="line"><span class="comment">// 收到主叫邀请用户</span></span><br><span class="line">rtmClient.<span class="title function_">on</span>(<span class="string">&quot;RemoteInvitationReceived&quot;</span>, <span class="keyword">function</span> (<span class="params">remoteInvitation</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回给被叫：接受呼叫邀请成功。</span></span><br><span class="line">  remoteInvitation.<span class="title function_">on</span>(<span class="string">&quot;RemoteInvitationAccepted&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取传过来的频道房间</span></span><br><span class="line">      <span class="keyword">var</span> invitationResponse = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response);</span><br><span class="line">      <span class="comment">// 加入实时通讯频道</span></span><br><span class="line">      <span class="keyword">await</span> rtcClient.<span class="title function_">join</span>(<span class="title class_">App</span> <span class="variable constant_">ID</span>, invitationContent.<span class="property">ChanId</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">      <span class="comment">// 采集并发布媒体流</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回给被叫：拒绝呼叫邀请成功。</span></span><br><span class="line">  remoteInvitation.<span class="title function_">on</span>(<span class="string">&quot;RemoteInvitationRefused&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br><span class="line">  <span class="comment">// 返回给被叫：主叫已取消呼叫邀请。</span></span><br><span class="line">  remoteInvitation.<span class="title function_">on</span>(<span class="string">&quot;RemoteInvitationCanceled&quot;</span>, <span class="keyword">function</span> (<span class="params">content</span>) &#123;&#125;);</span><br><span class="line">  <span class="comment">// 返回给被叫：呼叫邀请进程失败。</span></span><br><span class="line">  remoteInvitation.<span class="title function_">on</span>(<span class="string">&quot;RemoteInvitationFailure&quot;</span>, <span class="keyword">function</span> (<span class="params">reason</span>) &#123;&#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 接受邀请</span></span><br><span class="line">  remoteInvitation.<span class="title function_">accept</span>();   <span class="comment">//拒绝邀请</span></span><br><span class="line">  <span class="comment">// remoteInvitation.refuse();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================= 主叫邀请(发起者) ==========================</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 查询被邀请用户的状态 被邀请用户id calleeId 唯一</span></span><br><span class="line"><span class="keyword">var</span> userOnlineResults = <span class="keyword">await</span> rtmClient.<span class="title function_">queryPeersOnlineStatus</span>([calleeId]);</span><br><span class="line"><span class="keyword">if</span> (!userOnlineResults[calleeId] || !userOnlineResults[calleeId]) &#123;</span><br><span class="line">  <span class="comment">// 不允许呼叫，因为对方不在线</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建呼叫邀请</span></span><br><span class="line"><span class="keyword">var</span> localInvitation = rtmClient.<span class="title function_">createLocalInvitation</span>(calleeId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将呼叫邀请的内容 设置为视频通讯时使用的频道id - 进入同一个频道</span></span><br><span class="line">localInvitation.<span class="property">content</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="title class_">ChanId</span>: <span class="string">&quot;4562&quot;</span> , <span class="comment">//符合命名规则即可</span></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送呼叫邀请</span></span><br><span class="line">localInvitation.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给主叫：被叫已收到呼叫邀请。</span></span><br><span class="line">localInvitation.<span class="title function_">on</span>(<span class="string">&quot;LocalInvitationReceivedByPeer&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 对方收到邀请，说明对方已经上线，这个时候应该监听对方的在线状态</span></span><br><span class="line">    <span class="comment">// 如果对方离线 主动取消邀请（防止对方刷新或掉线时无法通知服务端）</span></span><br><span class="line">    rtmClient.<span class="title function_">subscribePeersOnlineStatus</span>([localInvitation.<span class="property">calleeId</span>]);</span><br><span class="line">    rtmClient.<span class="title function_">on</span>(<span class="string">&quot;PeersOnlineStatusChanged&quot;</span>, <span class="function">(<span class="params">userOnlineStatus</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (userOnlineStatus[localInvitation.<span class="property">calleeId</span>] === <span class="string">&quot;OFFLINE&quot;</span> &amp;&amp; </span><br><span class="line">        <span class="title class_">Store</span>.<span class="property">iscalling</span>) &#123;</span><br><span class="line">            localInvitation.<span class="title function_">cancel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 返回给主叫：被叫已接受呼叫邀请。</span></span><br><span class="line">localInvitation.<span class="title function_">on</span>(<span class="string">&quot;LocalInvitationAccepted&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取传过来的频道房间</span></span><br><span class="line">    <span class="keyword">var</span> invitationResponse = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(response);	 <span class="comment">// 加入实时通讯频道</span></span><br><span class="line">    <span class="keyword">await</span> rtcClient.<span class="title function_">join</span>(<span class="title class_">App</span> <span class="variable constant_">ID</span>, invitationContent.<span class="property">ChanId</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 采集并发布媒体流</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 远端用户拒绝了你的呼叫邀请</span></span><br><span class="line">localInvitation.<span class="title function_">on</span>(<span class="string">&quot;LocalInvitationRefused&quot;</span>, <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125;);</span><br><span class="line"><span class="comment">// 返回给主叫：呼叫邀请已被成功取消。</span></span><br><span class="line">localInvitation.<span class="title function_">on</span>(<span class="string">&quot;LocalInvitationCanceled&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;);</span><br><span class="line"><span class="comment">// 返回给主叫：呼叫邀请进程失败。</span></span><br><span class="line">localInvitation.<span class="title function_">on</span>(<span class="string">&quot;LocalInvitationFailure&quot;</span>, <span class="keyword">function</span> (<span class="params">reason</span>) &#123;&#125;);</span><br><span class="line">.......</span><br><span class="line"><span class="comment">// 发起者取消呼叫</span></span><br><span class="line"><span class="comment">// localInvitation.cancel();</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure>

<h2 id="RTC-相关"><a href="#RTC-相关" class="headerlink" title="RTC 相关"></a>RTC 相关</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 rtc 实例</span></span><br><span class="line"><span class="keyword">var</span> rtcClient = <span class="title class_">ArRTC</span>.<span class="title function_">createClient</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;vp8&quot;</span>,      <span class="comment">// 编码格式</span></span><br><span class="line">    <span class="attr">codec</span>: rtc        <span class="comment">// 使用场景</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 采集视频、音频 并进行预览、发布</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">// 采集视频、音频设备</span></span><br><span class="line"><span class="keyword">var</span> [cameras, microhones] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="title class_">ArRTC</span>.<span class="title function_">getCameras</span>(),</span><br><span class="line">      <span class="title class_">ArRTC</span>.<span class="title function_">getMicrophones</span>(),</span><br><span class="line">    ]);</span><br><span class="line"><span class="keyword">if</span> (cameras.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; microhones.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;上麦失败！确实麦克风和摄像头&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cameras.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; microhones.<span class="property">length</span> &gt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="comment">// 创建音频、视频轨道</span></span><br><span class="line">    [audioTrack, videoTrack] = <span class="keyword">await</span> <span class="title class_">ArRTC</span>.<span class="title function_">createMicrophoneAndCameraTracks</span>(<span class="literal">null</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">encoderConfig</span>: &#123; </span><br><span class="line">            <span class="attr">bitrateMax</span>: <span class="number">1130</span>, </span><br><span class="line">            <span class="attr">frameRate</span>: <span class="number">15</span>, </span><br><span class="line">            <span class="attr">height</span>: <span class="number">180</span>, </span><br><span class="line">            <span class="attr">width</span>: <span class="number">320</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!videoTrack &amp;&amp; !audioTrack) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;没有设备无法发布媒体流&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 预览本地图像 documentId 存放容器的id（html中的属性id)</span></span><br><span class="line">videoTrack &amp;&amp; videoTrack.<span class="title function_">play</span>(documentId);</span><br><span class="line"><span class="comment">// 把用户设置为主播角色</span></span><br><span class="line">rtcClient.<span class="title function_">setClientRole</span>(<span class="string">&quot;host&quot;</span>);</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">rtcClient.<span class="title function_">publish</span>([videoTrack, audioTrack])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听相关回调</span></span><br><span class="line"><span class="comment">// 通知远端用户发布了新的音频或者视频</span></span><br><span class="line">rtcClient.<span class="title function_">on</span>(<span class="string">&quot;user-published&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">user, mediaType</span>) &#123;</span><br><span class="line">    <span class="comment">// 订阅发布的音频或者视频</span></span><br><span class="line">    <span class="keyword">await</span> rtcClient.<span class="title function_">subscribe</span>(user, mediaType);	</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 通知远端用户取消发布了音频或视频</span></span><br><span class="line">rtcClient.<span class="title function_">on</span>(<span class="string">&quot;user-unpublished&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">user, mediaType</span>) &#123;&#125;);</span><br><span class="line"><span class="comment">// 远端用户加入频道</span></span><br><span class="line">rtcClient.<span class="title function_">on</span>(<span class="string">&quot;user-joined&quot;</span>, <span class="keyword">function</span> (<span class="params">user</span>) &#123;&#125;);</span><br><span class="line"><span class="comment">// 远端用户离线</span></span><br><span class="line">rtcClient.<span class="title function_">on</span>(<span class="string">&quot;user-left&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 释放资源				</span></span><br><span class="line">  videoTrack &amp;&amp; (videoTrack.<span class="title function_">close</span>(), videoTrack = <span class="literal">null</span>);</span><br><span class="line">  audioTrack &amp;&amp; (audioTrack.<span class="title function_">close</span>(), audioTrack = <span class="literal">null</span>);</span><br><span class="line">  rtcClient.<span class="title function_">leave</span>();  <span class="comment">// 离开</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SDK 与服务器的连接状态发生改变回调</span></span><br><span class="line">rtcClient.<span class="title function_">on</span>(<span class="string">&quot;connection-state-change&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ConnectionState</span>) &#123;&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 视频开关</span></span><br><span class="line">videoTrack.<span class="property">isMuted</span> = !videoTrack.<span class="property">isMuted</span>;</span><br><span class="line">videoTrack.<span class="title function_">setEnabled</span>(!videoTrack.<span class="property">isMuted</span>);</span><br><span class="line"><span class="comment">// 音频开关</span></span><br><span class="line">audioTrack.<span class="property">isMuted</span> = !audioTrack.<span class="property">isMuted</span>;</span><br><span class="line">audioTrack.<span class="title function_">setEnabled</span>(!audioTrack.<span class="property">isMuted</span>);</span><br></pre></td></tr></table></figure>


<h2 id="web-集成"><a href="#web-集成" class="headerlink" title="web 集成"></a>web 集成</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> rtc.js：创建本地的音视频流并监听远端的音视频流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> AgoraRTC：软件包安装命令为 npm i agora-rtc-sdk -S</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> UID：同一个频道不能重复，PC 使用当年*2+随机数，小程序使用当年+随机数</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AgoraRTC</span> <span class="keyword">from</span> <span class="string">&#x27;agora-rtc-sdk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> appId = <span class="string">&#x27;cf95ca211f164383b833f2e9bcdae701&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> videoContainerId = <span class="string">&#x27;control_panel_remote_video&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> localVideoContainerId = <span class="string">&#x27;control_panel_local_video&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createRtcClient</span>(<span class="params">&#123;channel, UID, token&#125;, onAfterJoin</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> client = <span class="title class_">AgoraRTC</span>.<span class="title function_">createClient</span>(&#123; </span><br><span class="line">      <span class="comment">// live：直播模式，用户分为主播和观众。rtc：通信模式，任何用户自由说话</span></span><br><span class="line">      <span class="attr">mode</span>: <span class="string">&#x27;live&#x27;</span>, </span><br><span class="line">      <span class="comment">// 编解码可选 h264、vp8。与小程序链接时则必须使用 h264</span></span><br><span class="line">      <span class="attr">codec</span>: <span class="string">&quot;h264&quot;</span>  </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> localStream;</span><br><span class="line">  <span class="keyword">let</span> audioMuted = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">AgoraRTC</span>.<span class="property">Logger</span>.<span class="title function_">setLogLevel</span>(-<span class="number">1</span>);</span><br><span class="line">  <span class="title class_">AgoraRTC</span>.<span class="property">Logger</span>.<span class="title function_">enableLogUpload</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 Client 对象 </span></span><br><span class="line">  client.<span class="title function_">init</span>(appId, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    client.<span class="title function_">join</span>(token, channel, <span class="variable constant_">UID</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建并初始化本地的音视频流</span></span><br><span class="line">      localStream = <span class="title class_">AgoraRTC</span>.<span class="title function_">createStream</span>(&#123; </span><br><span class="line">        <span class="attr">streamID</span>: <span class="variable constant_">UID</span>, </span><br><span class="line">        <span class="attr">audio</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">video</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">screen</span>: <span class="literal">false</span> </span><br><span class="line">      &#125;);</span><br><span class="line">      localStream.<span class="title function_">setVideoProfile</span>(<span class="string">&#x27;360p_3&#x27;</span>);</span><br><span class="line">      localStream.<span class="title function_">setAudioProfile</span>(<span class="string">&#x27;speech_standard&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      localStream.<span class="title function_">init</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        client.<span class="title function_">publish</span>(localStream, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Publish local stream error: &quot;</span>, err)</span><br><span class="line">        &#125;);</span><br><span class="line">        localStream.<span class="title function_">play</span>(localVideoContainerId)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听远端的音视频流</span></span><br><span class="line">  client.<span class="title function_">on</span>(<span class="string">&#x27;stream-added&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stream = evt.<span class="property">stream</span>;</span><br><span class="line">    <span class="keyword">var</span> uid = stream.<span class="title function_">getId</span>();</span><br><span class="line"></span><br><span class="line">    client.<span class="title function_">subscribe</span>(stream);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (onAfterJoin &amp;&amp; !client.<span class="property">clientUID</span>) &#123;</span><br><span class="line">      <span class="comment">// 视频录制：须放到客户进入频道拿到 uid 之后触发</span></span><br><span class="line">      client.<span class="property">clientUID</span> = uid;</span><br><span class="line">      <span class="title function_">onAfterJoin</span>(uid)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  client.<span class="title function_">on</span>(<span class="string">&#x27;stream-subscribed&#x27;</span>, <span class="keyword">function</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> remoteStream = evt.<span class="property">stream</span>;</span><br><span class="line">    remoteStream.<span class="title function_">play</span>(videoContainerId, &#123; <span class="attr">fit</span>: <span class="string">&#x27;contain&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (err.<span class="property">status</span> !== <span class="string">&quot;aborted&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">Notification</span>.<span class="title function_">warning</span>(&#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;远端视频播放失败，点此重试&#x27;</span>,</span><br><span class="line">          <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">            remoteStream.<span class="title function_">resume</span>()</span><br><span class="line">              .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resume-remote-success, 恢复成功：&#x27;</span> + result)</span><br><span class="line">                notify.<span class="title function_">close</span>();</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resume-remote-fail, 恢复失败：&#x27;</span> + reason)</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  client.<span class="title function_">on</span>(<span class="string">&#x27;stream-removed&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stream = evt.<span class="property">stream</span>;</span><br><span class="line">    stream.<span class="title function_">stop</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Remote stream is removed &quot;</span> + stream.<span class="title function_">getId</span>());</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户主动挂断，client.destroy 触发而离开频道，不触发 peer-leave</span></span><br><span class="line">  client.<span class="title function_">on</span>(<span class="string">&quot;peer-leave&quot;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> uid = evt.<span class="property">uid</span>;</span><br><span class="line">    <span class="title function_">writeLog</span>(<span class="string">&quot;remote left user&quot;</span>, uid);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(videoContainerId).<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  client.<span class="property">destroy</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    client.<span class="title function_">leave</span>();</span><br><span class="line">    <span class="keyword">if</span> (localStream) &#123;</span><br><span class="line">      client.<span class="title function_">unpublish</span>(localStream);</span><br><span class="line">      localStream.<span class="title function_">stop</span>();</span><br><span class="line">      localStream.<span class="title function_">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> lcontainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(localVideoContainerId);</span><br><span class="line">    <span class="keyword">if</span> (lcontainer) &#123;</span><br><span class="line">      lcontainer.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    client = <span class="literal">null</span>;</span><br><span class="line">    localStream = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rtc client destroyed!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  client.<span class="property">toggleAudio</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (audioMuted) &#123;</span><br><span class="line">      <span class="keyword">if</span> (localStream.<span class="title function_">unmuteAudio</span>()) &#123;</span><br><span class="line">        audioMuted = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (localStream.<span class="title function_">muteAudio</span>()) &#123;</span><br><span class="line">        audioMuted = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> audioMuted;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  client.<span class="property">muteVideo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    localStream.<span class="title function_">muteVideo</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> store.js</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roomNo：上线时获取的房间号，下线则清除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> UID：同一个频道不能重复，PC 使用当年*2+随机数，小程序使用当年+随机数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rtcClientTickTimer：设定通话时间超过30分钟则提示，无操作则自动结束</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">UID</span> = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>() * <span class="number">2</span> + <span class="string">&#x27;&#x27;</span> + </span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100000</span>));</span><br><span class="line"><span class="keyword">let</span> currentRtcClient = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> rtcClientTickTimer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doCreateRtcClient</span>(<span class="params">roomNo, reconnect</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(curRtcClient) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  </span><br><span class="line">    videoService.<span class="title function_">getAgoraToken</span>(&#123; <span class="attr">uid</span>: <span class="variable constant_">UID</span>, roomNo &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="property">value</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">token</span> =&gt;</span> &#123;</span><br><span class="line">        curRtcClient = <span class="title function_">createRtcClient</span>(&#123; </span><br><span class="line">            <span class="attr">channel</span>: roomNo, <span class="variable constant_">UID</span>, token </span><br><span class="line">        &#125;,  <span class="function"><span class="params">uid</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reconnect !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 开始视频录制</span></span><br><span class="line">                videoService.<span class="title function_">beginRecord</span>(roomNo, uid).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (res.<span class="property">success</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                    <span class="title function_">notify</span>(<span class="string">&#x27;启用视频录制失败（不影响报案）&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">longComunicationConfirm</span>();</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">notify</span>(<span class="string">&#x27;建立通话失败&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">longComunicationConfirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> !== <span class="string">&#x27;video-claim.zhongan.io&#x27;</span>) &#123;</span><br><span class="line">        rtcClientTickTimer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">showConfirm</span>(<span class="string">&#x27;通话时间过长，为避免通话时间浪费，无操作30s后自动退出！&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;继续通话&#x27;</span>,</span><br><span class="line">                <span class="attr">cancelButtonText</span>: <span class="string">&#x27;结束通话&#x27;</span>,</span><br><span class="line">                <span class="attr">showClose</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">showCancelButton</span>: <span class="literal">false</span></span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">clearTimeout</span>(rtcClientTickTimer);</span><br><span class="line">                <span class="comment">// 如果已经主动挂断，则无需再次提示</span></span><br><span class="line">                <span class="keyword">if</span> (rtcClientTickTimer &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="title function_">longComunicationConfirm</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            rtcClientTickTimer = <span class="built_in">setTimeout</span>(destroyRtcClient, <span class="number">30</span> * <span class="number">1000</span>)</span><br><span class="line">        &#125;, <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">destroyRtcClient</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (curRtcClient) &#123;</span><br><span class="line">        curRtcClient.<span class="title function_">destroy</span>();</span><br><span class="line">        curRtcClient = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ping.<span class="title function_">stop</span>();</span><br><span class="line">    logger.<span class="title function_">send</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;destroyRtcClient&#x27;</span> &#125;);</span><br><span class="line">    <span class="built_in">clearTimeout</span>(rtcClientTickTimer);</span><br><span class="line">    rtcClientTickTimer = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="小程序集成"><a href="#小程序集成" class="headerlink" title="小程序集成"></a>小程序集成</h2><blockquote>
<p>开启小程序支持的服务、创建微信小程序组件 <code>&lt;live-pusher&gt;、&lt;live-player&gt;</code>、直接引用 SDK (<code>require(&#39;../lib/Agora.2.4.1.js&#39;)</code>) 并创建音视频流对象 (API 同上)。</p>
</blockquote>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">live-pusher</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">url</span>=<span class="string">&quot;&#123;&#123;pushUrl&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">autopush</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">mode</span>=<span class="string">&quot;RTC&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">enable-camera</span>=<span class="string">&quot;&#123;&#123;enableCamera&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">device-position</span>=<span class="string">&quot;&#123;&#123;devicePosition&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">waiting-image</span>=<span class="string">&quot;/images/connecting.jpg&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">background-mute</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">auto-pause-if-open-native</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">bindstatechange</span>=<span class="string">&quot;handlePusherStateChange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bindnetstatus</span>=<span class="string">&quot;handlePusherNetStatusChange&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">binderror</span>=<span class="string">&quot;handlePusherError&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">live-player</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;!enableCamera&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;playUrl&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">mode</span>=<span class="string">&quot;RTC&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">autoplay</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">sound-mode</span>=<span class="string">&quot;speaker&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">object-fit</span>=<span class="string">&quot;fillCrop&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">auto-pause-if-open-native</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">bindstatechange</span>=<span class="string">&quot;handlePlayerStateChange&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">bindnetstatus</span>=<span class="string">&quot;handlePlayerNetStatusChange&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、ECharts"><a href="#四、ECharts" class="headerlink" title="四、ECharts"></a>四、ECharts</h1><blockquote>
<p>一个免费的、功能强大的、可视化的一个库，可以非常简单的往软件产品中添加直观的、动态的和高度可定制化的图表。它是一个全新的基于矢量图形库 zrender 的使用纯 JavaScript 打造完成的 canvas 库。</p>
</blockquote>
<h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><blockquote>
<p>安装：<code>cnpm install echarts -S</code></p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局引用</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$echarts</span> = echarts</span><br><span class="line"><span class="comment">// 组件使用</span></span><br><span class="line">&lt;div ref=<span class="string">&quot;chart&quot;</span> style=<span class="string">&quot;width:500px;height:500px&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">　　initCharts () &#123;</span><br><span class="line">  　　<span class="keyword">let</span> myChart = <span class="variable language_">this</span>.<span class="property">$echarts</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">chart</span>);</span><br><span class="line">  　　<span class="comment">// 绘制图表</span></span><br><span class="line">  　　myChart.<span class="title function_">setOption</span>(&#123; &#125;)</span><br><span class="line">　　&#125;</span><br><span class="line">　  &#125;,</span><br><span class="line">　  mounted () &#123;</span><br><span class="line">　　  <span class="variable language_">this</span>.<span class="title function_">initCharts</span>();</span><br><span class="line">　  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需引用：组件中直接使用</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> echarts = <span class="built_in">require</span>(<span class="string">&#x27;echarts&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    initCharts () &#123;</span><br><span class="line">      <span class="keyword">let</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">chart</span>);</span><br><span class="line">      myChart.<span class="title function_">setOption</span>(&#123; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">　　 <span class="variable language_">this</span>.<span class="title function_">initCharts</span>();</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><ol>
<li>安装<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save echarts-<span class="keyword">for</span>-react</span><br><span class="line">npm install echarts --save  <span class="comment">// 如果有报错找不到 echarts 模块则安装</span></span><br></pre></td></tr></table></figure></li>
<li>引入模块和组件<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局引用</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/lib/echarts&#x27;</span></span><br><span class="line">&lt;<span class="title class_">ReactEcharts</span> option=&#123;<span class="variable language_">this</span>.<span class="title function_">getOption</span>()&#125; /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需引用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Card</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> echartTheme <span class="keyword">from</span> <span class="string">&#x27;./../themeLight&#x27;</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/lib/echarts&#x27;</span></span><br><span class="line"><span class="comment">//导入折线图</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/chart/line&#x27;</span>;  <span class="comment">//折线图是line,饼图改为pie,柱形图改为bar</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/tooltip&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/title&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/legend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/markPoint&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactEcharts</span> <span class="keyword">from</span> <span class="string">&#x27;echarts-for-react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Line</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//主题的设置要在willmounted中设置</span></span><br><span class="line">    echarts.<span class="title function_">registerTheme</span>(<span class="string">&#x27;Imooc&#x27;</span>,echartTheme);</span><br><span class="line">  &#125;</span><br><span class="line">  getOption =<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> option = &#123;</span><br><span class="line">      <span class="attr">title</span>:&#123;</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;用户骑行订单&#x27;</span>,</span><br><span class="line">        <span class="attr">x</span>:<span class="string">&#x27;center&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">tooltip</span>:&#123;</span><br><span class="line">        <span class="attr">trigger</span>:<span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">xAxis</span>:&#123;</span><br><span class="line">        <span class="attr">data</span>:[<span class="string">&#x27;周一&#x27;</span>,<span class="string">&#x27;周二&#x27;</span>,<span class="string">&#x27;周三&#x27;</span>,<span class="string">&#x27;周四&#x27;</span>,<span class="string">&#x27;周五&#x27;</span>,<span class="string">&#x27;周六&#x27;</span>,<span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">yAxis</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;value&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">series</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;OFO订单量&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&#x27;line&#x27;</span>,   <span class="comment">//这块要定义type类型，柱形图是bar,饼图是pie</span></span><br><span class="line">          <span class="attr">data</span>:[<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">1500</span>,<span class="number">3000</span>,<span class="number">2000</span>,<span class="number">1200</span>,<span class="number">800</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> option</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> <span class="attr">title</span>=<span class="string">&quot;折线图表之一&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ReactEcharts</span> <span class="attr">option</span>=<span class="string">&#123;this.getOption()&#125;</span> <span class="attr">theme</span>=<span class="string">&quot;Imooc&quot;</span>  <span class="attr">style</span>=<span class="string">&#123;&#123;height:</span>&#x27;<span class="attr">400px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>添加 option 参数</li>
</ol>
<h2 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h2><blockquote>
<p>图表选项 option 包含了图表实例任何可配置的选项：<code>公共选项、组件选项、数据选项</code></p>
</blockquote>
<ul>
<li><a href="https://www.jianshu.com/p/62b95115f522">https://www.jianshu.com/p/62b95115f522</a></li>
<li><a href="https://my.oschina.net/u/3363053/blog/900173">https://my.oschina.net/u/3363053/blog/900173</a></li>
</ul>
<h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initEachart</span>(<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> callNumList = list || [];</span><br><span class="line">  <span class="keyword">let</span> mainEcharts = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">echart</span>);</span><br><span class="line">  mainEcharts.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;0点&quot;</span>, <span class="string">&quot;1点&quot;</span>, <span class="string">&quot;2点&quot;</span>, <span class="string">&quot;3点&quot;</span>, <span class="string">&quot;4点&quot;</span>, <span class="string">&quot;5点&quot;</span>, <span class="string">&quot;6点&quot;</span>, <span class="string">&quot;7点&quot;</span>, <span class="string">&quot;8点&quot;</span>,</span><br><span class="line">            <span class="string">&quot;9点&quot;</span>, <span class="string">&quot;10点&quot;</span>, <span class="string">&quot;11点&quot;</span>, <span class="string">&quot;12点&quot;</span>, <span class="string">&quot;13点&quot;</span>, <span class="string">&quot;14点&quot;</span>, <span class="string">&quot;15点&quot;</span>, <span class="string">&quot;16点&quot;</span>,</span><br><span class="line">            <span class="string">&quot;17点&quot;</span>, <span class="string">&quot;18点&quot;</span>, <span class="string">&quot;19点&quot;</span>, <span class="string">&quot;20点&quot;</span>, <span class="string">&quot;21点&quot;</span>, <span class="string">&quot;22点&quot;</span>, <span class="string">&quot;23点&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">splitLine</span>: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">lineStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;#F8F8F8&quot;</span> &#125; &#125;,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">lineStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;#475669&quot;</span> &#125; &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">interval</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params">value, index</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&quot;\t\t\t\t\t&quot;</span> + value;</span><br><span class="line">              &#125;   <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">23</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value + <span class="string">&quot;\t\t\t\t\t&quot;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> value;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&quot;#3B8EFF&quot;</span>],</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">lineStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;#F8F8F8&quot;</span> &#125;&#125;,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123; <span class="attr">lineStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&quot;#475669&quot;</span> &#125; &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params">value, index</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> value + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">3</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="string">&quot;\n&quot;</span> + value;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> value;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">data</span>: callNumList,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">areaStyle</span>: &#123; <span class="attr">normal</span>: &#123; <span class="attr">opacity</span>: <span class="string">&quot;0.2&quot;</span> &#125; &#125;,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">normal</span>: &#123; <span class="attr">label</span>: &#123; <span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">position</span>: [<span class="number">6</span>, -<span class="number">14</span>] &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">grid</span>: &#123; <span class="attr">left</span>: <span class="string">&quot;40&quot;</span>, <span class="attr">right</span>: <span class="string">&quot;30&quot;</span>, <span class="attr">top</span>: <span class="string">&quot;20&quot;</span>, <span class="attr">bottom</span>: <span class="string">&quot;30&quot;</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>web 开发工具</title>
    <url>/2019/02/23/2-3-web%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="一、操作电脑"><a href="#一、操作电脑" class="headerlink" title="一、操作电脑"></a>一、操作电脑</h1><blockquote>
<p>mac 安装包管理工具 Homebrew：<code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</code>。</p>
</blockquote>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul>
<li><strong>Windows</strong>：人妻，什么都有，还常附带不想要的东西。基于 Basic 开发的微软系统，功能强大但安全堪忧，适用于正常办公以及游戏。</li>
<li><strong>Mac OS&#x2F;OSX</strong>：女友，带着有面子但必须按照它的规则。基于 linux 开发的苹果系统，应用软件较少但较安全，适用于高端移动化处理。</li>
<li><strong>Linux</strong>：小萝莉，你让它干嘛就干嘛。一种自由的、开放源码的类 Unix 操作系统，可安装到手机电脑等各种计算机硬件设备，网络功能强大并且对内存等硬件的消耗小，优点是其易用性和丰富的应用软件，多用于网络服务器。</li>
</ul>
<h2 id="操作接口"><a href="#操作接口" class="headerlink" title="操作接口"></a>操作接口</h2><ul>
<li><strong>终端 terminal</strong>：用于人与计算机进行交互的输入输出接口。本质是通过电缆、网络等连接主机的外部附加设备，一台计算机可以连接个终端。</li>
<li><strong>控制台 console</strong>：用于管理主机的特殊终端，只允许管理员使用。本质是直接和计算机相连接的原生设备，一台计算机一般只能有一个控制台。</li>
<li><strong>命令解释器 shell</strong>：提供用户界面的程序而用于与计算机内核交互。本质是接受用户指令后调用其他程序与内核交互完成指令。一般分为 <strong>命令行shell、图形shell，分别提供 命令行界面 CLI、图形用户界面 GUI</strong>。批处理：将一系列命令按照一定顺序集合为一个可执行的文本文件，在window系统的扩展名为 bat&#x2F;cmd，双击文件即可运行。</li>
<li><strong>终端与 shell 的分工</strong>：终端从用户接受 鼠标键盘等设备的输入信息，然后发送给 shell。shell 从终端获取用户指令，解析后发给计算机内核执行，并返回结果给终端。</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><blockquote>
<p>从硬件上来说是一台配置比较高的电脑，从软件角度用来处理客户端请求的服务器可分为以下两种：</p>
</blockquote>
<ul>
<li>分类       <ul>
<li><strong>web&#x2F;HTTP 服务器</strong>：比如 Apache、Nginx。专注于处理 HTTP 协议、传递本地磁盘上的静态资源给客户端，常用于提供代理服务。</li>
<li><strong>应用服务器</strong>：比如 WebLogic、Tomcat。提供可以处理业务逻辑的方法，常用来加载动态内容和处理响应数据并返回给客户端，但则只能访问其安装目录中的文件。</li>
</ul>
</li>
<li>代理<ul>
<li><strong>代理服务器</strong>：具有转发功能，扮演了服务器和客户端的中间人角色。接收客户端发送的请求并转发给服务器，同时接收服务器返回的响应并转发给客户端。</li>
<li><strong>正向代理</strong>：隐藏了真实的客户端，客户端请求都被代理服务器代替去请求。比如翻墙的原理就是在国外搭建一台代理服务器，代理去访问国外网址并返回结果给国内客户端。</li>
<li><strong>反向代理</strong>：隐藏了真实的服务端，反向代理服务器会帮客户端把请求转发到真实服务器。常用来做负载均衡，比如访问百度时会有很多服务器接收服务。</li>
<li><strong>应用</strong>：web 项目开发时联合使用 apache + tomcat + nginx。访问静态、动态资源时使用 apache&#x2F;tomcat 解析。nginx 作为反向代理服务器，同时支持高并发。</li>
</ul>
</li>
</ul>
<h1 id="二、开发调试"><a href="#二、开发调试" class="headerlink" title="二、开发调试"></a>二、开发调试</h1><h2 id="浏览器-chrome"><a href="#浏览器-chrome" class="headerlink" title="浏览器 chrome"></a>浏览器 chrome</h2><ul>
<li>搜索匹配：Google 输入框中所有空格都被理解为加号。<ul>
<li>完整匹配：<code>mysql foreign key</code>（引号）</li>
<li>筛选：<code>mysql key * nodejs</code>（加减号）</li>
<li>返回所有：<code>mysql connect error *</code>（加通配符）</li>
<li>站内搜索：<code>mysql foreign key site:stackoverflow.com</code></li>
<li>加速：输入网址后点击 Tab，这样可直接使用该站点的站内搜索</li>
</ul>
</li>
<li>调试 JS<ul>
<li><strong>断点调试</strong>：开发者工具、Sources 菜单、点击文件的行号列、点击文件左下角的 {} 格式化压缩代码、点击右侧 Breakpoints 可查看所有断点、点击右侧 scope 可查看断点数据的信息。</li>
<li><strong>Debug 断点</strong>：异步加载时可能有些 JS 代码在 Sources 中无法找到，这时可在文件中添加 <code>debugger;</code>，注意调试后需要删除该断点语句。</li>
<li><strong>Network 抓包</strong>：抓包指将网络传输发送与接收的数据包进行截获、编辑、重发等操作，调试时常用来获取 HTTP 信息并分析。</li>
</ul>
</li>
<li>扩展插件<ul>
<li><strong>谷歌访问助手</strong>：下载安装包、更多工具、扩展程序、直接拖拽、添加扩展。安装后可通过谷歌网上商店添加扩展插件。</li>
<li><strong>常用插件</strong>：掘金、FeHelper、JSONView、What runs、Clear Cache、Code Plunker、Vue.js devtools、AngularJS Batarang、React Developer Tools。</li>
</ul>
</li>
<li>黑科技<ul>
<li><strong>翻墙</strong>：配置 VPN 虚拟专用网络、配置 proxy 代理地址（setting system、proxy settings、LAN setting、proxy server、配置 Address、Port）、</li>
<li><strong>解析 VIP</strong>：打开网站 <a href="https://greasyfork.org/zh-CN">Greasy Fork</a>、搜索 VIP 视频解析、安装脚本。</li>
<li>其它：视频广告过滤、电脑管家上网防护等。</li>
</ul>
</li>
</ul>
<h2 id="代码编辑-vscode"><a href="#代码编辑-vscode" class="headerlink" title="代码编辑 vscode"></a>代码编辑 vscode</h2><blockquote>
<p>常用的扩展插件和用户配置如下：</p>
</blockquote>
<ul>
<li>显示效果类<ul>
<li><strong>Dracula Official</strong>：高亮主题</li>
<li><strong>vscode-icon</strong>：让资源树目录加上图标</li>
<li><strong>Bracket Pair Colorizer</strong>：每一对括号用不同颜色区别</li>
<li><strong>Open-In-Browser</strong>：直接在浏览器中打开文件的快捷菜单 <code>alt + b</code></li>
</ul>
</li>
<li>辅助编辑类<ul>
<li><strong>HTML Snippets</strong>：html 语法填充</li>
<li><strong>HTML CSS Support</strong>：代码自动补全</li>
<li><strong>CSS Peek</strong>：css 代码追踪跳转</li>
<li><strong>Path Autocomplete</strong>：智能补全路径</li>
<li><strong>Path Intellisense</strong>：智能提示路径</li>
<li><strong>Auto Close Tag</strong>：自动闭合 HTML 标签</li>
<li><strong>Auto Rename Tag</strong>：自动修改匹配的标签</li>
<li><strong>JavaScript code snippets</strong>：JS 语法提示</li>
</ul>
</li>
<li>规范代码类<ul>
<li><strong>ESlint</strong>：检测 js、ts</li>
<li><strong>Stylelint</strong>：检测 css、scss</li>
<li><strong>Prettier</strong>：代码格式化 <code>alt + shift + F</code></li>
<li><strong>EditorConfig for VS Code</strong>：统一跨编辑器编码风格 .editorconfig</li>
<li><strong>Prettier</strong>：统一项目风格而格式化文件 .prettierrc</li>
</ul>
</li>
<li>框架插件类<ul>
<li><strong>Volar</strong>：语法高亮</li>
<li><strong>Vue3 Snippets</strong>：代码提示</li>
<li><strong>TypeScript Vue Plugin</strong>：tsx vue 语法</li>
<li><strong>React Style Helper</strong>：自动补全</li>
<li><strong>Typescript React code snippets</strong>：tsx react 语法</li>
<li><strong>ES7 React&#x2F;Redux&#x2F;React-Native snippets</strong>：语法提示</li>
<li><strong>Angular Snippets</strong>：语法提示</li>
<li><strong>Angular Files</strong>：生成文件模版</li>
<li><strong>Angular Follow Selector</strong>：文件跳转</li>
<li><strong>Angular Language Service</strong>：语法校验</li>
<li><strong>wxml</strong>：小程序代码格式化和高亮显示</li>
<li><strong>minapp</strong>：小程序代码智能补全</li>
<li><strong>wechat-snippet</strong>：代码提示</li>
</ul>
</li>
<li>开发调试类<ul>
<li><strong>npm</strong>：运行 npm 命令</li>
<li><strong>npm Intellisense</strong>：导入时提示已安装模块</li>
<li><strong>Python</strong>：添加对 py 文件的支持</li>
<li><strong>GitLens</strong>：简单实现 git 提交代码</li>
<li><strong>Git History</strong>：查看 git 提交日志</li>
<li><strong>Octotree</strong>：Github 项目代码树形展示</li>
<li><strong>Debugger for chrome</strong>：调试 Debug</li>
<li><strong>Code Runner</strong>：右键一键运行代码片段或文件</li>
<li><strong>REST Client</strong>：HTTP API 本地调试</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、常用快捷键</span></span><br><span class="line">ctrl + p                       <span class="comment">// 文件定位</span></span><br><span class="line">ctrl + <span class="title class_">Option</span> + ↑↓             <span class="comment">// 选中区域</span></span><br><span class="line">option + ↑↓                    <span class="comment">// 移动当前行代码</span></span><br><span class="line">ctrl + ←↑↓→                    <span class="comment">// 移动鼠标到行头/尾      </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、运行调试：.vscode/launch.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pwa-node&quot;</span>,   <span class="comment">// 调试器类型</span></span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,  <span class="comment">// 请求方式：launch(启动)、attach(附加)</span></span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;umif&quot;</span>,       <span class="comment">// 启动配置名称</span></span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/umif/server.js&quot;</span>, <span class="comment">// 入口文件</span></span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/umif&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;mes4pc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/mes4pc/server.js&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/mes4pc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;NODE_ENV&quot;</span>:<span class="string">&quot;production&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,               </span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,          </span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Hexo&quot;</span>,               </span><br><span class="line">            <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;npm&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,  <span class="comment">// 启动目录</span></span><br><span class="line">            <span class="string">&quot;runtimeArgs&quot;</span>: [<span class="string">&quot;run-script&quot;</span>, <span class="string">&quot;debug&quot;</span>],   <span class="comment">// 传给执行工具的参数</span></span><br><span class="line">            <span class="string">&quot;skipFiles&quot;</span>: [<span class="string">&quot;&lt;node_internals&gt;/**/*.js&quot;</span>] <span class="comment">// 跳过 Node 内置模块</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、用户配置：ctrl + shift + p、User Settings</span></span><br><span class="line"><span class="comment">// 解决 vscode 卡顿 (cpu git 占用过高)</span></span><br><span class="line"><span class="string">&quot;search.followSymlinks&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;git.enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;git.autorefresh&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消右侧预览功能</span></span><br><span class="line"><span class="string">&quot;editor.minimap.enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 窗口失去焦点自动保存   </span></span><br><span class="line"><span class="string">&quot;files.autoSave&quot;</span>: <span class="string">&quot;onFocusChange&quot;</span>,</span><br><span class="line"><span class="comment">// 不再显示扩展建议的通知 </span></span><br><span class="line"><span class="string">&quot;extensions.ignoreRecommendations&quot;</span>: <span class="literal">true</span>,   </span><br><span class="line"><span class="comment">// 不再显示新版本消息   </span></span><br><span class="line"><span class="string">&quot;vsicons.dontShowNewVersionMessage&quot;</span>: <span class="literal">true</span>, </span><br><span class="line"><span class="comment">// 是否将打开的编辑器显示为预览</span></span><br><span class="line"><span class="string">&quot;workbench.editor.enablePreview&quot;</span>: <span class="literal">false</span>,   </span><br><span class="line"><span class="comment">// 字体字号</span></span><br><span class="line"><span class="string">&quot;editor.fontSize&quot;</span>: <span class="number">16</span>,</span><br><span class="line"><span class="comment">// 代码缩进</span></span><br><span class="line"><span class="string">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="comment">// eslint 验证和自动修复</span></span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [  </span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>,       </span><br><span class="line">  <span class="string">&quot;javascriptreact&quot;</span>,      </span><br><span class="line">  <span class="string">&quot;typescript&quot;</span>, </span><br><span class="line">  <span class="string">&quot;typescriptreact&quot;</span> </span><br><span class="line">  <span class="string">&quot;html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>,      </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>,           </span><br><span class="line">    <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span>       </span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;html&quot;</span>,           </span><br><span class="line">    <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span>       </span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// 代替 vscode 的 ts 语法智能提示</span></span><br><span class="line"><span class="string">&quot;typescript.tsdk&quot;</span>: <span class="string">&quot;./node_modules/typescript/lib&quot;</span>,</span><br><span class="line"><span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;source.fixAll.stylelint&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 使用 stylelint 自身的校验即可</span></span><br><span class="line"><span class="string">&quot;css.validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;less.validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;scss.validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 保存时自动格式化</span></span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment">// 搜索排除下面的文件</span></span><br><span class="line"><span class="string">&quot;search.exclude&quot;</span>: &#123;           </span><br><span class="line">  <span class="string">&quot;**/node_modules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;dist&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;yarn.lock&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HTML Snippets 插件配置</span></span><br><span class="line"><span class="string">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;emmet.includeLanguages&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;wxml&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue-html&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 使对应扩展名的文件使用特定语言</span></span><br><span class="line"><span class="string">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;*.tpl&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">  <span class="string">&quot;*.cjson&quot;</span>: <span class="string">&quot;jsonc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;*.wxss&quot;</span>: <span class="string">&quot;css&quot;</span>,</span><br><span class="line">  <span class="string">&quot;*.wxs&quot;</span>: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.**rc&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">  <span class="string">&quot;.sequelizerc&quot;</span>: <span class="string">&quot;javascript&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、requests.http：HTTP 请求执行后在右侧区域显示结果</span></span><br><span class="line"><span class="comment">// 执行方式：点击 Send Request、右键选择 Send Request、快捷键 Ctrl+Alt+R </span></span><br><span class="line"><span class="variable constant_">GET</span> <span class="attr">http</span>:<span class="comment">//localhost:5438/licence/query</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">POST</span> <span class="attr">http</span>:<span class="comment">//localhost:5438/baiduAip</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;APP_ID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;API_KEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;SECRET_KEY&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;请注意&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;speech&quot;</span>,</span><br><span class="line">  <span class="string">&quot;options&quot;</span>: &#123;<span class="string">&quot;spd&quot;</span>: <span class="number">5</span>, <span class="string">&quot;pit&quot;</span>: <span class="number">5</span>, <span class="string">&quot;per&quot;</span>: <span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">POST</span> <span class="attr">https</span>:<span class="comment">//api.example.com/login</span></span><br><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: application/x-www-form-urlencoded</span><br><span class="line">name=foo</span><br><span class="line">&amp;password=bar</span><br></pre></td></tr></table></figure>

<h2 id="接口调试-Postman"><a href="#接口调试-Postman" class="headerlink" title="接口调试 Postman"></a>接口调试 Postman</h2>  <div align="center">
    <img src="/images/web/postman.png" alt="Postman" width="100%">
  </div>

<ul>
<li>接口请求：GET 请求时可以不输入请求头与请求参数，POST 请求时可输入参数值并设置参数格式 Content-Type 如下：<ul>
<li><strong>raw</strong>：可上传 text、json、xml、html 等任意格式的文本。</li>
<li><strong>form-data</strong>：即 multipart&#x2F;form-data，可上传文件或数据。</li>
<li><strong>x-www-form-urlencoded</strong>：即 application&#x2F;x-www-from-urlencoded，它会将表单数据转换为键值对。</li>
<li><strong>binary</strong>：即 Content-Type:application&#x2F;octet-stream，但一次上传一个文件，并且只能上传二进制文件。</li>
</ul>
</li>
<li>Collections 集合：将多个接口请求放在一起并管理起来，一个工程创建一个 Collection 方便查找及统一处理数据。<ul>
<li>创建 Collections：点击加号图标并输入内容。</li>
<li>添加请求：可以通过 Add Folder 针对不同的请求方式做分组。</li>
</ul>
</li>
<li>身份验证 Authentication<ul>
<li><strong>Basic Auth</strong>：基础验证，会直接将用户名、密码的信息放在请求的 Header</li>
<li><strong>Digest Auth</strong>：使用当前值生成 authorization header，如果已经存在则会被移除</li>
<li><strong>OAuth 1.0</strong>：基于身份验证，可在 header 或查询参数中设置 value。</li>
<li><strong>OAuth 2.0</strong>：支持获得 token 并添加到 request</li>
</ul>
</li>
</ul>
<h2 id="移动端调试-vConsole"><a href="#移动端调试-vConsole" class="headerlink" title="移动端调试 vConsole"></a>移动端调试 vConsole</h2><blockquote>
<p>通过 vConsole.js 重写 console 方法，实现了类似于微信小程序的移动端调试效果。它是腾讯推出的一个轻量、可拓展、针对手机网页的前端开发者调试面板。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vconsole</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> vConsole = <span class="keyword">new</span> <span class="title class_">VConsole</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="网站加速"><a href="#网站加速" class="headerlink" title="网站加速"></a>网站加速</h2><blockquote>
<p>github、apple 等网站无法访问或加载缓慢时，可以通过 ping 检测网站解析域名并将相应网站替换为速度快的 dns 服务器。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析域名</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//ping.chinaz.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑 /etc/hosts</span></span><br><span class="line"><span class="number">17.253</span><span class="number">.85</span><span class="number">.201</span>   developer.<span class="property">apple</span>.<span class="property">com</span></span><br><span class="line"><span class="number">17.253</span><span class="number">.85</span><span class="number">.202</span>   devstreaming-cdn.<span class="property">apple</span>.<span class="property">com</span></span><br><span class="line"><span class="number">104.26</span><span class="number">.7</span><span class="number">.173</span>    ionicframework.<span class="property">com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 DNS 缓存 </span></span><br><span class="line">dscacheutil -flushcache</span><br><span class="line"></span><br><span class="line"><span class="comment">// Warning: Changing a readonly file</span></span><br><span class="line">sudo rm -f /etc/.<span class="property">hosts</span>.<span class="property">swp</span></span><br><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>


<h1 id="三、项目构建"><a href="#三、项目构建" class="headerlink" title="三、项目构建"></a>三、项目构建</h1><ul>
<li><code>Npm、Bower</code>：基于 NodeJS 的包管理工具，用来下载、安装、上传和管理已安装包。</li>
<li><code>Gulp、Grunt</code>：基于 NodeJS 的自动化构建工具，用来自动化完成一些常见的、重复的低技术含量任务。两者最大区别是 Gulp 采取流式接口。</li>
<li><code>Webpack、Browserify、RequireJS</code>：模块化解决方案。后两个只是支持打包。</li>
<li><code>ESLint、JSLint</code>：代码检测工具，常用于分析代码中潜在错误。</li>
<li><code>Yeoman、create-react-app、vue-cli、angular-cli</code>：脚手架工具，用于解决模块依赖、统一代码风格、减少重复工作量等问题，并创建一个易用的工作流来帮忙开发者快速新建项目。Yeoman 可用于创建任何类型的前端项目。</li>
<li><code>Git、Svn</code>：版本管理工具。Git 分布式管理指每台电脑都是一个版本仓库但有一个集中的服务中心 Github，可以离线在本地提交而只需要在提交和下载时联网。Svn 集中式管理指所有版本文件都集中存放到一个服务器，但开发时需要联网。</li>
</ul>
<h2 id="构建工具指标"><a href="#构建工具指标" class="headerlink" title="构建工具指标"></a>构建工具指标</h2><ul>
<li><strong>Code Splitting 代码分割</strong>：打包时拆分静态资源，页面加载时实现最合理的按需加载。</li>
<li><strong>Hashing 哈希</strong>：对打包资源进行版本信息的映射，最大化的利用缓存机制。比如热更新。</li>
<li><strong>Importing Modules 依赖机制</strong>：通过配置实现 CommonJS、AMD 等模块化规范。</li>
<li><strong>Non-JavaScript Resources</strong>：导入 html、css、image 等非 Js 资源的支持能力。</li>
<li><strong>Transformations 编译</strong>：压缩 JS 代码并删除无用代码。对于 jsx、.vue、es 等代码的编译不会内置到构建工具中，而是通过 Babel 等融合到工程化流程。构建工具只做份内的事情，其他扩展能力通过插件化机制来完成。</li>
</ul>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><h3 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h3><ul>
<li>从 npm 服务器下载别人编写的三方包到本地使用。</li>
<li>从 npm 服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>将自己编写的包或命令行程序上传到 npm 服务器供别人使用。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用命令</span></span><br><span class="line">npm -v                    <span class="comment">// 查看版本</span></span><br><span class="line">npm list                  <span class="comment">// 当前目录已安装插件</span></span><br><span class="line">npm init                  <span class="comment">// 生成 package.json 文件</span></span><br><span class="line"></span><br><span class="line">npm i &lt;name&gt; -g           <span class="comment">//安装包</span></span><br><span class="line">npm uninstall &lt;name&gt;      <span class="comment">//卸载包</span></span><br><span class="line">npm update &lt;name&gt;         <span class="comment">//更新包</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@title</span> 可添加的修饰符</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> -g               全局(不加则为本地安装)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> --no-save        不写入 package.json 的依赖</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> -S / --save      生产环境还要用的依赖 (package.json/dependencies)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@prame</span> -D / --save-dev  只用于开发环境的依赖 (package.json/devDependencies)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line">npm run script-key        <span class="comment">// 执行package.json中 &quot;scripts&quot; 选项对应的js</span></span><br><span class="line">npm start                 <span class="comment">// 比较特殊</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布 npm 包</span></span><br><span class="line">cd test                 <span class="comment">// 选择目标文件夹</span></span><br><span class="line">npm init                <span class="comment">// 配置包的相关信息</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="number">1</span>      <span class="comment">// 编辑包 test/index.js</span></span><br><span class="line"></span><br><span class="line">npm adduser             <span class="comment">// 注册，第一次发布包</span></span><br><span class="line">npm login               <span class="comment">// 登录，非第一次发布包</span></span><br><span class="line"></span><br><span class="line">npm publish            <span class="comment">// 发布/更新包</span></span><br><span class="line">npm install 包名        <span class="comment">// npm官网搜索后验证下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销发布的包要用force强制删除。超过24小时就不能删除了</span></span><br><span class="line">npm --force unpublish 包名</span><br></pre></td></tr></table></figure>

<h3 id="Npx"><a href="#Npx" class="headerlink" title="Npx"></a>Npx</h3><blockquote>
<p>如果你把 NPM 升级到最新版本 <a href="mailto:&#110;&#112;&#109;&#x40;&#53;&#x2e;&#x32;&#46;&#48;">&#110;&#112;&#109;&#x40;&#53;&#x2e;&#x32;&#46;&#48;</a>，它就会安装一个新的包 npx，它用来代替 npm 来直接执行包（package）命令。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 升级</span></span><br><span class="line">npm i npm@latest -g</span><br><span class="line">npm i cnpm -g --registry=<span class="attr">https</span>:<span class="comment">//registry.npmmirror.com/ </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm 使用 create-react-app</span></span><br><span class="line">npm init</span><br><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br><span class="line"></span><br><span class="line"><span class="comment">// npx 直接使用，包不存在时会自动下载</span></span><br><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure>

<h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><blockquote>
<p>Facebook 等公司开发的用于替换 npm 的包管理工具，它解决了 npm 存在的问题：1、安装时无法保证速度和版本统一，2、安装时允许运行代码而不能保证安全。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用命令</span></span><br><span class="line">yarn -v</span><br><span class="line">yarn init</span><br><span class="line"></span><br><span class="line">yarn === npm install</span><br><span class="line">yarn add lodash === npm i lodash --save</span><br><span class="line">yarn add lodash --dev === npm i lodash --save-dev</span><br><span class="line">yarn <span class="variable language_">global</span> add lodash === npm i lodash -g</span><br><span class="line">npm uninstall lodash --save === yarn remove lodash</span><br><span class="line">rm -rf node_modules &amp;&amp; npm install === yarn upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新淘宝源</span></span><br><span class="line">yarn config get registry</span><br><span class="line">yarn config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<h2 id="构建工具-Gulp"><a href="#构建工具-Gulp" class="headerlink" title="构建工具 Gulp"></a>构建工具 Gulp</h2><ul>
<li><strong>常用插件</strong><ul>
<li>gulp-minify-html：压缩 html</li>
<li>gulp-minify-css：压缩 css</li>
<li>gulp-uglify：压缩 js</li>
<li>gulp-smushit：压缩图片</li>
<li>gulp-concat：文件合并</li>
<li>gulp-rename：重命名</li>
<li>gulp-babel：编译 ES6</li>
<li>gulp-sass&#x2F;less：css 预处理</li>
<li>gulp-autoprefixer：自动添加 css 前缀。</li>
<li>browser-sync：自动刷新页面(非 gulp 插件)。</li>
</ul>
</li>
<li><strong>API</strong><ul>
<li>task：创建任务</li>
<li>run：运行任务</li>
<li>watch：监听任务</li>
<li>src：设置需处理的文件路径(正则&#x2F;数组)。</li>
<li>dest：设置生成文件的路径，一个任务可有多个生成路径。</li>
</ul>
</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化目录</span></span><br><span class="line">├── app              <span class="comment">// 工作目录：源文件</span></span><br><span class="line">│   ├── js</span><br><span class="line">│   ├── <span class="title class_">Sass</span></span><br><span class="line">│   └── index.<span class="property">html</span></span><br><span class="line">│</span><br><span class="line">├── dist            <span class="comment">// 目标目录：编译、压缩后的文件</span></span><br><span class="line">└── release         <span class="comment">// 可以发布到服务器的文件目录</span></span><br><span class="line"></span><br><span class="line">cnpm install gulp -g  <span class="comment">// 全局安装，执行gulp任务</span></span><br><span class="line">cd <span class="title class_">GulpTest</span></span><br><span class="line">cnpm init      <span class="comment">// 生成package.json文件</span></span><br><span class="line">cnpm install gulp -S  <span class="comment">// 本地安装，使用gulp插件并避免版本冲突</span></span><br><span class="line">gulp -v       <span class="comment">// 查看版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件 gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">&quot;gulp-sass&quot;</span>);         <span class="comment">// 编译sass</span></span><br><span class="line"><span class="keyword">var</span> maps = <span class="built_in">require</span>(<span class="string">&quot;gulp-sourcemaps&quot;</span>);   <span class="comment">// 在浏览器显示scss样式以便调试</span></span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&quot;gulp-autoprefixer&quot;</span>); <span class="comment">//自动添加前后缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>); <span class="comment">//html压缩</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&quot;gulp-uglify&quot;</span>); <span class="comment">//压缩js文件</span></span><br><span class="line"><span class="keyword">var</span> smushit = <span class="built_in">require</span>(<span class="string">&quot;gulp-smushit&quot;</span>); <span class="comment">//图片压缩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">&quot;gulp-concat&quot;</span>); <span class="comment">//文件合并</span></span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&quot;gulp-babel&quot;</span>); <span class="comment">//将ES6代码编译成ES5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bs = <span class="built_in">require</span>(<span class="string">&quot;browser-sync&quot;</span>).<span class="title function_">create</span>(); <span class="comment">//页面同步</span></span><br><span class="line"><span class="keyword">var</span> reload = bs.<span class="property">reload</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, [<span class="string">&quot;server&quot;</span>, ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;build&#x27;</span>, [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;js&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// sass 任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;sass&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        gulp</span><br><span class="line">          .<span class="title function_">src</span>(<span class="string">&quot;./src/scss/*.scss&quot;</span>) <span class="comment">// 导入文件</span></span><br><span class="line">          .<span class="title function_">pipe</span>(maps.<span class="title function_">init</span>()) <span class="comment">// 将页面样式定义到scss</span></span><br><span class="line">          <span class="comment">// 转译scss到css,报错时输出错误信息,不终止程序运行</span></span><br><span class="line">          .<span class="title function_">pipe</span>(<span class="title function_">sass</span>(&#123;<span class="attr">outputStyle</span>: <span class="string">&quot;compressed&quot;</span> &#125;).<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, sass.<span class="property">logError</span>))</span><br><span class="line"></span><br><span class="line">          .<span class="title function_">pipe</span>(<span class="title function_">autoprefixer</span>()) <span class="comment">// 自动添加前后缀</span></span><br><span class="line">          .<span class="title function_">pipe</span>(maps.<span class="title function_">write</span>(<span class="string">&quot;./&quot;</span>)) <span class="comment">// 生成map文件（和css文件放在一起）</span></span><br><span class="line">          .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./dist/css&quot;</span>)) <span class="comment">// 将生成的文件放到css文件夹中</span></span><br><span class="line">          .<span class="title function_">pipe</span>(<span class="title function_">reload</span>(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 任务完成后（监听关闭后），再有修改时重新启动监听时会重新执行以防报错</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;mihtml&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,      <span class="comment">// 清除 HTML 注释</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,  <span class="comment">// 压缩 HTML</span></span><br><span class="line">        <span class="attr">minfyJS</span>: <span class="literal">true</span>,   <span class="comment">// 压缩JS</span></span><br><span class="line">        <span class="attr">minfyCss</span>: <span class="literal">true</span>,  <span class="comment">// 压缩CSS</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">      .<span class="title function_">src</span>(<span class="string">&quot;./src/html/*.html&quot;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(options))</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./dist/html/&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;minijs&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">      .<span class="title function_">src</span>(<span class="string">&quot;!./src/js/*.js&quot;</span>) <span class="comment">// ! 表示除了...之外</span></span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">babel</span>())</span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())        <span class="comment">// 压缩</span></span><br><span class="line">      <span class="comment">// .pipe(concat(&#x27;all.min.js&#x27;))   // 合并到 all.min.js</span></span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./dist/js/&quot;</span>));  <span class="comment">// 指定目录</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 img</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;img&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">      .<span class="title function_">src</span>(<span class="string">&quot;./src/img/*.*&quot;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(<span class="title function_">smushit</span>(&#123; <span class="attr">verbose</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./dist/img/&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 生成服务并自动化监听项目</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;server&quot;</span>, [<span class="string">&quot;sass&quot;</span>, <span class="string">&quot;mihtml&quot;</span>, <span class="string">&quot;minijs&quot;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    bs.<span class="title function_">init</span>(&#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>, </span><br><span class="line">        <span class="attr">open</span>: <span class="string">&quot;external&quot;</span>,    <span class="comment">// 启动时自动打开的网址</span></span><br><span class="line">        <span class="attr">server</span>: &#123;</span><br><span class="line">            <span class="attr">baseDir</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">            <span class="attr">index</span>: <span class="string">&#x27;dist/index.html&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// proxy: &#x27;localhost&#x27;  使用代理</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    gulp.<span class="title function_">task</span>(<span class="string">&quot;run&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        gulp.<span class="title function_">run</span>(<span class="string">&quot;lint&quot;</span>, <span class="string">&quot;sass&quot;</span>, <span class="string">&quot;scripts&quot;</span>);</span><br><span class="line">        <span class="comment">// 监听sass文件变化</span></span><br><span class="line">        gulp.<span class="title function_">watch</span>(<span class="string">&quot;src/sass/*.sass&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            gulp.<span class="title function_">run</span>(<span class="string">&quot;lint&quot;</span>, <span class="string">&quot;sass&quot;</span>, <span class="string">&quot;scripts&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 html</span></span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&quot;./src/html/*.html&quot;</span>, [<span class="string">&quot;mihtml&quot;</span>]);</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&quot;./dist/html/*.html&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, reload);</span><br><span class="line">    <span class="comment">// 监听 scss</span></span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&quot;./src/scss/*.scss&quot;</span>, [<span class="string">&quot;sass&quot;</span>]);</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&quot;./dist/css/*.css&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, reload);</span><br><span class="line">    <span class="comment">// 监听 js</span></span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&quot;./src/js/*.js&quot;</span>, [<span class="string">&quot;minijs&quot;</span>]);</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&quot;./dist/js/*js&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;change&quot;</span>, reload);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 gulp： 定义 package.json scripts，npm install rimraf -g</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;gulp dev&quot;</span>,                   <span class="comment">// 执行 gulp dev 命令</span></span><br><span class="line">  <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;rimraf dist&quot;</span>,                <span class="comment">// 清空 dist 目录文件</span></span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;rimraf dist &amp;&amp; gulp build&quot;</span>   <span class="comment">// 清空 dist 之后打包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包工具-Webpack"><a href="#打包工具-Webpack" class="headerlink" title="打包工具 Webpack"></a>打包工具 Webpack</h2><blockquote>
<p>模块化打包工具的需求：能够将散落的模块打包到一起、能够编译代码的新特性、能够支持不同种类的前端资源模块。Webpack 通过 Loader 机制对零散的 Scss、TypeScript、ES6+ 等代码实现编译转换，然后整体或拆分打包到 JS 文件（拆分打包即打包初次加载时必须模块，其它模块则按需异步加载），在很多场景下可以替代 Gulp&#x2F;Grunt。</p>
</blockquote>
<ul>
<li>工具对比<ul>
<li><strong>Gulp&#x2F;Grunt</strong>：在一个配置文件指定对某些文件进行编译、组合、压缩等任务的具体步骤，工具会自动完成这些任务。</li>
<li><strong>Webpack</strong>：把项目当做一个整体并从根文件开始寻找所有依赖文件，使用 loaders 处理并将所有资源都转换成 js，然后用 CommonJS 机制 (require、module.exports) 管理起来。</li>
</ul>
</li>
<li>核心概念<ul>
<li><strong>Entry</strong>：webpack 开始构建的入口文件。</li>
<li><strong>Output</strong>：如何命名输出文件、输出目录。</li>
<li><strong>Loaders</strong>：解析文件的加载器，将 scss、ES6、图片等非 js 文件转换为 webpack 能够处理的模块。</li>
<li><strong>Plugins</strong>：扩展功能的插件，完成压缩文件等 loader 无法解决的功能。</li>
<li><strong>Chunk</strong>：取代 webpack3 CommonsChunkPlugin，最大特点是配置简单，设置 mode: production 之后则 webpack4 会自动开启 Code Splitting 将某些公共模块去重，打包成一个单独的 chunk。</li>
</ul>
</li>
<li>相关依赖<ul>
<li><strong>webpack</strong>：用于编译 JS 模块。</li>
<li><strong>webpack-cli</strong>：用于命令行中运行 webpack。</li>
<li>webpack-merge：提取公共配置，减少重复配置代码。<code>module.exports = WebpackMerge(baseConfig, &#123;&#125;)</code>。</li>
<li>cross-env：跨平台设置和使用环境变量。<code>scripts: &#123; build: &quot;cross-env NODE_ENV=prod webpack --config build/webpack.config.js&quot; &#125;</code>。</li>
<li>html-webpack-plugin：将打包后的 js 文件自动引入到 html 文件中。</li>
<li>webpack-dev-server：本地开启一个 http 服务，可配置端口、热更新等。</li>
<li>clean-webpack-plugin：每次打包前先处理掉之前的 dist 目录。</li>
<li>postcss-loader：补全浏览器前缀、压缩 CSS 等的 css 编译工具。</li>
</ul>
</li>
</ul>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化目录：npm install webpack webpack-cli -D</span></span><br><span class="line"><span class="title class_">WebTest</span></span><br><span class="line">  ├── app              <span class="comment">// 工作目录：源文件</span></span><br><span class="line">  │   ├── main.<span class="property">js</span></span><br><span class="line">  │   └── hello.<span class="property">js</span></span><br><span class="line">  │</span><br><span class="line">  ├── dist            <span class="comment">// 目标目录：打包生成的 js 文件</span></span><br><span class="line">  │   └── index.<span class="property">html</span></span><br><span class="line">  │</span><br><span class="line">  ├── node_moudles</span><br><span class="line">  └── package.<span class="property">json</span></span><br><span class="line"></span><br><span class="line">cd <span class="title class_">WebTest</span></span><br><span class="line">cnpm install webpack webpack-cli -D</span><br><span class="line">cnpm init       <span class="comment">// 新建 package.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">div id=<span class="string">&quot;app&quot;</span></span><br><span class="line">script src=<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.js</span></span><br><span class="line">moudle.<span class="property">exports</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="built_in">require</span>(<span class="string">&quot;./hello.js&quot;</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="title function_">appendChild</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包执行</span></span><br><span class="line">webpack app/main.<span class="property">js</span> dist/bundle.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><blockquote>
<p>项目根目录新建 webpack.config.js 文件并配置选项，然后在终端执行 webpack 就会被自动引用。项目开发时可以创建多个配置文件：webpack.dev.config.js、webpack.pub.config.js 分别用于开发和生产环境。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: **dirname + <span class="string">&#x27;/app/main.js&#x27;</span>, <span class="comment">// 唯一入口文件：**dirname 绝对路径</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,         <span class="comment">// 输出文件名</span></span><br><span class="line">      <span class="attr">path</span>: **dirname + <span class="string">&quot;/dist&quot;</span>,     <span class="comment">// 输出文件存放地址</span></span><br><span class="line">      <span class="comment">// path: path.resolve(**dirname, &#x27;dist&#x27;)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">              <span class="attr">use</span>: [&#123;</span><br><span class="line">                  <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                  <span class="comment">// loader: &#x27;url-loader&#x27;,</span></span><br><span class="line">                  <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="comment">// 原文件名_哈希值.后缀</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash].[ext]&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 打包目录</span></span><br><span class="line">                    <span class="attr">outputPath</span>: <span class="string">&#x27;images/&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 超出 10kb 则不处理</span></span><br><span class="line">                    limit : <span class="number">10</span> * <span class="number">1024</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">// css-loader 将多个 css 文件整合到一个文件</span></span><br><span class="line">              <span class="comment">// style-loader 把整合的 css 部分挂载到 head</span></span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.(sa|sc|c)ss$/</span>,</span><br><span class="line">              <span class="attr">use</span>: [</span><br><span class="line">                  <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                  <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line">              ],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">                      [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span> &#125;]</span><br><span class="line">                  ]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json：配置快捷执行方法，--config 指定配置文件</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack --config webpack.dev.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pub&quot;</span>:<span class="string">&quot;webpack --config webpack.pub.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;webpack-dev-server --inline&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">npx webpack --config webpack.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><ul>
<li><strong>配置 Babel</strong><ul>
<li>功能：将 ES6、jsx 等语法编译为浏览器能够运行的 js</li>
<li>配置：webpack.config.js 或单独的 .babelrc 文件（webpack 会自动调用）</li>
</ul>
</li>
<li><strong>生成 Source Maps</strong>：有时打包后文件出错但不容易找到代码位置，而通过配置 devtool 选项后，webpack 就可以在打包时生成 source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高和更容易调试。可选的四种配置如下：<ul>
<li>source-map：完整且功能完全的单独文件，但会减慢打包速度。</li>
<li>cheap-module-source-map：不带列映射，只能对应到具体的行。</li>
<li>eval-source-map：不影响速度且完整，但有隐患，可开发不可生产阶段。</li>
<li>cheap-module-eval-source-map：生成 Source Map 最快并且和 js 同行，不利于调试，推荐在大型项目考虑时间成本时使用。</li>
</ul>
</li>
<li><strong>构建本地服务器</strong>：Webpack 提供一个可选的本地开发服务器 webpack-dev-server，它基于 Node.js 构建而且可以实现浏览器监听代码修改并自动刷新等效果，配置前需要通过 npm 安装它作为项目依赖。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: **dirname + <span class="string">&quot;/app/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(**dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span>,     <span class="comment">// 加载页面的所在目录</span></span><br><span class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,  <span class="comment">// 不跳转</span></span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>,              <span class="comment">// 实时刷新</span></span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,                 <span class="comment">// 热更新，即不刷新浏览器的前提下刷新页面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">npm run server</span><br></pre></td></tr></table></figure>


<h2 id="脚手架工具"><a href="#脚手架工具" class="headerlink" title="脚手架工具"></a>脚手架工具</h2><blockquote>
<p>用来创建项目基础结构、提供项目规范和约定，主要分为通用型和专用型两类。主要工作过程是通过命令行交互询问用户问题，然后根据用户回答的结果生成文件。</p>
</blockquote>
<h3 id="原生创建"><a href="#原生创建" class="headerlink" title="原生创建"></a>原生创建</h3><blockquote>
<p>通过命令行工具启动一个程序，在命令行交互中获取用户输入，然后创建对应的代码文件。下面通过原始方式来创建一个极简的脚手架工具。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、初始化目录、安装模板语法和命令行交互插件</span></span><br><span class="line">mkdir mycli &amp;&amp; npm init -y</span><br><span class="line">npm install ejs inquirer</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、代码修改</span></span><br><span class="line"><span class="comment">// mycli/package.json: 新增代码 &quot;bin&quot;: &quot;cli.js&quot; 指定入口文件</span></span><br><span class="line"><span class="comment">// cjs.js: 脚本命令代码添加首行文件头 #!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、创建模板文件：templete/index.html：&lt;title&gt;&lt;%= name %&gt;&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、编辑脚手架逻辑文件：cjs.js</span></span><br><span class="line">inquirer.<span class="title function_">prompt</span>([&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Project Name:&#x27;</span></span><br><span class="line">&#125;]).<span class="title function_">then</span>(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = path.<span class="title function_">join</span>(_darname, <span class="string">&#x27;templetes&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> dist = process.<span class="title function_">cwd</span>()</span><br><span class="line">    fs.<span class="title function_">readdir</span>(temp, <span class="function">(<span class="params">err, files</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">        files.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">            ejs.<span class="title function_">renderFile</span>(path.<span class="title function_">join</span>(temp, file), answer, </span><br><span class="line">            <span class="function">(<span class="params">err, result</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">                fs.<span class="title function_">writeFileSync</span>(path.<span class="title function_">join</span>(dist, file), result)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、挂载、卸载</span></span><br><span class="line">npm link         <span class="comment">// 全局挂载后就可以使用 mycli 创建项目文件了</span></span><br><span class="line">npm unlink       <span class="comment">// 卸载命令行</span></span><br></pre></td></tr></table></figure>


<h3 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h3><blockquote>
<p>通用型脚手架工具，主要包括命令行管理工具 yo、生成器 generator。不同的生成器针对 app、小程序等不同项目，使用时安装 generator 并通过 yo 运行生成项目结构。</p>
</blockquote>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、基本使用</span></span><br><span class="line">npm install -g yo generator-webapp generator-node</span><br><span class="line">yo webapp || yo node</span><br><span class="line">npm run start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、自定义定制</span></span><br><span class="line">mkdir generator-sample        <span class="comment">// 新建 generator-[name]</span></span><br><span class="line">npm init -y                   <span class="comment">// -y 略过问答而使用默认值</span></span><br><span class="line">npm install yeoman-generator  <span class="comment">// 安装生成器基类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generators/app/index.js：新建入口文件并编辑</span></span><br><span class="line"><span class="keyword">const</span> yeoman = <span class="built_in">require</span>(<span class="string">&#x27;yeoman-generator&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    prompting () &#123;  <span class="comment">// 命令行交互</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">prompt</span>([&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;Your Project Name:&#x27;</span>,</span><br><span class="line">            <span class="attr">default</span>: <span class="variable language_">this</span>.<span class="property">appname</span></span><br><span class="line">        &#125;]).<span class="title function_">then</span>(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">answer</span> = answer;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; </span><br><span class="line">    writing () &#123;   <span class="comment">// 文件写入</span></span><br><span class="line">        <span class="keyword">const</span> temp = <span class="variable language_">this</span>.<span class="title function_">templetePath</span>(<span class="string">&#x27;temp.txt&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> output = <span class="variable language_">this</span>.<span class="title function_">destinationPath</span>(<span class="string">&quot;out.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>.<span class="property">answer</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fs</span>.<span class="title function_">copyTpl</span>(temp, output, context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载命令</span></span><br><span class="line">npm link   <span class="comment">// 将 generator-sample 挂载为全局命令</span></span><br><span class="line">npm config get prefix   <span class="comment">// 查找 npm 全局目录命令</span></span><br><span class="line">yo sample     <span class="comment">// 挂载成功后用来在新目录生成文件内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、创建 Vue 脚手架</span></span><br><span class="line">mkdir generator-vue</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模版：为了方便可以将 Vue 空项目代码复制到 generators/app/templates</span></span><br><span class="line"><span class="comment">// templates\public\index.html：不需要替换转义时可用两个 %% 屏蔽，重写时会跳过</span></span><br><span class="line"><span class="comment">// &lt;title&gt;&lt;%= name %&gt;&lt;/title&gt;  --&gt; &lt;title&gt;&lt;%%= name %%&gt;&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generators/app/index.js</span></span><br><span class="line"><span class="keyword">const</span> yeoman = <span class="built_in">require</span>(<span class="string">&#x27;yeoman-generator&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">vueCli</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Generator</span> &#123;</span><br><span class="line">    prompting () &#123; &#125;</span><br><span class="line">    writing () &#123; </span><br><span class="line">        <span class="keyword">const</span> templetes = [</span><br><span class="line">            <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;src/assets/logo.png&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;src/compontents/Home.vue&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;src/router/index.js&#x27;</span>,</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">        templetes.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">fs</span>.<span class="title function_">copyTpl</span>(</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">templetePath</span>(item), </span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">destinationPath</span>(item)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">answer</span></span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>


<h1 id="四、版本管理-Git"><a href="#四、版本管理-Git" class="headerlink" title="四、版本管理 Git"></a>四、版本管理 Git</h1><h2 id="Git-和-Github-的关系"><a href="#Git-和-Github-的关系" class="headerlink" title="Git 和 Github 的关系"></a>Git 和 Github 的关系</h2><ol>
<li>Git：指定了 remote 链接和用户信息（用户名+邮箱）之后，git 可以帮你将提交过到你本地分支的代码 push 到远程的 git 仓库（任意提供了 git 托管服务的服务器上都可以，包括你自己建的服务器   或者  GitHub 等网站提供的服务器）或者将远程仓库的代码 fetch 到本地。</li>
<li>Github：只是一个提供存储空间的服务器，用来存储 git 仓库。当然现在 Github 已经由一个存放 git 仓库的网站空间发展为了一个开源社区（不只具有存储 git 仓库的功能了），你可以参与别人的开源项目，也可以让别人参与你的开源项目。</li>
</ol>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2>  <div style="text-indent: 2em">开发者在自己的机器上更新服务器上的最新代码，然后根据需要创建分支，在该分支上提交本地修改的代码到远程仓库并通知主开发者合并代码。如果主开发者发现代码有冲突则让开发者修改后重新提交，没有冲突则合并代码。注意本地的 .git文件是指本地仓库，.git目录下存放着所有文件的版本和关联信息但默认隐藏。开发流程图如下</div>

  <div align="center">
    <img src="/images/web/git_work.png" alt="工作流程图" width="100%">
  </div>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2>  <div align="center">
    <img src="/images/web/git_order.png" alt="常用命令图" width="100%">
  </div>


<h2 id="基础配置-1"><a href="#基础配置-1" class="headerlink" title="基础配置"></a>基础配置</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> --list         <span class="comment">//查看全局配置</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;chuanggefighting&quot;</span>    <span class="comment">//设置用户名</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&quot;17621538916@163.com&quot;</span>    <span class="comment">//设置邮箱</span></span><br></pre></td></tr></table></figure>


<h2 id="ssh-密钥配置"><a href="#ssh-密钥配置" class="headerlink" title="ssh 密钥配置"></a>ssh 密钥配置</h2><div style="text-indent: 2em">Git使用https协议，每次pull/push都要输入密码比较麻烦，而使用git协议后使用ssh密钥，这样可以省去每次都输密码。配置步骤如下：</div>

<ol>
<li>检测 SSH keys 是否存在：<code>cd ~/.ssh</code>。</li>
<li>创建 ssh key(生成密钥对)：<code>ssh-keygen -t rsa -C &quot;17621538916@163.com&quot;</code>：此时会提示自定义名称和 push 时的密码 (不是 git 登录密码), 一般推荐略过(直接三个回车), 如果看到成功保存信息则说明如果创建成功。</li>
<li>添加公钥到 github 等个人的远程仓库。</li>
<li>查看生成的公钥：<code>cat ~/.ssh/id_rsa.pub</code>。</li>
<li>登陆 github：点击头像、Settings、左栏点击 SSH and GPG keys、点击 New SSH key、复制上面的公钥内容并粘贴入”Key”，自定义 title、点击 Add key。</li>
<li>测试 SSH 的连接：<code>ssh -T git@github.com</code>。</li>
<li>输入 yes 后可看到信息。</li>
</ol>
<h2 id="代码提交命令"><a href="#代码提交命令" class="headerlink" title="代码提交命令"></a>代码提交命令</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载远程代码</span></span><br><span class="line">git clone url              <span class="comment">// 拉取远程主分支代码到本地</span></span><br><span class="line">git clone -b dev url       <span class="comment">// 拉取指定分支代码到本地</span></span><br><span class="line">git remote -v              <span class="comment">// 查询当前远程的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拉取远程代码并合并到本地</span></span><br><span class="line">git stash                  <span class="comment">// 保存本地修改 stash@&#123;0&#125;</span></span><br><span class="line">git stash save <span class="string">&quot;更新&quot;</span>       <span class="comment">// 存储时添加备注，方便查找</span></span><br><span class="line">git pull                   <span class="comment">// 拉取远程代码</span></span><br><span class="line">git checkout dev           <span class="comment">// 切换到本地其它分支</span></span><br><span class="line">git stash list             <span class="comment">// 查看所有的本地修改记录</span></span><br><span class="line">git stash pop              <span class="comment">// 合并最新修改到本地并删除</span></span><br><span class="line">git stash apply            <span class="comment">// 合并最新修改到本地但不删除</span></span><br><span class="line">git stash clear            <span class="comment">// 清空 stash</span></span><br><span class="line">git stash drop stash@&#123;$n&#125;  <span class="comment">// 删除某个 stash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推送本地修改</span></span><br><span class="line">git status</span><br><span class="line">git add .       <span class="comment">// 指定需要提交到本地仓库的文件</span></span><br><span class="line">git status</span><br><span class="line">git commit -m <span class="string">&quot;create dev&quot;</span>  <span class="comment">// 提交代码到本地</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建分支</span></span><br><span class="line">git branch                 <span class="comment">// 查看本地分支</span></span><br><span class="line">git checkout -b dev        <span class="comment">// 新建并切换到该分支</span></span><br><span class="line">git push origin dev        <span class="comment">// 推送到远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到本地不存在的远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line">git checkout -b dev remotes/origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除分支：强制删除 -D</span></span><br><span class="line">git branch -d dev</span><br><span class="line">git branch -r -d origin/dev</span><br><span class="line">git push origin :dev           <span class="comment">// 远程分支删除的简单方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并分支到当前分支</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge dev         <span class="comment">// 每次都产生一个新节点，提交记录会分开显示</span></span><br><span class="line">git rebase dev   <span class="comment">// 不产生新节点，提交记录融合为一个清晰的线性提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// master 分支代码合并到某分支</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git checkout dev</span><br><span class="line">git merge master</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment">// git pull --rebase 代码更整洁，推荐使用</span></span><br><span class="line">git pull = git fetch + git merge</span><br><span class="line">git pull --rebase = git fetch + git rebase</span><br><span class="line"><span class="comment">// 指定某个新分支在执行 git pull 时默认使用 rebase 方式</span></span><br><span class="line">git config branch.<span class="property">dev</span>.<span class="property">rebase</span> <span class="literal">true</span></span><br><span class="line">git config --<span class="variable language_">global</span> branch.<span class="property">autosetuprebase</span> always</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它</span></span><br><span class="line">git fetch --all       <span class="comment">// 更新远程修改但不会 merge</span></span><br><span class="line">git reset --hard orgin/master  <span class="comment">// 强制更新(慎用)</span></span><br><span class="line">git remote set-url origin url  <span class="comment">// 修改远程仓库地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// gitignore 不生效的解决方案</span></span><br><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span>  <span class="comment">// windows 命令</span></span><br><span class="line">git commit -m <span class="string">&quot;update .gitignore&quot;</span>  <span class="comment">// mac：需要双引号</span></span><br></pre></td></tr></table></figure>


<h2 id="把个人网页挂到-Github"><a href="#把个人网页挂到-Github" class="headerlink" title="把个人网页挂到 Github"></a>把个人网页挂到 Github</h2><ol>
<li><strong>Github 上建立仓库，比如 resume</strong>。</li>
<li><strong>进入新建仓库并选择 settings 进行仓库设置，滚动到页面底部 “Github Pages” 部分</strong>。<br>* Source -* master branch，保存后就会自动生成网址。<br>* 生成网址拼接文件路径后访问：chuanggefighting.github.io&#x2F;resume&#x2F;dist&#x2F;index.html。</li>
<li><strong>将仓库代码克隆到本地</strong>：删除除了 .git 以外的其他文件，然后通过以下命令测试。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git add *               <span class="comment">// 添加到暂存区</span></span><br><span class="line">git commit -m <span class="string">&#x27;del&#x27;</span>     <span class="comment">// 上传到本地仓库</span></span><br><span class="line">git push origin master  <span class="comment">// 上传到远程仓库</span></span><br></pre></td></tr></table></figure></li>
<li><strong>更新个人代码到远程仓库</strong></li>
</ol>
]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>web 开发须知</title>
    <url>/2019/02/17/2-1-web%E5%BC%80%E5%8F%91%E9%A1%BB%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="一、技术网站"><a href="#一、技术网站" class="headerlink" title="一、技术网站"></a>一、技术网站</h1><blockquote>
<p>web 开发就是呈现用户可理解的界面并响应用户操作。wget 扒取网站源码：<code>brew install wget、wget -c -r -np -nc -L -k -p http://xxx.com</code>。</p>
</blockquote>
<ul>
<li>技术学习<ul>
<li><a href="https://www.docschina.org/">印记中文</a>：中文教程  </li>
<li><a href="http://tool.lu/">在线工具</a>：代码处理工具合集</li>
<li><a href="https://gitee.com/">码云</a>：代码托管中文网站</li>
<li><a href="https://github.com/">Github</a>：代码托管全球网站  </li>
<li><a href="https://stackoverflow.com/">Stack Overflow</a>：技术问答社区</li>
<li><a href="http://tool.chinaz.com/tools/openweb.aspx/">站长工具</a>：代码整理和测试</li>
<li><a href="https://animista.net/">CSS 动画</a>：CSS 动画  </li>
<li><a href="https://carbon.now.sh/">Carbon</a>：图片生成器</li>
<li><a href="https://www.favicon-generator.org/">Faviconer</a>：图标生成器 </li>
<li><a href="https://www.processon.com/">Slides</a>：WebPPT 编辑器</li>
<li><a href="https://learn-anything.xyz/">Learn Anything</a>：思维导图</li>
</ul>
</li>
<li>网站搭建<ul>
<li><strong>WordPress</strong>：开源的建站系统，从个人博客到企业电商平台都可以轻松实现。</li>
<li><strong>Docsify、Dumi</strong>：简单的文档站点生成器，区别是 Dumi 专为组件开发场景而生。</li>
<li><strong>Img Cook</strong>：阿里团队开发的页面生成器，通过人工智能根据设计稿一键生成代码。</li>
<li><strong>Ant Design Landing</strong>：蚂蚁开发的网站首页生成器，方便我们快速上线网站首页。</li>
<li><strong>腾讯兔小巢</strong>：腾讯提供的免费专业的产品反馈平台，可以为我们的产品一键生成一个专属的反馈论坛，从而省去了自己搭建社区的麻烦。</li>
<li><strong>百度统计</strong>：超级好用的中文网站分析平台，支持网站、APP、小程序、线下零售等各种场景，轻松满足我们网站的数据自动采集、统计和分析需求。</li>
<li><strong>One Nav</strong>：基于开源的 Web Stack 开发，提供了多引擎搜索、新闻、热榜等功能。</li>
<li><strong>Discuz</strong>：兼容 PC 端、移动端、微信生态的开源社区软件，无需开发即可拥有包括文章、视频、评论、点赞、关注、知识付费等的个人社区。</li>
<li><strong>编程主页</strong>：鱼皮开发的程序员精简主页，感兴趣的同学可以把代码拷到本地修改。</li>
<li><strong>后台管理</strong>：vue-element-admin 、react-admin 、go-admin 等都是开箱即用的模版，能省去重复搭建管理后台的麻烦。</li>
</ul>
</li>
</ul>
<h1 id="二、页面渲染"><a href="#二、页面渲染" class="headerlink" title="二、页面渲染"></a>二、页面渲染</h1><ul>
<li>架构选择前一定要考虑到客户端和服务器的环境差异，站在更高层面考虑。客户端是上网时使用的手机、电脑等机器，而服务器是性能较强大的机器，可保持长时间运行并保证可随时访问服务器上文件。</li>
<li>对于需要做 <strong>SEO</strong> 的项目，如果是一个后台应用，则只要首页做一些静态内容宣导即可。如果是内容型网站，那么可以考虑专门做一些页面给搜索引擎。</li>
<li>对于<strong>前端渲染首屏</strong>问题，我们可以采用分拆打包 (路由库)、交互优化 (加载动画)、部分同构 (使用同构把菜单和页面骨架渲染出来) 等一些方式合理利用同构。</li>
</ul>
<h2 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h2><ul>
<li><strong>实现原理</strong>：浏览器异步请求服务器获取数据、浏览器拼接数据和模板文件，将拼接好的 HTML 字符串直接解析并渲染到页面。</li>
<li><strong>优势</strong>：前后端分离设计，浏览器负责页面逻辑和渲染，服务器只需要提供接口而减少了服务器的压力。按需加载模式有更好的用户体验，传统模式通过服务器加载新页面。</li>
<li><strong>问题</strong>：SEO 只会从 HTML 中抓取数据而导致前端页面无法被抓取。用户首次加载页面时需要下载框架和应用程序的代码后再渲染页面，页面加载时间较长而可能导致白屏问题。</li>
</ul>
<h2 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h2><ul>
<li><strong>实现原理</strong>：构建阶段简单生成匹配特定路由的静态 html，用来改善少数营销页面的 SEO 而无需使用 web 服务器实时动态编译 HTML。</li>
<li><strong>优缺点</strong>：设置简单，并且可以将前端页面作为一个完全静态的站点。但是搜索引擎不能抓取到 网页内容和结构，而且不能插入动态数据。</li>
</ul>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><ul>
<li><strong>实现原理</strong>：ASP、Java、PHP 等传统渲染机制，浏览器将服务端拼接生成的 html 字符串只是进行解析和渲染。</li>
<li><strong>优点</strong>：更好的 SEO 而使搜索引擎爬虫可以抓取渲染好的页面、更少的客户端电量消耗、更快的内容到达时间 (服务端返回渲染好的 HTML)。</li>
<li><strong>缺点</strong>：不利于前后端分离而开发效率低、更多的服务器端负载 (CPU 和内存资源)、更复杂的开发和部署 (兼容 Node 执行环境)。</li>
</ul>
<h2 id="同构渲染"><a href="#同构渲染" class="headerlink" title="同构渲染"></a>同构渲染</h2><ul>
<li><strong>实现原理</strong>：同构是指代码程序在服务器和客户端都可以运行 (兼容 Node.js)，浏览器将服务端拼接生成的 html 字符串插入到指定节点后渲染页面。</li>
<li><strong>优点</strong>：提高首屏渲染性能而避免白屏问题、对搜索引擎友好而有助于 SEO、前后端共用一套 Node.js 代码而节省开发时间。</li>
<li><strong>缺点</strong>：内存溢出、异步操作、大量计算和个性化缓存等性能、服务器端和浏览器的环境差异、复杂类型无法转义为字符串形式发送给前端。</li>
</ul>
<h1 id="三、浏览器渲染"><a href="#三、浏览器渲染" class="headerlink" title="三、浏览器渲染"></a>三、浏览器渲染</h1><blockquote>
<p>浏览器是 Html 解析和展示页面的工具，主要功能是将用户选择的 web 资源呈现出来。它需要从服务器请求资源并将其显示在浏览器窗口中，资源格式一般有 HTML、PDF、image 等。渲染引擎是用户直接相关并呈现用户所需页面的组成部分。</p>
</blockquote>
<h2 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h2><blockquote>
<p>浏览器的抽象分层结构图如下：</p>
</blockquote>
<ul>
<li><strong>用户界面</strong>：用于和用户进行交互的功能组件，如地址栏、返回、前进按钮等。</li>
<li><strong>浏览器引擎</strong>：用于查询和操作渲染引擎的界面。</li>
<li><strong>渲染引擎</strong>：负责显示请求的内容，如果请求 HTML 则它解析 HTML、CSS 并显示。</li>
<li><strong>网络</strong>：负责处理网络相关的事务，如 HTTP 请求等。</li>
<li><strong>UI 后端</strong>：负责绘制提示框等浏览器组件，底层使用操作系统的用户接口。</li>
<li><strong>Js 解释器</strong>：负责解析和执行 JavaScript 代码。</li>
<li><strong>数据存储</strong>：负责持久存储 cookie 和缓存等应用数据。</li>
</ul>
  <div align="center">
    <img src="/images/web/browserCom.png" alt="浏览器结构" width="100%">
  </div>


<h2 id="多进程机制"><a href="#多进程机制" class="headerlink" title="多进程机制"></a>多进程机制</h2><blockquote>
<p>浏览器是多进程的，每打开一个 Tab 页就相当于创建了一个独立的进程，单进程的话则会存在一个页面崩溃而影响整个浏览器。浏览器由于系统给它的进程分配了内存等资源而可以运行，当前进程里并发运行的线程会共享有限的内存地址空间。</p>
</blockquote>
<ul>
<li>进程和线程<ul>
<li><strong>CPU</strong>：工厂，是执行计算任务的计算机核心。</li>
<li><strong>进程</strong>：工厂车间，是资源分配和独立运行的 CPU 最小单位，用来完成一个任务。</li>
<li><strong>线程</strong>：车间工人，是可以独立运行的 CPU 最小单位，协同其它线程完成一个任务。</li>
</ul>
</li>
<li>模式类型<ul>
<li><strong>单线程</strong>：所有任务在主线程中排队执行。</li>
<li><strong>多线程</strong>：任务在各个线程中独立执行而互不影响，同一进程下的所有线程共享变量。</li>
<li><strong>多进程</strong>：多任务可以同时执行，各进程的变量互不影响，但消耗更多的内存等资源。</li>
<li><strong>协调机制</strong>：防止进程之间、线程之间产生冲突，允许进程之间、线程之间共享资源。</li>
</ul>
</li>
<li>多进程的优势<ul>
<li>多进程充分利用多核优势。</li>
<li>避免单个页面或插件崩溃而影响整个浏览器。</li>
<li>方便使用沙盒模型隔离插件等进程，提高浏览器稳定性。</li>
</ul>
</li>
<li>内部进程<ul>
<li><strong>Browser 进程</strong>：浏览器的主进程 (负责协调和主控)，只有一个。主要功能为绘制渲染进程的 Bitmap、浏览器界面的显示和操作、管理页面进程和网络资源。</li>
<li><strong>Render 进程</strong>：浏览器内核，内部是多线程的，默认每个 Tab 页面对应一个进程并互不影响。主要负责页面渲染、脚本执行、事件处理等。</li>
<li><strong>第三方插件进程</strong>：每种类型的插件对应一个进程。</li>
<li><strong>GPU 进程</strong>：用于 3D 绘制等，最多一个。</li>
</ul>
</li>
<li><strong>内核的多线程</strong>：为了防止出现同时修改元素属性和渲染界面时可能导致的渲染问题，浏览器设置 GUI 渲染线程和 JS 引擎线程为互斥关系，GUI 线程会在 JS 引擎执行时被挂起并保存到队列中等待执行，所以 JS 可能阻塞渲染。<ul>
<li><strong>GUI 渲染线程</strong>：负责渲染浏览器界面，解析 HTML、CSS 并构建 DOM、RenderObject 树等。当界面需要重绘或某种操作引发回流时就会执行。</li>
<li><strong>JS 引擎线程</strong>：即 JS 内核，负责解析执行 JS 脚本代码。一直通过事件循环机制查看并执行任务队列中的任务。</li>
<li><strong>事件触发线程</strong>：浏览器中用来控制事件循环的线程，该线程会将符合触发条件的事件添加到任务队列的队尾等待处理。</li>
<li><strong>定时触发器线程</strong>：setInterval、setTimeout 所在线程，用来在计时完毕后添加到事件队列中等待 JS 引擎空闲时执行。</li>
<li><strong>异步 http 请求线程</strong>：XMLHttpRequest 连接后是通过浏览器新开一个线程请求。当检测到状态变更时，如果设置了回调函数则异步线程就产生状态变更事件，将回调函数再放入事件队列中等待 Js 引擎执行。</li>
</ul>
</li>
<li><strong>内核和 Browser 的通信</strong><ul>
<li>1、Browser 进程收到用户请求，通过网络下载或本地加载获取页面内容。</li>
<li>2、Render 进程的接口收到 Browser 进程传递的请求后交给内部的 GUI 渲染线程执行并返回结果。渲染过程中可能存在：向 Browser 进程获取资源、需要 GPU 进程帮助渲染、JS 线程操作 DOM 导致回流并重绘。</li>
<li>3、Browser 进程接收到结果并将结果绘制出来。</li>
</ul>
</li>
</ul>
<h2 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h2><blockquote>
<p>即渲染引擎工作流，为了更好的用户体验，渲染引擎会尽可能早的将内容呈现到屏幕上，并不会等到所有 html 解析完成之后再去构建和布局 render tree。它是解析完一部分内容就显示一部分内容，同时可能还在网络下载其余内容。相关事件：DOM 树构建完成时触发 DOMContentLoaded 事件，页面加载完成时触发 load 事件。</p>
</blockquote>
<ol>
<li><strong>浏览器解析 url</strong><br>1. 用户输入 URL，浏览器解析后获取主机名和端口号。<br>2. 通过 DNS 查询将主机名转换成服务器 IP 的地址。<br>3. 浏览器建立一条与目标服务器的 TCP 连接（三次握手）。<br>4. 浏览器向服务器发送一条 HTTP 请求报文并获取服务器响应。<br>5. 浏览器关闭连接并重复请求至资源全部加载后，解析文档内容并渲染到页面。<br>6. 通过四次挥手关闭连接，解析结束。</li>
<li><strong>浏览器渲染</strong><br>1. 解析 HTML 标记并构建 DOM 树。<br>2. 解析 CSS 标记并构建 CSSOM 树。<br>3. 根据 DOM、CSSOM 构建渲染树，节点是包含颜色等属性的渲染对象。<br>4. 布局：根据渲染树进行布局，计算各个节点在页面的位置、大小等信息。<br>5. 绘制：调用渲染对象的 paint 方法，将它们的内容显示在屏幕并绘制基础组件。</li>
<li><strong>资源下载问题</strong><br>* 图片下载不会产生阻塞。<br>* css 下载时会阻塞渲染，但带有 media 属性除外：css 由单独的下载线程异步下载，加载时不会阻塞 DOM 树解析但会阻塞 render 树渲染。<br>* 遇到 script 标签时，DOM 构建停止直到 js 脚本下载并执行完毕，此时浏览器一般会下载其他资源但不会解析。如果 js 中有对 CSSOM 的操作，还会先确保 CSSOM 已经被下载并构建。</li>
<li><strong>重绘重排</strong><br>* 重绘：简单外观的改变而不会影响布局，比如 outline、visibility、color。<br>* 回流：布局或几何属性改变而重新计算布局，大部分都会会导致页面的重新渲染。<br>* 关系：重绘不一定会引发回流，回流必定会发生重绘，它们都会重新生成渲染树。</li>
</ol>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><ul>
<li><strong>CSS</strong><ul>
<li>CSS 硬件加速。</li>
<li>避免使用 table 布局。</li>
<li>使用 transform 代替 top。</li>
<li>尽可能在 DOM 树的最末端改变 class。</li>
<li>避免使用 CSS 表达式，可能会引发回流。</li>
<li>避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。</li>
<li>使用 visibility 替换 display: none，前者引起重绘，后者引发回流。</li>
<li>将动画效果应用到 position: absolute&#x2F;fixed 的元素，避免影响其他布局。</li>
</ul>
</li>
<li><strong>Javascript</strong><ul>
<li>避免频繁操作样式，修改 class 最好。</li>
<li>避免频繁操作 DOM，合并多次修改为一次。</li>
<li>避免频繁读取会引发回流&#x2F;重绘的属性，将结果缓存。</li>
<li>对具有复杂动画的元素使用绝对定位，使它脱离文档流。</li>
</ul>
</li>
</ul>
<h1 id="四、JS-运行机制"><a href="#四、JS-运行机制" class="headerlink" title="四、JS 运行机制"></a>四、JS 运行机制</h1><h2 id="JS-引擎"><a href="#JS-引擎" class="headerlink" title="JS 引擎"></a>JS 引擎</h2><ul>
<li><strong>JS 引擎</strong>：能够读懂 JS 代码并能准确运行出结果的一段程序。</li>
<li><strong>V8 引擎</strong>：运行前将 JS 编译为本地的机器码并执行，主要用来提高性能。</li>
<li>对于 Java、C++、C 等静态语言处理上述事情的叫 <strong>编译器</strong>，而对于 JS 这样的动态语言则叫做 <strong>解释器</strong>。区别：编译器是将源代码编译为另外一种代码 (比如机器码或字节码)，解释器则是直接解析并将代码运行结果输出。</li>
</ul>
<h2 id="JS-线程"><a href="#JS-线程" class="headerlink" title="JS 线程"></a>JS 线程</h2><ul>
<li><strong>JS 单线程</strong>：同一时间只能执行一个任务而其他任务需要排队等待执行，这是因为 JS 用来和用户交互，而多线程同时操作可能会带来复杂的同步问题。浏览器中负责解释和执行代码的 JS 引擎线程称为<strong>主线程</strong>，处理耗时异步任务的其它线程称为<strong>工作线程</strong>。</li>
<li><strong>WebWorker</strong>：只属于某个页面而不会和其他页面的 Render 进程共享。Chrome Render 进程中可新建一个 Worker 线程。它是 HTML5 为了利用多核 CPU 的计算功能而允许 JS 脚本创建多个线程来处理耗时操作的新标准，但是 Worker 是 JS 引擎向浏览器申请开的子线程，它完全受主线程控制并且不能操作 DOM，所以并没有改变JS单线程的本质。</li>
<li><strong>SharedWorker</strong>：浏览器的所有页面共享。Chrome 可新建一个 SharedWorker 进程，但相同 JS 不论创建多少次也只会存在一个。</li>
</ul>
<h2 id="JS-任务"><a href="#JS-任务" class="headerlink" title="JS 任务"></a>JS 任务</h2><blockquote>
<p>所有同步任务都是在主线程上执行而形成一个执行栈，主线程解析异步操作后会将异步任务放到一个具有先进先出特点的任务队列，主线程将同步任务执行完之后会循环读取任务队列中的事件并放到执行栈执行 (这个过程叫事件循环)。</p>
</blockquote>
<ul>
<li><strong>同步任务</strong>：主线程的执行栈中排队执行的任务，类似银行排队办业务。</li>
<li><strong>异步任务</strong>：添加到任务列队中延迟执行的任务，类似餐厅点餐后等待。<ul>
<li><strong>宏任务</strong>：延时执行队列和普通消息队列等队列中的任务，主线程通过事件循环每次从队列中取出一个任务并执行，一个宏任务执行完之后会重新渲染页面。比如 script、setTimeout、setInterval、I&#x2F;O、UI render。</li>
<li><strong>微任务</strong>：宏任务中需要异步执行的所有任务，在主函数执行结束后和当前宏任务结束前全部执行，执行微任务过程中产生的微任务不会推迟到下个宏任务中执行。比如 Promise、async&#x2F;await、Object.observe、MutationObserver、process.nextTick。</li>
</ul>
</li>
<li><strong>常见异步任务</strong><ul>
<li><strong>onclick 等事件的销毁函数</strong>：当事件触发时，回调函数会被立即添加到任务队列中。由浏览器内核的 DOM Binding 模块处理。</li>
<li><strong>setInterval 等计时器</strong>：当定时器时间到，就把该事件放到 任务队列中 等待处理。由浏览器内核的 timer 模块进行延时处理。</li>
<li><strong>Ajax 请求</strong>：在网络请求完成返回之后，将回调函数添加到任务队列中。由浏览器内核的 network 模块处理。</li>
</ul>
</li>
</ul>
<h2 id="异步机制"><a href="#异步机制" class="headerlink" title="异步机制"></a>异步机制</h2><ol>
<li>JS 引擎线程首先将所有操作分为同步任务、异步宏任务、异步微任务，然后根据顺序依次执行：先同步任务后异步任务队列、先微任务后宏任务。</li>
<li>同步任务在主线程中会直接按顺序执行。异步任务则会被分发到任务队列，主线程空闲时读取队列任务，符合触发条件的会被分发到对应的工作线程执行并返回结果。</li>
<li>事件循环机制：主线程执行完所有同步任务之后空闲时，重复去任务队列中查看是否有可执行的异步任务，有则推入主进程的执行栈。<br>1. 执行一个宏任务（栈中没有就从事件队列中获取）。<br>2. 执行过程中如果遇到微任务，就将它添加到微任务的任务队列中。<br>3. 宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）。<br>4. 当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染。<br>5. 渲染完毕后，JS 线程继续接管，开始下一个宏任务（从任务队列中获取）。</li>
</ol>
  <div align="center">
    <img src="/images/web/js-run.png" alt="执行机制" width="100%">
  </div>


  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出结果：1、7、6、8、2、4、3、5、9、11、10、12</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>第一轮事件循环</strong><br>* 整体 script 作为第一个宏任务进入主线程，执行 console.log 输出 1<br>* setTimeout，其回调函数被分发到宏任务队列，记为 setTimeout1<br>* process.nextTick()，其回调函数被分发到微任务队列，记为 process1<br>* Promise、new Promise 直接执行输出 7。then 被分发到微任务队列，记为 then1<br>* 第二个 setTimeout，其回调函数被分发到宏任务队列，记为 setTimeout2<br>* 执行两个微任务 process1、then1 输出 6、8<br>* 输出结果：1、7、6、8</li>
<li><strong>第二轮事件循环</strong><br>* 从宏任务 setTimeout1 开始，输出 2<br>* process.nextTick()，同样将其分发到微任务队列，记为 process2<br>* new Promise 立即执行输出 4，then 也分发到微任务队列，记为 then2<br>* 执行两个微任务 process2、then2 输出 3、5<br>* 输出结果：2、4、3、5</li>
<li><strong>第三轮事件循环</strong><br>* 此时只剩下 setTimeout2，执行输出 9<br>* process.nextTick() 分发到微任务队列，记为 process3<br>* new Promise 直接执行输出 11，then 分发到微任务队列，记为 then3<br>* 执行两个微任务 process3、then3 输出 10、12<br>* 输出结果：9、11、10、12</li>
</ol>
<h1 id="五、项目开发规范"><a href="#五、项目开发规范" class="headerlink" title="五、项目开发规范"></a>五、项目开发规范</h1><h2 id="代码规范工具"><a href="#代码规范工具" class="headerlink" title="代码规范工具"></a>代码规范工具</h2><blockquote>
<p>EditorConfig 统一编辑器风格 (写代码前起作用)、Prettier 统一项目风格 (保存代码后起作用)，ESlint 实时检查代码。具体使用时可以体验区别：editorConfig、prettiter 空格分别设置为 4、2，则代码编辑时回车为 4 格，保存后变成 2 格。</p>
</blockquote>
<ul>
<li><strong>EditorConfig</strong>：用于实现跨编辑器开发项目时保持一致的代码风格。编辑器插件和项目根目录配置文件为 <code>EditorConfig for VS Code、.editorconfig</code>。</li>
<li><strong>Prettier</strong>：用于格式化文件而统一项目的代码风格。可以通过执行命令来批量格式化文件、也可以通过配置编辑器实现文件保存时自动格式化。插件和配置文件为 <code>Prettier-Code formatter、.prettierrc</code>。</li>
<li><strong>ESlint</strong>：js 代码静态分析工具，用于实时检查编写代码，并提供错误提示和自动修复功能。插件和配置文件为 <code>ESlint、.eslintrc</code>。</li>
<li><strong>StyleLint</strong>：css 代码静态分析工具。插件和配置文件为 <code>StyleLint、.stylelintrc</code></li>
<li><strong>lint</strong>：package.json scripts 增加配置来实现执行命令校验。缓存区代码一般需要校验。</li>
</ul>
  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .editorconfig</span></span><br><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span>                     <span class="comment"># 缩紧大小</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span>                     <span class="comment"># 编码格式</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf                    <span class="comment"># 换行符格式</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span>         <span class="comment"># 是否在文件最后插入一个空行</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span>     <span class="comment"># 是否删除行尾的空格</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.md]</span></span><br><span class="line"><span class="attr">max_line_length</span> = <span class="number">0</span>                 <span class="comment"># 强制在指定字符数之后换行</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">false</span>    <span class="comment"># md 会用尾空格表示换行，不自动移除</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> .prettierrc：npm install prettier -D</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&quot;all&quot;</span>,           <span class="regexp">//</span> 对象的最后一个属性末尾也添加 ,</span><br><span class="line">  <span class="string">&quot;tabWidth&quot;</span>: <span class="number">2</span>,                    <span class="regexp">//</span> 缩进大小</span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: false,                    <span class="regexp">//</span> 分号是否添加</span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: true,              <span class="regexp">//</span> 是否单引号</span><br><span class="line">  <span class="string">&quot;jsxSingleQuote&quot;</span>: true,           <span class="regexp">//</span> jsx 语法下是否单引号</span><br><span class="line">  <span class="string">&quot;endOfLine&quot;</span>: <span class="string">&quot;lf&quot;</span>,                <span class="regexp">//</span> 与 .editorconfig 保持一致设置</span><br><span class="line">  <span class="string">&quot;printWidth&quot;</span>: <span class="number">120</span>,                <span class="regexp">//</span> 单行代码最长字符长度，超过则换行</span><br><span class="line">  <span class="string">&quot;bracketSpacing&quot;</span>: true,           <span class="regexp">//</span> 对象中的括号之间打印空格</span><br><span class="line">  <span class="string">&quot;arrowParens&quot;</span>: <span class="string">&quot;always&quot;</span>           <span class="regexp">//</span> 箭头函数的参数都用括号包裹</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js：npm install eslint eslint-config-prettier -D</span></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  env: &#123; browser: <span class="literal">true</span>, es2020: <span class="literal">true</span>, node: <span class="literal">true</span> &#125;,</span><br><span class="line">  extends: [                     <span class="comment">// 下载插件的预设规则</span></span><br><span class="line">    <span class="string">&#x27;airbnb&#x27;</span></span><br><span class="line">    <span class="string">&#x27;prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier/@typescript-eslint&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier/react&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier/unicorn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:react/recommended&#x27;</span>, </span><br><span class="line">  ],  </span><br><span class="line">  parser: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaFeatures: &#123; jsx: <span class="literal">true</span> &#125;,</span><br><span class="line">    ecmaVersion: <span class="number">11</span>,</span><br><span class="line">    sourceType: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="string">&#x27;import/resolver&#x27;</span>: &#123;     <span class="comment">// .ts、.tsx 文件互相引用时不报错</span></span><br><span class="line">      node: &#123; extensions: [<span class="string">&#x27;.tsx&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;@typescript-eslint&#x27;</span>],   <span class="comment">// npm 安装后才能使用的插件</span></span><br><span class="line">  rules: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// .stylelintrc.js</span></span><br><span class="line"> <span class="comment">// npm i stylelint stylelint-config-standard stylelint-config-prettier -D</span></span><br><span class="line"> module.exports = &#123;</span><br><span class="line">   <span class="keyword">extends</span>: [<span class="string">&#x27;stylelint-config-standard&#x27;</span>, <span class="string">&#x27;stylelint-config-prettier&#x27;</span>],</span><br><span class="line">   rules: &#123;</span><br><span class="line">     <span class="string">&#x27;comment-empty-line-before&#x27;</span>: <span class="keyword">null</span>,</span><br><span class="line">     <span class="string">&#x27;declaration-empty-line-before&#x27;</span>: <span class="keyword">null</span>,</span><br><span class="line">     <span class="string">&#x27;function-name-case&#x27;</span>: <span class="string">&#x27;lower&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;no-descending-specificity&#x27;</span>: <span class="keyword">null</span>,</span><br><span class="line">     <span class="string">&#x27;no-invalid-double-slash-comments&#x27;</span>: <span class="keyword">null</span>,</span><br><span class="line">     <span class="string">&#x27;rule-empty-line-before&#x27;</span>: <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   ignoreFiles: [<span class="string">&#x27;node_modules/**/*&#x27;</span>, <span class="string">&#x27;build/**/*&#x27;</span>],</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// package.json：npm run lint-eslint 就会去检测 src 目录下文件</span></span><br><span class="line">scripts: &#123;</span><br><span class="line">   <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;npm run lint-eslint &amp;&amp; npm run lint-stylelint&quot;</span>,</span><br><span class="line">   <span class="string">&quot;lint-eslint&quot;</span>: <span class="string">&quot;eslint -c .eslintrc.js --ext .ts,.tsx,.js src&quot;</span>,</span><br><span class="line">   <span class="string">&quot;lint-stylelint&quot;</span>: <span class="string">&quot;stylelint --config .stylelintrc.js src/**/*.&#123;css,scss&#125;&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h2 id="BEM-命名规范"><a href="#BEM-命名规范" class="headerlink" title="BEM 命名规范"></a>BEM 命名规范</h2><blockquote>
<p><strong>块 block、元素 element、修饰符 modifier</strong>，是由俄罗斯搜索引擎团队 Yandex 提出的一种 css 命名方案。主要用于团队开发的大型项目统一类名规范，<strong>主要特点有</strong>：减少了命名冲突的可能性、增强了语义化 (包含模块路径和状态等信息)、提高了可复用性 (scss 等编写代码方便)、提升了 css 性能 (一类元素对应一个类名，减少了后代选择器的使用)。</p>
</blockquote>
  <figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BEM 命名约定</span></span><br><span class="line"><span class="selector-class">.block</span> &#123; &#125;              <span class="comment">// 模块类名</span></span><br><span class="line"><span class="selector-class">.block</span>**element &#123; &#125;     <span class="comment">// 模块中的元素类名</span></span><br><span class="line"><span class="selector-class">.block--modifier</span> &#123; &#125;    <span class="comment">// 不同状态、版本的模块类名</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c-row-age</span> &#123; &#125;          <span class="comment">// components/RowAge/index.js</span></span><br><span class="line"><span class="selector-class">.cc-addable-block</span> &#123; &#125;   <span class="comment">// components/common/AddableBlock/index.js</span></span><br><span class="line"><span class="selector-class">.cc-addable-block--disabled</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Element UI 命名</span></span><br><span class="line"><span class="selector-class">.el-input</span>,</span><br><span class="line"><span class="selector-class">.el-input</span>**inner &#123;  </span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.el-input</span><span class="selector-class">.is-focus</span> <span class="selector-class">.el-input</span>**inner &#123;  </span><br><span class="line">    <span class="attribute">border-color</span>: <span class="variable">$--input-focus-border</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.el-input</span>**<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.el-pagination--small</span> &#123;  </span><br><span class="line">    <span class="selector-class">.btn-prev</span>,  </span><br><span class="line">    <span class="selector-class">.btn-next</span>,  </span><br><span class="line">    <span class="selector-class">.el-pager</span> <span class="selector-tag">li</span> &#123;    </span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3px</span>;   </span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">22px</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="CSS-书写规范"><a href="#CSS-书写规范" class="headerlink" title="CSS 书写规范"></a>CSS 书写规范</h2><ul>
<li><strong>属性顺序</strong><ul>
<li>位置：position、top、z-index、display、float</li>
<li>大小：width、height、padding、margin</li>
<li>文字：font、color、line-height、text-align</li>
<li>背景：background、border</li>
<li>其他：animation、transition</li>
</ul>
</li>
<li><strong>选择器命名</strong><ul>
<li>长名称或词组可以使用中横线 (.is-active)</li>
<li>不建议使用下划线 (JS 变量命名是用_)</li>
<li>尽量使用语义化、小写的英文单词</li>
</ul>
</li>
<li><strong>常用命名</strong><ul>
<li>样式文件：base.css、master.css、module.css、layout.css</li>
<li>结构：container、header、content、main、footer、column、wrapper</li>
<li>导航：nav、mainnav、topnav、sidebar、menu、submenu、title、summary</li>
<li>功能：logo、banner、login、loginbar、register、search、shop、title、status、btn、scroll、tab、list、tips、icon、note、guild、service</li>
</ul>
</li>
</ul>
<p>  　　</p>
<h2 id="Restful-接口"><a href="#Restful-接口" class="headerlink" title="Restful 接口"></a>Restful 接口</h2><blockquote>
<p>Restful 是一种架构风格的规范和约束而并非标准，基于它设计的软件可以更简洁、更有层次、更容易实现缓存等机制，常用于客户端和服务器交互类的软件。</p>
</blockquote>
<ul>
<li>常用架构<ul>
<li><strong>RESTful 架构</strong>：面向资源的架构，即针对资源设计接口。客户端操作通过资源对应的 URL 进行操作，从而访问服务器端资源。</li>
<li><strong>SOA 架构</strong>：面向服务的体系结构。SOA 将不同的功能组件视为一种服务并分别封装，降低了组件之间的耦合程度，增加了代码的复用程度。</li>
</ul>
</li>
<li>主要特点<ul>
<li><strong>资源</strong>；资源的标识，比如 html、jpg、json。</li>
<li><strong>URI</strong>：统一资源定位符，即每个 URI 对应一个具体的特定资源。</li>
<li><strong>无状态</strong>：所有资源都可以通过 URI 去定位，而不与其他资源产生耦合。</li>
<li><strong>统一接口</strong>：数据元操作 CURD 分别对应 http 的 get、post、put、delete。</li>
</ul>
</li>
<li>URI<ul>
<li>URL：是统一资源标识符而对应具体的资源地址，是属于 URI 的一部分。</li>
<li>版本：API 的版本号应该放入到 URI，比如 &#x2F;api.example.com&#x2F;v1&#x2F;zoos。</li>
<li><strong>规范</strong>：不用大写、用中杠不用下杠、参数列表要 encode、资源集合时使用复数形式如 zoos&#x2F;1&#x2F;animals、网址中一般只能有名词并对应数据库的表格名。</li>
<li><strong>通信</strong>：前后端统一使用 json 数据、客户端通过 url <code>？&amp; ,</code> 实现过滤、搜索等复杂操作、客户端 http 方法 (get&#x2F;post&#x2F;put&#x2F;delete) 对应服务器端数据元操作 (select&#x2F;create&#x2F;update&#x2F;delete)。</li>
</ul>
</li>
</ul>
<h2 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h2><ul>
<li>框架和库<ul>
<li><strong>类库</strong>：一个有组织的功能集合，用于提供特定功能的接口并被调用。</li>
<li><strong>框架</strong>：构建应用程序的整体架构，使开发者可以专注于逻辑处理而提高开发效率。。</li>
<li>联系：框架一般会集成大量库并在合适地方调用，有时称为库，区别在于思考角度。常用库 Echarts&#x2F;ElementUI、常用框架 Vue&#x2F;React&#x2F;AngularJS。</li>
</ul>
</li>
<li>框架发展<ul>
<li>*<em>完整应用程序的 MV</em> 框架 (Angular)**：Node&#x2F;Npm 尝试编译 JS 代码，AMD&#x2F;CommonJS 定义 JS 模块，Gulp&#x2F;Grunt 等构建工具将模块组合成一个应用，路由和模板等语法则降低了开发难度并提高了和用户体验。</li>
<li><strong>基于组件的 Vue、React</strong>：基于组件的应用程序消除了很多抽象概念并简化了代码的生命周期，一切都与组件而不是应用程序的生命周期联系在一起，这意味着框架可以专注于解决渲染问题，路由、通信和状态管理则交给开发人员自己配置。这个时代 JS 生态系统的发展主要有 SPA 单页面、SSR 渲染优化、Babel 转译器、ES 模块化、API 标准化，但是也存在状态管理、响应性、SPA 性能等问题。</li>
<li><strong>融合前后端的全栈式框架</strong>：Next.js (React)、Nuxt.js (Vue)、Remix (React)、SvelteKit (Svelte)、Gatsby (React)、Astro (Any)，这些元框架随着视图层的成熟而开始标准化路由器、构建系统等。随着服务器端和客户端的 JS 标准越来越接近，前后端代码也可能实现同构而解决渲染性能、请求代理等问题。</li>
</ul>
</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2>  <div align="center"> 
    <img src="/images/mobile/optimization.png" alt="移动端优化" width="100%">
  </div>


<h1 id="六、网站安全规范"><a href="#六、网站安全规范" class="headerlink" title="六、网站安全规范"></a>六、网站安全规范</h1><ul>
<li>该用验证码的时候一定要添上。</li>
<li>谨慎用户输入信息，进行输入检查（客户端和服务端同时检查）。</li>
<li>在变量输出到 HTML 页面时，都应该进行编码或转义来预防XSS攻击。</li>
<li>尽量在重要请求上添加 Token 参数，注意 Token 要用足够安全的随机数生成算法。</li>
</ul>
<h2 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS 跨站脚本攻击"></a>XSS 跨站脚本攻击</h2><blockquote>
<p>指黑客通过 “HTML 注入” 篡改了网页，插入了恶意的脚本（主要是 JS 脚本），从而在用户浏览网页时控制用户浏览器的一种攻击。常见的有 挂马、盗取用户 Cookie、钓鱼攻击、删除目标文章或恶意篡改数据、劫持用户 Web 行为甚至渗透内网、爆发 Web2.0 蠕虫、蠕虫式挂马攻击(刷广告&#x2F;刷浏量&#x2F;破坏网上数据)。</p>
</blockquote>
<ul>
<li><strong>常见类型</strong><ul>
<li><strong>反射型 XSS</strong>：即 HTML 注入、非持久型 XSS。把用户输入的数据反射给浏览器，即黑客往往需要诱使用户点击一个恶意链接后将用户输入的隐私数据拼接出 html 并执行恶意 js 脚本，这个过程像是<strong>一次反射</strong>。</li>
<li><strong>存储型 XSS</strong>：持久型 XSS，它会将用户输入的数据存储在攻击方的服务器，具有很强的<strong>稳定性</strong>，比如黑客写了一篇包含恶意 JS 脚本的博客文章并保存到服务端。</li>
<li><strong>DOM based XSS</strong>：效果同反射型 XSS，但是它是通过修改页面的<strong>DOM 节点</strong>形成的。比如通过修改 DOM 绑定方法来获取用户信息。</li>
</ul>
</li>
<li><strong>检测 XSS</strong><ul>
<li><strong>检测方式</strong>：用户可以在有关键字输入搜索的地方输入********后点击搜索，若弹框出现展示123，说明存在XSS漏洞，这说明前端并没有对用户输入的内容过滤处理。</li>
</ul>
</li>
<li><strong>XSS 攻击方式</strong><ul>
<li><strong>Cookie 劫持</strong>：通过伪装一些图片和按钮等诱使用户对其操作，使网页执行了攻击者的恶意脚本，使攻击者能够获取当前用户的Cookie信息。</li>
<li><strong>构造 GET&#x2F;POST 请求</strong>：若攻击者想删除某网站的一篇文章，首先获取文章 id，然后通过脚本插入图片发送一个 GET&#x2F;POST 请求。</li>
<li><strong>XSS 钓鱼</strong>：在对方不知情的情况下诱骗用户并得到对方的姓名、年龄、邮箱账号、甚至是银行卡密码等私人信息。比如某用户在已被攻击的某网站上操作黑客伪造的一个登录框输入个人信息，用户信息就会被上传到黑客的服务器上。</li>
<li><strong>获取用户真实 IP</strong>：通过第三方软件获取，比如客户端安装了 Java 环境 (JRE)，则可通过调用<code>Java Applet</code>的接口获取客户端本地的 IP 地址。</li>
</ul>
</li>
<li><strong>XSS 防御方式</strong><ul>
<li><strong>HttpOnly</strong>：浏览器禁止页面 JS 访问带有 HttpOnly 属性的 cookie，可解决 cookie 劫持问题。<code>response.setHeader(&quot;Set-Cookie&quot;,&quot;cookiename=value; Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly&quot;)</code>。</li>
<li><strong>输入检查</strong>：检查是否包含 JavaScript、script 等敏感字符并将特殊字符转义处理，让一些基于特殊字符的攻击失效。现在的普遍做法是前后端都做输入检查，因为客户端的检查很容易被攻击者绕过。</li>
<li><strong>输出检查</strong>：在变量输出到 HTML 页面时，除了富文本外都使用编码或转义的方式。</li>
<li><strong>更严格的做法</strong>：除了数字和字母外的所有字符，都使用十六进制的方式进行编码。</li>
</ul>
</li>
</ul>
<h2 id="CSRF-跨站点请求伪造"><a href="#CSRF-跨站点请求伪造" class="headerlink" title="CSRF 跨站点请求伪造"></a>CSRF 跨站点请求伪造</h2><blockquote>
<p>指利用用户身份操作用户账户的一种攻击方式，即攻击者诱使用户访问一个第三方有害页面执行操作并获取用户信息，然后攻击者使用这个伪造的真实身份到某网站执行恶意操作。但是攻击者只有预测到 URL 的所有参数和参数值，才能成功地伪造一个请求 (他可以在安全站点里以自己的身份实际操作一下拿到参数)，反之则无法攻击成功。</p>
</blockquote>
<ul>
<li><strong>攻击方式</strong><ul>
<li><strong>浏览器 Cookie</strong>：Session Cookie (关闭失效)、Third-party Cookie (过期失效)。</li>
<li><strong>P3P Header 副作用</strong>：P3P Header 是 W3C 制定的隐私偏好平台，如果网站返回给浏览器的 HTTP 头包含，则表示允许浏览器发送第三方 Cookie，主要应用在广告等需要跨域访问的页面。</li>
<li><strong>GET&#x2F;POST 请求</strong>：通过 img&#x2F;iframe&#x2F;script 等带有 src 的标签发送 GET 请求，通过一个用户不可见的 iframe 窗口构造一个 form 表单发送 POST 请求。</li>
</ul>
</li>
<li><strong>防御方式</strong><ul>
<li><strong>验证码</strong>：CSRF 攻击过程中会在用户在不知情的情况下构造了网络请求，添加验证码后则强制用户必须与应用进行交互。缺点是网站不能给所有的操作都加上验证码。</li>
<li><strong>Referer Check</strong>：添加一个拦截器通过检查 HTTP 头中的 Referer 来判断请求来源是否合法。缺点是很多网站为了保护用户隐私而限制了 Referer 的发送、浏览器从 HTTPS 跳转到 HTTP 时出于安全考虑而不会发送 Referer。</li>
<li><strong>Anti CSRF Token</strong>：将参数加密或使用 Token 随机数，从而让攻击者无法猜测到参数值，也就无法构造请求的 URL 从而发起 CSRF 攻击。比如新增参数 Token <code>http://host/path/delete?username=abc&amp;item=123&amp;token=[random(seed)]</code>。优点是比检查 Referer 更安全并且不涉及用户隐私，缺点是 token 时需要所有请求都添加，加密时则使 URL 可读性变差、加密参数导致用户无法对页面进行搜索并给 DBA 工作带来困扰 (数据分析常需要用到参数的明文)。</li>
<li><strong>XSRF</strong>：当网站同时存在 XSS、CSRF 漏洞时，攻击者可以模拟客户端执行任意操作并在请求页面后读取页面内容的 Token 值，然后再构造出一个合法请求。</li>
</ul>
</li>
</ul>
<h2 id="ClickJacking-点击劫持"><a href="#ClickJacking-点击劫持" class="headerlink" title="ClickJacking 点击劫持"></a>ClickJacking 点击劫持</h2><blockquote>
<p>一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的 iframe 覆盖在一个网页上，然后诱使不知情的用户在网页上进行点击。比如在访问某网页时点击空白区域，浏览器却意外打开了新葡京赌场的页面。防御方式如下：</p>
</blockquote>
<ul>
<li><strong>_X-Frame-Options HTTP 响应头</strong>：用来给浏览器指示一个页面能否在 frame&#x2F;iframe&#x2F;object 标签中展现的标记。它有三个可选的值：DENY (拒绝加载)、SAMEORIGIN (允许加载同源页面)、ALLOW-FROM (允许加载指定来源的页面)。</li>
<li><strong>禁止iframe的嵌套</strong>：<code>if(window.top.location !== window.loaction)&#123;window.top.location === window.self.location&#125;</code>。</li>
</ul>
<h2 id="其他安全问题"><a href="#其他安全问题" class="headerlink" title="其他安全问题"></a>其他安全问题</h2><ul>
<li><strong>跨域问题处理</strong>：当服务端设置 ‘Access-Control-Allow-Origin’ 时使用了通配符 “*”，允许来自任意域的跨域请求，这是极其危险的。</li>
<li><strong>postMessage 跨窗口传递信息</strong>：postMessage 允许每一个 window（包括当前窗口、弹出窗口、iframes等）对象往其它窗口发送文本消息，从而实现跨窗口的消息传递并且不受同源策略限制。必要时在接受窗口对接口的信息进行安全检查 (验证 Domain、URL)，以防止来自非法页面的消息，实际上是实现一次同源策略的验证过程。</li>
<li><strong>Web Storage</strong>：分为 Session Storage、Local Storage。虽然受同源策略的约束，但当存有敏感信息时也可能会成为攻击目标。</li>
</ul>
]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github 搭建个人博客</title>
    <url>/2019/02/09/1-hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="一、博客搭建"><a href="#一、博客搭建" class="headerlink" title="一、博客搭建"></a>一、博客搭建</h1><h2 id="安装-Node-js-和-Git"><a href="#安装-Node-js-和-Git" class="headerlink" title="安装 Node.js 和 Git"></a>安装 Node.js 和 Git</h2><blockquote>
<p>Git安装后可以创建 <code>ssh key</code> 并添加到 GitHub上, 这样配置之后就不再需要每次更新博客时都输入用户名和密码了</p>
</blockquote>
<h2 id="安装hexo博客框架"><a href="#安装hexo博客框架" class="headerlink" title="安装hexo博客框架"></a>安装hexo博客框架</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli    <span class="comment">// window安装</span></span><br><span class="line">sudo cnpm install -g hexo   <span class="comment">// mac安装</span></span><br><span class="line"></span><br><span class="line">cd blog            <span class="comment">//在新建的blog文件夹打开终端</span></span><br><span class="line">hexo init          <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">hexo install       <span class="comment">// window安装依赖</span></span><br><span class="line">sudo npm install   <span class="comment">// mac安装依赖</span></span><br></pre></td></tr></table></figure>


<h2 id="测试本地运行（线下访问）"><a href="#测试本地运行（线下访问）" class="headerlink" title="测试本地运行（线下访问）"></a>测试本地运行（线下访问）</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo g     <span class="comment">// 生成静态文件, 即 hexo generate</span></span><br><span class="line"></span><br><span class="line">hexo s     <span class="comment">// 启动本地服务器, 即 hexo server</span></span><br></pre></td></tr></table></figure>

<h2 id="部署到云服务器（线上访问）"><a href="#部署到云服务器（线上访问）" class="headerlink" title="部署到云服务器（线上访问）"></a>部署到云服务器（线上访问）</h2><blockquote>
<p>Github 是外国网站且禁止百度爬虫访问，所以会导致百度搜不到你的网站。可以做两手准备：国内采用Coding托管，国外采用GitHub托管，建议两者的用户名和密码保持一致  </p>
</blockquote>
<h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ol>
<li>新建项目<br> GitHub：<code>username.github.io</code><br> Coding：<a href="https://coding.net/">https://coding.net/</a></li>
<li>配置 SSH<br>* 检查：<code>cd ~/.ssh</code><br>* 生成：<code>ssh-keygen -t rsa -C &quot;17621538916@163.com&quot;</code><br>* 输入密码并回车<br>* 查看公钥：<code>cat ~/.ssh/id_rsa.pub</code> </li>
<li>添加公钥</li>
<li>基础配置<br>* 用户名：<code>git config --global user.name &quot;chuanggefighting&quot;</code><br>* 邮箱：<code>git config --global user.email &quot;17621538916@163.com&quot;</code> </li>
<li>测试连接：<code>ssh -T git@github.com、ssh -T git@git.coding.net</code></li>
<li>开启 Pages 服务</li>
</ol>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><blockquote>
<p>码云是国内的，访问速度较快，但是每次更新版本后需要手动部署</p>
</blockquote>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/chuanggefighting/chuanggefighting.github.io.git</span></span><br><span class="line">    <span class="comment"># coding: https://git.coding.net/chuanggefighting/chuanggefighting.coding.me.git     # Coding</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://gitee.com/chuangges/chuangges.git</span>     <span class="comment"># 码云</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>


<h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save  <span class="comment">// 安装git部署插件</span></span><br><span class="line"></span><br><span class="line">hexo clean              <span class="comment">// 清除缓存</span></span><br><span class="line">hexo n post             <span class="comment">// 新建文章，即 hexo new post </span></span><br><span class="line">hexo g                  <span class="comment">// 编译博文生成静态文件, 即 hexo generate</span></span><br><span class="line">hexo d                  <span class="comment">// 部署到github, 即 hexo deploy</span></span><br><span class="line">hexo hexo g -d          <span class="comment">// 简化命令, 部署前生成静态文件</span></span><br></pre></td></tr></table></figure>



<h2 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h2><ol>
<li><p><strong>增加关于页</strong><br>1. 取消 about 前面的 #<br>2. hexo new page about<br>3. blog&#x2F;sources&#x2F;about&#x2F;index.md：自定义内容</p>
</li>
<li><p><strong>增加标签页</strong><br>1. 首先取消 next&#x2F;config.yml 文件中 tags 前面的 #<br>2. hexo new page tags<br>3. blog&#x2F;sources&#x2F;about&#x2F;index.md：<code>type: tags</code><br><br/></p>
</li>
<li><p><strong>增加分类页</strong><br>1. 取消 categories 前面的 #<br>2. hexo new page “categories”<br>3. blog&#x2F;sources&#x2F;categories&#x2F;index.md：<code>type: categories</code><br><br/></p>
</li>
<li><p><strong>增加归档页</strong><br>1. 取消 categories 前面的 #<br>2. hexo new page “archive”<br>3. blog&#x2F;sources&#x2F;archive&#x2F;index.md：<code>type: archive</code></p>
</li>
</ol>
<h1 id="二、博客管理"><a href="#二、博客管理" class="headerlink" title="二、博客管理"></a>二、博客管理</h1><ol>
<li><strong>NexT主题配置文件</strong>   <div style="text-indent: 2em; margin-bottom: 25px">NexT主题由于频繁更新，为了避免升级报错可以另存为一份配置，然后操作这个配置文件即可。首先在 blog/source 目录下新建_data文件夹，然后去复制 blog/themes/next/_config.yml 到本地并改名为 next.yml，最后将 next.yml 放置在 _data 中即可，以后编辑next.yml即可配置主题。</div></li>
<li><strong>hexo博客源文件</strong>    <div style="text-indent: 2em; margin-bottom: 25px">hexo d 是把本地博客源文件生成的静态网页文件同步到github上而实现部署, 但是博客网站的本地源文件仍需要保存到个人电脑，为了方便在不同电脑上可以编辑管理，可以在github上另建分支，如 hexo分支 </div></li>
</ol>
<h1 id="三、博客个性化配置"><a href="#三、博客个性化配置" class="headerlink" title="三、博客个性化配置"></a>三、博客个性化配置</h1><ol>
<li><strong>Hexo配置</strong> (blog&#x2F;_config.yml)<br>* Site 站点配置(网站标题、作者、语言等)<br>* URL 网址配置(网址、根目录、链接格式等)<br>* Extensions 扩展配置(主题、插件等)<br>* 其他配置选项一般不需要修改</li>
<li><strong>主题配置</strong> (具体在博客优化部分)<br>* 安装主题：通过 git clone 下载到 blog&#x2F;themes<br>* 启动主题：修改 blog&#x2F;_config.yml 的theme选项<br>* 配置主题：修改 blog&#x2F;themes&#x2F;主题名&#x2F;_config.yml</li>
<li><strong>自定义域名配置</strong><br>* 购买域名<br>* 域名解析<br>* 添加CNAME</li>
</ol>
<h1 id="四、NexT主题优化"><a href="#四、NexT主题优化" class="headerlink" title="四、NexT主题优化"></a>四、NexT主题优化</h1><ol>
<li><strong>实用性优化</strong><br>* 添加RSS：hexo-generator-feed<br>* 添加标签、分类等页面<br>* 设置网站icon<br>* 添加侧边栏链接<br>* 增加版权信息<br>* 微信支付宝打赏功能<br>* 底部显示建站时间和图标的修改<br>* 外部链接优化：hexo-autonofollow<br>* 关闭网站动画：use_motion<br>* 设置第三方JS库：vendors<br>* 添加评论系统：leancloud<br>* 统计站点访客和阅读量：busuanzi<br>* 统计文章字数和阅读时间：symblos_count_time<br>* 添加文章分享功能：needmoreshare2<br>* 添加文章加密功能：hexo-blog-encrypt<br>* 添加图片的懒加载：hexo-lazyload-image<br>* 添加站内搜索功能：hexo-generator-searchdb<br>* 添加文章置顶功能：hexo-generator-index-pin-top<br>* 添加站点地图配置：hexo-generator-sitemap、hexo-generator-baidu-sitemap<br>* DaoVoice 在线联系</li>
<li><strong>博客个性化优化</strong><br>* 添加页面加载动画：pace<br>* 添加背景动画：canvas_nest<br>* 添加宠物：hexo-helper-live2d<br>* 添加顶部阅读进度：reading_progress<br>* 点击出现桃心效果：clicklove.js<br>* 添加代码块复制按钮：clickboard.js<br>* 文章末尾统一添加 “文本结束” 标记<br>* 修改文章底部标签样式<br>* 右上角的 Github 样式<br>* 修改作者头像并旋转<br>* 文章添加阴影效果</li>
</ol>
<h1 id="五、基于-Markdown-编写博文"><a href="#五、基于-Markdown-编写博文" class="headerlink" title="五、基于 Markdown 编写博文"></a>五、基于 Markdown 编写博文</h1><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><ul>
<li>站点目录下执行命令 hexo new “title”</li>
<li>指定目录下直接创建 source&#x2F;_post&#x2F;title.md</li>
</ul>
<h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><div style="text-indent: 2em">使用命令创建文章时，Hexo 会根据文章的模板文件 /scaffolds/post.md 对新建文件进行初始化，可以根据需要自行修改。初始化后的文章头部除了可以设置文章标题、发布日期等基础信息外，还可以对文章添加标签、分类等，常用设置如下：</div> 

  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">my</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-02-04 20:45:30</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">Hexo</span>, <span class="string">MarkDown</span>] </span><br><span class="line"><span class="attr">categories:</span> <span class="string">学习笔记</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">加密</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览文章摘要</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Markdown语法的格式和注意点</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览加密文章摘要</span></span><br><span class="line"><span class="attr">password:</span>        <span class="comment"># 文章密码</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read</span>      <span class="comment"># 文章摘要</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">My</span> <span class="string">Birthday</span>      <span class="comment"># 密码提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览文章内容</span></span><br><span class="line"><span class="comment"># 在要显示的内容末尾添加more分隔符 &lt;!-- more --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>


<h2 id="编写文章（基于Markdown）"><a href="#编写文章（基于Markdown）" class="headerlink" title="编写文章（基于Markdown）"></a>编写文章（基于Markdown）</h2><h3 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h3> <div style="text-indent: 2em">Markdown是一种可以使用普通文本编辑器编写的轻量级标记语言，通过简单的标记语法使普通文本内容具有一定的格式，是一种适用于网络的书写语言，主要特点是易读易写、支持嵌入html标签和自动生成目录等。但是Hexo下使用的 Github风格的MarkDown（GFM）和 标准MarkDown（MD）在语法上稍有不同，以下主要介绍GFM语法。</div> 

<h3 id="MD-与-GFM-的区别"><a href="#MD-与-GFM-的区别" class="headerlink" title="MD 与 GFM 的区别"></a>MD 与 GFM 的区别</h3><ul>
<li>斜体：MD 使用 _ 或 *，GFM 只支持 *</li>
<li>自动链接：MD 使用 <URL>，GFM 可直接使用 URL</li>
<li>代码块：MD 使用 4个空格开头，GFM 还可以使用 ``` 格式</li>
<li>其他：GFM 可以指定语言高亮，而且增加了 删除线、表格、锚点等</li>
</ul>
<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><ul>
<li>标题：根据 # 的数量显示几级标题（1～6）</li>
<li>引用：根据 &gt; 的数量显示几级引用文本</li>
<li>转义：使用 \ 显示文本中的一些字符</li>
<li>强调：使用 * 或 _ 显示 斜体、粗体、粗斜体（1～3），~~ 显示删除</li>
<li>链接：行内式 [名字](地址 “描述”)，参考式 [名字][网址变量]</li>
<li>列表：无序列表使用 -、+ 或 *，有序列表则使用数字加 .</li>
<li>代码：行内代码使用 `，代码块则使用 4个空格 或 ```</li>
<li>表格：- 和 | 分割行和列，: 控制对其方式</li>
<li>图片：链接方法前面加 !</li>
</ul>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">*斜体文本*  _斜体文本_  **粗体文本**  **粗体文本**  ***粗斜体文本***  **_粗斜体文本**_</span><br><span class="line">~~删除一段文本~~</span><br><span class="line"></span><br><span class="line">&gt; 动物</span><br><span class="line">&gt;&gt; 水生动物</span><br><span class="line"></span><br><span class="line">[my blog](https:<span class="regexp">//</span>chuanggefighting.github.io/)   </span><br><span class="line">[Google][<span class="number">1</span>] and [Baidu][<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]: http:<span class="regexp">//g</span>oogle.com/   <span class="string">&quot;Google&quot;</span> </span><br><span class="line">[<span class="number">2</span>]: http:<span class="regexp">//</span>baidu.com/    <span class="string">&quot;Baidu&quot;</span></span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">print <span class="string">&#x27;Hello World!</span></span><br></pre></td></tr></table></figure>
<p>  <em>斜体文本</em>  <em>斜体文本</em>  <strong>粗体文本</strong>  <strong>粗体文本</strong>  <em><strong>粗斜体文本</strong></em>  <strong>_粗斜体文本</strong>_<br>  <del>删除一段文本</del></p>
<blockquote>
<p>动物</p>
<blockquote>
<p>水生动物</p>
</blockquote>
</blockquote>
<p>  <a href="https://chuanggefighting.github.io/">my blog</a><br>  <a href="http://google.com/" title="Google">Google</a> &amp;#160;and&amp;#160; <a href="http://baidu.com/" title="Baidu">Baidu</a></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Hello World!</span></span><br></pre></td></tr></table></figure>


<h3 id="次常用语法"><a href="#次常用语法" class="headerlink" title="次常用语法"></a>次常用语法</h3><ul>
<li>分段：两个空格</li>
<li>分隔线：在一行中使用三个以上的 *、-、_</li>
<li>换行：两个空格 + 回车 （引用中换行省略回车）</li>
<li>首行缩进：使用转义字符代替空格，或者使用html标签</li>
<li>脚注：使用 [^name] 定义，用来解释专业词汇等</li>
</ul>
<h3 id="内嵌-Html-标签"><a href="#内嵌-Html-标签" class="headerlink" title="内嵌 Html 标签"></a>内嵌 Html 标签</h3>  <div style="text-indent: 2em">Markdown本身不支持修改字体、字号与颜色等功能，但是可以通过内嵌Html标签使普通文本内容具有一定的格式，常用如下：</div> 

<ul>
<li><font face="微软雅黑" color="red" size="3">字体及字体颜色和大小</font></li>
<li>换行<br/></li>
<li><u>下划线文本</u></li>
<li><span align="left">文本对齐</span></li>
<li><span style="text-indent: 2em">首行缩进</span></li>
</ul>
]]></content>
      <categories>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>前端技术栈</tag>
      </tags>
  </entry>
</search>
